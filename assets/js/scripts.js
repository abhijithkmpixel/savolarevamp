/**
 * !
 * jQuery JavaScript Library v3.6.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright OpenJS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2022-08-26T17:52Z
 *
 * @format
 */

(function (global, factory) {
  "use strict";

  if (typeof module === "object" && typeof module.exports === "object") {
    // For CommonJS and CommonJS-like environments where a proper `window`
    // is present, execute the factory and get jQuery.
    // For environments that do not have a `window` with a `document`
    // (such as Node.js), expose a factory as module.exports.
    // This accentuates the need for the creation of a real `window`.
    // e.g. var jQuery = require("jquery")(window);
    // See ticket trac-14549 for more info.
    module.exports = global.document
      ? factory(global, true)
      : function (w) {
          if (!w.document) {
            throw new Error("jQuery requires a window with a document");
          }
          return factory(w);
        };
  } else {
    factory(global);
  }

  // Pass this if window is not defined yet
})(typeof window !== "undefined" ? window : this, function (window, noGlobal) {
  // Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
  // throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
  // arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
  // enough that all such attempts are guarded in a try block.
  "use strict";

  var arr = [];

  var getProto = Object.getPrototypeOf;

  var slice = arr.slice;

  var flat = arr.flat
    ? function (array) {
        return arr.flat.call(array);
      }
    : function (array) {
        return arr.concat.apply([], array);
      };

  var push = arr.push;

  var indexOf = arr.indexOf;

  var class2type = {};

  var toString = class2type.toString;

  var hasOwn = class2type.hasOwnProperty;

  var fnToString = hasOwn.toString;

  var ObjectFunctionString = fnToString.call(Object);

  var support = {};

  var isFunction = function isFunction(obj) {
    // Support: Chrome <=57, Firefox <=52
    // In some browsers, typeof returns "function" for HTML <object> elements
    // (i.e., `typeof document.createElement( "object" ) === "function"`).
    // We don't want to classify *any* DOM node as a function.
    // Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5
    // Plus for old WebKit, typeof returns "function" for HTML collections
    // (e.g., `typeof document.getElementsByTagName("div") === "function"`). (gh-4756)
    return (
      typeof obj === "function" &&
      typeof obj.nodeType !== "number" &&
      typeof obj.item !== "function"
    );
  };

  var isWindow = function isWindow(obj) {
    return obj != null && obj === obj.window;
  };

  var document = window.document;

  var preservedScriptAttributes = {
    type: true,
    src: true,
    nonce: true,
    noModule: true,
  };

  function DOMEval(code, node, doc) {
    doc = doc || document;

    var i,
      val,
      script = doc.createElement("script");

    script.text = code;
    if (node) {
      for (i in preservedScriptAttributes) {
        // Support: Firefox 64+, Edge 18+
        // Some browsers don't support the "nonce" property on scripts.
        // On the other hand, just using `getAttribute` is not enough as
        // the `nonce` attribute is reset to an empty string whenever it
        // becomes browsing-context connected.
        // See https://github.com/whatwg/html/issues/2369
        // See https://html.spec.whatwg.org/#nonce-attributes
        // The `node.getAttribute` check was added for the sake of
        // `jQuery.globalEval` so that it can fake a nonce-containing node
        // via an object.
        val = node[i] || (node.getAttribute && node.getAttribute(i));
        if (val) {
          script.setAttribute(i, val);
        }
      }
    }
    doc.head.appendChild(script).parentNode.removeChild(script);
  }

  function toType(obj) {
    if (obj == null) {
      return obj + "";
    }

    // Support: Android <=2.3 only (functionish RegExp)
    return typeof obj === "object" || typeof obj === "function"
      ? class2type[toString.call(obj)] || "object"
      : typeof obj;
  }
  /* global Symbol */
  // Defining this global in .eslintrc.json would create a danger of using the global
  // unguarded in another place, it seems safer to define global only for this module

  var version = "3.6.1",
    // Define a local copy of jQuery
    jQuery = function (selector, context) {
      // The jQuery object is actually just the init constructor 'enhanced'
      // Need init if jQuery is called (just allow error to be thrown if not included)
      return new jQuery.fn.init(selector, context);
    };

  jQuery.fn = jQuery.prototype = {
    // The current version of jQuery being used
    jquery: version,

    constructor: jQuery,

    // The default length of a jQuery object is 0
    length: 0,

    toArray: function () {
      return slice.call(this);
    },

    // Get the Nth element in the matched element set OR
    // Get the whole matched element set as a clean array
    get: function (num) {
      // Return all the elements in a clean array
      if (num == null) {
        return slice.call(this);
      }

      // Return just the one element from the set
      return num < 0 ? this[num + this.length] : this[num];
    },

    // Take an array of elements and push it onto the stack
    // (returning the new matched element set)
    pushStack: function (elems) {
      // Build a new jQuery matched element set
      var ret = jQuery.merge(this.constructor(), elems);

      // Add the old object onto the stack (as a reference)
      ret.prevObject = this;

      // Return the newly-formed element set
      return ret;
    },

    // Execute a callback for every element in the matched set.
    each: function (callback) {
      return jQuery.each(this, callback);
    },

    map: function (callback) {
      return this.pushStack(
        jQuery.map(this, function (elem, i) {
          return callback.call(elem, i, elem);
        })
      );
    },

    slice: function () {
      return this.pushStack(slice.apply(this, arguments));
    },

    first: function () {
      return this.eq(0);
    },

    last: function () {
      return this.eq(-1);
    },

    even: function () {
      return this.pushStack(
        jQuery.grep(this, function (_elem, i) {
          return (i + 1) % 2;
        })
      );
    },

    odd: function () {
      return this.pushStack(
        jQuery.grep(this, function (_elem, i) {
          return i % 2;
        })
      );
    },

    eq: function (i) {
      var len = this.length,
        j = +i + (i < 0 ? len : 0);
      return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
    },

    end: function () {
      return this.prevObject || this.constructor();
    },

    // For internal use only.
    // Behaves like an Array's method, not like a jQuery method.
    push: push,
    sort: arr.sort,
    splice: arr.splice,
  };

  jQuery.extend = jQuery.fn.extend = function () {
    var options,
      name,
      src,
      copy,
      copyIsArray,
      clone,
      target = arguments[0] || {},
      i = 1,
      length = arguments.length,
      deep = false;

    // Handle a deep copy situation
    if (typeof target === "boolean") {
      deep = target;

      // Skip the boolean and the target
      target = arguments[i] || {};
      i++;
    }

    // Handle case when target is a string or something (possible in deep copy)
    if (typeof target !== "object" && !isFunction(target)) {
      target = {};
    }

    // Extend jQuery itself if only one argument is passed
    if (i === length) {
      target = this;
      i--;
    }

    for (; i < length; i++) {
      // Only deal with non-null/undefined values
      if ((options = arguments[i]) != null) {
        // Extend the base object
        for (name in options) {
          copy = options[name];

          // Prevent Object.prototype pollution
          // Prevent never-ending loop
          if (name === "__proto__" || target === copy) {
            continue;
          }

          // Recurse if we're merging plain objects or arrays
          if (
            deep &&
            copy &&
            (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))
          ) {
            src = target[name];

            // Ensure proper type for the source value
            if (copyIsArray && !Array.isArray(src)) {
              clone = [];
            } else if (!copyIsArray && !jQuery.isPlainObject(src)) {
              clone = {};
            } else {
              clone = src;
            }
            copyIsArray = false;

            // Never move original objects, clone them
            target[name] = jQuery.extend(deep, clone, copy);

            // Don't bring in undefined values
          } else if (copy !== undefined) {
            target[name] = copy;
          }
        }
      }
    }

    // Return the modified object
    return target;
  };

  jQuery.extend({
    // Unique for each copy of jQuery on the page
    expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),

    // Assume jQuery is ready without the ready module
    isReady: true,

    error: function (msg) {
      throw new Error(msg);
    },

    noop: function () {},

    isPlainObject: function (obj) {
      var proto, Ctor;

      // Detect obvious negatives
      // Use toString instead of jQuery.type to catch host objects
      if (!obj || toString.call(obj) !== "[object Object]") {
        return false;
      }

      proto = getProto(obj);

      // Objects with no prototype (e.g., `Object.create( null )`) are plain
      if (!proto) {
        return true;
      }

      // Objects with prototype are plain iff they were constructed by a global Object function
      Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
      return (
        typeof Ctor === "function" &&
        fnToString.call(Ctor) === ObjectFunctionString
      );
    },

    isEmptyObject: function (obj) {
      var name;

      for (name in obj) {
        return false;
      }
      return true;
    },

    // Evaluates a script in a provided context; falls back to the global one
    // if not specified.
    globalEval: function (code, options, doc) {
      DOMEval(code, { nonce: options && options.nonce }, doc);
    },

    each: function (obj, callback) {
      var length,
        i = 0;

      if (isArrayLike(obj)) {
        length = obj.length;
        for (; i < length; i++) {
          if (callback.call(obj[i], i, obj[i]) === false) {
            break;
          }
        }
      } else {
        for (i in obj) {
          if (callback.call(obj[i], i, obj[i]) === false) {
            break;
          }
        }
      }

      return obj;
    },

    // results is for internal usage only
    makeArray: function (arr, results) {
      var ret = results || [];

      if (arr != null) {
        if (isArrayLike(Object(arr))) {
          jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);
        } else {
          push.call(ret, arr);
        }
      }

      return ret;
    },

    inArray: function (elem, arr, i) {
      return arr == null ? -1 : indexOf.call(arr, elem, i);
    },

    // Support: Android <=4.0 only, PhantomJS 1 only
    // push.apply(_, arraylike) throws on ancient WebKit
    merge: function (first, second) {
      var len = +second.length,
        j = 0,
        i = first.length;

      for (; j < len; j++) {
        first[i++] = second[j];
      }

      first.length = i;

      return first;
    },

    grep: function (elems, callback, invert) {
      var callbackInverse,
        matches = [],
        i = 0,
        length = elems.length,
        callbackExpect = !invert;

      // Go through the array, only saving the items
      // that pass the validator function
      for (; i < length; i++) {
        callbackInverse = !callback(elems[i], i);
        if (callbackInverse !== callbackExpect) {
          matches.push(elems[i]);
        }
      }

      return matches;
    },

    // arg is for internal usage only
    map: function (elems, callback, arg) {
      var length,
        value,
        i = 0,
        ret = [];

      // Go through the array, translating each of the items to their new values
      if (isArrayLike(elems)) {
        length = elems.length;
        for (; i < length; i++) {
          value = callback(elems[i], i, arg);

          if (value != null) {
            ret.push(value);
          }
        }

        // Go through every key on the object,
      } else {
        for (i in elems) {
          value = callback(elems[i], i, arg);

          if (value != null) {
            ret.push(value);
          }
        }
      }

      // Flatten any nested arrays
      return flat(ret);
    },

    // A global GUID counter for objects
    guid: 1,

    // jQuery.support is not used in Core but other projects attach their
    // properties to it so it needs to exist.
    support: support,
  });

  if (typeof Symbol === "function") {
    jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
  }

  // Populate the class2type map
  jQuery.each(
    "Boolean Number String Function Array Date RegExp Object Error Symbol".split(
      " "
    ),
    function (_i, name) {
      class2type["[object " + name + "]"] = name.toLowerCase();
    }
  );

  function isArrayLike(obj) {
    // Support: real iOS 8.2 only (not reproducible in simulator)
    // `in` check used to prevent JIT error (gh-2145)
    // hasOwn isn't used here due to false negatives
    // regarding Nodelist length in IE
    var length = !!obj && "length" in obj && obj.length,
      type = toType(obj);

    if (isFunction(obj) || isWindow(obj)) {
      return false;
    }

    return (
      type === "array" ||
      length === 0 ||
      (typeof length === "number" && length > 0 && length - 1 in obj)
    );
  }
  var Sizzle =
    /*!
     * Sizzle CSS Selector Engine v2.3.6
     * https://sizzlejs.com/
     *
     * Copyright JS Foundation and other contributors
     * Released under the MIT license
     * https://js.foundation/
     *
     * Date: 2021-02-16
     */
    (function (window) {
      var i,
        support,
        Expr,
        getText,
        isXML,
        tokenize,
        compile,
        select,
        outermostContext,
        sortInput,
        hasDuplicate,
        // Local document vars
        setDocument,
        document,
        docElem,
        documentIsHTML,
        rbuggyQSA,
        rbuggyMatches,
        matches,
        contains,
        // Instance-specific data
        expando = "sizzle" + 1 * new Date(),
        preferredDoc = window.document,
        dirruns = 0,
        done = 0,
        classCache = createCache(),
        tokenCache = createCache(),
        compilerCache = createCache(),
        nonnativeSelectorCache = createCache(),
        sortOrder = function (a, b) {
          if (a === b) {
            hasDuplicate = true;
          }
          return 0;
        },
        // Instance methods
        hasOwn = {}.hasOwnProperty,
        arr = [],
        pop = arr.pop,
        pushNative = arr.push,
        push = arr.push,
        slice = arr.slice,
        // Use a stripped-down indexOf as it's faster than native
        // https://jsperf.com/thor-indexof-vs-for/5
        indexOf = function (list, elem) {
          var i = 0,
            len = list.length;
          for (; i < len; i++) {
            if (list[i] === elem) {
              return i;
            }
          }
          return -1;
        },
        booleans =
          "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|" +
          "ismap|loop|multiple|open|readonly|required|scoped",
        // Regular expressions

        // http://www.w3.org/TR/css3-selectors/#whitespace
        whitespace = "[\\x20\\t\\r\\n\\f]",
        // https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
        identifier =
          "(?:\\\\[\\da-fA-F]{1,6}" +
          whitespace +
          "?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",
        // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
        attributes =
          "\\[" +
          whitespace +
          "*(" +
          identifier +
          ")(?:" +
          whitespace +
          // Operator (capture 2)
          "*([*^$|!~]?=)" +
          whitespace +
          // "Attribute values must be CSS identifiers [capture 5]
          // or strings [capture 3 or capture 4]"
          "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" +
          identifier +
          "))|)" +
          whitespace +
          "*\\]",
        pseudos =
          ":(" +
          identifier +
          ")(?:\\((" +
          // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
          // 1. quoted (capture 3; capture 4 or capture 5)
          "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
          // 2. simple (capture 6)
          "((?:\\\\.|[^\\\\()[\\]]|" +
          attributes +
          ")*)|" +
          // 3. anything else (capture 2)
          ".*" +
          ")\\)|)",
        // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
        rwhitespace = new RegExp(whitespace + "+", "g"),
        rtrim = new RegExp(
          "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$",
          "g"
        ),
        rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
        rcombinators = new RegExp(
          "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"
        ),
        rdescend = new RegExp(whitespace + "|>"),
        rpseudo = new RegExp(pseudos),
        ridentifier = new RegExp("^" + identifier + "$"),
        matchExpr = {
          ID: new RegExp("^#(" + identifier + ")"),
          CLASS: new RegExp("^\\.(" + identifier + ")"),
          TAG: new RegExp("^(" + identifier + "|[*])"),
          ATTR: new RegExp("^" + attributes),
          PSEUDO: new RegExp("^" + pseudos),
          CHILD: new RegExp(
            "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" +
              whitespace +
              "*(even|odd|(([+-]|)(\\d*)n|)" +
              whitespace +
              "*(?:([+-]|)" +
              whitespace +
              "*(\\d+)|))" +
              whitespace +
              "*\\)|)",
            "i"
          ),
          bool: new RegExp("^(?:" + booleans + ")$", "i"),

          // For use in libraries implementing .is()
          // We use this for POS matching in `select`
          needsContext: new RegExp(
            "^" +
              whitespace +
              "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
              whitespace +
              "*((?:-\\d)?\\d*)" +
              whitespace +
              "*\\)|)(?=[^-]|$)",
            "i"
          ),
        },
        rhtml = /HTML$/i,
        rinputs = /^(?:input|select|textarea|button)$/i,
        rheader = /^h\d$/i,
        rnative = /^[^{]+\{\s*\[native \w/,
        // Easily-parseable/retrievable ID or TAG or CLASS selectors
        rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
        rsibling = /[+~]/,
        // CSS escapes
        // http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
        runescape = new RegExp(
          "\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])",
          "g"
        ),
        funescape = function (escape, nonHex) {
          var high = "0x" + escape.slice(1) - 0x10000;

          return nonHex
            ? // Strip the backslash prefix from a non-hex escape sequence
              nonHex
            : // Replace a hexadecimal escape sequence with the encoded Unicode code point
            // Support: IE <=11+
            // For values outside the Basic Multilingual Plane (BMP), manually construct a
            // surrogate pair
            high < 0
            ? String.fromCharCode(high + 0x10000)
            : String.fromCharCode(
                (high >> 10) | 0xd800,
                (high & 0x3ff) | 0xdc00
              );
        },
        // CSS string/identifier serialization
        // https://drafts.csswg.org/cssom/#common-serializing-idioms
        rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
        fcssescape = function (ch, asCodePoint) {
          if (asCodePoint) {
            // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
            if (ch === "\0") {
              return "\uFFFD";
            }

            // Control characters and (dependent upon position) numbers get escaped as code points
            return (
              ch.slice(0, -1) +
              "\\" +
              ch.charCodeAt(ch.length - 1).toString(16) +
              " "
            );
          }

          // Other potentially-special ASCII characters get backslash-escaped
          return "\\" + ch;
        },
        // Used for iframes
        // See setDocument()
        // Removing the function wrapper causes a "Permission Denied"
        // error in IE
        unloadHandler = function () {
          setDocument();
        },
        inDisabledFieldset = addCombinator(
          function (elem) {
            return (
              elem.disabled === true &&
              elem.nodeName.toLowerCase() === "fieldset"
            );
          },
          { dir: "parentNode", next: "legend" }
        );

      // Optimize for push.apply( _, NodeList )
      try {
        push.apply(
          (arr = slice.call(preferredDoc.childNodes)),
          preferredDoc.childNodes
        );

        // Support: Android<4.0
        // Detect silently failing push.apply
        // eslint-disable-next-line no-unused-expressions
        arr[preferredDoc.childNodes.length].nodeType;
      } catch (e) {
        push = {
          apply: arr.length
            ? // Leverage slice if possible
              function (target, els) {
                pushNative.apply(target, slice.call(els));
              }
            : // Support: IE<9
              // Otherwise append directly
              function (target, els) {
                var j = target.length,
                  i = 0;

                // Can't trust NodeList.length
                while ((target[j++] = els[i++])) {}
                target.length = j - 1;
              },
        };
      }

      function Sizzle(selector, context, results, seed) {
        var m,
          i,
          elem,
          nid,
          match,
          groups,
          newSelector,
          newContext = context && context.ownerDocument,
          // nodeType defaults to 9, since context defaults to document
          nodeType = context ? context.nodeType : 9;

        results = results || [];

        // Return early from calls with invalid selector or context
        if (
          typeof selector !== "string" ||
          !selector ||
          (nodeType !== 1 && nodeType !== 9 && nodeType !== 11)
        ) {
          return results;
        }

        // Try to shortcut find operations (as opposed to filters) in HTML documents
        if (!seed) {
          setDocument(context);
          context = context || document;

          if (documentIsHTML) {
            // If the selector is sufficiently simple, try using a "get*By*" DOM method
            // (excepting DocumentFragment context, where the methods don't exist)
            if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
              // ID selector
              if ((m = match[1])) {
                // Document context
                if (nodeType === 9) {
                  if ((elem = context.getElementById(m))) {
                    // Support: IE, Opera, Webkit
                    // TODO: identify versions
                    // getElementById can match elements by name instead of ID
                    if (elem.id === m) {
                      results.push(elem);
                      return results;
                    }
                  } else {
                    return results;
                  }

                  // Element context
                } else {
                  // Support: IE, Opera, Webkit
                  // TODO: identify versions
                  // getElementById can match elements by name instead of ID
                  if (
                    newContext &&
                    (elem = newContext.getElementById(m)) &&
                    contains(context, elem) &&
                    elem.id === m
                  ) {
                    results.push(elem);
                    return results;
                  }
                }

                // Type selector
              } else if (match[2]) {
                push.apply(results, context.getElementsByTagName(selector));
                return results;

                // Class selector
              } else if (
                (m = match[3]) &&
                support.getElementsByClassName &&
                context.getElementsByClassName
              ) {
                push.apply(results, context.getElementsByClassName(m));
                return results;
              }
            }

            // Take advantage of querySelectorAll
            if (
              support.qsa &&
              !nonnativeSelectorCache[selector + " "] &&
              (!rbuggyQSA || !rbuggyQSA.test(selector)) &&
              // Support: IE 8 only
              // Exclude object elements
              (nodeType !== 1 || context.nodeName.toLowerCase() !== "object")
            ) {
              newSelector = selector;
              newContext = context;

              // qSA considers elements outside a scoping root when evaluating child or
              // descendant combinators, which is not what we want.
              // In such cases, we work around the behavior by prefixing every selector in the
              // list with an ID selector referencing the scope context.
              // The technique has to be used as well when a leading combinator is used
              // as such selectors are not recognized by querySelectorAll.
              // Thanks to Andrew Dupont for this technique.
              if (
                nodeType === 1 &&
                (rdescend.test(selector) || rcombinators.test(selector))
              ) {
                // Expand context for sibling selectors
                newContext =
                  (rsibling.test(selector) &&
                    testContext(context.parentNode)) ||
                  context;

                // We can use :scope instead of the ID hack if the browser
                // supports it & if we're not changing the context.
                if (newContext !== context || !support.scope) {
                  // Capture the context ID, setting it first if necessary
                  if ((nid = context.getAttribute("id"))) {
                    nid = nid.replace(rcssescape, fcssescape);
                  } else {
                    context.setAttribute("id", (nid = expando));
                  }
                }

                // Prefix every selector in the list
                groups = tokenize(selector);
                i = groups.length;
                while (i--) {
                  groups[i] =
                    (nid ? "#" + nid : ":scope") + " " + toSelector(groups[i]);
                }
                newSelector = groups.join(",");
              }

              try {
                push.apply(results, newContext.querySelectorAll(newSelector));
                return results;
              } catch (qsaError) {
                nonnativeSelectorCache(selector, true);
              } finally {
                if (nid === expando) {
                  context.removeAttribute("id");
                }
              }
            }
          }
        }

        // All others
        return select(selector.replace(rtrim, "$1"), context, results, seed);
      }

      /**
       * Create key-value caches of limited size
       * @returns {function(string, object)} Returns the Object data after storing it on itself with
       *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
       *	deleting the oldest entry
       */
      function createCache() {
        var keys = [];

        function cache(key, value) {
          // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
          if (keys.push(key + " ") > Expr.cacheLength) {
            // Only keep the most recent entries
            delete cache[keys.shift()];
          }
          return (cache[key + " "] = value);
        }
        return cache;
      }

      /**
       * Mark a function for special use by Sizzle
       * @param {Function} fn The function to mark
       */
      function markFunction(fn) {
        fn[expando] = true;
        return fn;
      }

      /**
       * Support testing using an element
       * @param {Function} fn Passed the created element and returns a boolean result
       */
      function assert(fn) {
        var el = document.createElement("fieldset");

        try {
          return !!fn(el);
        } catch (e) {
          return false;
        } finally {
          // Remove from its parent by default
          if (el.parentNode) {
            el.parentNode.removeChild(el);
          }

          // release memory in IE
          el = null;
        }
      }

      /**
       * Adds the same handler for all of the specified attrs
       * @param {String} attrs Pipe-separated list of attributes
       * @param {Function} handler The method that will be applied
       */
      function addHandle(attrs, handler) {
        var arr = attrs.split("|"),
          i = arr.length;

        while (i--) {
          Expr.attrHandle[arr[i]] = handler;
        }
      }

      /**
       * Checks document order of two siblings
       * @param {Element} a
       * @param {Element} b
       * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
       */
      function siblingCheck(a, b) {
        var cur = b && a,
          diff =
            cur &&
            a.nodeType === 1 &&
            b.nodeType === 1 &&
            a.sourceIndex - b.sourceIndex;

        // Use IE sourceIndex if available on both nodes
        if (diff) {
          return diff;
        }

        // Check if b follows a
        if (cur) {
          while ((cur = cur.nextSibling)) {
            if (cur === b) {
              return -1;
            }
          }
        }

        return a ? 1 : -1;
      }

      /**
       * Returns a function to use in pseudos for input types
       * @param {String} type
       */
      function createInputPseudo(type) {
        return function (elem) {
          var name = elem.nodeName.toLowerCase();
          return name === "input" && elem.type === type;
        };
      }

      /**
       * Returns a function to use in pseudos for buttons
       * @param {String} type
       */
      function createButtonPseudo(type) {
        return function (elem) {
          var name = elem.nodeName.toLowerCase();
          return (name === "input" || name === "button") && elem.type === type;
        };
      }

      /**
       * Returns a function to use in pseudos for :enabled/:disabled
       * @param {Boolean} disabled true for :disabled; false for :enabled
       */
      function createDisabledPseudo(disabled) {
        // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
        return function (elem) {
          // Only certain elements can match :enabled or :disabled
          // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
          // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
          if ("form" in elem) {
            // Check for inherited disabledness on relevant non-disabled elements:
            // * listed form-associated elements in a disabled fieldset
            //   https://html.spec.whatwg.org/multipage/forms.html#category-listed
            //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
            // * option elements in a disabled optgroup
            //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
            // All such elements have a "form" property.
            if (elem.parentNode && elem.disabled === false) {
              // Option elements defer to a parent optgroup if present
              if ("label" in elem) {
                if ("label" in elem.parentNode) {
                  return elem.parentNode.disabled === disabled;
                } else {
                  return elem.disabled === disabled;
                }
              }

              // Support: IE 6 - 11
              // Use the isDisabled shortcut property to check for disabled fieldset ancestors
              return (
                elem.isDisabled === disabled ||
                // Where there is no isDisabled, check manually
                /* jshint -W018 */
                (elem.isDisabled !== !disabled &&
                  inDisabledFieldset(elem) === disabled)
              );
            }

            return elem.disabled === disabled;

            // Try to winnow out elements that can't be disabled before trusting the disabled property.
            // Some victims get caught in our net (label, legend, menu, track), but it shouldn't
            // even exist on them, let alone have a boolean value.
          } else if ("label" in elem) {
            return elem.disabled === disabled;
          }

          // Remaining elements are neither :enabled nor :disabled
          return false;
        };
      }

      /**
       * Returns a function to use in pseudos for positionals
       * @param {Function} fn
       */
      function createPositionalPseudo(fn) {
        return markFunction(function (argument) {
          argument = +argument;
          return markFunction(function (seed, matches) {
            var j,
              matchIndexes = fn([], seed.length, argument),
              i = matchIndexes.length;

            // Match elements found at the specified indexes
            while (i--) {
              if (seed[(j = matchIndexes[i])]) {
                seed[j] = !(matches[j] = seed[j]);
              }
            }
          });
        });
      }

      /**
       * Checks a node for validity as a Sizzle context
       * @param {Element|Object=} context
       * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
       */
      function testContext(context) {
        return (
          context &&
          typeof context.getElementsByTagName !== "undefined" &&
          context
        );
      }

      // Expose support vars for convenience
      support = Sizzle.support = {};

      /**
       * Detects XML nodes
       * @param {Element|Object} elem An element or a document
       * @returns {Boolean} True iff elem is a non-HTML XML node
       */
      isXML = Sizzle.isXML = function (elem) {
        var namespace = elem && elem.namespaceURI,
          docElem = elem && (elem.ownerDocument || elem).documentElement;

        // Support: IE <=8
        // Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
        // https://bugs.jquery.com/ticket/4833
        return !rhtml.test(
          namespace || (docElem && docElem.nodeName) || "HTML"
        );
      };

      /**
       * Sets document-related variables once based on the current document
       * @param {Element|Object} [doc] An element or document object to use to set the document
       * @returns {Object} Returns the current document
       */
      setDocument = Sizzle.setDocument = function (node) {
        var hasCompare,
          subWindow,
          doc = node ? node.ownerDocument || node : preferredDoc;

        // Return early if doc is invalid or already selected
        // Support: IE 11+, Edge 17 - 18+
        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
        // two documents; shallow comparisons work.
        // eslint-disable-next-line eqeqeq
        if (doc == document || doc.nodeType !== 9 || !doc.documentElement) {
          return document;
        }

        // Update global variables
        document = doc;
        docElem = document.documentElement;
        documentIsHTML = !isXML(document);

        // Support: IE 9 - 11+, Edge 12 - 18+
        // Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
        // Support: IE 11+, Edge 17 - 18+
        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
        // two documents; shallow comparisons work.
        // eslint-disable-next-line eqeqeq
        if (
          preferredDoc != document &&
          (subWindow = document.defaultView) &&
          subWindow.top !== subWindow
        ) {
          // Support: IE 11, Edge
          if (subWindow.addEventListener) {
            subWindow.addEventListener("unload", unloadHandler, false);

            // Support: IE 9 - 10 only
          } else if (subWindow.attachEvent) {
            subWindow.attachEvent("onunload", unloadHandler);
          }
        }

        // Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,
        // Safari 4 - 5 only, Opera <=11.6 - 12.x only
        // IE/Edge & older browsers don't support the :scope pseudo-class.
        // Support: Safari 6.0 only
        // Safari 6.0 supports :scope but it's an alias of :root there.
        support.scope = assert(function (el) {
          docElem.appendChild(el).appendChild(document.createElement("div"));
          return (
            typeof el.querySelectorAll !== "undefined" &&
            !el.querySelectorAll(":scope fieldset div").length
          );
        });

        /* Attributes
	---------------------------------------------------------------------- */

        // Support: IE<8
        // Verify that getAttribute really returns attributes and not properties
        // (excepting IE8 booleans)
        support.attributes = assert(function (el) {
          el.className = "i";
          return !el.getAttribute("className");
        });

        /* getElement(s)By*
	---------------------------------------------------------------------- */

        // Check if getElementsByTagName("*") returns only elements
        support.getElementsByTagName = assert(function (el) {
          el.appendChild(document.createComment(""));
          return !el.getElementsByTagName("*").length;
        });

        // Support: IE<9
        support.getElementsByClassName = rnative.test(
          document.getElementsByClassName
        );

        // Support: IE<10
        // Check if getElementById returns elements by name
        // The broken getElementById methods don't pick up programmatically-set names,
        // so use a roundabout getElementsByName test
        support.getById = assert(function (el) {
          docElem.appendChild(el).id = expando;
          return (
            !document.getElementsByName ||
            !document.getElementsByName(expando).length
          );
        });

        // ID filter and find
        if (support.getById) {
          Expr.filter["ID"] = function (id) {
            var attrId = id.replace(runescape, funescape);
            return function (elem) {
              return elem.getAttribute("id") === attrId;
            };
          };
          Expr.find["ID"] = function (id, context) {
            if (
              typeof context.getElementById !== "undefined" &&
              documentIsHTML
            ) {
              var elem = context.getElementById(id);
              return elem ? [elem] : [];
            }
          };
        } else {
          Expr.filter["ID"] = function (id) {
            var attrId = id.replace(runescape, funescape);
            return function (elem) {
              var node =
                typeof elem.getAttributeNode !== "undefined" &&
                elem.getAttributeNode("id");
              return node && node.value === attrId;
            };
          };

          // Support: IE 6 - 7 only
          // getElementById is not reliable as a find shortcut
          Expr.find["ID"] = function (id, context) {
            if (
              typeof context.getElementById !== "undefined" &&
              documentIsHTML
            ) {
              var node,
                i,
                elems,
                elem = context.getElementById(id);

              if (elem) {
                // Verify the id attribute
                node = elem.getAttributeNode("id");
                if (node && node.value === id) {
                  return [elem];
                }

                // Fall back on getElementsByName
                elems = context.getElementsByName(id);
                i = 0;
                while ((elem = elems[i++])) {
                  node = elem.getAttributeNode("id");
                  if (node && node.value === id) {
                    return [elem];
                  }
                }
              }

              return [];
            }
          };
        }

        // Tag
        Expr.find["TAG"] = support.getElementsByTagName
          ? function (tag, context) {
              if (typeof context.getElementsByTagName !== "undefined") {
                return context.getElementsByTagName(tag);

                // DocumentFragment nodes don't have gEBTN
              } else if (support.qsa) {
                return context.querySelectorAll(tag);
              }
            }
          : function (tag, context) {
              var elem,
                tmp = [],
                i = 0,
                // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
                results = context.getElementsByTagName(tag);

              // Filter out possible comments
              if (tag === "*") {
                while ((elem = results[i++])) {
                  if (elem.nodeType === 1) {
                    tmp.push(elem);
                  }
                }

                return tmp;
              }
              return results;
            };

        // Class
        Expr.find["CLASS"] =
          support.getElementsByClassName &&
          function (className, context) {
            if (
              typeof context.getElementsByClassName !== "undefined" &&
              documentIsHTML
            ) {
              return context.getElementsByClassName(className);
            }
          };

        /* QSA/matchesSelector
	---------------------------------------------------------------------- */

        // QSA and matchesSelector support

        // matchesSelector(:active) reports false when true (IE9/Opera 11.5)
        rbuggyMatches = [];

        // qSa(:focus) reports false when true (Chrome 21)
        // We allow this because of a bug in IE8/9 that throws an error
        // whenever `document.activeElement` is accessed on an iframe
        // So, we allow :focus to pass through QSA all the time to avoid the IE error
        // See https://bugs.jquery.com/ticket/13378
        rbuggyQSA = [];

        if ((support.qsa = rnative.test(document.querySelectorAll))) {
          // Build QSA regex
          // Regex strategy adopted from Diego Perini
          assert(function (el) {
            var input;

            // Select is set to empty string on purpose
            // This is to test IE's treatment of not explicitly
            // setting a boolean content attribute,
            // since its presence should be enough
            // https://bugs.jquery.com/ticket/12359
            docElem.appendChild(el).innerHTML =
              "<a id='" +
              expando +
              "'></a>" +
              "<select id='" +
              expando +
              "-\r\\' msallowcapture=''>" +
              "<option selected=''></option></select>";

            // Support: IE8, Opera 11-12.16
            // Nothing should be selected when empty strings follow ^= or $= or *=
            // The test attribute must be unknown in Opera but "safe" for WinRT
            // https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
            if (el.querySelectorAll("[msallowcapture^='']").length) {
              rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
            }

            // Support: IE8
            // Boolean attributes and "value" are not treated correctly
            if (!el.querySelectorAll("[selected]").length) {
              rbuggyQSA.push(
                "\\[" + whitespace + "*(?:value|" + booleans + ")"
              );
            }

            // Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
            if (!el.querySelectorAll("[id~=" + expando + "-]").length) {
              rbuggyQSA.push("~=");
            }

            // Support: IE 11+, Edge 15 - 18+
            // IE 11/Edge don't find elements on a `[name='']` query in some cases.
            // Adding a temporary attribute to the document before the selection works
            // around the issue.
            // Interestingly, IE 10 & older don't seem to have the issue.
            input = document.createElement("input");
            input.setAttribute("name", "");
            el.appendChild(input);
            if (!el.querySelectorAll("[name='']").length) {
              rbuggyQSA.push(
                "\\[" +
                  whitespace +
                  "*name" +
                  whitespace +
                  "*=" +
                  whitespace +
                  "*(?:''|\"\")"
              );
            }

            // Webkit/Opera - :checked should return selected option elements
            // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
            // IE8 throws error here and will not see later tests
            if (!el.querySelectorAll(":checked").length) {
              rbuggyQSA.push(":checked");
            }

            // Support: Safari 8+, iOS 8+
            // https://bugs.webkit.org/show_bug.cgi?id=136851
            // In-page `selector#id sibling-combinator selector` fails
            if (!el.querySelectorAll("a#" + expando + "+*").length) {
              rbuggyQSA.push(".#.+[+~]");
            }

            // Support: Firefox <=3.6 - 5 only
            // Old Firefox doesn't throw on a badly-escaped identifier.
            el.querySelectorAll("\\\f");
            rbuggyQSA.push("[\\r\\n\\f]");
          });

          assert(function (el) {
            el.innerHTML =
              "<a href='' disabled='disabled'></a>" +
              "<select disabled='disabled'><option/></select>";

            // Support: Windows 8 Native Apps
            // The type and name attributes are restricted during .innerHTML assignment
            var input = document.createElement("input");
            input.setAttribute("type", "hidden");
            el.appendChild(input).setAttribute("name", "D");

            // Support: IE8
            // Enforce case-sensitivity of name attribute
            if (el.querySelectorAll("[name=d]").length) {
              rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
            }

            // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
            // IE8 throws error here and will not see later tests
            if (el.querySelectorAll(":enabled").length !== 2) {
              rbuggyQSA.push(":enabled", ":disabled");
            }

            // Support: IE9-11+
            // IE's :disabled selector does not pick up the children of disabled fieldsets
            docElem.appendChild(el).disabled = true;
            if (el.querySelectorAll(":disabled").length !== 2) {
              rbuggyQSA.push(":enabled", ":disabled");
            }

            // Support: Opera 10 - 11 only
            // Opera 10-11 does not throw on post-comma invalid pseudos
            el.querySelectorAll("*,:x");
            rbuggyQSA.push(",.*:");
          });
        }

        if (
          (support.matchesSelector = rnative.test(
            (matches =
              docElem.matches ||
              docElem.webkitMatchesSelector ||
              docElem.mozMatchesSelector ||
              docElem.oMatchesSelector ||
              docElem.msMatchesSelector)
          ))
        ) {
          assert(function (el) {
            // Check to see if it's possible to do matchesSelector
            // on a disconnected node (IE 9)
            support.disconnectedMatch = matches.call(el, "*");

            // This should fail with an exception
            // Gecko does not error, returns false instead
            matches.call(el, "[s!='']:x");
            rbuggyMatches.push("!=", pseudos);
          });
        }

        rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
        rbuggyMatches =
          rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));

        /* Contains
	---------------------------------------------------------------------- */
        hasCompare = rnative.test(docElem.compareDocumentPosition);

        // Element contains another
        // Purposefully self-exclusive
        // As in, an element does not contain itself
        contains =
          hasCompare || rnative.test(docElem.contains)
            ? function (a, b) {
                var adown = a.nodeType === 9 ? a.documentElement : a,
                  bup = b && b.parentNode;
                return (
                  a === bup ||
                  !!(
                    bup &&
                    bup.nodeType === 1 &&
                    (adown.contains
                      ? adown.contains(bup)
                      : a.compareDocumentPosition &&
                        a.compareDocumentPosition(bup) & 16)
                  )
                );
              }
            : function (a, b) {
                if (b) {
                  while ((b = b.parentNode)) {
                    if (b === a) {
                      return true;
                    }
                  }
                }
                return false;
              };

        /* Sorting
	---------------------------------------------------------------------- */

        // Document order sorting
        sortOrder = hasCompare
          ? function (a, b) {
              // Flag for duplicate removal
              if (a === b) {
                hasDuplicate = true;
                return 0;
              }

              // Sort on method existence if only one input has compareDocumentPosition
              var compare =
                !a.compareDocumentPosition - !b.compareDocumentPosition;
              if (compare) {
                return compare;
              }

              // Calculate position if both inputs belong to the same document
              // Support: IE 11+, Edge 17 - 18+
              // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
              // two documents; shallow comparisons work.
              // eslint-disable-next-line eqeqeq
              compare =
                (a.ownerDocument || a) == (b.ownerDocument || b)
                  ? a.compareDocumentPosition(b)
                  : // Otherwise we know they are disconnected
                    1;

              // Disconnected nodes
              if (
                compare & 1 ||
                (!support.sortDetached &&
                  b.compareDocumentPosition(a) === compare)
              ) {
                // Choose the first element that is related to our preferred document
                // Support: IE 11+, Edge 17 - 18+
                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                // two documents; shallow comparisons work.
                // eslint-disable-next-line eqeqeq
                if (
                  a == document ||
                  (a.ownerDocument == preferredDoc && contains(preferredDoc, a))
                ) {
                  return -1;
                }

                // Support: IE 11+, Edge 17 - 18+
                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                // two documents; shallow comparisons work.
                // eslint-disable-next-line eqeqeq
                if (
                  b == document ||
                  (b.ownerDocument == preferredDoc && contains(preferredDoc, b))
                ) {
                  return 1;
                }

                // Maintain original order
                return sortInput
                  ? indexOf(sortInput, a) - indexOf(sortInput, b)
                  : 0;
              }

              return compare & 4 ? -1 : 1;
            }
          : function (a, b) {
              // Exit early if the nodes are identical
              if (a === b) {
                hasDuplicate = true;
                return 0;
              }

              var cur,
                i = 0,
                aup = a.parentNode,
                bup = b.parentNode,
                ap = [a],
                bp = [b];

              // Parentless nodes are either documents or disconnected
              if (!aup || !bup) {
                // Support: IE 11+, Edge 17 - 18+
                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                // two documents; shallow comparisons work.
                /* eslint-disable eqeqeq */
                return a == document
                  ? -1
                  : b == document
                  ? 1
                  : /* eslint-enable eqeqeq */
                  aup
                  ? -1
                  : bup
                  ? 1
                  : sortInput
                  ? indexOf(sortInput, a) - indexOf(sortInput, b)
                  : 0;

                // If the nodes are siblings, we can do a quick check
              } else if (aup === bup) {
                return siblingCheck(a, b);
              }

              // Otherwise we need full lists of their ancestors for comparison
              cur = a;
              while ((cur = cur.parentNode)) {
                ap.unshift(cur);
              }
              cur = b;
              while ((cur = cur.parentNode)) {
                bp.unshift(cur);
              }

              // Walk down the tree looking for a discrepancy
              while (ap[i] === bp[i]) {
                i++;
              }

              return i
                ? // Do a sibling check if the nodes have a common ancestor
                  siblingCheck(ap[i], bp[i])
                : // Otherwise nodes in our document sort first
                // Support: IE 11+, Edge 17 - 18+
                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                // two documents; shallow comparisons work.
                /* eslint-disable eqeqeq */
                ap[i] == preferredDoc
                ? -1
                : bp[i] == preferredDoc
                ? 1
                : /* eslint-enable eqeqeq */
                  0;
            };

        return document;
      };

      Sizzle.matches = function (expr, elements) {
        return Sizzle(expr, null, null, elements);
      };

      Sizzle.matchesSelector = function (elem, expr) {
        setDocument(elem);

        if (
          support.matchesSelector &&
          documentIsHTML &&
          !nonnativeSelectorCache[expr + " "] &&
          (!rbuggyMatches || !rbuggyMatches.test(expr)) &&
          (!rbuggyQSA || !rbuggyQSA.test(expr))
        ) {
          try {
            var ret = matches.call(elem, expr);

            // IE 9's matchesSelector returns false on disconnected nodes
            if (
              ret ||
              support.disconnectedMatch ||
              // As well, disconnected nodes are said to be in a document
              // fragment in IE 9
              (elem.document && elem.document.nodeType !== 11)
            ) {
              return ret;
            }
          } catch (e) {
            nonnativeSelectorCache(expr, true);
          }
        }

        return Sizzle(expr, document, null, [elem]).length > 0;
      };

      Sizzle.contains = function (context, elem) {
        // Set document vars if needed
        // Support: IE 11+, Edge 17 - 18+
        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
        // two documents; shallow comparisons work.
        // eslint-disable-next-line eqeqeq
        if ((context.ownerDocument || context) != document) {
          setDocument(context);
        }
        return contains(context, elem);
      };

      Sizzle.attr = function (elem, name) {
        // Set document vars if needed
        // Support: IE 11+, Edge 17 - 18+
        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
        // two documents; shallow comparisons work.
        // eslint-disable-next-line eqeqeq
        if ((elem.ownerDocument || elem) != document) {
          setDocument(elem);
        }

        var fn = Expr.attrHandle[name.toLowerCase()],
          // Don't get fooled by Object.prototype properties (jQuery #13807)
          val =
            fn && hasOwn.call(Expr.attrHandle, name.toLowerCase())
              ? fn(elem, name, !documentIsHTML)
              : undefined;

        return val !== undefined
          ? val
          : support.attributes || !documentIsHTML
          ? elem.getAttribute(name)
          : (val = elem.getAttributeNode(name)) && val.specified
          ? val.value
          : null;
      };

      Sizzle.escape = function (sel) {
        return (sel + "").replace(rcssescape, fcssescape);
      };

      Sizzle.error = function (msg) {
        throw new Error("Syntax error, unrecognized expression: " + msg);
      };

      /**
       * Document sorting and removing duplicates
       * @param {ArrayLike} results
       */
      Sizzle.uniqueSort = function (results) {
        var elem,
          duplicates = [],
          j = 0,
          i = 0;

        // Unless we *know* we can detect duplicates, assume their presence
        hasDuplicate = !support.detectDuplicates;
        sortInput = !support.sortStable && results.slice(0);
        results.sort(sortOrder);

        if (hasDuplicate) {
          while ((elem = results[i++])) {
            if (elem === results[i]) {
              j = duplicates.push(i);
            }
          }
          while (j--) {
            results.splice(duplicates[j], 1);
          }
        }

        // Clear input after sorting to release objects
        // See https://github.com/jquery/sizzle/pull/225
        sortInput = null;

        return results;
      };

      /**
       * Utility function for retrieving the text value of an array of DOM nodes
       * @param {Array|Element} elem
       */
      getText = Sizzle.getText = function (elem) {
        var node,
          ret = "",
          i = 0,
          nodeType = elem.nodeType;

        if (!nodeType) {
          // If no nodeType, this is expected to be an array
          while ((node = elem[i++])) {
            // Do not traverse comment nodes
            ret += getText(node);
          }
        } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
          // Use textContent for elements
          // innerText usage removed for consistency of new lines (jQuery #11153)
          if (typeof elem.textContent === "string") {
            return elem.textContent;
          } else {
            // Traverse its children
            for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
              ret += getText(elem);
            }
          }
        } else if (nodeType === 3 || nodeType === 4) {
          return elem.nodeValue;
        }

        // Do not include comment or processing instruction nodes

        return ret;
      };

      Expr = Sizzle.selectors = {
        // Can be adjusted by the user
        cacheLength: 50,

        createPseudo: markFunction,

        match: matchExpr,

        attrHandle: {},

        find: {},

        relative: {
          ">": { dir: "parentNode", first: true },
          " ": { dir: "parentNode" },
          "+": { dir: "previousSibling", first: true },
          "~": { dir: "previousSibling" },
        },

        preFilter: {
          ATTR: function (match) {
            match[1] = match[1].replace(runescape, funescape);

            // Move the given value to match[3] whether quoted or unquoted
            match[3] = (match[3] || match[4] || match[5] || "").replace(
              runescape,
              funescape
            );

            if (match[2] === "~=") {
              match[3] = " " + match[3] + " ";
            }

            return match.slice(0, 4);
          },

          CHILD: function (match) {
            /* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
            match[1] = match[1].toLowerCase();

            if (match[1].slice(0, 3) === "nth") {
              // nth-* requires argument
              if (!match[3]) {
                Sizzle.error(match[0]);
              }

              // numeric x and y parameters for Expr.filter.CHILD
              // remember that false/true cast respectively to 0/1
              match[4] = +(match[4]
                ? match[5] + (match[6] || 1)
                : 2 * (match[3] === "even" || match[3] === "odd"));
              match[5] = +(match[7] + match[8] || match[3] === "odd");

              // other types prohibit arguments
            } else if (match[3]) {
              Sizzle.error(match[0]);
            }

            return match;
          },

          PSEUDO: function (match) {
            var excess,
              unquoted = !match[6] && match[2];

            if (matchExpr["CHILD"].test(match[0])) {
              return null;
            }

            // Accept quoted arguments as-is
            if (match[3]) {
              match[2] = match[4] || match[5] || "";

              // Strip excess characters from unquoted arguments
            } else if (
              unquoted &&
              rpseudo.test(unquoted) &&
              // Get excess from tokenize (recursively)
              (excess = tokenize(unquoted, true)) &&
              // advance to the next closing parenthesis
              (excess =
                unquoted.indexOf(")", unquoted.length - excess) -
                unquoted.length)
            ) {
              // excess is a negative index
              match[0] = match[0].slice(0, excess);
              match[2] = unquoted.slice(0, excess);
            }

            // Return only captures needed by the pseudo filter method (type and argument)
            return match.slice(0, 3);
          },
        },

        filter: {
          TAG: function (nodeNameSelector) {
            var nodeName = nodeNameSelector
              .replace(runescape, funescape)
              .toLowerCase();
            return nodeNameSelector === "*"
              ? function () {
                  return true;
                }
              : function (elem) {
                  return (
                    elem.nodeName && elem.nodeName.toLowerCase() === nodeName
                  );
                };
          },

          CLASS: function (className) {
            var pattern = classCache[className + " "];

            return (
              pattern ||
              ((pattern = new RegExp(
                "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)"
              )) &&
                classCache(className, function (elem) {
                  return pattern.test(
                    (typeof elem.className === "string" && elem.className) ||
                      (typeof elem.getAttribute !== "undefined" &&
                        elem.getAttribute("class")) ||
                      ""
                  );
                }))
            );
          },

          ATTR: function (name, operator, check) {
            return function (elem) {
              var result = Sizzle.attr(elem, name);

              if (result == null) {
                return operator === "!=";
              }
              if (!operator) {
                return true;
              }

              result += "";

              /* eslint-disable max-len */

              return operator === "="
                ? result === check
                : operator === "!="
                ? result !== check
                : operator === "^="
                ? check && result.indexOf(check) === 0
                : operator === "*="
                ? check && result.indexOf(check) > -1
                : operator === "$="
                ? check && result.slice(-check.length) === check
                : operator === "~="
                ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(
                    check
                  ) > -1
                : operator === "|="
                ? result === check ||
                  result.slice(0, check.length + 1) === check + "-"
                : false;
              /* eslint-enable max-len */
            };
          },

          CHILD: function (type, what, _argument, first, last) {
            var simple = type.slice(0, 3) !== "nth",
              forward = type.slice(-4) !== "last",
              ofType = what === "of-type";

            return first === 1 && last === 0
              ? // Shortcut for :nth-*(n)
                function (elem) {
                  return !!elem.parentNode;
                }
              : function (elem, _context, xml) {
                  var cache,
                    uniqueCache,
                    outerCache,
                    node,
                    nodeIndex,
                    start,
                    dir =
                      simple !== forward ? "nextSibling" : "previousSibling",
                    parent = elem.parentNode,
                    name = ofType && elem.nodeName.toLowerCase(),
                    useCache = !xml && !ofType,
                    diff = false;

                  if (parent) {
                    // :(first|last|only)-(child|of-type)
                    if (simple) {
                      while (dir) {
                        node = elem;
                        while ((node = node[dir])) {
                          if (
                            ofType
                              ? node.nodeName.toLowerCase() === name
                              : node.nodeType === 1
                          ) {
                            return false;
                          }
                        }

                        // Reverse direction for :only-* (if we haven't yet done so)
                        start = dir =
                          type === "only" && !start && "nextSibling";
                      }
                      return true;
                    }

                    start = [forward ? parent.firstChild : parent.lastChild];

                    // non-xml :nth-child(...) stores cache data on `parent`
                    if (forward && useCache) {
                      // Seek `elem` from a previously-cached index

                      // ...in a gzip-friendly way
                      node = parent;
                      outerCache = node[expando] || (node[expando] = {});

                      // Support: IE <9 only
                      // Defend against cloned attroperties (jQuery gh-1709)
                      uniqueCache =
                        outerCache[node.uniqueID] ||
                        (outerCache[node.uniqueID] = {});

                      cache = uniqueCache[type] || [];
                      nodeIndex = cache[0] === dirruns && cache[1];
                      diff = nodeIndex && cache[2];
                      node = nodeIndex && parent.childNodes[nodeIndex];

                      while (
                        (node =
                          (++nodeIndex && node && node[dir]) ||
                          // Fallback to seeking `elem` from the start
                          (diff = nodeIndex = 0) ||
                          start.pop())
                      ) {
                        // When found, cache indexes on `parent` and break
                        if (node.nodeType === 1 && ++diff && node === elem) {
                          uniqueCache[type] = [dirruns, nodeIndex, diff];
                          break;
                        }
                      }
                    } else {
                      // Use previously-cached element index if available
                      if (useCache) {
                        // ...in a gzip-friendly way
                        node = elem;
                        outerCache = node[expando] || (node[expando] = {});

                        // Support: IE <9 only
                        // Defend against cloned attroperties (jQuery gh-1709)
                        uniqueCache =
                          outerCache[node.uniqueID] ||
                          (outerCache[node.uniqueID] = {});

                        cache = uniqueCache[type] || [];
                        nodeIndex = cache[0] === dirruns && cache[1];
                        diff = nodeIndex;
                      }

                      // xml :nth-child(...)
                      // or :nth-last-child(...) or :nth(-last)?-of-type(...)
                      if (diff === false) {
                        // Use the same loop as above to seek `elem` from the start
                        while (
                          (node =
                            (++nodeIndex && node && node[dir]) ||
                            (diff = nodeIndex = 0) ||
                            start.pop())
                        ) {
                          if (
                            (ofType
                              ? node.nodeName.toLowerCase() === name
                              : node.nodeType === 1) &&
                            ++diff
                          ) {
                            // Cache the index of each encountered element
                            if (useCache) {
                              outerCache =
                                node[expando] || (node[expando] = {});

                              // Support: IE <9 only
                              // Defend against cloned attroperties (jQuery gh-1709)
                              uniqueCache =
                                outerCache[node.uniqueID] ||
                                (outerCache[node.uniqueID] = {});

                              uniqueCache[type] = [dirruns, diff];
                            }

                            if (node === elem) {
                              break;
                            }
                          }
                        }
                      }
                    }

                    // Incorporate the offset, then check against cycle size
                    diff -= last;
                    return (
                      diff === first ||
                      (diff % first === 0 && diff / first >= 0)
                    );
                  }
                };
          },

          PSEUDO: function (pseudo, argument) {
            // pseudo-class names are case-insensitive
            // http://www.w3.org/TR/selectors/#pseudo-classes
            // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
            // Remember that setFilters inherits from pseudos
            var args,
              fn =
                Expr.pseudos[pseudo] ||
                Expr.setFilters[pseudo.toLowerCase()] ||
                Sizzle.error("unsupported pseudo: " + pseudo);

            // The user may use createPseudo to indicate that
            // arguments are needed to create the filter function
            // just as Sizzle does
            if (fn[expando]) {
              return fn(argument);
            }

            // But maintain support for old signatures
            if (fn.length > 1) {
              args = [pseudo, pseudo, "", argument];
              return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase())
                ? markFunction(function (seed, matches) {
                    var idx,
                      matched = fn(seed, argument),
                      i = matched.length;
                    while (i--) {
                      idx = indexOf(seed, matched[i]);
                      seed[idx] = !(matches[idx] = matched[i]);
                    }
                  })
                : function (elem) {
                    return fn(elem, 0, args);
                  };
            }

            return fn;
          },
        },

        pseudos: {
          // Potentially complex pseudos
          not: markFunction(function (selector) {
            // Trim the selector passed to compile
            // to avoid treating leading and trailing
            // spaces as combinators
            var input = [],
              results = [],
              matcher = compile(selector.replace(rtrim, "$1"));

            return matcher[expando]
              ? markFunction(function (seed, matches, _context, xml) {
                  var elem,
                    unmatched = matcher(seed, null, xml, []),
                    i = seed.length;

                  // Match elements unmatched by `matcher`
                  while (i--) {
                    if ((elem = unmatched[i])) {
                      seed[i] = !(matches[i] = elem);
                    }
                  }
                })
              : function (elem, _context, xml) {
                  input[0] = elem;
                  matcher(input, null, xml, results);

                  // Don't keep the element (issue #299)
                  input[0] = null;
                  return !results.pop();
                };
          }),

          has: markFunction(function (selector) {
            return function (elem) {
              return Sizzle(selector, elem).length > 0;
            };
          }),

          contains: markFunction(function (text) {
            text = text.replace(runescape, funescape);
            return function (elem) {
              return (elem.textContent || getText(elem)).indexOf(text) > -1;
            };
          }),

          // "Whether an element is represented by a :lang() selector
          // is based solely on the element's language value
          // being equal to the identifier C,
          // or beginning with the identifier C immediately followed by "-".
          // The matching of C against the element's language value is performed case-insensitively.
          // The identifier C does not have to be a valid language name."
          // http://www.w3.org/TR/selectors/#lang-pseudo
          lang: markFunction(function (lang) {
            // lang value must be a valid identifier
            if (!ridentifier.test(lang || "")) {
              Sizzle.error("unsupported lang: " + lang);
            }
            lang = lang.replace(runescape, funescape).toLowerCase();
            return function (elem) {
              var elemLang;
              do {
                if (
                  (elemLang = documentIsHTML
                    ? elem.lang
                    : elem.getAttribute("xml:lang") ||
                      elem.getAttribute("lang"))
                ) {
                  elemLang = elemLang.toLowerCase();
                  return (
                    elemLang === lang || elemLang.indexOf(lang + "-") === 0
                  );
                }
              } while ((elem = elem.parentNode) && elem.nodeType === 1);
              return false;
            };
          }),

          // Miscellaneous
          target: function (elem) {
            var hash = window.location && window.location.hash;
            return hash && hash.slice(1) === elem.id;
          },

          root: function (elem) {
            return elem === docElem;
          },

          focus: function (elem) {
            return (
              elem === document.activeElement &&
              (!document.hasFocus || document.hasFocus()) &&
              !!(elem.type || elem.href || ~elem.tabIndex)
            );
          },

          // Boolean properties
          enabled: createDisabledPseudo(false),
          disabled: createDisabledPseudo(true),

          checked: function (elem) {
            // In CSS3, :checked should return both checked and selected elements
            // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
            var nodeName = elem.nodeName.toLowerCase();
            return (
              (nodeName === "input" && !!elem.checked) ||
              (nodeName === "option" && !!elem.selected)
            );
          },

          selected: function (elem) {
            // Accessing this property makes selected-by-default
            // options in Safari work properly
            if (elem.parentNode) {
              // eslint-disable-next-line no-unused-expressions
              elem.parentNode.selectedIndex;
            }

            return elem.selected === true;
          },

          // Contents
          empty: function (elem) {
            // http://www.w3.org/TR/selectors/#empty-pseudo
            // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
            //   but not by others (comment: 8; processing instruction: 7; etc.)
            // nodeType < 6 works because attributes (2) do not appear as children
            for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
              if (elem.nodeType < 6) {
                return false;
              }
            }
            return true;
          },

          parent: function (elem) {
            return !Expr.pseudos["empty"](elem);
          },

          // Element/input types
          header: function (elem) {
            return rheader.test(elem.nodeName);
          },

          input: function (elem) {
            return rinputs.test(elem.nodeName);
          },

          button: function (elem) {
            var name = elem.nodeName.toLowerCase();
            return (
              (name === "input" && elem.type === "button") || name === "button"
            );
          },

          text: function (elem) {
            var attr;
            return (
              elem.nodeName.toLowerCase() === "input" &&
              elem.type === "text" &&
              // Support: IE<8
              // New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
              ((attr = elem.getAttribute("type")) == null ||
                attr.toLowerCase() === "text")
            );
          },

          // Position-in-collection
          first: createPositionalPseudo(function () {
            return [0];
          }),

          last: createPositionalPseudo(function (_matchIndexes, length) {
            return [length - 1];
          }),

          eq: createPositionalPseudo(function (
            _matchIndexes,
            length,
            argument
          ) {
            return [argument < 0 ? argument + length : argument];
          }),

          even: createPositionalPseudo(function (matchIndexes, length) {
            var i = 0;
            for (; i < length; i += 2) {
              matchIndexes.push(i);
            }
            return matchIndexes;
          }),

          odd: createPositionalPseudo(function (matchIndexes, length) {
            var i = 1;
            for (; i < length; i += 2) {
              matchIndexes.push(i);
            }
            return matchIndexes;
          }),

          lt: createPositionalPseudo(function (matchIndexes, length, argument) {
            var i =
              argument < 0
                ? argument + length
                : argument > length
                ? length
                : argument;
            for (; --i >= 0; ) {
              matchIndexes.push(i);
            }
            return matchIndexes;
          }),

          gt: createPositionalPseudo(function (matchIndexes, length, argument) {
            var i = argument < 0 ? argument + length : argument;
            for (; ++i < length; ) {
              matchIndexes.push(i);
            }
            return matchIndexes;
          }),
        },
      };

      Expr.pseudos["nth"] = Expr.pseudos["eq"];

      // Add button/input type pseudos
      for (i in {
        radio: true,
        checkbox: true,
        file: true,
        password: true,
        image: true,
      }) {
        Expr.pseudos[i] = createInputPseudo(i);
      }
      for (i in { submit: true, reset: true }) {
        Expr.pseudos[i] = createButtonPseudo(i);
      }

      // Easy API for creating new setFilters
      function setFilters() {}
      setFilters.prototype = Expr.filters = Expr.pseudos;
      Expr.setFilters = new setFilters();

      tokenize = Sizzle.tokenize = function (selector, parseOnly) {
        var matched,
          match,
          tokens,
          type,
          soFar,
          groups,
          preFilters,
          cached = tokenCache[selector + " "];

        if (cached) {
          return parseOnly ? 0 : cached.slice(0);
        }

        soFar = selector;
        groups = [];
        preFilters = Expr.preFilter;

        while (soFar) {
          // Comma and first run
          if (!matched || (match = rcomma.exec(soFar))) {
            if (match) {
              // Don't consume trailing commas as valid
              soFar = soFar.slice(match[0].length) || soFar;
            }
            groups.push((tokens = []));
          }

          matched = false;

          // Combinators
          if ((match = rcombinators.exec(soFar))) {
            matched = match.shift();
            tokens.push({
              value: matched,

              // Cast descendant combinators to space
              type: match[0].replace(rtrim, " "),
            });
            soFar = soFar.slice(matched.length);
          }

          // Filters
          for (type in Expr.filter) {
            if (
              (match = matchExpr[type].exec(soFar)) &&
              (!preFilters[type] || (match = preFilters[type](match)))
            ) {
              matched = match.shift();
              tokens.push({
                value: matched,
                type: type,
                matches: match,
              });
              soFar = soFar.slice(matched.length);
            }
          }

          if (!matched) {
            break;
          }
        }

        // Return the length of the invalid excess
        // if we're just parsing
        // Otherwise, throw an error or return tokens
        return parseOnly
          ? soFar.length
          : soFar
          ? Sizzle.error(selector)
          : // Cache the tokens
            tokenCache(selector, groups).slice(0);
      };

      function toSelector(tokens) {
        var i = 0,
          len = tokens.length,
          selector = "";
        for (; i < len; i++) {
          selector += tokens[i].value;
        }
        return selector;
      }

      function addCombinator(matcher, combinator, base) {
        var dir = combinator.dir,
          skip = combinator.next,
          key = skip || dir,
          checkNonElements = base && key === "parentNode",
          doneName = done++;

        return combinator.first
          ? // Check against closest ancestor/preceding element
            function (elem, context, xml) {
              while ((elem = elem[dir])) {
                if (elem.nodeType === 1 || checkNonElements) {
                  return matcher(elem, context, xml);
                }
              }
              return false;
            }
          : // Check against all ancestor/preceding elements
            function (elem, context, xml) {
              var oldCache,
                uniqueCache,
                outerCache,
                newCache = [dirruns, doneName];

              // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
              if (xml) {
                while ((elem = elem[dir])) {
                  if (elem.nodeType === 1 || checkNonElements) {
                    if (matcher(elem, context, xml)) {
                      return true;
                    }
                  }
                }
              } else {
                while ((elem = elem[dir])) {
                  if (elem.nodeType === 1 || checkNonElements) {
                    outerCache = elem[expando] || (elem[expando] = {});

                    // Support: IE <9 only
                    // Defend against cloned attroperties (jQuery gh-1709)
                    uniqueCache =
                      outerCache[elem.uniqueID] ||
                      (outerCache[elem.uniqueID] = {});

                    if (skip && skip === elem.nodeName.toLowerCase()) {
                      elem = elem[dir] || elem;
                    } else if (
                      (oldCache = uniqueCache[key]) &&
                      oldCache[0] === dirruns &&
                      oldCache[1] === doneName
                    ) {
                      // Assign to newCache so results back-propagate to previous elements
                      return (newCache[2] = oldCache[2]);
                    } else {
                      // Reuse newcache so results back-propagate to previous elements
                      uniqueCache[key] = newCache;

                      // A match means we're done; a fail means we have to keep checking
                      if ((newCache[2] = matcher(elem, context, xml))) {
                        return true;
                      }
                    }
                  }
                }
              }
              return false;
            };
      }

      function elementMatcher(matchers) {
        return matchers.length > 1
          ? function (elem, context, xml) {
              var i = matchers.length;
              while (i--) {
                if (!matchers[i](elem, context, xml)) {
                  return false;
                }
              }
              return true;
            }
          : matchers[0];
      }

      function multipleContexts(selector, contexts, results) {
        var i = 0,
          len = contexts.length;
        for (; i < len; i++) {
          Sizzle(selector, contexts[i], results);
        }
        return results;
      }

      function condense(unmatched, map, filter, context, xml) {
        var elem,
          newUnmatched = [],
          i = 0,
          len = unmatched.length,
          mapped = map != null;

        for (; i < len; i++) {
          if ((elem = unmatched[i])) {
            if (!filter || filter(elem, context, xml)) {
              newUnmatched.push(elem);
              if (mapped) {
                map.push(i);
              }
            }
          }
        }

        return newUnmatched;
      }

      function setMatcher(
        preFilter,
        selector,
        matcher,
        postFilter,
        postFinder,
        postSelector
      ) {
        if (postFilter && !postFilter[expando]) {
          postFilter = setMatcher(postFilter);
        }
        if (postFinder && !postFinder[expando]) {
          postFinder = setMatcher(postFinder, postSelector);
        }
        return markFunction(function (seed, results, context, xml) {
          var temp,
            i,
            elem,
            preMap = [],
            postMap = [],
            preexisting = results.length,
            // Get initial elements from seed or context
            elems =
              seed ||
              multipleContexts(
                selector || "*",
                context.nodeType ? [context] : context,
                []
              ),
            // Prefilter to get matcher input, preserving a map for seed-results synchronization
            matcherIn =
              preFilter && (seed || !selector)
                ? condense(elems, preMap, preFilter, context, xml)
                : elems,
            matcherOut = matcher
              ? // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
                postFinder || (seed ? preFilter : preexisting || postFilter)
                ? // ...intermediate processing is necessary
                  []
                : // ...otherwise use results directly
                  results
              : matcherIn;

          // Find primary matches
          if (matcher) {
            matcher(matcherIn, matcherOut, context, xml);
          }

          // Apply postFilter
          if (postFilter) {
            temp = condense(matcherOut, postMap);
            postFilter(temp, [], context, xml);

            // Un-match failing elements by moving them back to matcherIn
            i = temp.length;
            while (i--) {
              if ((elem = temp[i])) {
                matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
              }
            }
          }

          if (seed) {
            if (postFinder || preFilter) {
              if (postFinder) {
                // Get the final matcherOut by condensing this intermediate into postFinder contexts
                temp = [];
                i = matcherOut.length;
                while (i--) {
                  if ((elem = matcherOut[i])) {
                    // Restore matcherIn since elem is not yet a final match
                    temp.push((matcherIn[i] = elem));
                  }
                }
                postFinder(null, (matcherOut = []), temp, xml);
              }

              // Move matched elements from seed to results to keep them synchronized
              i = matcherOut.length;
              while (i--) {
                if (
                  (elem = matcherOut[i]) &&
                  (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1
                ) {
                  seed[temp] = !(results[temp] = elem);
                }
              }
            }

            // Add elements to results, through postFinder if defined
          } else {
            matcherOut = condense(
              matcherOut === results
                ? matcherOut.splice(preexisting, matcherOut.length)
                : matcherOut
            );
            if (postFinder) {
              postFinder(null, results, matcherOut, xml);
            } else {
              push.apply(results, matcherOut);
            }
          }
        });
      }

      function matcherFromTokens(tokens) {
        var checkContext,
          matcher,
          j,
          len = tokens.length,
          leadingRelative = Expr.relative[tokens[0].type],
          implicitRelative = leadingRelative || Expr.relative[" "],
          i = leadingRelative ? 1 : 0,
          // The foundational matcher ensures that elements are reachable from top-level context(s)
          matchContext = addCombinator(
            function (elem) {
              return elem === checkContext;
            },
            implicitRelative,
            true
          ),
          matchAnyContext = addCombinator(
            function (elem) {
              return indexOf(checkContext, elem) > -1;
            },
            implicitRelative,
            true
          ),
          matchers = [
            function (elem, context, xml) {
              var ret =
                (!leadingRelative && (xml || context !== outermostContext)) ||
                ((checkContext = context).nodeType
                  ? matchContext(elem, context, xml)
                  : matchAnyContext(elem, context, xml));

              // Avoid hanging onto element (issue #299)
              checkContext = null;
              return ret;
            },
          ];

        for (; i < len; i++) {
          if ((matcher = Expr.relative[tokens[i].type])) {
            matchers = [addCombinator(elementMatcher(matchers), matcher)];
          } else {
            matcher = Expr.filter[tokens[i].type].apply(
              null,
              tokens[i].matches
            );

            // Return special upon seeing a positional matcher
            if (matcher[expando]) {
              // Find the next relative operator (if any) for proper handling
              j = ++i;
              for (; j < len; j++) {
                if (Expr.relative[tokens[j].type]) {
                  break;
                }
              }
              return setMatcher(
                i > 1 && elementMatcher(matchers),
                i > 1 &&
                  toSelector(
                    // If the preceding token was a descendant combinator, insert an implicit any-element `*`
                    tokens
                      .slice(0, i - 1)
                      .concat({ value: tokens[i - 2].type === " " ? "*" : "" })
                  ).replace(rtrim, "$1"),
                matcher,
                i < j && matcherFromTokens(tokens.slice(i, j)),
                j < len && matcherFromTokens((tokens = tokens.slice(j))),
                j < len && toSelector(tokens)
              );
            }
            matchers.push(matcher);
          }
        }

        return elementMatcher(matchers);
      }

      function matcherFromGroupMatchers(elementMatchers, setMatchers) {
        var bySet = setMatchers.length > 0,
          byElement = elementMatchers.length > 0,
          superMatcher = function (seed, context, xml, results, outermost) {
            var elem,
              j,
              matcher,
              matchedCount = 0,
              i = "0",
              unmatched = seed && [],
              setMatched = [],
              contextBackup = outermostContext,
              // We must always have either seed elements or outermost context
              elems = seed || (byElement && Expr.find["TAG"]("*", outermost)),
              // Use integer dirruns iff this is the outermost matcher
              dirrunsUnique = (dirruns +=
                contextBackup == null ? 1 : Math.random() || 0.1),
              len = elems.length;

            if (outermost) {
              // Support: IE 11+, Edge 17 - 18+
              // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
              // two documents; shallow comparisons work.
              // eslint-disable-next-line eqeqeq
              outermostContext = context == document || context || outermost;
            }

            // Add elements passing elementMatchers directly to results
            // Support: IE<9, Safari
            // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
            for (; i !== len && (elem = elems[i]) != null; i++) {
              if (byElement && elem) {
                j = 0;

                // Support: IE 11+, Edge 17 - 18+
                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                // two documents; shallow comparisons work.
                // eslint-disable-next-line eqeqeq
                if (!context && elem.ownerDocument != document) {
                  setDocument(elem);
                  xml = !documentIsHTML;
                }
                while ((matcher = elementMatchers[j++])) {
                  if (matcher(elem, context || document, xml)) {
                    results.push(elem);
                    break;
                  }
                }
                if (outermost) {
                  dirruns = dirrunsUnique;
                }
              }

              // Track unmatched elements for set filters
              if (bySet) {
                // They will have gone through all possible matchers
                if ((elem = !matcher && elem)) {
                  matchedCount--;
                }

                // Lengthen the array for every element, matched or not
                if (seed) {
                  unmatched.push(elem);
                }
              }
            }

            // `i` is now the count of elements visited above, and adding it to `matchedCount`
            // makes the latter nonnegative.
            matchedCount += i;

            // Apply set filters to unmatched elements
            // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
            // equals `i`), unless we didn't visit _any_ elements in the above loop because we have
            // no element matchers and no seed.
            // Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
            // case, which will result in a "00" `matchedCount` that differs from `i` but is also
            // numerically zero.
            if (bySet && i !== matchedCount) {
              j = 0;
              while ((matcher = setMatchers[j++])) {
                matcher(unmatched, setMatched, context, xml);
              }

              if (seed) {
                // Reintegrate element matches to eliminate the need for sorting
                if (matchedCount > 0) {
                  while (i--) {
                    if (!(unmatched[i] || setMatched[i])) {
                      setMatched[i] = pop.call(results);
                    }
                  }
                }

                // Discard index placeholder values to get only actual matches
                setMatched = condense(setMatched);
              }

              // Add matches to results
              push.apply(results, setMatched);

              // Seedless set matches succeeding multiple successful matchers stipulate sorting
              if (
                outermost &&
                !seed &&
                setMatched.length > 0 &&
                matchedCount + setMatchers.length > 1
              ) {
                Sizzle.uniqueSort(results);
              }
            }

            // Override manipulation of globals by nested matchers
            if (outermost) {
              dirruns = dirrunsUnique;
              outermostContext = contextBackup;
            }

            return unmatched;
          };

        return bySet ? markFunction(superMatcher) : superMatcher;
      }

      compile = Sizzle.compile = function (
        selector,
        match /* Internal Use Only */
      ) {
        var i,
          setMatchers = [],
          elementMatchers = [],
          cached = compilerCache[selector + " "];

        if (!cached) {
          // Generate a function of recursive functions that can be used to check each element
          if (!match) {
            match = tokenize(selector);
          }
          i = match.length;
          while (i--) {
            cached = matcherFromTokens(match[i]);
            if (cached[expando]) {
              setMatchers.push(cached);
            } else {
              elementMatchers.push(cached);
            }
          }

          // Cache the compiled function
          cached = compilerCache(
            selector,
            matcherFromGroupMatchers(elementMatchers, setMatchers)
          );

          // Save selector and tokenization
          cached.selector = selector;
        }
        return cached;
      };

      /**
       * A low-level selection function that works with Sizzle's compiled
       *  selector functions
       * @param {String|Function} selector A selector or a pre-compiled
       *  selector function built with Sizzle.compile
       * @param {Element} context
       * @param {Array} [results]
       * @param {Array} [seed] A set of elements to match against
       */
      select = Sizzle.select = function (selector, context, results, seed) {
        var i,
          tokens,
          token,
          type,
          find,
          compiled = typeof selector === "function" && selector,
          match = !seed && tokenize((selector = compiled.selector || selector));

        results = results || [];

        // Try to minimize operations if there is only one selector in the list and no seed
        // (the latter of which guarantees us context)
        if (match.length === 1) {
          // Reduce context if the leading compound selector is an ID
          tokens = match[0] = match[0].slice(0);
          if (
            tokens.length > 2 &&
            (token = tokens[0]).type === "ID" &&
            context.nodeType === 9 &&
            documentIsHTML &&
            Expr.relative[tokens[1].type]
          ) {
            context = (Expr.find["ID"](
              token.matches[0].replace(runescape, funescape),
              context
            ) || [])[0];
            if (!context) {
              return results;

              // Precompiled matchers will still verify ancestry, so step up a level
            } else if (compiled) {
              context = context.parentNode;
            }

            selector = selector.slice(tokens.shift().value.length);
          }

          // Fetch a seed set for right-to-left matching
          i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
          while (i--) {
            token = tokens[i];

            // Abort if we hit a combinator
            if (Expr.relative[(type = token.type)]) {
              break;
            }
            if ((find = Expr.find[type])) {
              // Search, expanding context for leading sibling combinators
              if (
                (seed = find(
                  token.matches[0].replace(runescape, funescape),
                  (rsibling.test(tokens[0].type) &&
                    testContext(context.parentNode)) ||
                    context
                ))
              ) {
                // If seed is empty or no tokens remain, we can return early
                tokens.splice(i, 1);
                selector = seed.length && toSelector(tokens);
                if (!selector) {
                  push.apply(results, seed);
                  return results;
                }

                break;
              }
            }
          }
        }

        // Compile and execute a filtering function if one is not provided
        // Provide `match` to avoid retokenization if we modified the selector above
        (compiled || compile(selector, match))(
          seed,
          context,
          !documentIsHTML,
          results,
          !context ||
            (rsibling.test(selector) && testContext(context.parentNode)) ||
            context
        );
        return results;
      };

      // One-time assignments

      // Sort stability
      support.sortStable =
        expando.split("").sort(sortOrder).join("") === expando;

      // Support: Chrome 14-35+
      // Always assume duplicates if they aren't passed to the comparison function
      support.detectDuplicates = !!hasDuplicate;

      // Initialize against the default document
      setDocument();

      // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
      // Detached nodes confoundingly follow *each other*
      support.sortDetached = assert(function (el) {
        // Should return 1, but returns 4 (following)
        return (
          el.compareDocumentPosition(document.createElement("fieldset")) & 1
        );
      });

      // Support: IE<8
      // Prevent attribute/property "interpolation"
      // https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
      if (
        !assert(function (el) {
          el.innerHTML = "<a href='#'></a>";
          return el.firstChild.getAttribute("href") === "#";
        })
      ) {
        addHandle("type|href|height|width", function (elem, name, isXML) {
          if (!isXML) {
            return elem.getAttribute(
              name,
              name.toLowerCase() === "type" ? 1 : 2
            );
          }
        });
      }

      // Support: IE<9
      // Use defaultValue in place of getAttribute("value")
      if (
        !support.attributes ||
        !assert(function (el) {
          el.innerHTML = "<input/>";
          el.firstChild.setAttribute("value", "");
          return el.firstChild.getAttribute("value") === "";
        })
      ) {
        addHandle("value", function (elem, _name, isXML) {
          if (!isXML && elem.nodeName.toLowerCase() === "input") {
            return elem.defaultValue;
          }
        });
      }

      // Support: IE<9
      // Use getAttributeNode to fetch booleans when getAttribute lies
      if (
        !assert(function (el) {
          return el.getAttribute("disabled") == null;
        })
      ) {
        addHandle(booleans, function (elem, name, isXML) {
          var val;
          if (!isXML) {
            return elem[name] === true
              ? name.toLowerCase()
              : (val = elem.getAttributeNode(name)) && val.specified
              ? val.value
              : null;
          }
        });
      }

      return Sizzle;
    })(window);

  jQuery.find = Sizzle;
  jQuery.expr = Sizzle.selectors;

  // Deprecated
  jQuery.expr[":"] = jQuery.expr.pseudos;
  jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
  jQuery.text = Sizzle.getText;
  jQuery.isXMLDoc = Sizzle.isXML;
  jQuery.contains = Sizzle.contains;
  jQuery.escapeSelector = Sizzle.escape;

  var dir = function (elem, dir, until) {
    var matched = [],
      truncate = until !== undefined;

    while ((elem = elem[dir]) && elem.nodeType !== 9) {
      if (elem.nodeType === 1) {
        if (truncate && jQuery(elem).is(until)) {
          break;
        }
        matched.push(elem);
      }
    }
    return matched;
  };

  var siblings = function (n, elem) {
    var matched = [];

    for (; n; n = n.nextSibling) {
      if (n.nodeType === 1 && n !== elem) {
        matched.push(n);
      }
    }

    return matched;
  };

  var rneedsContext = jQuery.expr.match.needsContext;

  function nodeName(elem, name) {
    return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
  }
  var rsingleTag =
    /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;

  // Implement the identical functionality for filter and not
  function winnow(elements, qualifier, not) {
    if (isFunction(qualifier)) {
      return jQuery.grep(elements, function (elem, i) {
        return !!qualifier.call(elem, i, elem) !== not;
      });
    }

    // Single element
    if (qualifier.nodeType) {
      return jQuery.grep(elements, function (elem) {
        return (elem === qualifier) !== not;
      });
    }

    // Arraylike of elements (jQuery, arguments, Array)
    if (typeof qualifier !== "string") {
      return jQuery.grep(elements, function (elem) {
        return indexOf.call(qualifier, elem) > -1 !== not;
      });
    }

    // Filtered directly for both simple and complex selectors
    return jQuery.filter(qualifier, elements, not);
  }

  jQuery.filter = function (expr, elems, not) {
    var elem = elems[0];

    if (not) {
      expr = ":not(" + expr + ")";
    }

    if (elems.length === 1 && elem.nodeType === 1) {
      return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];
    }

    return jQuery.find.matches(
      expr,
      jQuery.grep(elems, function (elem) {
        return elem.nodeType === 1;
      })
    );
  };

  jQuery.fn.extend({
    find: function (selector) {
      var i,
        ret,
        len = this.length,
        self = this;

      if (typeof selector !== "string") {
        return this.pushStack(
          jQuery(selector).filter(function () {
            for (i = 0; i < len; i++) {
              if (jQuery.contains(self[i], this)) {
                return true;
              }
            }
          })
        );
      }

      ret = this.pushStack([]);

      for (i = 0; i < len; i++) {
        jQuery.find(selector, self[i], ret);
      }

      return len > 1 ? jQuery.uniqueSort(ret) : ret;
    },
    filter: function (selector) {
      return this.pushStack(winnow(this, selector || [], false));
    },
    not: function (selector) {
      return this.pushStack(winnow(this, selector || [], true));
    },
    is: function (selector) {
      return !!winnow(
        this,

        // If this is a positional/relative selector, check membership in the returned set
        // so $("p:first").is("p:last") won't return true for a doc with two "p".
        typeof selector === "string" && rneedsContext.test(selector)
          ? jQuery(selector)
          : selector || [],
        false
      ).length;
    },
  });

  // Initialize a jQuery object

  // A central reference to the root jQuery(document)
  var rootjQuery,
    // A simple way to check for HTML strings
    // Prioritize #id over <tag> to avoid XSS via location.hash (trac-9521)
    // Strict HTML recognition (trac-11290: must start with <)
    // Shortcut simple #id case for speed
    rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
    init = (jQuery.fn.init = function (selector, context, root) {
      var match, elem;

      // HANDLE: $(""), $(null), $(undefined), $(false)
      if (!selector) {
        return this;
      }

      // Method init() accepts an alternate rootjQuery
      // so migrate can support jQuery.sub (gh-2101)
      root = root || rootjQuery;

      // Handle HTML strings
      if (typeof selector === "string") {
        if (
          selector[0] === "<" &&
          selector[selector.length - 1] === ">" &&
          selector.length >= 3
        ) {
          // Assume that strings that start and end with <> are HTML and skip the regex check
          match = [null, selector, null];
        } else {
          match = rquickExpr.exec(selector);
        }

        // Match html or make sure no context is specified for #id
        if (match && (match[1] || !context)) {
          // HANDLE: $(html) -> $(array)
          if (match[1]) {
            context = context instanceof jQuery ? context[0] : context;

            // Option to run scripts is true for back-compat
            // Intentionally let the error be thrown if parseHTML is not present
            jQuery.merge(
              this,
              jQuery.parseHTML(
                match[1],
                context && context.nodeType
                  ? context.ownerDocument || context
                  : document,
                true
              )
            );

            // HANDLE: $(html, props)
            if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
              for (match in context) {
                // Properties of context are called as methods if possible
                if (isFunction(this[match])) {
                  this[match](context[match]);

                  // ...and otherwise set as attributes
                } else {
                  this.attr(match, context[match]);
                }
              }
            }

            return this;

            // HANDLE: $(#id)
          } else {
            elem = document.getElementById(match[2]);

            if (elem) {
              // Inject the element directly into the jQuery object
              this[0] = elem;
              this.length = 1;
            }
            return this;
          }

          // HANDLE: $(expr, $(...))
        } else if (!context || context.jquery) {
          return (context || root).find(selector);

          // HANDLE: $(expr, context)
          // (which is just equivalent to: $(context).find(expr)
        } else {
          return this.constructor(context).find(selector);
        }

        // HANDLE: $(DOMElement)
      } else if (selector.nodeType) {
        this[0] = selector;
        this.length = 1;
        return this;

        // HANDLE: $(function)
        // Shortcut for document ready
      } else if (isFunction(selector)) {
        return root.ready !== undefined
          ? root.ready(selector)
          : // Execute immediately if ready is not present
            selector(jQuery);
      }

      return jQuery.makeArray(selector, this);
    });

  // Give the init function the jQuery prototype for later instantiation
  init.prototype = jQuery.fn;

  // Initialize central reference
  rootjQuery = jQuery(document);

  var rparentsprev = /^(?:parents|prev(?:Until|All))/,
    // Methods guaranteed to produce a unique set when starting from a unique set
    guaranteedUnique = {
      children: true,
      contents: true,
      next: true,
      prev: true,
    };

  jQuery.fn.extend({
    has: function (target) {
      var targets = jQuery(target, this),
        l = targets.length;

      return this.filter(function () {
        var i = 0;
        for (; i < l; i++) {
          if (jQuery.contains(this, targets[i])) {
            return true;
          }
        }
      });
    },

    closest: function (selectors, context) {
      var cur,
        i = 0,
        l = this.length,
        matched = [],
        targets = typeof selectors !== "string" && jQuery(selectors);

      // Positional selectors never match, since there's no _selection_ context
      if (!rneedsContext.test(selectors)) {
        for (; i < l; i++) {
          for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
            // Always skip document fragments
            if (
              cur.nodeType < 11 &&
              (targets
                ? targets.index(cur) > -1
                : // Don't pass non-elements to Sizzle
                  cur.nodeType === 1 &&
                  jQuery.find.matchesSelector(cur, selectors))
            ) {
              matched.push(cur);
              break;
            }
          }
        }
      }

      return this.pushStack(
        matched.length > 1 ? jQuery.uniqueSort(matched) : matched
      );
    },

    // Determine the position of an element within the set
    index: function (elem) {
      // No argument, return index in parent
      if (!elem) {
        return this[0] && this[0].parentNode
          ? this.first().prevAll().length
          : -1;
      }

      // Index in selector
      if (typeof elem === "string") {
        return indexOf.call(jQuery(elem), this[0]);
      }

      // Locate the position of the desired element
      return indexOf.call(
        this,

        // If it receives a jQuery object, the first element is used
        elem.jquery ? elem[0] : elem
      );
    },

    add: function (selector, context) {
      return this.pushStack(
        jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context)))
      );
    },

    addBack: function (selector) {
      return this.add(
        selector == null ? this.prevObject : this.prevObject.filter(selector)
      );
    },
  });

  function sibling(cur, dir) {
    while ((cur = cur[dir]) && cur.nodeType !== 1) {}
    return cur;
  }

  jQuery.each(
    {
      parent: function (elem) {
        var parent = elem.parentNode;
        return parent && parent.nodeType !== 11 ? parent : null;
      },
      parents: function (elem) {
        return dir(elem, "parentNode");
      },
      parentsUntil: function (elem, _i, until) {
        return dir(elem, "parentNode", until);
      },
      next: function (elem) {
        return sibling(elem, "nextSibling");
      },
      prev: function (elem) {
        return sibling(elem, "previousSibling");
      },
      nextAll: function (elem) {
        return dir(elem, "nextSibling");
      },
      prevAll: function (elem) {
        return dir(elem, "previousSibling");
      },
      nextUntil: function (elem, _i, until) {
        return dir(elem, "nextSibling", until);
      },
      prevUntil: function (elem, _i, until) {
        return dir(elem, "previousSibling", until);
      },
      siblings: function (elem) {
        return siblings((elem.parentNode || {}).firstChild, elem);
      },
      children: function (elem) {
        return siblings(elem.firstChild);
      },
      contents: function (elem) {
        if (
          elem.contentDocument != null &&
          // Support: IE 11+
          // <object> elements with no `data` attribute has an object
          // `contentDocument` with a `null` prototype.
          getProto(elem.contentDocument)
        ) {
          return elem.contentDocument;
        }

        // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
        // Treat the template element as a regular one in browsers that
        // don't support it.
        if (nodeName(elem, "template")) {
          elem = elem.content || elem;
        }

        return jQuery.merge([], elem.childNodes);
      },
    },
    function (name, fn) {
      jQuery.fn[name] = function (until, selector) {
        var matched = jQuery.map(this, fn, until);

        if (name.slice(-5) !== "Until") {
          selector = until;
        }

        if (selector && typeof selector === "string") {
          matched = jQuery.filter(selector, matched);
        }

        if (this.length > 1) {
          // Remove duplicates
          if (!guaranteedUnique[name]) {
            jQuery.uniqueSort(matched);
          }

          // Reverse order for parents* and prev-derivatives
          if (rparentsprev.test(name)) {
            matched.reverse();
          }
        }

        return this.pushStack(matched);
      };
    }
  );
  var rnothtmlwhite = /[^\x20\t\r\n\f]+/g;

  // Convert String-formatted options into Object-formatted ones
  function createOptions(options) {
    var object = {};
    jQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {
      object[flag] = true;
    });
    return object;
  }

  /*
   * Create a callback list using the following parameters:
   *
   *	options: an optional list of space-separated options that will change how
   *			the callback list behaves or a more traditional option object
   *
   * By default a callback list will act like an event callback list and can be
   * "fired" multiple times.
   *
   * Possible options:
   *
   *	once:			will ensure the callback list can only be fired once (like a Deferred)
   *
   *	memory:			will keep track of previous values and will call any callback added
   *					after the list has been fired right away with the latest "memorized"
   *					values (like a Deferred)
   *
   *	unique:			will ensure a callback can only be added once (no duplicate in the list)
   *
   *	stopOnFalse:	interrupt callings when a callback returns false
   *
   */
  jQuery.Callbacks = function (options) {
    // Convert options from String-formatted to Object-formatted if needed
    // (we check in cache first)
    options =
      typeof options === "string"
        ? createOptions(options)
        : jQuery.extend({}, options);

    var // Flag to know if list is currently firing
      firing,
      // Last fire value for non-forgettable lists
      memory,
      // Flag to know if list was already fired
      fired,
      // Flag to prevent firing
      locked,
      // Actual callback list
      list = [],
      // Queue of execution data for repeatable lists
      queue = [],
      // Index of currently firing callback (modified by add/remove as needed)
      firingIndex = -1,
      // Fire callbacks
      fire = function () {
        // Enforce single-firing
        locked = locked || options.once;

        // Execute callbacks for all pending executions,
        // respecting firingIndex overrides and runtime changes
        fired = firing = true;
        for (; queue.length; firingIndex = -1) {
          memory = queue.shift();
          while (++firingIndex < list.length) {
            // Run callback and check for early termination
            if (
              list[firingIndex].apply(memory[0], memory[1]) === false &&
              options.stopOnFalse
            ) {
              // Jump to end and forget the data so .add doesn't re-fire
              firingIndex = list.length;
              memory = false;
            }
          }
        }

        // Forget the data if we're done with it
        if (!options.memory) {
          memory = false;
        }

        firing = false;

        // Clean up if we're done firing for good
        if (locked) {
          // Keep an empty list if we have data for future add calls
          if (memory) {
            list = [];

            // Otherwise, this object is spent
          } else {
            list = "";
          }
        }
      },
      // Actual Callbacks object
      self = {
        // Add a callback or a collection of callbacks to the list
        add: function () {
          if (list) {
            // If we have memory from a past run, we should fire after adding
            if (memory && !firing) {
              firingIndex = list.length - 1;
              queue.push(memory);
            }

            (function add(args) {
              jQuery.each(args, function (_, arg) {
                if (isFunction(arg)) {
                  if (!options.unique || !self.has(arg)) {
                    list.push(arg);
                  }
                } else if (arg && arg.length && toType(arg) !== "string") {
                  // Inspect recursively
                  add(arg);
                }
              });
            })(arguments);

            if (memory && !firing) {
              fire();
            }
          }
          return this;
        },

        // Remove a callback from the list
        remove: function () {
          jQuery.each(arguments, function (_, arg) {
            var index;
            while ((index = jQuery.inArray(arg, list, index)) > -1) {
              list.splice(index, 1);

              // Handle firing indexes
              if (index <= firingIndex) {
                firingIndex--;
              }
            }
          });
          return this;
        },

        // Check if a given callback is in the list.
        // If no argument is given, return whether or not list has callbacks attached.
        has: function (fn) {
          return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
        },

        // Remove all callbacks from the list
        empty: function () {
          if (list) {
            list = [];
          }
          return this;
        },

        // Disable .fire and .add
        // Abort any current/pending executions
        // Clear all callbacks and values
        disable: function () {
          locked = queue = [];
          list = memory = "";
          return this;
        },
        disabled: function () {
          return !list;
        },

        // Disable .fire
        // Also disable .add unless we have memory (since it would have no effect)
        // Abort any pending executions
        lock: function () {
          locked = queue = [];
          if (!memory && !firing) {
            list = memory = "";
          }
          return this;
        },
        locked: function () {
          return !!locked;
        },

        // Call all callbacks with the given context and arguments
        fireWith: function (context, args) {
          if (!locked) {
            args = args || [];
            args = [context, args.slice ? args.slice() : args];
            queue.push(args);
            if (!firing) {
              fire();
            }
          }
          return this;
        },

        // Call all the callbacks with the given arguments
        fire: function () {
          self.fireWith(this, arguments);
          return this;
        },

        // To know if the callbacks have already been called at least once
        fired: function () {
          return !!fired;
        },
      };

    return self;
  };

  function Identity(v) {
    return v;
  }
  function Thrower(ex) {
    throw ex;
  }

  function adoptValue(value, resolve, reject, noValue) {
    var method;

    try {
      // Check for promise aspect first to privilege synchronous behavior
      if (value && isFunction((method = value.promise))) {
        method.call(value).done(resolve).fail(reject);

        // Other thenables
      } else if (value && isFunction((method = value.then))) {
        method.call(value, resolve, reject);

        // Other non-thenables
      } else {
        // Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
        // * false: [ value ].slice( 0 ) => resolve( value )
        // * true: [ value ].slice( 1 ) => resolve()
        resolve.apply(undefined, [value].slice(noValue));
      }

      // For Promises/A+, convert exceptions into rejections
      // Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
      // Deferred#then to conditionally suppress rejection.
    } catch (value) {
      // Support: Android 4.0 only
      // Strict mode functions invoked without .call/.apply get global-object context
      reject.apply(undefined, [value]);
    }
  }

  jQuery.extend({
    Deferred: function (func) {
      var tuples = [
          // action, add listener, callbacks,
          // ... .then handlers, argument index, [final state]
          [
            "notify",
            "progress",
            jQuery.Callbacks("memory"),
            jQuery.Callbacks("memory"),
            2,
          ],
          [
            "resolve",
            "done",
            jQuery.Callbacks("once memory"),
            jQuery.Callbacks("once memory"),
            0,
            "resolved",
          ],
          [
            "reject",
            "fail",
            jQuery.Callbacks("once memory"),
            jQuery.Callbacks("once memory"),
            1,
            "rejected",
          ],
        ],
        state = "pending",
        promise = {
          state: function () {
            return state;
          },
          always: function () {
            deferred.done(arguments).fail(arguments);
            return this;
          },
          catch: function (fn) {
            return promise.then(null, fn);
          },

          // Keep pipe for back-compat
          pipe: function (/* fnDone, fnFail, fnProgress */) {
            var fns = arguments;

            return jQuery
              .Deferred(function (newDefer) {
                jQuery.each(tuples, function (_i, tuple) {
                  // Map tuples (progress, done, fail) to arguments (done, fail, progress)
                  var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]];

                  // deferred.progress(function() { bind to newDefer or newDefer.notify })
                  // deferred.done(function() { bind to newDefer or newDefer.resolve })
                  // deferred.fail(function() { bind to newDefer or newDefer.reject })
                  deferred[tuple[1]](function () {
                    var returned = fn && fn.apply(this, arguments);
                    if (returned && isFunction(returned.promise)) {
                      returned
                        .promise()
                        .progress(newDefer.notify)
                        .done(newDefer.resolve)
                        .fail(newDefer.reject);
                    } else {
                      newDefer[tuple[0] + "With"](
                        this,
                        fn ? [returned] : arguments
                      );
                    }
                  });
                });
                fns = null;
              })
              .promise();
          },
          then: function (onFulfilled, onRejected, onProgress) {
            var maxDepth = 0;
            function resolve(depth, deferred, handler, special) {
              return function () {
                var that = this,
                  args = arguments,
                  mightThrow = function () {
                    var returned, then;

                    // Support: Promises/A+ section 2.3.3.3.3
                    // https://promisesaplus.com/#point-59
                    // Ignore double-resolution attempts
                    if (depth < maxDepth) {
                      return;
                    }

                    returned = handler.apply(that, args);

                    // Support: Promises/A+ section 2.3.1
                    // https://promisesaplus.com/#point-48
                    if (returned === deferred.promise()) {
                      throw new TypeError("Thenable self-resolution");
                    }

                    // Support: Promises/A+ sections 2.3.3.1, 3.5
                    // https://promisesaplus.com/#point-54
                    // https://promisesaplus.com/#point-75
                    // Retrieve `then` only once
                    then =
                      returned &&
                      // Support: Promises/A+ section 2.3.4
                      // https://promisesaplus.com/#point-64
                      // Only check objects and functions for thenability
                      (typeof returned === "object" ||
                        typeof returned === "function") &&
                      returned.then;

                    // Handle a returned thenable
                    if (isFunction(then)) {
                      // Special processors (notify) just wait for resolution
                      if (special) {
                        then.call(
                          returned,
                          resolve(maxDepth, deferred, Identity, special),
                          resolve(maxDepth, deferred, Thrower, special)
                        );

                        // Normal processors (resolve) also hook into progress
                      } else {
                        // ...and disregard older resolution values
                        maxDepth++;

                        then.call(
                          returned,
                          resolve(maxDepth, deferred, Identity, special),
                          resolve(maxDepth, deferred, Thrower, special),
                          resolve(
                            maxDepth,
                            deferred,
                            Identity,
                            deferred.notifyWith
                          )
                        );
                      }

                      // Handle all other returned values
                    } else {
                      // Only substitute handlers pass on context
                      // and multiple values (non-spec behavior)
                      if (handler !== Identity) {
                        that = undefined;
                        args = [returned];
                      }

                      // Process the value(s)
                      // Default process is resolve
                      (special || deferred.resolveWith)(that, args);
                    }
                  },
                  // Only normal processors (resolve) catch and reject exceptions
                  process = special
                    ? mightThrow
                    : function () {
                        try {
                          mightThrow();
                        } catch (e) {
                          if (jQuery.Deferred.exceptionHook) {
                            jQuery.Deferred.exceptionHook(
                              e,
                              process.stackTrace
                            );
                          }

                          // Support: Promises/A+ section 2.3.3.3.4.1
                          // https://promisesaplus.com/#point-61
                          // Ignore post-resolution exceptions
                          if (depth + 1 >= maxDepth) {
                            // Only substitute handlers pass on context
                            // and multiple values (non-spec behavior)
                            if (handler !== Thrower) {
                              that = undefined;
                              args = [e];
                            }

                            deferred.rejectWith(that, args);
                          }
                        }
                      };

                // Support: Promises/A+ section 2.3.3.3.1
                // https://promisesaplus.com/#point-57
                // Re-resolve promises immediately to dodge false rejection from
                // subsequent errors
                if (depth) {
                  process();
                } else {
                  // Call an optional hook to record the stack, in case of exception
                  // since it's otherwise lost when execution goes async
                  if (jQuery.Deferred.getStackHook) {
                    process.stackTrace = jQuery.Deferred.getStackHook();
                  }
                  window.setTimeout(process);
                }
              };
            }

            return jQuery
              .Deferred(function (newDefer) {
                // progress_handlers.add( ... )
                tuples[0][3].add(
                  resolve(
                    0,
                    newDefer,
                    isFunction(onProgress) ? onProgress : Identity,
                    newDefer.notifyWith
                  )
                );

                // fulfilled_handlers.add( ... )
                tuples[1][3].add(
                  resolve(
                    0,
                    newDefer,
                    isFunction(onFulfilled) ? onFulfilled : Identity
                  )
                );

                // rejected_handlers.add( ... )
                tuples[2][3].add(
                  resolve(
                    0,
                    newDefer,
                    isFunction(onRejected) ? onRejected : Thrower
                  )
                );
              })
              .promise();
          },

          // Get a promise for this deferred
          // If obj is provided, the promise aspect is added to the object
          promise: function (obj) {
            return obj != null ? jQuery.extend(obj, promise) : promise;
          },
        },
        deferred = {};

      // Add list-specific methods
      jQuery.each(tuples, function (i, tuple) {
        var list = tuple[2],
          stateString = tuple[5];

        // promise.progress = list.add
        // promise.done = list.add
        // promise.fail = list.add
        promise[tuple[1]] = list.add;

        // Handle state
        if (stateString) {
          list.add(
            function () {
              // state = "resolved" (i.e., fulfilled)
              // state = "rejected"
              state = stateString;
            },

            // rejected_callbacks.disable
            // fulfilled_callbacks.disable
            tuples[3 - i][2].disable,

            // rejected_handlers.disable
            // fulfilled_handlers.disable
            tuples[3 - i][3].disable,

            // progress_callbacks.lock
            tuples[0][2].lock,

            // progress_handlers.lock
            tuples[0][3].lock
          );
        }

        // progress_handlers.fire
        // fulfilled_handlers.fire
        // rejected_handlers.fire
        list.add(tuple[3].fire);

        // deferred.notify = function() { deferred.notifyWith(...) }
        // deferred.resolve = function() { deferred.resolveWith(...) }
        // deferred.reject = function() { deferred.rejectWith(...) }
        deferred[tuple[0]] = function () {
          deferred[tuple[0] + "With"](
            this === deferred ? undefined : this,
            arguments
          );
          return this;
        };

        // deferred.notifyWith = list.fireWith
        // deferred.resolveWith = list.fireWith
        // deferred.rejectWith = list.fireWith
        deferred[tuple[0] + "With"] = list.fireWith;
      });

      // Make the deferred a promise
      promise.promise(deferred);

      // Call given func if any
      if (func) {
        func.call(deferred, deferred);
      }

      // All done!
      return deferred;
    },

    // Deferred helper
    when: function (singleValue) {
      var // count of uncompleted subordinates
        remaining = arguments.length,
        // count of unprocessed arguments
        i = remaining,
        // subordinate fulfillment data
        resolveContexts = Array(i),
        resolveValues = slice.call(arguments),
        // the primary Deferred
        primary = jQuery.Deferred(),
        // subordinate callback factory
        updateFunc = function (i) {
          return function (value) {
            resolveContexts[i] = this;
            resolveValues[i] =
              arguments.length > 1 ? slice.call(arguments) : value;
            if (!--remaining) {
              primary.resolveWith(resolveContexts, resolveValues);
            }
          };
        };

      // Single- and empty arguments are adopted like Promise.resolve
      if (remaining <= 1) {
        adoptValue(
          singleValue,
          primary.done(updateFunc(i)).resolve,
          primary.reject,
          !remaining
        );

        // Use .then() to unwrap secondary thenables (cf. gh-3000)
        if (
          primary.state() === "pending" ||
          isFunction(resolveValues[i] && resolveValues[i].then)
        ) {
          return primary.then();
        }
      }

      // Multiple arguments are aggregated like Promise.all array elements
      while (i--) {
        adoptValue(resolveValues[i], updateFunc(i), primary.reject);
      }

      return primary.promise();
    },
  });

  // These usually indicate a programmer mistake during development,
  // warn about them ASAP rather than swallowing them by default.
  var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

  jQuery.Deferred.exceptionHook = function (error, stack) {
    // Support: IE 8 - 9 only
    // Console exists when dev tools are open, which can happen at any time
    if (
      window.console &&
      window.console.warn &&
      error &&
      rerrorNames.test(error.name)
    ) {
      window.console.warn(
        "jQuery.Deferred exception: " + error.message,
        error.stack,
        stack
      );
    }
  };

  jQuery.readyException = function (error) {
    window.setTimeout(function () {
      throw error;
    });
  };

  // The deferred used on DOM ready
  var readyList = jQuery.Deferred();

  jQuery.fn.ready = function (fn) {
    readyList
      .then(fn)

      // Wrap jQuery.readyException in a function so that the lookup
      // happens at the time of error handling instead of callback
      // registration.
      .catch(function (error) {
        jQuery.readyException(error);
      });

    return this;
  };

  jQuery.extend({
    // Is the DOM ready to be used? Set to true once it occurs.
    isReady: false,

    // A counter to track how many items to wait for before
    // the ready event fires. See trac-6781
    readyWait: 1,

    // Handle when the DOM is ready
    ready: function (wait) {
      // Abort if there are pending holds or we're already ready
      if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
        return;
      }

      // Remember that the DOM is ready
      jQuery.isReady = true;

      // If a normal DOM Ready event fired, decrement, and wait if need be
      if (wait !== true && --jQuery.readyWait > 0) {
        return;
      }

      // If there are functions bound, to execute
      readyList.resolveWith(document, [jQuery]);
    },
  });

  jQuery.ready.then = readyList.then;

  // The ready event handler and self cleanup method
  function completed() {
    document.removeEventListener("DOMContentLoaded", completed);
    window.removeEventListener("load", completed);
    jQuery.ready();
  }

  // Catch cases where $(document).ready() is called
  // after the browser event has already occurred.
  // Support: IE <=9 - 10 only
  // Older IE sometimes signals "interactive" too soon
  if (
    document.readyState === "complete" ||
    (document.readyState !== "loading" && !document.documentElement.doScroll)
  ) {
    // Handle it asynchronously to allow scripts the opportunity to delay ready
    window.setTimeout(jQuery.ready);
  } else {
    // Use the handy event callback
    document.addEventListener("DOMContentLoaded", completed);

    // A fallback to window.onload, that will always work
    window.addEventListener("load", completed);
  }

  // Multifunctional method to get and set values of a collection
  // The value/s can optionally be executed if it's a function
  var access = function (elems, fn, key, value, chainable, emptyGet, raw) {
    var i = 0,
      len = elems.length,
      bulk = key == null;

    // Sets many values
    if (toType(key) === "object") {
      chainable = true;
      for (i in key) {
        access(elems, fn, i, key[i], true, emptyGet, raw);
      }

      // Sets one value
    } else if (value !== undefined) {
      chainable = true;

      if (!isFunction(value)) {
        raw = true;
      }

      if (bulk) {
        // Bulk operations run against the entire set
        if (raw) {
          fn.call(elems, value);
          fn = null;

          // ...except when executing function values
        } else {
          bulk = fn;
          fn = function (elem, _key, value) {
            return bulk.call(jQuery(elem), value);
          };
        }
      }

      if (fn) {
        for (; i < len; i++) {
          fn(
            elems[i],
            key,
            raw ? value : value.call(elems[i], i, fn(elems[i], key))
          );
        }
      }
    }

    if (chainable) {
      return elems;
    }

    // Gets
    if (bulk) {
      return fn.call(elems);
    }

    return len ? fn(elems[0], key) : emptyGet;
  };

  // Matches dashed string for camelizing
  var rmsPrefix = /^-ms-/,
    rdashAlpha = /-([a-z])/g;

  // Used by camelCase as callback to replace()
  function fcamelCase(_all, letter) {
    return letter.toUpperCase();
  }

  // Convert dashed to camelCase; used by the css and data modules
  // Support: IE <=9 - 11, Edge 12 - 15
  // Microsoft forgot to hump their vendor prefix (trac-9572)
  function camelCase(string) {
    return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
  }
  var acceptData = function (owner) {
    // Accepts only:
    //  - Node
    //    - Node.ELEMENT_NODE
    //    - Node.DOCUMENT_NODE
    //  - Object
    //    - Any
    return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
  };

  function Data() {
    this.expando = jQuery.expando + Data.uid++;
  }

  Data.uid = 1;

  Data.prototype = {
    cache: function (owner) {
      // Check if the owner object already has a cache
      var value = owner[this.expando];

      // If not, create one
      if (!value) {
        value = {};

        // We can accept data for non-element nodes in modern browsers,
        // but we should not, see trac-8335.
        // Always return an empty object.
        if (acceptData(owner)) {
          // If it is a node unlikely to be stringify-ed or looped over
          // use plain assignment
          if (owner.nodeType) {
            owner[this.expando] = value;

            // Otherwise secure it in a non-enumerable property
            // configurable must be true to allow the property to be
            // deleted when data is removed
          } else {
            Object.defineProperty(owner, this.expando, {
              value: value,
              configurable: true,
            });
          }
        }
      }

      return value;
    },
    set: function (owner, data, value) {
      var prop,
        cache = this.cache(owner);

      // Handle: [ owner, key, value ] args
      // Always use camelCase key (gh-2257)
      if (typeof data === "string") {
        cache[camelCase(data)] = value;

        // Handle: [ owner, { properties } ] args
      } else {
        // Copy the properties one-by-one to the cache object
        for (prop in data) {
          cache[camelCase(prop)] = data[prop];
        }
      }
      return cache;
    },
    get: function (owner, key) {
      return key === undefined
        ? this.cache(owner)
        : // Always use camelCase key (gh-2257)
          owner[this.expando] && owner[this.expando][camelCase(key)];
    },
    access: function (owner, key, value) {
      // In cases where either:
      //
      //   1. No key was specified
      //   2. A string key was specified, but no value provided
      //
      // Take the "read" path and allow the get method to determine
      // which value to return, respectively either:
      //
      //   1. The entire cache object
      //   2. The data stored at the key
      //
      if (
        key === undefined ||
        (key && typeof key === "string" && value === undefined)
      ) {
        return this.get(owner, key);
      }

      // When the key is not a string, or both a key and value
      // are specified, set or extend (existing objects) with either:
      //
      //   1. An object of properties
      //   2. A key and value
      //
      this.set(owner, key, value);

      // Since the "set" path can have two possible entry points
      // return the expected data based on which path was taken[*]
      return value !== undefined ? value : key;
    },
    remove: function (owner, key) {
      var i,
        cache = owner[this.expando];

      if (cache === undefined) {
        return;
      }

      if (key !== undefined) {
        // Support array or space separated string of keys
        if (Array.isArray(key)) {
          // If key is an array of keys...
          // We always set camelCase keys, so remove that.
          key = key.map(camelCase);
        } else {
          key = camelCase(key);

          // If a key with the spaces exists, use it.
          // Otherwise, create an array by matching non-whitespace
          key = key in cache ? [key] : key.match(rnothtmlwhite) || [];
        }

        i = key.length;

        while (i--) {
          delete cache[key[i]];
        }
      }

      // Remove the expando if there's no more data
      if (key === undefined || jQuery.isEmptyObject(cache)) {
        // Support: Chrome <=35 - 45
        // Webkit & Blink performance suffers when deleting properties
        // from DOM nodes, so set to undefined instead
        // https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
        if (owner.nodeType) {
          owner[this.expando] = undefined;
        } else {
          delete owner[this.expando];
        }
      }
    },
    hasData: function (owner) {
      var cache = owner[this.expando];
      return cache !== undefined && !jQuery.isEmptyObject(cache);
    },
  };
  var dataPriv = new Data();

  var dataUser = new Data();

  //	Implementation Summary
  //
  //	1. Enforce API surface and semantic compatibility with 1.9.x branch
  //	2. Improve the module's maintainability by reducing the storage
  //		paths to a single mechanism.
  //	3. Use the same single mechanism to support "private" and "user" data.
  //	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
  //	5. Avoid exposing implementation details on user objects (eg. expando properties)
  //	6. Provide a clear path for implementation upgrade to WeakMap in 2014

  var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
    rmultiDash = /[A-Z]/g;

  function getData(data) {
    if (data === "true") {
      return true;
    }

    if (data === "false") {
      return false;
    }

    if (data === "null") {
      return null;
    }

    // Only convert to a number if it doesn't change the string
    if (data === +data + "") {
      return +data;
    }

    if (rbrace.test(data)) {
      return JSON.parse(data);
    }

    return data;
  }

  function dataAttr(elem, key, data) {
    var name;

    // If nothing was found internally, try to fetch any
    // data from the HTML5 data-* attribute
    if (data === undefined && elem.nodeType === 1) {
      name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
      data = elem.getAttribute(name);

      if (typeof data === "string") {
        try {
          data = getData(data);
        } catch (e) {}

        // Make sure we set the data so it isn't changed later
        dataUser.set(elem, key, data);
      } else {
        data = undefined;
      }
    }
    return data;
  }

  jQuery.extend({
    hasData: function (elem) {
      return dataUser.hasData(elem) || dataPriv.hasData(elem);
    },

    data: function (elem, name, data) {
      return dataUser.access(elem, name, data);
    },

    removeData: function (elem, name) {
      dataUser.remove(elem, name);
    },

    // TODO: Now that all calls to _data and _removeData have been replaced
    // with direct calls to dataPriv methods, these can be deprecated.
    _data: function (elem, name, data) {
      return dataPriv.access(elem, name, data);
    },

    _removeData: function (elem, name) {
      dataPriv.remove(elem, name);
    },
  });

  jQuery.fn.extend({
    data: function (key, value) {
      var i,
        name,
        data,
        elem = this[0],
        attrs = elem && elem.attributes;

      // Gets all values
      if (key === undefined) {
        if (this.length) {
          data = dataUser.get(elem);

          if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
            i = attrs.length;
            while (i--) {
              // Support: IE 11 only
              // The attrs elements can be null (trac-14894)
              if (attrs[i]) {
                name = attrs[i].name;
                if (name.indexOf("data-") === 0) {
                  name = camelCase(name.slice(5));
                  dataAttr(elem, name, data[name]);
                }
              }
            }
            dataPriv.set(elem, "hasDataAttrs", true);
          }
        }

        return data;
      }

      // Sets multiple values
      if (typeof key === "object") {
        return this.each(function () {
          dataUser.set(this, key);
        });
      }

      return access(
        this,
        function (value) {
          var data;

          // The calling jQuery object (element matches) is not empty
          // (and therefore has an element appears at this[ 0 ]) and the
          // `value` parameter was not undefined. An empty jQuery object
          // will result in `undefined` for elem = this[ 0 ] which will
          // throw an exception if an attempt to read a data cache is made.
          if (elem && value === undefined) {
            // Attempt to get data from the cache
            // The key will always be camelCased in Data
            data = dataUser.get(elem, key);
            if (data !== undefined) {
              return data;
            }

            // Attempt to "discover" the data in
            // HTML5 custom data-* attrs
            data = dataAttr(elem, key);
            if (data !== undefined) {
              return data;
            }

            // We tried really hard, but the data doesn't exist.
            return;
          }

          // Set the data...
          this.each(function () {
            // We always store the camelCased key
            dataUser.set(this, key, value);
          });
        },
        null,
        value,
        arguments.length > 1,
        null,
        true
      );
    },

    removeData: function (key) {
      return this.each(function () {
        dataUser.remove(this, key);
      });
    },
  });

  jQuery.extend({
    queue: function (elem, type, data) {
      var queue;

      if (elem) {
        type = (type || "fx") + "queue";
        queue = dataPriv.get(elem, type);

        // Speed up dequeue by getting out quickly if this is just a lookup
        if (data) {
          if (!queue || Array.isArray(data)) {
            queue = dataPriv.access(elem, type, jQuery.makeArray(data));
          } else {
            queue.push(data);
          }
        }
        return queue || [];
      }
    },

    dequeue: function (elem, type) {
      type = type || "fx";

      var queue = jQuery.queue(elem, type),
        startLength = queue.length,
        fn = queue.shift(),
        hooks = jQuery._queueHooks(elem, type),
        next = function () {
          jQuery.dequeue(elem, type);
        };

      // If the fx queue is dequeued, always remove the progress sentinel
      if (fn === "inprogress") {
        fn = queue.shift();
        startLength--;
      }

      if (fn) {
        // Add a progress sentinel to prevent the fx queue from being
        // automatically dequeued
        if (type === "fx") {
          queue.unshift("inprogress");
        }

        // Clear up the last queue stop function
        delete hooks.stop;
        fn.call(elem, next, hooks);
      }

      if (!startLength && hooks) {
        hooks.empty.fire();
      }
    },

    // Not public - generate a queueHooks object, or return the current one
    _queueHooks: function (elem, type) {
      var key = type + "queueHooks";
      return (
        dataPriv.get(elem, key) ||
        dataPriv.access(elem, key, {
          empty: jQuery.Callbacks("once memory").add(function () {
            dataPriv.remove(elem, [type + "queue", key]);
          }),
        })
      );
    },
  });

  jQuery.fn.extend({
    queue: function (type, data) {
      var setter = 2;

      if (typeof type !== "string") {
        data = type;
        type = "fx";
        setter--;
      }

      if (arguments.length < setter) {
        return jQuery.queue(this[0], type);
      }

      return data === undefined
        ? this
        : this.each(function () {
            var queue = jQuery.queue(this, type, data);

            // Ensure a hooks for this queue
            jQuery._queueHooks(this, type);

            if (type === "fx" && queue[0] !== "inprogress") {
              jQuery.dequeue(this, type);
            }
          });
    },
    dequeue: function (type) {
      return this.each(function () {
        jQuery.dequeue(this, type);
      });
    },
    clearQueue: function (type) {
      return this.queue(type || "fx", []);
    },

    // Get a promise resolved when queues of a certain type
    // are emptied (fx is the type by default)
    promise: function (type, obj) {
      var tmp,
        count = 1,
        defer = jQuery.Deferred(),
        elements = this,
        i = this.length,
        resolve = function () {
          if (!--count) {
            defer.resolveWith(elements, [elements]);
          }
        };

      if (typeof type !== "string") {
        obj = type;
        type = undefined;
      }
      type = type || "fx";

      while (i--) {
        tmp = dataPriv.get(elements[i], type + "queueHooks");
        if (tmp && tmp.empty) {
          count++;
          tmp.empty.add(resolve);
        }
      }
      resolve();
      return defer.promise(obj);
    },
  });
  var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;

  var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");

  var cssExpand = ["Top", "Right", "Bottom", "Left"];

  var documentElement = document.documentElement;

  var isAttached = function (elem) {
      return jQuery.contains(elem.ownerDocument, elem);
    },
    composed = { composed: true };

  // Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
  // Check attachment across shadow DOM boundaries when possible (gh-3504)
  // Support: iOS 10.0-10.2 only
  // Early iOS 10 versions support `attachShadow` but not `getRootNode`,
  // leading to errors. We need to check for `getRootNode`.
  if (documentElement.getRootNode) {
    isAttached = function (elem) {
      return (
        jQuery.contains(elem.ownerDocument, elem) ||
        elem.getRootNode(composed) === elem.ownerDocument
      );
    };
  }
  var isHiddenWithinTree = function (elem, el) {
    // isHiddenWithinTree might be called from jQuery#filter function;
    // in that case, element will be second argument
    elem = el || elem;

    // Inline style trumps all
    return (
      elem.style.display === "none" ||
      (elem.style.display === "" &&
        // Otherwise, check computed style
        // Support: Firefox <=43 - 45
        // Disconnected elements can have computed display: none, so first confirm that elem is
        // in the document.
        isAttached(elem) &&
        jQuery.css(elem, "display") === "none")
    );
  };

  function adjustCSS(elem, prop, valueParts, tween) {
    var adjusted,
      scale,
      maxIterations = 20,
      currentValue = tween
        ? function () {
            return tween.cur();
          }
        : function () {
            return jQuery.css(elem, prop, "");
          },
      initial = currentValue(),
      unit =
        (valueParts && valueParts[3]) || (jQuery.cssNumber[prop] ? "" : "px"),
      // Starting value computation is required for potential unit mismatches
      initialInUnit =
        elem.nodeType &&
        (jQuery.cssNumber[prop] || (unit !== "px" && +initial)) &&
        rcssNum.exec(jQuery.css(elem, prop));

    if (initialInUnit && initialInUnit[3] !== unit) {
      // Support: Firefox <=54
      // Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
      initial = initial / 2;

      // Trust units reported by jQuery.css
      unit = unit || initialInUnit[3];

      // Iteratively approximate from a nonzero starting point
      initialInUnit = +initial || 1;

      while (maxIterations--) {
        // Evaluate and update our best guess (doubling guesses that zero out).
        // Finish if the scale equals or crosses 1 (making the old*new product non-positive).
        jQuery.style(elem, prop, initialInUnit + unit);
        if (
          (1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <=
          0
        ) {
          maxIterations = 0;
        }
        initialInUnit = initialInUnit / scale;
      }

      initialInUnit = initialInUnit * 2;
      jQuery.style(elem, prop, initialInUnit + unit);

      // Make sure we update the tween properties later on
      valueParts = valueParts || [];
    }

    if (valueParts) {
      initialInUnit = +initialInUnit || +initial || 0;

      // Apply relative offset (+=/-=) if specified
      adjusted = valueParts[1]
        ? initialInUnit + (valueParts[1] + 1) * valueParts[2]
        : +valueParts[2];
      if (tween) {
        tween.unit = unit;
        tween.start = initialInUnit;
        tween.end = adjusted;
      }
    }
    return adjusted;
  }

  var defaultDisplayMap = {};

  function getDefaultDisplay(elem) {
    var temp,
      doc = elem.ownerDocument,
      nodeName = elem.nodeName,
      display = defaultDisplayMap[nodeName];

    if (display) {
      return display;
    }

    temp = doc.body.appendChild(doc.createElement(nodeName));
    display = jQuery.css(temp, "display");

    temp.parentNode.removeChild(temp);

    if (display === "none") {
      display = "block";
    }
    defaultDisplayMap[nodeName] = display;

    return display;
  }

  function showHide(elements, show) {
    var display,
      elem,
      values = [],
      index = 0,
      length = elements.length;

    // Determine new display value for elements that need to change
    for (; index < length; index++) {
      elem = elements[index];
      if (!elem.style) {
        continue;
      }

      display = elem.style.display;
      if (show) {
        // Since we force visibility upon cascade-hidden elements, an immediate (and slow)
        // check is required in this first loop unless we have a nonempty display value (either
        // inline or about-to-be-restored)
        if (display === "none") {
          values[index] = dataPriv.get(elem, "display") || null;
          if (!values[index]) {
            elem.style.display = "";
          }
        }
        if (elem.style.display === "" && isHiddenWithinTree(elem)) {
          values[index] = getDefaultDisplay(elem);
        }
      } else {
        if (display !== "none") {
          values[index] = "none";

          // Remember what we're overwriting
          dataPriv.set(elem, "display", display);
        }
      }
    }

    // Set the display of the elements in a second loop to avoid constant reflow
    for (index = 0; index < length; index++) {
      if (values[index] != null) {
        elements[index].style.display = values[index];
      }
    }

    return elements;
  }

  jQuery.fn.extend({
    show: function () {
      return showHide(this, true);
    },
    hide: function () {
      return showHide(this);
    },
    toggle: function (state) {
      if (typeof state === "boolean") {
        return state ? this.show() : this.hide();
      }

      return this.each(function () {
        if (isHiddenWithinTree(this)) {
          jQuery(this).show();
        } else {
          jQuery(this).hide();
        }
      });
    },
  });
  var rcheckableType = /^(?:checkbox|radio)$/i;

  var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i;

  var rscriptType = /^$|^module$|\/(?:java|ecma)script/i;

  (function () {
    var fragment = document.createDocumentFragment(),
      div = fragment.appendChild(document.createElement("div")),
      input = document.createElement("input");

    // Support: Android 4.0 - 4.3 only
    // Check state lost if the name is set (trac-11217)
    // Support: Windows Web Apps (WWA)
    // `name` and `type` must use .setAttribute for WWA (trac-14901)
    input.setAttribute("type", "radio");
    input.setAttribute("checked", "checked");
    input.setAttribute("name", "t");

    div.appendChild(input);

    // Support: Android <=4.1 only
    // Older WebKit doesn't clone checked state correctly in fragments
    support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;

    // Support: IE <=11 only
    // Make sure textarea (and checkbox) defaultValue is properly cloned
    div.innerHTML = "<textarea>x</textarea>";
    support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;

    // Support: IE <=9 only
    // IE <=9 replaces <option> tags with their contents when inserted outside of
    // the select element.
    div.innerHTML = "<option></option>";
    support.option = !!div.lastChild;
  })();

  // We have to close these tags to support XHTML (trac-13200)
  var wrapMap = {
    // XHTML parsers do not magically insert elements in the
    // same way that tag soup parsers do. So we cannot shorten
    // this by omitting <tbody> or other required elements.
    thead: [1, "<table>", "</table>"],
    col: [2, "<table><colgroup>", "</colgroup></table>"],
    tr: [2, "<table><tbody>", "</tbody></table>"],
    td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],

    _default: [0, "", ""],
  };

  wrapMap.tbody =
    wrapMap.tfoot =
    wrapMap.colgroup =
    wrapMap.caption =
      wrapMap.thead;
  wrapMap.th = wrapMap.td;

  // Support: IE <=9 only
  if (!support.option) {
    wrapMap.optgroup = wrapMap.option = [
      1,
      "<select multiple='multiple'>",
      "</select>",
    ];
  }

  function getAll(context, tag) {
    // Support: IE <=9 - 11 only
    // Use typeof to avoid zero-argument method invocation on host objects (trac-15151)
    var ret;

    if (typeof context.getElementsByTagName !== "undefined") {
      ret = context.getElementsByTagName(tag || "*");
    } else if (typeof context.querySelectorAll !== "undefined") {
      ret = context.querySelectorAll(tag || "*");
    } else {
      ret = [];
    }

    if (tag === undefined || (tag && nodeName(context, tag))) {
      return jQuery.merge([context], ret);
    }

    return ret;
  }

  // Mark scripts as having already been evaluated
  function setGlobalEval(elems, refElements) {
    var i = 0,
      l = elems.length;

    for (; i < l; i++) {
      dataPriv.set(
        elems[i],
        "globalEval",
        !refElements || dataPriv.get(refElements[i], "globalEval")
      );
    }
  }

  var rhtml = /<|&#?\w+;/;

  function buildFragment(elems, context, scripts, selection, ignored) {
    var elem,
      tmp,
      tag,
      wrap,
      attached,
      j,
      fragment = context.createDocumentFragment(),
      nodes = [],
      i = 0,
      l = elems.length;

    for (; i < l; i++) {
      elem = elems[i];

      if (elem || elem === 0) {
        // Add nodes directly
        if (toType(elem) === "object") {
          // Support: Android <=4.0 only, PhantomJS 1 only
          // push.apply(_, arraylike) throws on ancient WebKit
          jQuery.merge(nodes, elem.nodeType ? [elem] : elem);

          // Convert non-html into a text node
        } else if (!rhtml.test(elem)) {
          nodes.push(context.createTextNode(elem));

          // Convert html into DOM nodes
        } else {
          tmp = tmp || fragment.appendChild(context.createElement("div"));

          // Deserialize a standard representation
          tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
          wrap = wrapMap[tag] || wrapMap._default;
          tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];

          // Descend through wrappers to the right content
          j = wrap[0];
          while (j--) {
            tmp = tmp.lastChild;
          }

          // Support: Android <=4.0 only, PhantomJS 1 only
          // push.apply(_, arraylike) throws on ancient WebKit
          jQuery.merge(nodes, tmp.childNodes);

          // Remember the top-level container
          tmp = fragment.firstChild;

          // Ensure the created nodes are orphaned (trac-12392)
          tmp.textContent = "";
        }
      }
    }

    // Remove wrapper from fragment
    fragment.textContent = "";

    i = 0;
    while ((elem = nodes[i++])) {
      // Skip elements already in the context collection (trac-4087)
      if (selection && jQuery.inArray(elem, selection) > -1) {
        if (ignored) {
          ignored.push(elem);
        }
        continue;
      }

      attached = isAttached(elem);

      // Append to fragment
      tmp = getAll(fragment.appendChild(elem), "script");

      // Preserve script evaluation history
      if (attached) {
        setGlobalEval(tmp);
      }

      // Capture executables
      if (scripts) {
        j = 0;
        while ((elem = tmp[j++])) {
          if (rscriptType.test(elem.type || "")) {
            scripts.push(elem);
          }
        }
      }
    }

    return fragment;
  }

  var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

  function returnTrue() {
    return true;
  }

  function returnFalse() {
    return false;
  }

  // Support: IE <=9 - 11+
  // focus() and blur() are asynchronous, except when they are no-op.
  // So expect focus to be synchronous when the element is already active,
  // and blur to be synchronous when the element is not already active.
  // (focus and blur are always synchronous in other supported browsers,
  // this just defines when we can count on it).
  function expectSync(elem, type) {
    return (elem === safeActiveElement()) === (type === "focus");
  }

  // Support: IE <=9 only
  // Accessing document.activeElement can throw unexpectedly
  // https://bugs.jquery.com/ticket/13393
  function safeActiveElement() {
    try {
      return document.activeElement;
    } catch (err) {}
  }

  function on(elem, types, selector, data, fn, one) {
    var origFn, type;

    // Types can be a map of types/handlers
    if (typeof types === "object") {
      // ( types-Object, selector, data )
      if (typeof selector !== "string") {
        // ( types-Object, data )
        data = data || selector;
        selector = undefined;
      }
      for (type in types) {
        on(elem, type, selector, data, types[type], one);
      }
      return elem;
    }

    if (data == null && fn == null) {
      // ( types, fn )
      fn = selector;
      data = selector = undefined;
    } else if (fn == null) {
      if (typeof selector === "string") {
        // ( types, selector, fn )
        fn = data;
        data = undefined;
      } else {
        // ( types, data, fn )
        fn = data;
        data = selector;
        selector = undefined;
      }
    }
    if (fn === false) {
      fn = returnFalse;
    } else if (!fn) {
      return elem;
    }

    if (one === 1) {
      origFn = fn;
      fn = function (event) {
        // Can use an empty set, since event contains the info
        jQuery().off(event);
        return origFn.apply(this, arguments);
      };

      // Use same guid so caller can remove using origFn
      fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
    }
    return elem.each(function () {
      jQuery.event.add(this, types, fn, data, selector);
    });
  }

  /*
   * Helper functions for managing events -- not part of the public interface.
   * Props to Dean Edwards' addEvent library for many of the ideas.
   */
  jQuery.event = {
    global: {},

    add: function (elem, types, handler, data, selector) {
      var handleObjIn,
        eventHandle,
        tmp,
        events,
        t,
        handleObj,
        special,
        handlers,
        type,
        namespaces,
        origType,
        elemData = dataPriv.get(elem);

      // Only attach events to objects that accept data
      if (!acceptData(elem)) {
        return;
      }

      // Caller can pass in an object of custom data in lieu of the handler
      if (handler.handler) {
        handleObjIn = handler;
        handler = handleObjIn.handler;
        selector = handleObjIn.selector;
      }

      // Ensure that invalid selectors throw exceptions at attach time
      // Evaluate against documentElement in case elem is a non-element node (e.g., document)
      if (selector) {
        jQuery.find.matchesSelector(documentElement, selector);
      }

      // Make sure that the handler has a unique ID, used to find/remove it later
      if (!handler.guid) {
        handler.guid = jQuery.guid++;
      }

      // Init the element's event structure and main handler, if this is the first
      if (!(events = elemData.events)) {
        events = elemData.events = Object.create(null);
      }
      if (!(eventHandle = elemData.handle)) {
        eventHandle = elemData.handle = function (e) {
          // Discard the second event of a jQuery.event.trigger() and
          // when an event is called after a page has unloaded
          return typeof jQuery !== "undefined" &&
            jQuery.event.triggered !== e.type
            ? jQuery.event.dispatch.apply(elem, arguments)
            : undefined;
        };
      }

      // Handle multiple events separated by a space
      types = (types || "").match(rnothtmlwhite) || [""];
      t = types.length;
      while (t--) {
        tmp = rtypenamespace.exec(types[t]) || [];
        type = origType = tmp[1];
        namespaces = (tmp[2] || "").split(".").sort();

        // There *must* be a type, no attaching namespace-only handlers
        if (!type) {
          continue;
        }

        // If event changes its type, use the special event handlers for the changed type
        special = jQuery.event.special[type] || {};

        // If selector defined, determine special event api type, otherwise given type
        type = (selector ? special.delegateType : special.bindType) || type;

        // Update special based on newly reset type
        special = jQuery.event.special[type] || {};

        // handleObj is passed to all event handlers
        handleObj = jQuery.extend(
          {
            type: type,
            origType: origType,
            data: data,
            handler: handler,
            guid: handler.guid,
            selector: selector,
            needsContext:
              selector && jQuery.expr.match.needsContext.test(selector),
            namespace: namespaces.join("."),
          },
          handleObjIn
        );

        // Init the event handler queue if we're the first
        if (!(handlers = events[type])) {
          handlers = events[type] = [];
          handlers.delegateCount = 0;

          // Only use addEventListener if the special events handler returns false
          if (
            !special.setup ||
            special.setup.call(elem, data, namespaces, eventHandle) === false
          ) {
            if (elem.addEventListener) {
              elem.addEventListener(type, eventHandle);
            }
          }
        }

        if (special.add) {
          special.add.call(elem, handleObj);

          if (!handleObj.handler.guid) {
            handleObj.handler.guid = handler.guid;
          }
        }

        // Add to the element's handler list, delegates in front
        if (selector) {
          handlers.splice(handlers.delegateCount++, 0, handleObj);
        } else {
          handlers.push(handleObj);
        }

        // Keep track of which events have ever been used, for event optimization
        jQuery.event.global[type] = true;
      }
    },

    // Detach an event or set of events from an element
    remove: function (elem, types, handler, selector, mappedTypes) {
      var j,
        origCount,
        tmp,
        events,
        t,
        handleObj,
        special,
        handlers,
        type,
        namespaces,
        origType,
        elemData = dataPriv.hasData(elem) && dataPriv.get(elem);

      if (!elemData || !(events = elemData.events)) {
        return;
      }

      // Once for each type.namespace in types; type may be omitted
      types = (types || "").match(rnothtmlwhite) || [""];
      t = types.length;
      while (t--) {
        tmp = rtypenamespace.exec(types[t]) || [];
        type = origType = tmp[1];
        namespaces = (tmp[2] || "").split(".").sort();

        // Unbind all events (on this namespace, if provided) for the element
        if (!type) {
          for (type in events) {
            jQuery.event.remove(elem, type + types[t], handler, selector, true);
          }
          continue;
        }

        special = jQuery.event.special[type] || {};
        type = (selector ? special.delegateType : special.bindType) || type;
        handlers = events[type] || [];
        tmp =
          tmp[2] &&
          new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");

        // Remove matching events
        origCount = j = handlers.length;
        while (j--) {
          handleObj = handlers[j];

          if (
            (mappedTypes || origType === handleObj.origType) &&
            (!handler || handler.guid === handleObj.guid) &&
            (!tmp || tmp.test(handleObj.namespace)) &&
            (!selector ||
              selector === handleObj.selector ||
              (selector === "**" && handleObj.selector))
          ) {
            handlers.splice(j, 1);

            if (handleObj.selector) {
              handlers.delegateCount--;
            }
            if (special.remove) {
              special.remove.call(elem, handleObj);
            }
          }
        }

        // Remove generic event handler if we removed something and no more handlers exist
        // (avoids potential for endless recursion during removal of special event handlers)
        if (origCount && !handlers.length) {
          if (
            !special.teardown ||
            special.teardown.call(elem, namespaces, elemData.handle) === false
          ) {
            jQuery.removeEvent(elem, type, elemData.handle);
          }

          delete events[type];
        }
      }

      // Remove data and the expando if it's no longer used
      if (jQuery.isEmptyObject(events)) {
        dataPriv.remove(elem, "handle events");
      }
    },

    dispatch: function (nativeEvent) {
      var i,
        j,
        ret,
        matched,
        handleObj,
        handlerQueue,
        args = new Array(arguments.length),
        // Make a writable jQuery.Event from the native event object
        event = jQuery.event.fix(nativeEvent),
        handlers =
          (dataPriv.get(this, "events") || Object.create(null))[event.type] ||
          [],
        special = jQuery.event.special[event.type] || {};

      // Use the fix-ed jQuery.Event rather than the (read-only) native event
      args[0] = event;

      for (i = 1; i < arguments.length; i++) {
        args[i] = arguments[i];
      }

      event.delegateTarget = this;

      // Call the preDispatch hook for the mapped type, and let it bail if desired
      if (
        special.preDispatch &&
        special.preDispatch.call(this, event) === false
      ) {
        return;
      }

      // Determine handlers
      handlerQueue = jQuery.event.handlers.call(this, event, handlers);

      // Run delegates first; they may want to stop propagation beneath us
      i = 0;
      while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
        event.currentTarget = matched.elem;

        j = 0;
        while (
          (handleObj = matched.handlers[j++]) &&
          !event.isImmediatePropagationStopped()
        ) {
          // If the event is namespaced, then each handler is only invoked if it is
          // specially universal or its namespaces are a superset of the event's.
          if (
            !event.rnamespace ||
            handleObj.namespace === false ||
            event.rnamespace.test(handleObj.namespace)
          ) {
            event.handleObj = handleObj;
            event.data = handleObj.data;

            ret = (
              (jQuery.event.special[handleObj.origType] || {}).handle ||
              handleObj.handler
            ).apply(matched.elem, args);

            if (ret !== undefined) {
              if ((event.result = ret) === false) {
                event.preventDefault();
                event.stopPropagation();
              }
            }
          }
        }
      }

      // Call the postDispatch hook for the mapped type
      if (special.postDispatch) {
        special.postDispatch.call(this, event);
      }

      return event.result;
    },

    handlers: function (event, handlers) {
      var i,
        handleObj,
        sel,
        matchedHandlers,
        matchedSelectors,
        handlerQueue = [],
        delegateCount = handlers.delegateCount,
        cur = event.target;

      // Find delegate handlers
      if (
        delegateCount &&
        // Support: IE <=9
        // Black-hole SVG <use> instance trees (trac-13180)
        cur.nodeType &&
        // Support: Firefox <=42
        // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
        // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
        // Support: IE 11 only
        // ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
        !(event.type === "click" && event.button >= 1)
      ) {
        for (; cur !== this; cur = cur.parentNode || this) {
          // Don't check non-elements (trac-13208)
          // Don't process clicks on disabled elements (trac-6911, trac-8165, trac-11382, trac-11764)
          if (
            cur.nodeType === 1 &&
            !(event.type === "click" && cur.disabled === true)
          ) {
            matchedHandlers = [];
            matchedSelectors = {};
            for (i = 0; i < delegateCount; i++) {
              handleObj = handlers[i];

              // Don't conflict with Object.prototype properties (trac-13203)
              sel = handleObj.selector + " ";

              if (matchedSelectors[sel] === undefined) {
                matchedSelectors[sel] = handleObj.needsContext
                  ? jQuery(sel, this).index(cur) > -1
                  : jQuery.find(sel, this, null, [cur]).length;
              }
              if (matchedSelectors[sel]) {
                matchedHandlers.push(handleObj);
              }
            }
            if (matchedHandlers.length) {
              handlerQueue.push({ elem: cur, handlers: matchedHandlers });
            }
          }
        }
      }

      // Add the remaining (directly-bound) handlers
      cur = this;
      if (delegateCount < handlers.length) {
        handlerQueue.push({
          elem: cur,
          handlers: handlers.slice(delegateCount),
        });
      }

      return handlerQueue;
    },

    addProp: function (name, hook) {
      Object.defineProperty(jQuery.Event.prototype, name, {
        enumerable: true,
        configurable: true,

        get: isFunction(hook)
          ? function () {
              if (this.originalEvent) {
                return hook(this.originalEvent);
              }
            }
          : function () {
              if (this.originalEvent) {
                return this.originalEvent[name];
              }
            },

        set: function (value) {
          Object.defineProperty(this, name, {
            enumerable: true,
            configurable: true,
            writable: true,
            value: value,
          });
        },
      });
    },

    fix: function (originalEvent) {
      return originalEvent[jQuery.expando]
        ? originalEvent
        : new jQuery.Event(originalEvent);
    },

    special: {
      load: {
        // Prevent triggered image.load events from bubbling to window.load
        noBubble: true,
      },
      click: {
        // Utilize native event to ensure correct state for checkable inputs
        setup: function (data) {
          // For mutual compressibility with _default, replace `this` access with a local var.
          // `|| data` is dead code meant only to preserve the variable through minification.
          var el = this || data;

          // Claim the first handler
          if (
            rcheckableType.test(el.type) &&
            el.click &&
            nodeName(el, "input")
          ) {
            // dataPriv.set( el, "click", ... )
            leverageNative(el, "click", returnTrue);
          }

          // Return false to allow normal processing in the caller
          return false;
        },
        trigger: function (data) {
          // For mutual compressibility with _default, replace `this` access with a local var.
          // `|| data` is dead code meant only to preserve the variable through minification.
          var el = this || data;

          // Force setup before triggering a click
          if (
            rcheckableType.test(el.type) &&
            el.click &&
            nodeName(el, "input")
          ) {
            leverageNative(el, "click");
          }

          // Return non-false to allow normal event-path propagation
          return true;
        },

        // For cross-browser consistency, suppress native .click() on links
        // Also prevent it if we're currently inside a leveraged native-event stack
        _default: function (event) {
          var target = event.target;
          return (
            (rcheckableType.test(target.type) &&
              target.click &&
              nodeName(target, "input") &&
              dataPriv.get(target, "click")) ||
            nodeName(target, "a")
          );
        },
      },

      beforeunload: {
        postDispatch: function (event) {
          // Support: Firefox 20+
          // Firefox doesn't alert if the returnValue field is not set.
          if (event.result !== undefined && event.originalEvent) {
            event.originalEvent.returnValue = event.result;
          }
        },
      },
    },
  };

  // Ensure the presence of an event listener that handles manually-triggered
  // synthetic events by interrupting progress until reinvoked in response to
  // *native* events that it fires directly, ensuring that state changes have
  // already occurred before other listeners are invoked.
  function leverageNative(el, type, expectSync) {
    // Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
    if (!expectSync) {
      if (dataPriv.get(el, type) === undefined) {
        jQuery.event.add(el, type, returnTrue);
      }
      return;
    }

    // Register the controller as a special universal handler for all event namespaces
    dataPriv.set(el, type, false);
    jQuery.event.add(el, type, {
      namespace: false,
      handler: function (event) {
        var notAsync,
          result,
          saved = dataPriv.get(this, type);

        if (event.isTrigger & 1 && this[type]) {
          // Interrupt processing of the outer synthetic .trigger()ed event
          // Saved data should be false in such cases, but might be a leftover capture object
          // from an async native handler (gh-4350)
          if (!saved.length) {
            // Store arguments for use when handling the inner native event
            // There will always be at least one argument (an event object), so this array
            // will not be confused with a leftover capture object.
            saved = slice.call(arguments);
            dataPriv.set(this, type, saved);

            // Trigger the native event and capture its result
            // Support: IE <=9 - 11+
            // focus() and blur() are asynchronous
            notAsync = expectSync(this, type);
            this[type]();
            result = dataPriv.get(this, type);
            if (saved !== result || notAsync) {
              dataPriv.set(this, type, false);
            } else {
              result = {};
            }
            if (saved !== result) {
              // Cancel the outer synthetic event
              event.stopImmediatePropagation();
              event.preventDefault();

              // Support: Chrome 86+
              // In Chrome, if an element having a focusout handler is blurred by
              // clicking outside of it, it invokes the handler synchronously. If
              // that handler calls `.remove()` on the element, the data is cleared,
              // leaving `result` undefined. We need to guard against this.
              return result && result.value;
            }

            // If this is an inner synthetic event for an event with a bubbling surrogate
            // (focus or blur), assume that the surrogate already propagated from triggering the
            // native event and prevent that from happening again here.
            // This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
            // bubbling surrogate propagates *after* the non-bubbling base), but that seems
            // less bad than duplication.
          } else if ((jQuery.event.special[type] || {}).delegateType) {
            event.stopPropagation();
          }

          // If this is a native event triggered above, everything is now in order
          // Fire an inner synthetic event with the original arguments
        } else if (saved.length) {
          // ...and capture the result
          dataPriv.set(this, type, {
            value: jQuery.event.trigger(
              // Support: IE <=9 - 11+
              // Extend with the prototype to reset the above stopImmediatePropagation()
              jQuery.extend(saved[0], jQuery.Event.prototype),
              saved.slice(1),
              this
            ),
          });

          // Abort handling of the native event
          event.stopImmediatePropagation();
        }
      },
    });
  }

  jQuery.removeEvent = function (elem, type, handle) {
    // This "if" is needed for plain objects
    if (elem.removeEventListener) {
      elem.removeEventListener(type, handle);
    }
  };

  jQuery.Event = function (src, props) {
    // Allow instantiation without the 'new' keyword
    if (!(this instanceof jQuery.Event)) {
      return new jQuery.Event(src, props);
    }

    // Event object
    if (src && src.type) {
      this.originalEvent = src;
      this.type = src.type;

      // Events bubbling up the document may have been marked as prevented
      // by a handler lower down the tree; reflect the correct value.
      this.isDefaultPrevented =
        src.defaultPrevented ||
        (src.defaultPrevented === undefined &&
          // Support: Android <=2.3 only
          src.returnValue === false)
          ? returnTrue
          : returnFalse;

      // Create target properties
      // Support: Safari <=6 - 7 only
      // Target should not be a text node (trac-504, trac-13143)
      this.target =
        src.target && src.target.nodeType === 3
          ? src.target.parentNode
          : src.target;

      this.currentTarget = src.currentTarget;
      this.relatedTarget = src.relatedTarget;

      // Event type
    } else {
      this.type = src;
    }

    // Put explicitly provided properties onto the event object
    if (props) {
      jQuery.extend(this, props);
    }

    // Create a timestamp if incoming event doesn't have one
    this.timeStamp = (src && src.timeStamp) || Date.now();

    // Mark it as fixed
    this[jQuery.expando] = true;
  };

  // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
  // https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
  jQuery.Event.prototype = {
    constructor: jQuery.Event,
    isDefaultPrevented: returnFalse,
    isPropagationStopped: returnFalse,
    isImmediatePropagationStopped: returnFalse,
    isSimulated: false,

    preventDefault: function () {
      var e = this.originalEvent;

      this.isDefaultPrevented = returnTrue;

      if (e && !this.isSimulated) {
        e.preventDefault();
      }
    },
    stopPropagation: function () {
      var e = this.originalEvent;

      this.isPropagationStopped = returnTrue;

      if (e && !this.isSimulated) {
        e.stopPropagation();
      }
    },
    stopImmediatePropagation: function () {
      var e = this.originalEvent;

      this.isImmediatePropagationStopped = returnTrue;

      if (e && !this.isSimulated) {
        e.stopImmediatePropagation();
      }

      this.stopPropagation();
    },
  };

  // Includes all common event props including KeyEvent and MouseEvent specific props
  jQuery.each(
    {
      altKey: true,
      bubbles: true,
      cancelable: true,
      changedTouches: true,
      ctrlKey: true,
      detail: true,
      eventPhase: true,
      metaKey: true,
      pageX: true,
      pageY: true,
      shiftKey: true,
      view: true,
      char: true,
      code: true,
      charCode: true,
      key: true,
      keyCode: true,
      button: true,
      buttons: true,
      clientX: true,
      clientY: true,
      offsetX: true,
      offsetY: true,
      pointerId: true,
      pointerType: true,
      screenX: true,
      screenY: true,
      targetTouches: true,
      toElement: true,
      touches: true,
      which: true,
    },
    jQuery.event.addProp
  );

  jQuery.each(
    { focus: "focusin", blur: "focusout" },
    function (type, delegateType) {
      jQuery.event.special[type] = {
        // Utilize native event if possible so blur/focus sequence is correct
        setup: function () {
          // Claim the first handler
          // dataPriv.set( this, "focus", ... )
          // dataPriv.set( this, "blur", ... )
          leverageNative(this, type, expectSync);

          // Return false to allow normal processing in the caller
          return false;
        },
        trigger: function () {
          // Force setup before trigger
          leverageNative(this, type);

          // Return non-false to allow normal event-path propagation
          return true;
        },

        // Suppress native focus or blur if we're currently inside
        // a leveraged native-event stack
        _default: function (event) {
          return dataPriv.get(event.target, type);
        },

        delegateType: delegateType,
      };
    }
  );

  // Create mouseenter/leave events using mouseover/out and event-time checks
  // so that event delegation works in jQuery.
  // Do the same for pointerenter/pointerleave and pointerover/pointerout
  //
  // Support: Safari 7 only
  // Safari sends mouseenter too often; see:
  // https://bugs.chromium.org/p/chromium/issues/detail?id=470258
  // for the description of the bug (it existed in older Chrome versions as well).
  jQuery.each(
    {
      mouseenter: "mouseover",
      mouseleave: "mouseout",
      pointerenter: "pointerover",
      pointerleave: "pointerout",
    },
    function (orig, fix) {
      jQuery.event.special[orig] = {
        delegateType: fix,
        bindType: fix,

        handle: function (event) {
          var ret,
            target = this,
            related = event.relatedTarget,
            handleObj = event.handleObj;

          // For mouseenter/leave call the handler if related is outside the target.
          // NB: No relatedTarget if the mouse left/entered the browser window
          if (
            !related ||
            (related !== target && !jQuery.contains(target, related))
          ) {
            event.type = handleObj.origType;
            ret = handleObj.handler.apply(this, arguments);
            event.type = fix;
          }
          return ret;
        },
      };
    }
  );

  jQuery.fn.extend({
    on: function (types, selector, data, fn) {
      return on(this, types, selector, data, fn);
    },
    one: function (types, selector, data, fn) {
      return on(this, types, selector, data, fn, 1);
    },
    off: function (types, selector, fn) {
      var handleObj, type;
      if (types && types.preventDefault && types.handleObj) {
        // ( event )  dispatched jQuery.Event
        handleObj = types.handleObj;
        jQuery(types.delegateTarget).off(
          handleObj.namespace
            ? handleObj.origType + "." + handleObj.namespace
            : handleObj.origType,
          handleObj.selector,
          handleObj.handler
        );
        return this;
      }
      if (typeof types === "object") {
        // ( types-object [, selector] )
        for (type in types) {
          this.off(type, selector, types[type]);
        }
        return this;
      }
      if (selector === false || typeof selector === "function") {
        // ( types [, fn] )
        fn = selector;
        selector = undefined;
      }
      if (fn === false) {
        fn = returnFalse;
      }
      return this.each(function () {
        jQuery.event.remove(this, types, fn, selector);
      });
    },
  });

  var // Support: IE <=10 - 11, Edge 12 - 13 only
    // In IE/Edge using regex groups here causes severe slowdowns.
    // See https://connect.microsoft.com/IE/feedback/details/1736512/
    rnoInnerhtml = /<script|<style|<link/i,
    // checked="checked" or checked
    rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
    rcleanScript = /^\s*<!\[CDATA\[|\]\]>\s*$/g;

  // Prefer a tbody over its parent table for containing new rows
  function manipulationTarget(elem, content) {
    if (
      nodeName(elem, "table") &&
      nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")
    ) {
      return jQuery(elem).children("tbody")[0] || elem;
    }

    return elem;
  }

  // Replace/restore the type attribute of script elements for safe DOM manipulation
  function disableScript(elem) {
    elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
    return elem;
  }
  function restoreScript(elem) {
    if ((elem.type || "").slice(0, 5) === "true/") {
      elem.type = elem.type.slice(5);
    } else {
      elem.removeAttribute("type");
    }

    return elem;
  }

  function cloneCopyEvent(src, dest) {
    var i, l, type, pdataOld, udataOld, udataCur, events;

    if (dest.nodeType !== 1) {
      return;
    }

    // 1. Copy private data: events, handlers, etc.
    if (dataPriv.hasData(src)) {
      pdataOld = dataPriv.get(src);
      events = pdataOld.events;

      if (events) {
        dataPriv.remove(dest, "handle events");

        for (type in events) {
          for (i = 0, l = events[type].length; i < l; i++) {
            jQuery.event.add(dest, type, events[type][i]);
          }
        }
      }
    }

    // 2. Copy user data
    if (dataUser.hasData(src)) {
      udataOld = dataUser.access(src);
      udataCur = jQuery.extend({}, udataOld);

      dataUser.set(dest, udataCur);
    }
  }

  // Fix IE bugs, see support tests
  function fixInput(src, dest) {
    var nodeName = dest.nodeName.toLowerCase();

    // Fails to persist the checked state of a cloned checkbox or radio button.
    if (nodeName === "input" && rcheckableType.test(src.type)) {
      dest.checked = src.checked;

      // Fails to return the selected option to the default selected state when cloning options
    } else if (nodeName === "input" || nodeName === "textarea") {
      dest.defaultValue = src.defaultValue;
    }
  }

  function domManip(collection, args, callback, ignored) {
    // Flatten any nested arrays
    args = flat(args);

    var fragment,
      first,
      scripts,
      hasScripts,
      node,
      doc,
      i = 0,
      l = collection.length,
      iNoClone = l - 1,
      value = args[0],
      valueIsFunction = isFunction(value);

    // We can't cloneNode fragments that contain checked, in WebKit
    if (
      valueIsFunction ||
      (l > 1 &&
        typeof value === "string" &&
        !support.checkClone &&
        rchecked.test(value))
    ) {
      return collection.each(function (index) {
        var self = collection.eq(index);
        if (valueIsFunction) {
          args[0] = value.call(this, index, self.html());
        }
        domManip(self, args, callback, ignored);
      });
    }

    if (l) {
      fragment = buildFragment(
        args,
        collection[0].ownerDocument,
        false,
        collection,
        ignored
      );
      first = fragment.firstChild;

      if (fragment.childNodes.length === 1) {
        fragment = first;
      }

      // Require either new content or an interest in ignored elements to invoke the callback
      if (first || ignored) {
        scripts = jQuery.map(getAll(fragment, "script"), disableScript);
        hasScripts = scripts.length;

        // Use the original fragment for the last item
        // instead of the first because it can end up
        // being emptied incorrectly in certain situations (trac-8070).
        for (; i < l; i++) {
          node = fragment;

          if (i !== iNoClone) {
            node = jQuery.clone(node, true, true);

            // Keep references to cloned scripts for later restoration
            if (hasScripts) {
              // Support: Android <=4.0 only, PhantomJS 1 only
              // push.apply(_, arraylike) throws on ancient WebKit
              jQuery.merge(scripts, getAll(node, "script"));
            }
          }

          callback.call(collection[i], node, i);
        }

        if (hasScripts) {
          doc = scripts[scripts.length - 1].ownerDocument;

          // Reenable scripts
          jQuery.map(scripts, restoreScript);

          // Evaluate executable scripts on first document insertion
          for (i = 0; i < hasScripts; i++) {
            node = scripts[i];
            if (
              rscriptType.test(node.type || "") &&
              !dataPriv.access(node, "globalEval") &&
              jQuery.contains(doc, node)
            ) {
              if (node.src && (node.type || "").toLowerCase() !== "module") {
                // Optional AJAX dependency, but won't run scripts if not present
                if (jQuery._evalUrl && !node.noModule) {
                  jQuery._evalUrl(
                    node.src,
                    {
                      nonce: node.nonce || node.getAttribute("nonce"),
                    },
                    doc
                  );
                }
              } else {
                // Unwrap a CDATA section containing script contents. This shouldn't be
                // needed as in XML documents they're already not visible when
                // inspecting element contents and in HTML documents they have no
                // meaning but we're preserving that logic for backwards compatibility.
                // This will be removed completely in 4.0. See gh-4904.
                DOMEval(node.textContent.replace(rcleanScript, ""), node, doc);
              }
            }
          }
        }
      }
    }

    return collection;
  }

  function remove(elem, selector, keepData) {
    var node,
      nodes = selector ? jQuery.filter(selector, elem) : elem,
      i = 0;

    for (; (node = nodes[i]) != null; i++) {
      if (!keepData && node.nodeType === 1) {
        jQuery.cleanData(getAll(node));
      }

      if (node.parentNode) {
        if (keepData && isAttached(node)) {
          setGlobalEval(getAll(node, "script"));
        }
        node.parentNode.removeChild(node);
      }
    }

    return elem;
  }

  jQuery.extend({
    htmlPrefilter: function (html) {
      return html;
    },

    clone: function (elem, dataAndEvents, deepDataAndEvents) {
      var i,
        l,
        srcElements,
        destElements,
        clone = elem.cloneNode(true),
        inPage = isAttached(elem);

      // Fix IE cloning issues
      if (
        !support.noCloneChecked &&
        (elem.nodeType === 1 || elem.nodeType === 11) &&
        !jQuery.isXMLDoc(elem)
      ) {
        // We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
        destElements = getAll(clone);
        srcElements = getAll(elem);

        for (i = 0, l = srcElements.length; i < l; i++) {
          fixInput(srcElements[i], destElements[i]);
        }
      }

      // Copy the events from the original to the clone
      if (dataAndEvents) {
        if (deepDataAndEvents) {
          srcElements = srcElements || getAll(elem);
          destElements = destElements || getAll(clone);

          for (i = 0, l = srcElements.length; i < l; i++) {
            cloneCopyEvent(srcElements[i], destElements[i]);
          }
        } else {
          cloneCopyEvent(elem, clone);
        }
      }

      // Preserve script evaluation history
      destElements = getAll(clone, "script");
      if (destElements.length > 0) {
        setGlobalEval(destElements, !inPage && getAll(elem, "script"));
      }

      // Return the cloned set
      return clone;
    },

    cleanData: function (elems) {
      var data,
        elem,
        type,
        special = jQuery.event.special,
        i = 0;

      for (; (elem = elems[i]) !== undefined; i++) {
        if (acceptData(elem)) {
          if ((data = elem[dataPriv.expando])) {
            if (data.events) {
              for (type in data.events) {
                if (special[type]) {
                  jQuery.event.remove(elem, type);

                  // This is a shortcut to avoid jQuery.event.remove's overhead
                } else {
                  jQuery.removeEvent(elem, type, data.handle);
                }
              }
            }

            // Support: Chrome <=35 - 45+
            // Assign undefined instead of using delete, see Data#remove
            elem[dataPriv.expando] = undefined;
          }
          if (elem[dataUser.expando]) {
            // Support: Chrome <=35 - 45+
            // Assign undefined instead of using delete, see Data#remove
            elem[dataUser.expando] = undefined;
          }
        }
      }
    },
  });

  jQuery.fn.extend({
    detach: function (selector) {
      return remove(this, selector, true);
    },

    remove: function (selector) {
      return remove(this, selector);
    },

    text: function (value) {
      return access(
        this,
        function (value) {
          return value === undefined
            ? jQuery.text(this)
            : this.empty().each(function () {
                if (
                  this.nodeType === 1 ||
                  this.nodeType === 11 ||
                  this.nodeType === 9
                ) {
                  this.textContent = value;
                }
              });
        },
        null,
        value,
        arguments.length
      );
    },

    append: function () {
      return domManip(this, arguments, function (elem) {
        if (
          this.nodeType === 1 ||
          this.nodeType === 11 ||
          this.nodeType === 9
        ) {
          var target = manipulationTarget(this, elem);
          target.appendChild(elem);
        }
      });
    },

    prepend: function () {
      return domManip(this, arguments, function (elem) {
        if (
          this.nodeType === 1 ||
          this.nodeType === 11 ||
          this.nodeType === 9
        ) {
          var target = manipulationTarget(this, elem);
          target.insertBefore(elem, target.firstChild);
        }
      });
    },

    before: function () {
      return domManip(this, arguments, function (elem) {
        if (this.parentNode) {
          this.parentNode.insertBefore(elem, this);
        }
      });
    },

    after: function () {
      return domManip(this, arguments, function (elem) {
        if (this.parentNode) {
          this.parentNode.insertBefore(elem, this.nextSibling);
        }
      });
    },

    empty: function () {
      var elem,
        i = 0;

      for (; (elem = this[i]) != null; i++) {
        if (elem.nodeType === 1) {
          // Prevent memory leaks
          jQuery.cleanData(getAll(elem, false));

          // Remove any remaining nodes
          elem.textContent = "";
        }
      }

      return this;
    },

    clone: function (dataAndEvents, deepDataAndEvents) {
      dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
      deepDataAndEvents =
        deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

      return this.map(function () {
        return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
      });
    },

    html: function (value) {
      return access(
        this,
        function (value) {
          var elem = this[0] || {},
            i = 0,
            l = this.length;

          if (value === undefined && elem.nodeType === 1) {
            return elem.innerHTML;
          }

          // See if we can take a shortcut and just use innerHTML
          if (
            typeof value === "string" &&
            !rnoInnerhtml.test(value) &&
            !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]
          ) {
            value = jQuery.htmlPrefilter(value);

            try {
              for (; i < l; i++) {
                elem = this[i] || {};

                // Remove element nodes and prevent memory leaks
                if (elem.nodeType === 1) {
                  jQuery.cleanData(getAll(elem, false));
                  elem.innerHTML = value;
                }
              }

              elem = 0;

              // If using innerHTML throws an exception, use the fallback method
            } catch (e) {}
          }

          if (elem) {
            this.empty().append(value);
          }
        },
        null,
        value,
        arguments.length
      );
    },

    replaceWith: function () {
      var ignored = [];

      // Make the changes, replacing each non-ignored context element with the new content
      return domManip(
        this,
        arguments,
        function (elem) {
          var parent = this.parentNode;

          if (jQuery.inArray(this, ignored) < 0) {
            jQuery.cleanData(getAll(this));
            if (parent) {
              parent.replaceChild(elem, this);
            }
          }

          // Force callback invocation
        },
        ignored
      );
    },
  });

  jQuery.each(
    {
      appendTo: "append",
      prependTo: "prepend",
      insertBefore: "before",
      insertAfter: "after",
      replaceAll: "replaceWith",
    },
    function (name, original) {
      jQuery.fn[name] = function (selector) {
        var elems,
          ret = [],
          insert = jQuery(selector),
          last = insert.length - 1,
          i = 0;

        for (; i <= last; i++) {
          elems = i === last ? this : this.clone(true);
          jQuery(insert[i])[original](elems);

          // Support: Android <=4.0 only, PhantomJS 1 only
          // .get() because push.apply(_, arraylike) throws on ancient WebKit
          push.apply(ret, elems.get());
        }

        return this.pushStack(ret);
      };
    }
  );
  var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");

  var rcustomProp = /^--/;

  var getStyles = function (elem) {
    // Support: IE <=11 only, Firefox <=30 (trac-15098, trac-14150)
    // IE throws on elements created in popups
    // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
    var view = elem.ownerDocument.defaultView;

    if (!view || !view.opener) {
      view = window;
    }

    return view.getComputedStyle(elem);
  };

  var swap = function (elem, options, callback) {
    var ret,
      name,
      old = {};

    // Remember the old values, and insert the new ones
    for (name in options) {
      old[name] = elem.style[name];
      elem.style[name] = options[name];
    }

    ret = callback.call(elem);

    // Revert the old values
    for (name in options) {
      elem.style[name] = old[name];
    }

    return ret;
  };

  var rboxStyle = new RegExp(cssExpand.join("|"), "i");

  var whitespace = "[\\x20\\t\\r\\n\\f]";

  var rtrimCSS = new RegExp(
    "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$",
    "g"
  );

  (function () {
    // Executing both pixelPosition & boxSizingReliable tests require only one layout
    // so they're executed at the same time to save the second computation.
    function computeStyleTests() {
      // This is a singleton, we need to execute it only once
      if (!div) {
        return;
      }

      container.style.cssText =
        "position:absolute;left:-11111px;width:60px;" +
        "margin-top:1px;padding:0;border:0";
      div.style.cssText =
        "position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
        "margin:auto;border:1px;padding:1px;" +
        "width:60%;top:1%";
      documentElement.appendChild(container).appendChild(div);

      var divStyle = window.getComputedStyle(div);
      pixelPositionVal = divStyle.top !== "1%";

      // Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
      reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12;

      // Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
      // Some styles come back with percentage values, even though they shouldn't
      div.style.right = "60%";
      pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36;

      // Support: IE 9 - 11 only
      // Detect misreporting of content dimensions for box-sizing:border-box elements
      boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36;

      // Support: IE 9 only
      // Detect overflow:scroll screwiness (gh-3699)
      // Support: Chrome <=64
      // Don't get tricked when zoom affects offsetWidth (gh-4029)
      div.style.position = "absolute";
      scrollboxSizeVal = roundPixelMeasures(div.offsetWidth / 3) === 12;

      documentElement.removeChild(container);

      // Nullify the div so it wouldn't be stored in the memory and
      // it will also be a sign that checks already performed
      div = null;
    }

    function roundPixelMeasures(measure) {
      return Math.round(parseFloat(measure));
    }

    var pixelPositionVal,
      boxSizingReliableVal,
      scrollboxSizeVal,
      pixelBoxStylesVal,
      reliableTrDimensionsVal,
      reliableMarginLeftVal,
      container = document.createElement("div"),
      div = document.createElement("div");

    // Finish early in limited (non-browser) environments
    if (!div.style) {
      return;
    }

    // Support: IE <=9 - 11 only
    // Style of cloned element affects source element cloned (trac-8908)
    div.style.backgroundClip = "content-box";
    div.cloneNode(true).style.backgroundClip = "";
    support.clearCloneStyle = div.style.backgroundClip === "content-box";

    jQuery.extend(support, {
      boxSizingReliable: function () {
        computeStyleTests();
        return boxSizingReliableVal;
      },
      pixelBoxStyles: function () {
        computeStyleTests();
        return pixelBoxStylesVal;
      },
      pixelPosition: function () {
        computeStyleTests();
        return pixelPositionVal;
      },
      reliableMarginLeft: function () {
        computeStyleTests();
        return reliableMarginLeftVal;
      },
      scrollboxSize: function () {
        computeStyleTests();
        return scrollboxSizeVal;
      },

      // Support: IE 9 - 11+, Edge 15 - 18+
      // IE/Edge misreport `getComputedStyle` of table rows with width/height
      // set in CSS while `offset*` properties report correct values.
      // Behavior in IE 9 is more subtle than in newer versions & it passes
      // some versions of this test; make sure not to make it pass there!
      //
      // Support: Firefox 70+
      // Only Firefox includes border widths
      // in computed dimensions. (gh-4529)
      reliableTrDimensions: function () {
        var table, tr, trChild, trStyle;
        if (reliableTrDimensionsVal == null) {
          table = document.createElement("table");
          tr = document.createElement("tr");
          trChild = document.createElement("div");

          table.style.cssText =
            "position:absolute;left:-11111px;border-collapse:separate";
          tr.style.cssText = "border:1px solid";

          // Support: Chrome 86+
          // Height set through cssText does not get applied.
          // Computed height then comes back as 0.
          tr.style.height = "1px";
          trChild.style.height = "9px";

          // Support: Android 8 Chrome 86+
          // In our bodyBackground.html iframe,
          // display for all div elements is set to "inline",
          // which causes a problem only in Android 8 Chrome 86.
          // Ensuring the div is display: block
          // gets around this issue.
          trChild.style.display = "block";

          documentElement
            .appendChild(table)
            .appendChild(tr)
            .appendChild(trChild);

          trStyle = window.getComputedStyle(tr);
          reliableTrDimensionsVal =
            parseInt(trStyle.height, 10) +
              parseInt(trStyle.borderTopWidth, 10) +
              parseInt(trStyle.borderBottomWidth, 10) ===
            tr.offsetHeight;

          documentElement.removeChild(table);
        }
        return reliableTrDimensionsVal;
      },
    });
  })();

  function curCSS(elem, name, computed) {
    var width,
      minWidth,
      maxWidth,
      ret,
      isCustomProp = rcustomProp.test(name),
      // Support: Firefox 51+
      // Retrieving style before computed somehow
      // fixes an issue with getting wrong values
      // on detached elements
      style = elem.style;

    computed = computed || getStyles(elem);

    // getPropertyValue is needed for:
    //   .css('filter') (IE 9 only, trac-12537)
    //   .css('--customProperty) (gh-3144)
    if (computed) {
      ret = computed.getPropertyValue(name) || computed[name];

      // trim whitespace for custom property (issue gh-4926)
      if (isCustomProp) {
        // rtrim treats U+000D CARRIAGE RETURN and U+000C FORM FEED
        // as whitespace while CSS does not, but this is not a problem
        // because CSS preprocessing replaces them with U+000A LINE FEED
        // (which *is* CSS whitespace)
        // https://www.w3.org/TR/css-syntax-3/#input-preprocessing
        ret = ret.replace(rtrimCSS, "$1");
      }

      if (ret === "" && !isAttached(elem)) {
        ret = jQuery.style(elem, name);
      }

      // A tribute to the "awesome hack by Dean Edwards"
      // Android Browser returns percentage for some values,
      // but width seems to be reliably pixels.
      // This is against the CSSOM draft spec:
      // https://drafts.csswg.org/cssom/#resolved-values
      if (
        !support.pixelBoxStyles() &&
        rnumnonpx.test(ret) &&
        rboxStyle.test(name)
      ) {
        // Remember the original values
        width = style.width;
        minWidth = style.minWidth;
        maxWidth = style.maxWidth;

        // Put in the new values to get a computed value out
        style.minWidth = style.maxWidth = style.width = ret;
        ret = computed.width;

        // Revert the changed values
        style.width = width;
        style.minWidth = minWidth;
        style.maxWidth = maxWidth;
      }
    }

    return ret !== undefined
      ? // Support: IE <=9 - 11 only
        // IE returns zIndex value as an integer.
        ret + ""
      : ret;
  }

  function addGetHookIf(conditionFn, hookFn) {
    // Define the hook, we'll check on the first run if it's really needed.
    return {
      get: function () {
        if (conditionFn()) {
          // Hook not needed (or it's not possible to use it due
          // to missing dependency), remove it.
          delete this.get;
          return;
        }

        // Hook needed; redefine it so that the support test is not executed again.
        return (this.get = hookFn).apply(this, arguments);
      },
    };
  }

  var cssPrefixes = ["Webkit", "Moz", "ms"],
    emptyStyle = document.createElement("div").style,
    vendorProps = {};

  // Return a vendor-prefixed property or undefined
  function vendorPropName(name) {
    // Check for vendor prefixed names
    var capName = name[0].toUpperCase() + name.slice(1),
      i = cssPrefixes.length;

    while (i--) {
      name = cssPrefixes[i] + capName;
      if (name in emptyStyle) {
        return name;
      }
    }
  }

  // Return a potentially-mapped jQuery.cssProps or vendor prefixed property
  function finalPropName(name) {
    var final = jQuery.cssProps[name] || vendorProps[name];

    if (final) {
      return final;
    }
    if (name in emptyStyle) {
      return name;
    }
    return (vendorProps[name] = vendorPropName(name) || name);
  }

  var // Swappable if display is none or starts with table
    // except "table", "table-cell", or "table-caption"
    // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
    rdisplayswap = /^(none|table(?!-c[ea]).+)/,
    cssShow = { position: "absolute", visibility: "hidden", display: "block" },
    cssNormalTransform = {
      letterSpacing: "0",
      fontWeight: "400",
    };

  function setPositiveNumber(_elem, value, subtract) {
    // Any relative (+/-) values have already been
    // normalized at this point
    var matches = rcssNum.exec(value);
    return matches
      ? // Guard against undefined "subtract", e.g., when used as in cssHooks
        Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px")
      : value;
  }

  function boxModelAdjustment(
    elem,
    dimension,
    box,
    isBorderBox,
    styles,
    computedVal
  ) {
    var i = dimension === "width" ? 1 : 0,
      extra = 0,
      delta = 0;

    // Adjustment may not be necessary
    if (box === (isBorderBox ? "border" : "content")) {
      return 0;
    }

    for (; i < 4; i += 2) {
      // Both box models exclude margin
      if (box === "margin") {
        delta += jQuery.css(elem, box + cssExpand[i], true, styles);
      }

      // If we get here with a content-box, we're seeking "padding" or "border" or "margin"
      if (!isBorderBox) {
        // Add padding
        delta += jQuery.css(elem, "padding" + cssExpand[i], true, styles);

        // For "border" or "margin", add border
        if (box !== "padding") {
          delta += jQuery.css(
            elem,
            "border" + cssExpand[i] + "Width",
            true,
            styles
          );

          // But still keep track of it otherwise
        } else {
          extra += jQuery.css(
            elem,
            "border" + cssExpand[i] + "Width",
            true,
            styles
          );
        }

        // If we get here with a border-box (content + padding + border), we're seeking "content" or
        // "padding" or "margin"
      } else {
        // For "content", subtract padding
        if (box === "content") {
          delta -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
        }

        // For "content" or "padding", subtract border
        if (box !== "margin") {
          delta -= jQuery.css(
            elem,
            "border" + cssExpand[i] + "Width",
            true,
            styles
          );
        }
      }
    }

    // Account for positive content-box scroll gutter when requested by providing computedVal
    if (!isBorderBox && computedVal >= 0) {
      // offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
      // Assuming integer scroll gutter, subtract the rest and round down
      delta +=
        Math.max(
          0,
          Math.ceil(
            elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] -
              computedVal -
              delta -
              extra -
              0.5

            // If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
            // Use an explicit zero to avoid NaN (gh-3964)
          )
        ) || 0;
    }

    return delta;
  }

  function getWidthOrHeight(elem, dimension, extra) {
    // Start with computed style
    var styles = getStyles(elem),
      // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
      // Fake content-box until we know it's needed to know the true value.
      boxSizingNeeded = !support.boxSizingReliable() || extra,
      isBorderBox =
        boxSizingNeeded &&
        jQuery.css(elem, "boxSizing", false, styles) === "border-box",
      valueIsBorderBox = isBorderBox,
      val = curCSS(elem, dimension, styles),
      offsetProp = "offset" + dimension[0].toUpperCase() + dimension.slice(1);

    // Support: Firefox <=54
    // Return a confounding non-pixel value or feign ignorance, as appropriate.
    if (rnumnonpx.test(val)) {
      if (!extra) {
        return val;
      }
      val = "auto";
    }

    // Support: IE 9 - 11 only
    // Use offsetWidth/offsetHeight for when box sizing is unreliable.
    // In those cases, the computed value can be trusted to be border-box.
    if (
      ((!support.boxSizingReliable() && isBorderBox) ||
        // Support: IE 10 - 11+, Edge 15 - 18+
        // IE/Edge misreport `getComputedStyle` of table rows with width/height
        // set in CSS while `offset*` properties report correct values.
        // Interestingly, in some cases IE 9 doesn't suffer from this issue.
        (!support.reliableTrDimensions() && nodeName(elem, "tr")) ||
        // Fall back to offsetWidth/offsetHeight when value is "auto"
        // This happens for inline elements with no explicit setting (gh-3571)
        val === "auto" ||
        // Support: Android <=4.1 - 4.3 only
        // Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
        (!parseFloat(val) &&
          jQuery.css(elem, "display", false, styles) === "inline")) &&
      // Make sure the element is visible & connected
      elem.getClientRects().length
    ) {
      isBorderBox =
        jQuery.css(elem, "boxSizing", false, styles) === "border-box";

      // Where available, offsetWidth/offsetHeight approximate border box dimensions.
      // Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
      // retrieved value as a content box dimension.
      valueIsBorderBox = offsetProp in elem;
      if (valueIsBorderBox) {
        val = elem[offsetProp];
      }
    }

    // Normalize "" and auto
    val = parseFloat(val) || 0;

    // Adjust for the element's box model
    return (
      val +
      boxModelAdjustment(
        elem,
        dimension,
        extra || (isBorderBox ? "border" : "content"),
        valueIsBorderBox,
        styles,

        // Provide the current computed size to request scroll gutter calculation (gh-3589)
        val
      ) +
      "px"
    );
  }

  jQuery.extend({
    // Add in style property hooks for overriding the default
    // behavior of getting and setting a style property
    cssHooks: {
      opacity: {
        get: function (elem, computed) {
          if (computed) {
            // We should always get a number back from opacity
            var ret = curCSS(elem, "opacity");
            return ret === "" ? "1" : ret;
          }
        },
      },
    },

    // Don't automatically add "px" to these possibly-unitless properties
    cssNumber: {
      animationIterationCount: true,
      columnCount: true,
      fillOpacity: true,
      flexGrow: true,
      flexShrink: true,
      fontWeight: true,
      gridArea: true,
      gridColumn: true,
      gridColumnEnd: true,
      gridColumnStart: true,
      gridRow: true,
      gridRowEnd: true,
      gridRowStart: true,
      lineHeight: true,
      opacity: true,
      order: true,
      orphans: true,
      widows: true,
      zIndex: true,
      zoom: true,
    },

    // Add in properties whose names you wish to fix before
    // setting or getting the value
    cssProps: {},

    // Get and set the style property on a DOM Node
    style: function (elem, name, value, extra) {
      // Don't set styles on text and comment nodes
      if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
        return;
      }

      // Make sure that we're working with the right name
      var ret,
        type,
        hooks,
        origName = camelCase(name),
        isCustomProp = rcustomProp.test(name),
        style = elem.style;

      // Make sure that we're working with the right name. We don't
      // want to query the value if it is a CSS custom property
      // since they are user-defined.
      if (!isCustomProp) {
        name = finalPropName(origName);
      }

      // Gets hook for the prefixed version, then unprefixed version
      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

      // Check if we're setting a value
      if (value !== undefined) {
        type = typeof value;

        // Convert "+=" or "-=" to relative numbers (trac-7345)
        if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
          value = adjustCSS(elem, name, ret);

          // Fixes bug trac-9237
          type = "number";
        }

        // Make sure that null and NaN values aren't set (trac-7116)
        if (value == null || value !== value) {
          return;
        }

        // If a number was passed in, add the unit (except for certain CSS properties)
        // The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
        // "px" to a few hardcoded values.
        if (type === "number" && !isCustomProp) {
          value += (ret && ret[3]) || (jQuery.cssNumber[origName] ? "" : "px");
        }

        // background-* props affect original clone's values
        if (
          !support.clearCloneStyle &&
          value === "" &&
          name.indexOf("background") === 0
        ) {
          style[name] = "inherit";
        }

        // If a hook was provided, use that value, otherwise just set the specified value
        if (
          !hooks ||
          !("set" in hooks) ||
          (value = hooks.set(elem, value, extra)) !== undefined
        ) {
          if (isCustomProp) {
            style.setProperty(name, value);
          } else {
            style[name] = value;
          }
        }
      } else {
        // If a hook was provided get the non-computed value from there
        if (
          hooks &&
          "get" in hooks &&
          (ret = hooks.get(elem, false, extra)) !== undefined
        ) {
          return ret;
        }

        // Otherwise just get the value from the style object
        return style[name];
      }
    },

    css: function (elem, name, extra, styles) {
      var val,
        num,
        hooks,
        origName = camelCase(name),
        isCustomProp = rcustomProp.test(name);

      // Make sure that we're working with the right name. We don't
      // want to modify the value if it is a CSS custom property
      // since they are user-defined.
      if (!isCustomProp) {
        name = finalPropName(origName);
      }

      // Try prefixed name followed by the unprefixed name
      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

      // If a hook was provided get the computed value from there
      if (hooks && "get" in hooks) {
        val = hooks.get(elem, true, extra);
      }

      // Otherwise, if a way to get the computed value exists, use that
      if (val === undefined) {
        val = curCSS(elem, name, styles);
      }

      // Convert "normal" to computed value
      if (val === "normal" && name in cssNormalTransform) {
        val = cssNormalTransform[name];
      }

      // Make numeric if forced or a qualifier was provided and val looks numeric
      if (extra === "" || extra) {
        num = parseFloat(val);
        return extra === true || isFinite(num) ? num || 0 : val;
      }

      return val;
    },
  });

  jQuery.each(["height", "width"], function (_i, dimension) {
    jQuery.cssHooks[dimension] = {
      get: function (elem, computed, extra) {
        if (computed) {
          // Certain elements can have dimension info if we invisibly show them
          // but it must have a current display style that would benefit
          return rdisplayswap.test(jQuery.css(elem, "display")) &&
            // Support: Safari 8+
            // Table columns in Safari have non-zero offsetWidth & zero
            // getBoundingClientRect().width unless display is changed.
            // Support: IE <=11 only
            // Running getBoundingClientRect on a disconnected node
            // in IE throws an error.
            (!elem.getClientRects().length ||
              !elem.getBoundingClientRect().width)
            ? swap(elem, cssShow, function () {
                return getWidthOrHeight(elem, dimension, extra);
              })
            : getWidthOrHeight(elem, dimension, extra);
        }
      },

      set: function (elem, value, extra) {
        var matches,
          styles = getStyles(elem),
          // Only read styles.position if the test has a chance to fail
          // to avoid forcing a reflow.
          scrollboxSizeBuggy =
            !support.scrollboxSize() && styles.position === "absolute",
          // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
          boxSizingNeeded = scrollboxSizeBuggy || extra,
          isBorderBox =
            boxSizingNeeded &&
            jQuery.css(elem, "boxSizing", false, styles) === "border-box",
          subtract = extra
            ? boxModelAdjustment(elem, dimension, extra, isBorderBox, styles)
            : 0;

        // Account for unreliable border-box dimensions by comparing offset* to computed and
        // faking a content-box to get border and padding (gh-3699)
        if (isBorderBox && scrollboxSizeBuggy) {
          subtract -= Math.ceil(
            elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] -
              parseFloat(styles[dimension]) -
              boxModelAdjustment(elem, dimension, "border", false, styles) -
              0.5
          );
        }

        // Convert to pixels if value adjustment is needed
        if (
          subtract &&
          (matches = rcssNum.exec(value)) &&
          (matches[3] || "px") !== "px"
        ) {
          elem.style[dimension] = value;
          value = jQuery.css(elem, dimension);
        }

        return setPositiveNumber(elem, value, subtract);
      },
    };
  });

  jQuery.cssHooks.marginLeft = addGetHookIf(
    support.reliableMarginLeft,
    function (elem, computed) {
      if (computed) {
        return (
          (parseFloat(curCSS(elem, "marginLeft")) ||
            elem.getBoundingClientRect().left -
              swap(elem, { marginLeft: 0 }, function () {
                return elem.getBoundingClientRect().left;
              })) + "px"
        );
      }
    }
  );

  // These hooks are used by animate to expand properties
  jQuery.each(
    {
      margin: "",
      padding: "",
      border: "Width",
    },
    function (prefix, suffix) {
      jQuery.cssHooks[prefix + suffix] = {
        expand: function (value) {
          var i = 0,
            expanded = {},
            // Assumes a single number if not a string
            parts = typeof value === "string" ? value.split(" ") : [value];

          for (; i < 4; i++) {
            expanded[prefix + cssExpand[i] + suffix] =
              parts[i] || parts[i - 2] || parts[0];
          }

          return expanded;
        },
      };

      if (prefix !== "margin") {
        jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
      }
    }
  );

  jQuery.fn.extend({
    css: function (name, value) {
      return access(
        this,
        function (elem, name, value) {
          var styles,
            len,
            map = {},
            i = 0;

          if (Array.isArray(name)) {
            styles = getStyles(elem);
            len = name.length;

            for (; i < len; i++) {
              map[name[i]] = jQuery.css(elem, name[i], false, styles);
            }

            return map;
          }

          return value !== undefined
            ? jQuery.style(elem, name, value)
            : jQuery.css(elem, name);
        },
        name,
        value,
        arguments.length > 1
      );
    },
  });

  function Tween(elem, options, prop, end, easing) {
    return new Tween.prototype.init(elem, options, prop, end, easing);
  }
  jQuery.Tween = Tween;

  Tween.prototype = {
    constructor: Tween,
    init: function (elem, options, prop, end, easing, unit) {
      this.elem = elem;
      this.prop = prop;
      this.easing = easing || jQuery.easing._default;
      this.options = options;
      this.start = this.now = this.cur();
      this.end = end;
      this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
    },
    cur: function () {
      var hooks = Tween.propHooks[this.prop];

      return hooks && hooks.get
        ? hooks.get(this)
        : Tween.propHooks._default.get(this);
    },
    run: function (percent) {
      var eased,
        hooks = Tween.propHooks[this.prop];

      if (this.options.duration) {
        this.pos = eased = jQuery.easing[this.easing](
          percent,
          this.options.duration * percent,
          0,
          1,
          this.options.duration
        );
      } else {
        this.pos = eased = percent;
      }
      this.now = (this.end - this.start) * eased + this.start;

      if (this.options.step) {
        this.options.step.call(this.elem, this.now, this);
      }

      if (hooks && hooks.set) {
        hooks.set(this);
      } else {
        Tween.propHooks._default.set(this);
      }
      return this;
    },
  };

  Tween.prototype.init.prototype = Tween.prototype;

  Tween.propHooks = {
    _default: {
      get: function (tween) {
        var result;

        // Use a property on the element directly when it is not a DOM element,
        // or when there is no matching style property that exists.
        if (
          tween.elem.nodeType !== 1 ||
          (tween.elem[tween.prop] != null &&
            tween.elem.style[tween.prop] == null)
        ) {
          return tween.elem[tween.prop];
        }

        // Passing an empty string as a 3rd parameter to .css will automatically
        // attempt a parseFloat and fallback to a string if the parse fails.
        // Simple values such as "10px" are parsed to Float;
        // complex values such as "rotate(1rad)" are returned as-is.
        result = jQuery.css(tween.elem, tween.prop, "");

        // Empty strings, null, undefined and "auto" are converted to 0.
        return !result || result === "auto" ? 0 : result;
      },
      set: function (tween) {
        // Use step hook for back compat.
        // Use cssHook if its there.
        // Use .style if available and use plain properties where available.
        if (jQuery.fx.step[tween.prop]) {
          jQuery.fx.step[tween.prop](tween);
        } else if (
          tween.elem.nodeType === 1 &&
          (jQuery.cssHooks[tween.prop] ||
            tween.elem.style[finalPropName(tween.prop)] != null)
        ) {
          jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
        } else {
          tween.elem[tween.prop] = tween.now;
        }
      },
    },
  };

  // Support: IE <=9 only
  // Panic based approach to setting things on disconnected nodes
  Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
    set: function (tween) {
      if (tween.elem.nodeType && tween.elem.parentNode) {
        tween.elem[tween.prop] = tween.now;
      }
    },
  };

  jQuery.easing = {
    linear: function (p) {
      return p;
    },
    swing: function (p) {
      return 0.5 - Math.cos(p * Math.PI) / 2;
    },
    _default: "swing",
  };

  jQuery.fx = Tween.prototype.init;

  // Back compat <1.8 extension point
  jQuery.fx.step = {};

  var fxNow,
    inProgress,
    rfxtypes = /^(?:toggle|show|hide)$/,
    rrun = /queueHooks$/;

  function schedule() {
    if (inProgress) {
      if (document.hidden === false && window.requestAnimationFrame) {
        window.requestAnimationFrame(schedule);
      } else {
        window.setTimeout(schedule, jQuery.fx.interval);
      }

      jQuery.fx.tick();
    }
  }

  // Animations created synchronously will run synchronously
  function createFxNow() {
    window.setTimeout(function () {
      fxNow = undefined;
    });
    return (fxNow = Date.now());
  }

  // Generate parameters to create a standard animation
  function genFx(type, includeWidth) {
    var which,
      i = 0,
      attrs = { height: type };

    // If we include width, step value is 1 to do all cssExpand values,
    // otherwise step value is 2 to skip over Left and Right
    includeWidth = includeWidth ? 1 : 0;
    for (; i < 4; i += 2 - includeWidth) {
      which = cssExpand[i];
      attrs["margin" + which] = attrs["padding" + which] = type;
    }

    if (includeWidth) {
      attrs.opacity = attrs.width = type;
    }

    return attrs;
  }

  function createTween(value, prop, animation) {
    var tween,
      collection = (Animation.tweeners[prop] || []).concat(
        Animation.tweeners["*"]
      ),
      index = 0,
      length = collection.length;
    for (; index < length; index++) {
      if ((tween = collection[index].call(animation, prop, value))) {
        // We're done with this property
        return tween;
      }
    }
  }

  function defaultPrefilter(elem, props, opts) {
    var prop,
      value,
      toggle,
      hooks,
      oldfire,
      propTween,
      restoreDisplay,
      display,
      isBox = "width" in props || "height" in props,
      anim = this,
      orig = {},
      style = elem.style,
      hidden = elem.nodeType && isHiddenWithinTree(elem),
      dataShow = dataPriv.get(elem, "fxshow");

    // Queue-skipping animations hijack the fx hooks
    if (!opts.queue) {
      hooks = jQuery._queueHooks(elem, "fx");
      if (hooks.unqueued == null) {
        hooks.unqueued = 0;
        oldfire = hooks.empty.fire;
        hooks.empty.fire = function () {
          if (!hooks.unqueued) {
            oldfire();
          }
        };
      }
      hooks.unqueued++;

      anim.always(function () {
        // Ensure the complete handler is called before this completes
        anim.always(function () {
          hooks.unqueued--;
          if (!jQuery.queue(elem, "fx").length) {
            hooks.empty.fire();
          }
        });
      });
    }

    // Detect show/hide animations
    for (prop in props) {
      value = props[prop];
      if (rfxtypes.test(value)) {
        delete props[prop];
        toggle = toggle || value === "toggle";
        if (value === (hidden ? "hide" : "show")) {
          // Pretend to be hidden if this is a "show" and
          // there is still data from a stopped show/hide
          if (value === "show" && dataShow && dataShow[prop] !== undefined) {
            hidden = true;

            // Ignore all other no-op show/hide data
          } else {
            continue;
          }
        }
        orig[prop] = (dataShow && dataShow[prop]) || jQuery.style(elem, prop);
      }
    }

    // Bail out if this is a no-op like .hide().hide()
    propTween = !jQuery.isEmptyObject(props);
    if (!propTween && jQuery.isEmptyObject(orig)) {
      return;
    }

    // Restrict "overflow" and "display" styles during box animations
    if (isBox && elem.nodeType === 1) {
      // Support: IE <=9 - 11, Edge 12 - 15
      // Record all 3 overflow attributes because IE does not infer the shorthand
      // from identically-valued overflowX and overflowY and Edge just mirrors
      // the overflowX value there.
      opts.overflow = [style.overflow, style.overflowX, style.overflowY];

      // Identify a display type, preferring old show/hide data over the CSS cascade
      restoreDisplay = dataShow && dataShow.display;
      if (restoreDisplay == null) {
        restoreDisplay = dataPriv.get(elem, "display");
      }
      display = jQuery.css(elem, "display");
      if (display === "none") {
        if (restoreDisplay) {
          display = restoreDisplay;
        } else {
          // Get nonempty value(s) by temporarily forcing visibility
          showHide([elem], true);
          restoreDisplay = elem.style.display || restoreDisplay;
          display = jQuery.css(elem, "display");
          showHide([elem]);
        }
      }

      // Animate inline elements as inline-block
      if (
        display === "inline" ||
        (display === "inline-block" && restoreDisplay != null)
      ) {
        if (jQuery.css(elem, "float") === "none") {
          // Restore the original display value at the end of pure show/hide animations
          if (!propTween) {
            anim.done(function () {
              style.display = restoreDisplay;
            });
            if (restoreDisplay == null) {
              display = style.display;
              restoreDisplay = display === "none" ? "" : display;
            }
          }
          style.display = "inline-block";
        }
      }
    }

    if (opts.overflow) {
      style.overflow = "hidden";
      anim.always(function () {
        style.overflow = opts.overflow[0];
        style.overflowX = opts.overflow[1];
        style.overflowY = opts.overflow[2];
      });
    }

    // Implement show/hide animations
    propTween = false;
    for (prop in orig) {
      // General show/hide setup for this element animation
      if (!propTween) {
        if (dataShow) {
          if ("hidden" in dataShow) {
            hidden = dataShow.hidden;
          }
        } else {
          dataShow = dataPriv.access(elem, "fxshow", {
            display: restoreDisplay,
          });
        }

        // Store hidden/visible for toggle so `.stop().toggle()` "reverses"
        if (toggle) {
          dataShow.hidden = !hidden;
        }

        // Show elements before animating them
        if (hidden) {
          showHide([elem], true);
        }

        /* eslint-disable no-loop-func */

        anim.done(function () {
          /* eslint-enable no-loop-func */

          // The final step of a "hide" animation is actually hiding the element
          if (!hidden) {
            showHide([elem]);
          }
          dataPriv.remove(elem, "fxshow");
          for (prop in orig) {
            jQuery.style(elem, prop, orig[prop]);
          }
        });
      }

      // Per-property setup
      propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
      if (!(prop in dataShow)) {
        dataShow[prop] = propTween.start;
        if (hidden) {
          propTween.end = propTween.start;
          propTween.start = 0;
        }
      }
    }
  }

  function propFilter(props, specialEasing) {
    var index, name, easing, value, hooks;

    // camelCase, specialEasing and expand cssHook pass
    for (index in props) {
      name = camelCase(index);
      easing = specialEasing[name];
      value = props[index];
      if (Array.isArray(value)) {
        easing = value[1];
        value = props[index] = value[0];
      }

      if (index !== name) {
        props[name] = value;
        delete props[index];
      }

      hooks = jQuery.cssHooks[name];
      if (hooks && "expand" in hooks) {
        value = hooks.expand(value);
        delete props[name];

        // Not quite $.extend, this won't overwrite existing keys.
        // Reusing 'index' because we have the correct "name"
        for (index in value) {
          if (!(index in props)) {
            props[index] = value[index];
            specialEasing[index] = easing;
          }
        }
      } else {
        specialEasing[name] = easing;
      }
    }
  }

  function Animation(elem, properties, options) {
    var result,
      stopped,
      index = 0,
      length = Animation.prefilters.length,
      deferred = jQuery.Deferred().always(function () {
        // Don't match elem in the :animated selector
        delete tick.elem;
      }),
      tick = function () {
        if (stopped) {
          return false;
        }
        var currentTime = fxNow || createFxNow(),
          remaining = Math.max(
            0,
            animation.startTime + animation.duration - currentTime
          ),
          // Support: Android 2.3 only
          // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (trac-12497)
          temp = remaining / animation.duration || 0,
          percent = 1 - temp,
          index = 0,
          length = animation.tweens.length;

        for (; index < length; index++) {
          animation.tweens[index].run(percent);
        }

        deferred.notifyWith(elem, [animation, percent, remaining]);

        // If there's more to do, yield
        if (percent < 1 && length) {
          return remaining;
        }

        // If this was an empty animation, synthesize a final progress notification
        if (!length) {
          deferred.notifyWith(elem, [animation, 1, 0]);
        }

        // Resolve the animation and report its conclusion
        deferred.resolveWith(elem, [animation]);
        return false;
      },
      animation = deferred.promise({
        elem: elem,
        props: jQuery.extend({}, properties),
        opts: jQuery.extend(
          true,
          {
            specialEasing: {},
            easing: jQuery.easing._default,
          },
          options
        ),
        originalProperties: properties,
        originalOptions: options,
        startTime: fxNow || createFxNow(),
        duration: options.duration,
        tweens: [],
        createTween: function (prop, end) {
          var tween = jQuery.Tween(
            elem,
            animation.opts,
            prop,
            end,
            animation.opts.specialEasing[prop] || animation.opts.easing
          );
          animation.tweens.push(tween);
          return tween;
        },
        stop: function (gotoEnd) {
          var index = 0,
            // If we are going to the end, we want to run all the tweens
            // otherwise we skip this part
            length = gotoEnd ? animation.tweens.length : 0;
          if (stopped) {
            return this;
          }
          stopped = true;
          for (; index < length; index++) {
            animation.tweens[index].run(1);
          }

          // Resolve when we played the last frame; otherwise, reject
          if (gotoEnd) {
            deferred.notifyWith(elem, [animation, 1, 0]);
            deferred.resolveWith(elem, [animation, gotoEnd]);
          } else {
            deferred.rejectWith(elem, [animation, gotoEnd]);
          }
          return this;
        },
      }),
      props = animation.props;

    propFilter(props, animation.opts.specialEasing);

    for (; index < length; index++) {
      result = Animation.prefilters[index].call(
        animation,
        elem,
        props,
        animation.opts
      );
      if (result) {
        if (isFunction(result.stop)) {
          jQuery._queueHooks(animation.elem, animation.opts.queue).stop =
            result.stop.bind(result);
        }
        return result;
      }
    }

    jQuery.map(props, createTween, animation);

    if (isFunction(animation.opts.start)) {
      animation.opts.start.call(elem, animation);
    }

    // Attach callbacks from options
    animation
      .progress(animation.opts.progress)
      .done(animation.opts.done, animation.opts.complete)
      .fail(animation.opts.fail)
      .always(animation.opts.always);

    jQuery.fx.timer(
      jQuery.extend(tick, {
        elem: elem,
        anim: animation,
        queue: animation.opts.queue,
      })
    );

    return animation;
  }

  jQuery.Animation = jQuery.extend(Animation, {
    tweeners: {
      "*": [
        function (prop, value) {
          var tween = this.createTween(prop, value);
          adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
          return tween;
        },
      ],
    },

    tweener: function (props, callback) {
      if (isFunction(props)) {
        callback = props;
        props = ["*"];
      } else {
        props = props.match(rnothtmlwhite);
      }

      var prop,
        index = 0,
        length = props.length;

      for (; index < length; index++) {
        prop = props[index];
        Animation.tweeners[prop] = Animation.tweeners[prop] || [];
        Animation.tweeners[prop].unshift(callback);
      }
    },

    prefilters: [defaultPrefilter],

    prefilter: function (callback, prepend) {
      if (prepend) {
        Animation.prefilters.unshift(callback);
      } else {
        Animation.prefilters.push(callback);
      }
    },
  });

  jQuery.speed = function (speed, easing, fn) {
    var opt =
      speed && typeof speed === "object"
        ? jQuery.extend({}, speed)
        : {
            complete: fn || (!fn && easing) || (isFunction(speed) && speed),
            duration: speed,
            easing: (fn && easing) || (easing && !isFunction(easing) && easing),
          };

    // Go to the end state if fx are off
    if (jQuery.fx.off) {
      opt.duration = 0;
    } else {
      if (typeof opt.duration !== "number") {
        if (opt.duration in jQuery.fx.speeds) {
          opt.duration = jQuery.fx.speeds[opt.duration];
        } else {
          opt.duration = jQuery.fx.speeds._default;
        }
      }
    }

    // Normalize opt.queue - true/undefined/null -> "fx"
    if (opt.queue == null || opt.queue === true) {
      opt.queue = "fx";
    }

    // Queueing
    opt.old = opt.complete;

    opt.complete = function () {
      if (isFunction(opt.old)) {
        opt.old.call(this);
      }

      if (opt.queue) {
        jQuery.dequeue(this, opt.queue);
      }
    };

    return opt;
  };

  jQuery.fn.extend({
    fadeTo: function (speed, to, easing, callback) {
      // Show any hidden elements after setting opacity to 0
      return (
        this.filter(isHiddenWithinTree)
          .css("opacity", 0)
          .show()

          // Animate to the value specified
          .end()
          .animate({ opacity: to }, speed, easing, callback)
      );
    },
    animate: function (prop, speed, easing, callback) {
      var empty = jQuery.isEmptyObject(prop),
        optall = jQuery.speed(speed, easing, callback),
        doAnimation = function () {
          // Operate on a copy of prop so per-property easing won't be lost
          var anim = Animation(this, jQuery.extend({}, prop), optall);

          // Empty animations, or finishing resolves immediately
          if (empty || dataPriv.get(this, "finish")) {
            anim.stop(true);
          }
        };

      doAnimation.finish = doAnimation;

      return empty || optall.queue === false
        ? this.each(doAnimation)
        : this.queue(optall.queue, doAnimation);
    },
    stop: function (type, clearQueue, gotoEnd) {
      var stopQueue = function (hooks) {
        var stop = hooks.stop;
        delete hooks.stop;
        stop(gotoEnd);
      };

      if (typeof type !== "string") {
        gotoEnd = clearQueue;
        clearQueue = type;
        type = undefined;
      }
      if (clearQueue) {
        this.queue(type || "fx", []);
      }

      return this.each(function () {
        var dequeue = true,
          index = type != null && type + "queueHooks",
          timers = jQuery.timers,
          data = dataPriv.get(this);

        if (index) {
          if (data[index] && data[index].stop) {
            stopQueue(data[index]);
          }
        } else {
          for (index in data) {
            if (data[index] && data[index].stop && rrun.test(index)) {
              stopQueue(data[index]);
            }
          }
        }

        for (index = timers.length; index--; ) {
          if (
            timers[index].elem === this &&
            (type == null || timers[index].queue === type)
          ) {
            timers[index].anim.stop(gotoEnd);
            dequeue = false;
            timers.splice(index, 1);
          }
        }

        // Start the next in the queue if the last step wasn't forced.
        // Timers currently will call their complete callbacks, which
        // will dequeue but only if they were gotoEnd.
        if (dequeue || !gotoEnd) {
          jQuery.dequeue(this, type);
        }
      });
    },
    finish: function (type) {
      if (type !== false) {
        type = type || "fx";
      }
      return this.each(function () {
        var index,
          data = dataPriv.get(this),
          queue = data[type + "queue"],
          hooks = data[type + "queueHooks"],
          timers = jQuery.timers,
          length = queue ? queue.length : 0;

        // Enable finishing flag on private data
        data.finish = true;

        // Empty the queue first
        jQuery.queue(this, type, []);

        if (hooks && hooks.stop) {
          hooks.stop.call(this, true);
        }

        // Look for any active animations, and finish them
        for (index = timers.length; index--; ) {
          if (timers[index].elem === this && timers[index].queue === type) {
            timers[index].anim.stop(true);
            timers.splice(index, 1);
          }
        }

        // Look for any animations in the old queue and finish them
        for (index = 0; index < length; index++) {
          if (queue[index] && queue[index].finish) {
            queue[index].finish.call(this);
          }
        }

        // Turn off finishing flag
        delete data.finish;
      });
    },
  });

  jQuery.each(["toggle", "show", "hide"], function (_i, name) {
    var cssFn = jQuery.fn[name];
    jQuery.fn[name] = function (speed, easing, callback) {
      return speed == null || typeof speed === "boolean"
        ? cssFn.apply(this, arguments)
        : this.animate(genFx(name, true), speed, easing, callback);
    };
  });

  // Generate shortcuts for custom animations
  jQuery.each(
    {
      slideDown: genFx("show"),
      slideUp: genFx("hide"),
      slideToggle: genFx("toggle"),
      fadeIn: { opacity: "show" },
      fadeOut: { opacity: "hide" },
      fadeToggle: { opacity: "toggle" },
    },
    function (name, props) {
      jQuery.fn[name] = function (speed, easing, callback) {
        return this.animate(props, speed, easing, callback);
      };
    }
  );

  jQuery.timers = [];
  jQuery.fx.tick = function () {
    var timer,
      i = 0,
      timers = jQuery.timers;

    fxNow = Date.now();

    for (; i < timers.length; i++) {
      timer = timers[i];

      // Run the timer and safely remove it when done (allowing for external removal)
      if (!timer() && timers[i] === timer) {
        timers.splice(i--, 1);
      }
    }

    if (!timers.length) {
      jQuery.fx.stop();
    }
    fxNow = undefined;
  };

  jQuery.fx.timer = function (timer) {
    jQuery.timers.push(timer);
    jQuery.fx.start();
  };

  jQuery.fx.interval = 13;
  jQuery.fx.start = function () {
    if (inProgress) {
      return;
    }

    inProgress = true;
    schedule();
  };

  jQuery.fx.stop = function () {
    inProgress = null;
  };

  jQuery.fx.speeds = {
    slow: 600,
    fast: 200,

    // Default speed
    _default: 400,
  };

  // Based off of the plugin by Clint Helfers, with permission.
  jQuery.fn.delay = function (time, type) {
    time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
    type = type || "fx";

    return this.queue(type, function (next, hooks) {
      var timeout = window.setTimeout(next, time);
      hooks.stop = function () {
        window.clearTimeout(timeout);
      };
    });
  };

  (function () {
    var input = document.createElement("input"),
      select = document.createElement("select"),
      opt = select.appendChild(document.createElement("option"));

    input.type = "checkbox";

    // Support: Android <=4.3 only
    // Default value for a checkbox should be "on"
    support.checkOn = input.value !== "";

    // Support: IE <=11 only
    // Must access selectedIndex to make default options select
    support.optSelected = opt.selected;

    // Support: IE <=11 only
    // An input loses its value after becoming a radio
    input = document.createElement("input");
    input.value = "t";
    input.type = "radio";
    support.radioValue = input.value === "t";
  })();

  var boolHook,
    attrHandle = jQuery.expr.attrHandle;

  jQuery.fn.extend({
    attr: function (name, value) {
      return access(this, jQuery.attr, name, value, arguments.length > 1);
    },

    removeAttr: function (name) {
      return this.each(function () {
        jQuery.removeAttr(this, name);
      });
    },
  });

  jQuery.extend({
    attr: function (elem, name, value) {
      var ret,
        hooks,
        nType = elem.nodeType;

      // Don't get/set attributes on text, comment and attribute nodes
      if (nType === 3 || nType === 8 || nType === 2) {
        return;
      }

      // Fallback to prop when attributes are not supported
      if (typeof elem.getAttribute === "undefined") {
        return jQuery.prop(elem, name, value);
      }

      // Attribute hooks are determined by the lowercase version
      // Grab necessary hook if one is defined
      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
        hooks =
          jQuery.attrHooks[name.toLowerCase()] ||
          (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
      }

      if (value !== undefined) {
        if (value === null) {
          jQuery.removeAttr(elem, name);
          return;
        }

        if (
          hooks &&
          "set" in hooks &&
          (ret = hooks.set(elem, value, name)) !== undefined
        ) {
          return ret;
        }

        elem.setAttribute(name, value + "");
        return value;
      }

      if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
        return ret;
      }

      ret = jQuery.find.attr(elem, name);

      // Non-existent attributes return null, we normalize to undefined
      return ret == null ? undefined : ret;
    },

    attrHooks: {
      type: {
        set: function (elem, value) {
          if (
            !support.radioValue &&
            value === "radio" &&
            nodeName(elem, "input")
          ) {
            var val = elem.value;
            elem.setAttribute("type", value);
            if (val) {
              elem.value = val;
            }
            return value;
          }
        },
      },
    },

    removeAttr: function (elem, value) {
      var name,
        i = 0,
        // Attribute names can contain non-HTML whitespace characters
        // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
        attrNames = value && value.match(rnothtmlwhite);

      if (attrNames && elem.nodeType === 1) {
        while ((name = attrNames[i++])) {
          elem.removeAttribute(name);
        }
      }
    },
  });

  // Hooks for boolean attributes
  boolHook = {
    set: function (elem, value, name) {
      if (value === false) {
        // Remove boolean attributes when set to false
        jQuery.removeAttr(elem, name);
      } else {
        elem.setAttribute(name, name);
      }
      return name;
    },
  };

  jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (_i, name) {
    var getter = attrHandle[name] || jQuery.find.attr;

    attrHandle[name] = function (elem, name, isXML) {
      var ret,
        handle,
        lowercaseName = name.toLowerCase();

      if (!isXML) {
        // Avoid an infinite loop by temporarily removing this function from the getter
        handle = attrHandle[lowercaseName];
        attrHandle[lowercaseName] = ret;
        ret = getter(elem, name, isXML) != null ? lowercaseName : null;
        attrHandle[lowercaseName] = handle;
      }
      return ret;
    };
  });

  var rfocusable = /^(?:input|select|textarea|button)$/i,
    rclickable = /^(?:a|area)$/i;

  jQuery.fn.extend({
    prop: function (name, value) {
      return access(this, jQuery.prop, name, value, arguments.length > 1);
    },

    removeProp: function (name) {
      return this.each(function () {
        delete this[jQuery.propFix[name] || name];
      });
    },
  });

  jQuery.extend({
    prop: function (elem, name, value) {
      var ret,
        hooks,
        nType = elem.nodeType;

      // Don't get/set properties on text, comment and attribute nodes
      if (nType === 3 || nType === 8 || nType === 2) {
        return;
      }

      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
        // Fix name and attach hooks
        name = jQuery.propFix[name] || name;
        hooks = jQuery.propHooks[name];
      }

      if (value !== undefined) {
        if (
          hooks &&
          "set" in hooks &&
          (ret = hooks.set(elem, value, name)) !== undefined
        ) {
          return ret;
        }

        return (elem[name] = value);
      }

      if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
        return ret;
      }

      return elem[name];
    },

    propHooks: {
      tabIndex: {
        get: function (elem) {
          // Support: IE <=9 - 11 only
          // elem.tabIndex doesn't always return the
          // correct value when it hasn't been explicitly set
          // Use proper attribute retrieval (trac-12072)
          var tabindex = jQuery.find.attr(elem, "tabindex");

          if (tabindex) {
            return parseInt(tabindex, 10);
          }

          if (
            rfocusable.test(elem.nodeName) ||
            (rclickable.test(elem.nodeName) && elem.href)
          ) {
            return 0;
          }

          return -1;
        },
      },
    },

    propFix: {
      for: "htmlFor",
      class: "className",
    },
  });

  // Support: IE <=11 only
  // Accessing the selectedIndex property
  // forces the browser to respect setting selected
  // on the option
  // The getter ensures a default option is selected
  // when in an optgroup
  // eslint rule "no-unused-expressions" is disabled for this code
  // since it considers such accessions noop
  if (!support.optSelected) {
    jQuery.propHooks.selected = {
      get: function (elem) {
        /* eslint no-unused-expressions: "off" */

        var parent = elem.parentNode;
        if (parent && parent.parentNode) {
          parent.parentNode.selectedIndex;
        }
        return null;
      },
      set: function (elem) {
        /* eslint no-unused-expressions: "off" */

        var parent = elem.parentNode;
        if (parent) {
          parent.selectedIndex;

          if (parent.parentNode) {
            parent.parentNode.selectedIndex;
          }
        }
      },
    };
  }

  jQuery.each(
    [
      "tabIndex",
      "readOnly",
      "maxLength",
      "cellSpacing",
      "cellPadding",
      "rowSpan",
      "colSpan",
      "useMap",
      "frameBorder",
      "contentEditable",
    ],
    function () {
      jQuery.propFix[this.toLowerCase()] = this;
    }
  );

  // Strip and collapse whitespace according to HTML spec
  // https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
  function stripAndCollapse(value) {
    var tokens = value.match(rnothtmlwhite) || [];
    return tokens.join(" ");
  }

  function getClass(elem) {
    return (elem.getAttribute && elem.getAttribute("class")) || "";
  }

  function classesToArray(value) {
    if (Array.isArray(value)) {
      return value;
    }
    if (typeof value === "string") {
      return value.match(rnothtmlwhite) || [];
    }
    return [];
  }

  jQuery.fn.extend({
    addClass: function (value) {
      var classNames, cur, curValue, className, i, finalValue;

      if (isFunction(value)) {
        return this.each(function (j) {
          jQuery(this).addClass(value.call(this, j, getClass(this)));
        });
      }

      classNames = classesToArray(value);

      if (classNames.length) {
        return this.each(function () {
          curValue = getClass(this);
          cur = this.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";

          if (cur) {
            for (i = 0; i < classNames.length; i++) {
              className = classNames[i];
              if (cur.indexOf(" " + className + " ") < 0) {
                cur += className + " ";
              }
            }

            // Only assign if different to avoid unneeded rendering.
            finalValue = stripAndCollapse(cur);
            if (curValue !== finalValue) {
              this.setAttribute("class", finalValue);
            }
          }
        });
      }

      return this;
    },

    removeClass: function (value) {
      var classNames, cur, curValue, className, i, finalValue;

      if (isFunction(value)) {
        return this.each(function (j) {
          jQuery(this).removeClass(value.call(this, j, getClass(this)));
        });
      }

      if (!arguments.length) {
        return this.attr("class", "");
      }

      classNames = classesToArray(value);

      if (classNames.length) {
        return this.each(function () {
          curValue = getClass(this);

          // This expression is here for better compressibility (see addClass)
          cur = this.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";

          if (cur) {
            for (i = 0; i < classNames.length; i++) {
              className = classNames[i];

              // Remove *all* instances
              while (cur.indexOf(" " + className + " ") > -1) {
                cur = cur.replace(" " + className + " ", " ");
              }
            }

            // Only assign if different to avoid unneeded rendering.
            finalValue = stripAndCollapse(cur);
            if (curValue !== finalValue) {
              this.setAttribute("class", finalValue);
            }
          }
        });
      }

      return this;
    },

    toggleClass: function (value, stateVal) {
      var classNames,
        className,
        i,
        self,
        type = typeof value,
        isValidValue = type === "string" || Array.isArray(value);

      if (isFunction(value)) {
        return this.each(function (i) {
          jQuery(this).toggleClass(
            value.call(this, i, getClass(this), stateVal),
            stateVal
          );
        });
      }

      if (typeof stateVal === "boolean" && isValidValue) {
        return stateVal ? this.addClass(value) : this.removeClass(value);
      }

      classNames = classesToArray(value);

      return this.each(function () {
        if (isValidValue) {
          // Toggle individual class names
          self = jQuery(this);

          for (i = 0; i < classNames.length; i++) {
            className = classNames[i];

            // Check each className given, space separated list
            if (self.hasClass(className)) {
              self.removeClass(className);
            } else {
              self.addClass(className);
            }
          }

          // Toggle whole class name
        } else if (value === undefined || type === "boolean") {
          className = getClass(this);
          if (className) {
            // Store className if set
            dataPriv.set(this, "__className__", className);
          }

          // If the element has a class name or if we're passed `false`,
          // then remove the whole classname (if there was one, the above saved it).
          // Otherwise bring back whatever was previously saved (if anything),
          // falling back to the empty string if nothing was stored.
          if (this.setAttribute) {
            this.setAttribute(
              "class",
              className || value === false
                ? ""
                : dataPriv.get(this, "__className__") || ""
            );
          }
        }
      });
    },

    hasClass: function (selector) {
      var className,
        elem,
        i = 0;

      className = " " + selector + " ";
      while ((elem = this[i++])) {
        if (
          elem.nodeType === 1 &&
          (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1
        ) {
          return true;
        }
      }

      return false;
    },
  });

  var rreturn = /\r/g;

  jQuery.fn.extend({
    val: function (value) {
      var hooks,
        ret,
        valueIsFunction,
        elem = this[0];

      if (!arguments.length) {
        if (elem) {
          hooks =
            jQuery.valHooks[elem.type] ||
            jQuery.valHooks[elem.nodeName.toLowerCase()];

          if (
            hooks &&
            "get" in hooks &&
            (ret = hooks.get(elem, "value")) !== undefined
          ) {
            return ret;
          }

          ret = elem.value;

          // Handle most common string cases
          if (typeof ret === "string") {
            return ret.replace(rreturn, "");
          }

          // Handle cases where value is null/undef or number
          return ret == null ? "" : ret;
        }

        return;
      }

      valueIsFunction = isFunction(value);

      return this.each(function (i) {
        var val;

        if (this.nodeType !== 1) {
          return;
        }

        if (valueIsFunction) {
          val = value.call(this, i, jQuery(this).val());
        } else {
          val = value;
        }

        // Treat null/undefined as ""; convert numbers to string
        if (val == null) {
          val = "";
        } else if (typeof val === "number") {
          val += "";
        } else if (Array.isArray(val)) {
          val = jQuery.map(val, function (value) {
            return value == null ? "" : value + "";
          });
        }

        hooks =
          jQuery.valHooks[this.type] ||
          jQuery.valHooks[this.nodeName.toLowerCase()];

        // If set returns undefined, fall back to normal setting
        if (
          !hooks ||
          !("set" in hooks) ||
          hooks.set(this, val, "value") === undefined
        ) {
          this.value = val;
        }
      });
    },
  });

  jQuery.extend({
    valHooks: {
      option: {
        get: function (elem) {
          var val = jQuery.find.attr(elem, "value");
          return val != null
            ? val
            : // Support: IE <=10 - 11 only
              // option.text throws exceptions (trac-14686, trac-14858)
              // Strip and collapse whitespace
              // https://html.spec.whatwg.org/#strip-and-collapse-whitespace
              stripAndCollapse(jQuery.text(elem));
        },
      },
      select: {
        get: function (elem) {
          var value,
            option,
            i,
            options = elem.options,
            index = elem.selectedIndex,
            one = elem.type === "select-one",
            values = one ? null : [],
            max = one ? index + 1 : options.length;

          if (index < 0) {
            i = max;
          } else {
            i = one ? index : 0;
          }

          // Loop through all the selected options
          for (; i < max; i++) {
            option = options[i];

            // Support: IE <=9 only
            // IE8-9 doesn't update selected after form reset (trac-2551)
            if (
              (option.selected || i === index) &&
              // Don't return options that are disabled or in a disabled optgroup
              !option.disabled &&
              (!option.parentNode.disabled ||
                !nodeName(option.parentNode, "optgroup"))
            ) {
              // Get the specific value for the option
              value = jQuery(option).val();

              // We don't need an array for one selects
              if (one) {
                return value;
              }

              // Multi-Selects return an array
              values.push(value);
            }
          }

          return values;
        },

        set: function (elem, value) {
          var optionSet,
            option,
            options = elem.options,
            values = jQuery.makeArray(value),
            i = options.length;

          while (i--) {
            option = options[i];

            /* eslint-disable no-cond-assign */

            if (
              (option.selected =
                jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1)
            ) {
              optionSet = true;
            }

            /* eslint-enable no-cond-assign */
          }

          // Force browsers to behave consistently when non-matching value is set
          if (!optionSet) {
            elem.selectedIndex = -1;
          }
          return values;
        },
      },
    },
  });

  // Radios and checkboxes getter/setter
  jQuery.each(["radio", "checkbox"], function () {
    jQuery.valHooks[this] = {
      set: function (elem, value) {
        if (Array.isArray(value)) {
          return (elem.checked =
            jQuery.inArray(jQuery(elem).val(), value) > -1);
        }
      },
    };
    if (!support.checkOn) {
      jQuery.valHooks[this].get = function (elem) {
        return elem.getAttribute("value") === null ? "on" : elem.value;
      };
    }
  });

  // Return jQuery for attributes-only inclusion

  support.focusin = "onfocusin" in window;

  var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
    stopPropagationCallback = function (e) {
      e.stopPropagation();
    };

  jQuery.extend(jQuery.event, {
    trigger: function (event, data, elem, onlyHandlers) {
      var i,
        cur,
        tmp,
        bubbleType,
        ontype,
        handle,
        special,
        lastElement,
        eventPath = [elem || document],
        type = hasOwn.call(event, "type") ? event.type : event,
        namespaces = hasOwn.call(event, "namespace")
          ? event.namespace.split(".")
          : [];

      cur = lastElement = tmp = elem = elem || document;

      // Don't do events on text and comment nodes
      if (elem.nodeType === 3 || elem.nodeType === 8) {
        return;
      }

      // focus/blur morphs to focusin/out; ensure we're not firing them right now
      if (rfocusMorph.test(type + jQuery.event.triggered)) {
        return;
      }

      if (type.indexOf(".") > -1) {
        // Namespaced trigger; create a regexp to match event type in handle()
        namespaces = type.split(".");
        type = namespaces.shift();
        namespaces.sort();
      }
      ontype = type.indexOf(":") < 0 && "on" + type;

      // Caller can pass in a jQuery.Event object, Object, or just an event type string
      event = event[jQuery.expando]
        ? event
        : new jQuery.Event(type, typeof event === "object" && event);

      // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
      event.isTrigger = onlyHandlers ? 2 : 3;
      event.namespace = namespaces.join(".");
      event.rnamespace = event.namespace
        ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)")
        : null;

      // Clean up the event in case it is being reused
      event.result = undefined;
      if (!event.target) {
        event.target = elem;
      }

      // Clone any incoming data and prepend the event, creating the handler arg list
      data = data == null ? [event] : jQuery.makeArray(data, [event]);

      // Allow special events to draw outside the lines
      special = jQuery.event.special[type] || {};
      if (
        !onlyHandlers &&
        special.trigger &&
        special.trigger.apply(elem, data) === false
      ) {
        return;
      }

      // Determine event propagation path in advance, per W3C events spec (trac-9951)
      // Bubble up to document, then to window; watch for a global ownerDocument var (trac-9724)
      if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {
        bubbleType = special.delegateType || type;
        if (!rfocusMorph.test(bubbleType + type)) {
          cur = cur.parentNode;
        }
        for (; cur; cur = cur.parentNode) {
          eventPath.push(cur);
          tmp = cur;
        }

        // Only add window if we got to document (e.g., not plain obj or detached DOM)
        if (tmp === (elem.ownerDocument || document)) {
          eventPath.push(tmp.defaultView || tmp.parentWindow || window);
        }
      }

      // Fire handlers on the event path
      i = 0;
      while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
        lastElement = cur;
        event.type = i > 1 ? bubbleType : special.bindType || type;

        // jQuery handler
        handle =
          (dataPriv.get(cur, "events") || Object.create(null))[event.type] &&
          dataPriv.get(cur, "handle");
        if (handle) {
          handle.apply(cur, data);
        }

        // Native handler
        handle = ontype && cur[ontype];
        if (handle && handle.apply && acceptData(cur)) {
          event.result = handle.apply(cur, data);
          if (event.result === false) {
            event.preventDefault();
          }
        }
      }
      event.type = type;

      // If nobody prevented the default action, do it now
      if (!onlyHandlers && !event.isDefaultPrevented()) {
        if (
          (!special._default ||
            special._default.apply(eventPath.pop(), data) === false) &&
          acceptData(elem)
        ) {
          // Call a native DOM method on the target with the same name as the event.
          // Don't do default actions on window, that's where global variables be (trac-6170)
          if (ontype && isFunction(elem[type]) && !isWindow(elem)) {
            // Don't re-trigger an onFOO event when we call its FOO() method
            tmp = elem[ontype];

            if (tmp) {
              elem[ontype] = null;
            }

            // Prevent re-triggering of the same event, since we already bubbled it above
            jQuery.event.triggered = type;

            if (event.isPropagationStopped()) {
              lastElement.addEventListener(type, stopPropagationCallback);
            }

            elem[type]();

            if (event.isPropagationStopped()) {
              lastElement.removeEventListener(type, stopPropagationCallback);
            }

            jQuery.event.triggered = undefined;

            if (tmp) {
              elem[ontype] = tmp;
            }
          }
        }
      }

      return event.result;
    },

    // Piggyback on a donor event to simulate a different one
    // Used only for `focus(in | out)` events
    simulate: function (type, elem, event) {
      var e = jQuery.extend(new jQuery.Event(), event, {
        type: type,
        isSimulated: true,
      });

      jQuery.event.trigger(e, null, elem);
    },
  });

  jQuery.fn.extend({
    trigger: function (type, data) {
      return this.each(function () {
        jQuery.event.trigger(type, data, this);
      });
    },
    triggerHandler: function (type, data) {
      var elem = this[0];
      if (elem) {
        return jQuery.event.trigger(type, data, elem, true);
      }
    },
  });

  // Support: Firefox <=44
  // Firefox doesn't have focus(in | out) events
  // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
  //
  // Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
  // focus(in | out) events fire after focus & blur events,
  // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
  // Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
  if (!support.focusin) {
    jQuery.each({ focus: "focusin", blur: "focusout" }, function (orig, fix) {
      // Attach a single capturing handler on the document while someone wants focusin/focusout
      var handler = function (event) {
        jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
      };

      jQuery.event.special[fix] = {
        setup: function () {
          // Handle: regular nodes (via `this.ownerDocument`), window
          // (via `this.document`) & document (via `this`).
          var doc = this.ownerDocument || this.document || this,
            attaches = dataPriv.access(doc, fix);

          if (!attaches) {
            doc.addEventListener(orig, handler, true);
          }
          dataPriv.access(doc, fix, (attaches || 0) + 1);
        },
        teardown: function () {
          var doc = this.ownerDocument || this.document || this,
            attaches = dataPriv.access(doc, fix) - 1;

          if (!attaches) {
            doc.removeEventListener(orig, handler, true);
            dataPriv.remove(doc, fix);
          } else {
            dataPriv.access(doc, fix, attaches);
          }
        },
      };
    });
  }
  var location = window.location;

  var nonce = { guid: Date.now() };

  var rquery = /\?/;

  // Cross-browser xml parsing
  jQuery.parseXML = function (data) {
    var xml, parserErrorElem;
    if (!data || typeof data !== "string") {
      return null;
    }

    // Support: IE 9 - 11 only
    // IE throws on parseFromString with invalid input.
    try {
      xml = new window.DOMParser().parseFromString(data, "text/xml");
    } catch (e) {}

    parserErrorElem = xml && xml.getElementsByTagName("parsererror")[0];
    if (!xml || parserErrorElem) {
      jQuery.error(
        "Invalid XML: " +
          (parserErrorElem
            ? jQuery
                .map(parserErrorElem.childNodes, function (el) {
                  return el.textContent;
                })
                .join("\n")
            : data)
      );
    }
    return xml;
  };

  var rbracket = /\[\]$/,
    rCRLF = /\r?\n/g,
    rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
    rsubmittable = /^(?:input|select|textarea|keygen)/i;

  function buildParams(prefix, obj, traditional, add) {
    var name;

    if (Array.isArray(obj)) {
      // Serialize array item.
      jQuery.each(obj, function (i, v) {
        if (traditional || rbracket.test(prefix)) {
          // Treat each array item as a scalar.
          add(prefix, v);
        } else {
          // Item is non-scalar (array or object), encode its numeric index.
          buildParams(
            prefix + "[" + (typeof v === "object" && v != null ? i : "") + "]",
            v,
            traditional,
            add
          );
        }
      });
    } else if (!traditional && toType(obj) === "object") {
      // Serialize object item.
      for (name in obj) {
        buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
      }
    } else {
      // Serialize scalar item.
      add(prefix, obj);
    }
  }

  // Serialize an array of form elements or a set of
  // key/values into a query string
  jQuery.param = function (a, traditional) {
    var prefix,
      s = [],
      add = function (key, valueOrFunction) {
        // If value is a function, invoke it and use its return value
        var value = isFunction(valueOrFunction)
          ? valueOrFunction()
          : valueOrFunction;

        s[s.length] =
          encodeURIComponent(key) +
          "=" +
          encodeURIComponent(value == null ? "" : value);
      };

    if (a == null) {
      return "";
    }

    // If an array was passed in, assume that it is an array of form elements.
    if (Array.isArray(a) || (a.jquery && !jQuery.isPlainObject(a))) {
      // Serialize the form elements
      jQuery.each(a, function () {
        add(this.name, this.value);
      });
    } else {
      // If traditional, encode the "old" way (the way 1.3.2 or older
      // did it), otherwise encode params recursively.
      for (prefix in a) {
        buildParams(prefix, a[prefix], traditional, add);
      }
    }

    // Return the resulting serialization
    return s.join("&");
  };

  jQuery.fn.extend({
    serialize: function () {
      return jQuery.param(this.serializeArray());
    },
    serializeArray: function () {
      return this.map(function () {
        // Can add propHook for "elements" to filter or add form elements
        var elements = jQuery.prop(this, "elements");
        return elements ? jQuery.makeArray(elements) : this;
      })
        .filter(function () {
          var type = this.type;

          // Use .is( ":disabled" ) so that fieldset[disabled] works
          return (
            this.name &&
            !jQuery(this).is(":disabled") &&
            rsubmittable.test(this.nodeName) &&
            !rsubmitterTypes.test(type) &&
            (this.checked || !rcheckableType.test(type))
          );
        })
        .map(function (_i, elem) {
          var val = jQuery(this).val();

          if (val == null) {
            return null;
          }

          if (Array.isArray(val)) {
            return jQuery.map(val, function (val) {
              return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
            });
          }

          return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
        })
        .get();
    },
  });

  var r20 = /%20/g,
    rhash = /#.*$/,
    rantiCache = /([?&])_=[^&]*/,
    rheaders = /^(.*?):[ \t]*([^\r\n]*)$/gm,
    // trac-7653, trac-8125, trac-8152: local protocol detection
    rlocalProtocol =
      /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
    rnoContent = /^(?:GET|HEAD)$/,
    rprotocol = /^\/\//,
    /* Prefilters
     * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
     * 2) These are called:
     *    - BEFORE asking for a transport
     *    - AFTER param serialization (s.data is a string if s.processData is true)
     * 3) key is the dataType
     * 4) the catchall symbol "*" can be used
     * 5) execution will start with transport dataType and THEN continue down to "*" if needed
     */
    prefilters = {},
    /* Transports bindings
     * 1) key is the dataType
     * 2) the catchall symbol "*" can be used
     * 3) selection will start with transport dataType and THEN go to "*" if needed
     */
    transports = {},
    // Avoid comment-prolog char sequence (trac-10098); must appease lint and evade compression
    allTypes = "*/".concat("*"),
    // Anchor tag for parsing the document origin
    originAnchor = document.createElement("a");

  originAnchor.href = location.href;

  // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
  function addToPrefiltersOrTransports(structure) {
    // dataTypeExpression is optional and defaults to "*"
    return function (dataTypeExpression, func) {
      if (typeof dataTypeExpression !== "string") {
        func = dataTypeExpression;
        dataTypeExpression = "*";
      }

      var dataType,
        i = 0,
        dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];

      if (isFunction(func)) {
        // For each dataType in the dataTypeExpression
        while ((dataType = dataTypes[i++])) {
          // Prepend if requested
          if (dataType[0] === "+") {
            dataType = dataType.slice(1) || "*";
            (structure[dataType] = structure[dataType] || []).unshift(func);

            // Otherwise append
          } else {
            (structure[dataType] = structure[dataType] || []).push(func);
          }
        }
      }
    };
  }

  // Base inspection function for prefilters and transports
  function inspectPrefiltersOrTransports(
    structure,
    options,
    originalOptions,
    jqXHR
  ) {
    var inspected = {},
      seekingTransport = structure === transports;

    function inspect(dataType) {
      var selected;
      inspected[dataType] = true;
      jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
        var dataTypeOrTransport = prefilterOrFactory(
          options,
          originalOptions,
          jqXHR
        );
        if (
          typeof dataTypeOrTransport === "string" &&
          !seekingTransport &&
          !inspected[dataTypeOrTransport]
        ) {
          options.dataTypes.unshift(dataTypeOrTransport);
          inspect(dataTypeOrTransport);
          return false;
        } else if (seekingTransport) {
          return !(selected = dataTypeOrTransport);
        }
      });
      return selected;
    }

    return inspect(options.dataTypes[0]) || (!inspected["*"] && inspect("*"));
  }

  // A special extend for ajax options
  // that takes "flat" options (not to be deep extended)
  // Fixes trac-9887
  function ajaxExtend(target, src) {
    var key,
      deep,
      flatOptions = jQuery.ajaxSettings.flatOptions || {};

    for (key in src) {
      if (src[key] !== undefined) {
        (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
      }
    }
    if (deep) {
      jQuery.extend(true, target, deep);
    }

    return target;
  }

  /* Handles responses to an ajax request:
   * - finds the right dataType (mediates between content-type and expected dataType)
   * - returns the corresponding response
   */
  function ajaxHandleResponses(s, jqXHR, responses) {
    var ct,
      type,
      finalDataType,
      firstDataType,
      contents = s.contents,
      dataTypes = s.dataTypes;

    // Remove auto dataType and get content-type in the process
    while (dataTypes[0] === "*") {
      dataTypes.shift();
      if (ct === undefined) {
        ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
      }
    }

    // Check if we're dealing with a known content-type
    if (ct) {
      for (type in contents) {
        if (contents[type] && contents[type].test(ct)) {
          dataTypes.unshift(type);
          break;
        }
      }
    }

    // Check to see if we have a response for the expected dataType
    if (dataTypes[0] in responses) {
      finalDataType = dataTypes[0];
    } else {
      // Try convertible dataTypes
      for (type in responses) {
        if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
          finalDataType = type;
          break;
        }
        if (!firstDataType) {
          firstDataType = type;
        }
      }

      // Or just use first one
      finalDataType = finalDataType || firstDataType;
    }

    // If we found a dataType
    // We add the dataType to the list if needed
    // and return the corresponding response
    if (finalDataType) {
      if (finalDataType !== dataTypes[0]) {
        dataTypes.unshift(finalDataType);
      }
      return responses[finalDataType];
    }
  }

  /* Chain conversions given the request and the original response
   * Also sets the responseXXX fields on the jqXHR instance
   */
  function ajaxConvert(s, response, jqXHR, isSuccess) {
    var conv2,
      current,
      conv,
      tmp,
      prev,
      converters = {},
      // Work with a copy of dataTypes in case we need to modify it for conversion
      dataTypes = s.dataTypes.slice();

    // Create converters map with lowercased keys
    if (dataTypes[1]) {
      for (conv in s.converters) {
        converters[conv.toLowerCase()] = s.converters[conv];
      }
    }

    current = dataTypes.shift();

    // Convert to each sequential dataType
    while (current) {
      if (s.responseFields[current]) {
        jqXHR[s.responseFields[current]] = response;
      }

      // Apply the dataFilter if provided
      if (!prev && isSuccess && s.dataFilter) {
        response = s.dataFilter(response, s.dataType);
      }

      prev = current;
      current = dataTypes.shift();

      if (current) {
        // There's only work to do if current dataType is non-auto
        if (current === "*") {
          current = prev;

          // Convert response if prev dataType is non-auto and differs from current
        } else if (prev !== "*" && prev !== current) {
          // Seek a direct converter
          conv = converters[prev + " " + current] || converters["* " + current];

          // If none found, seek a pair
          if (!conv) {
            for (conv2 in converters) {
              // If conv2 outputs current
              tmp = conv2.split(" ");
              if (tmp[1] === current) {
                // If prev can be converted to accepted input
                conv =
                  converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
                if (conv) {
                  // Condense equivalence converters
                  if (conv === true) {
                    conv = converters[conv2];

                    // Otherwise, insert the intermediate dataType
                  } else if (converters[conv2] !== true) {
                    current = tmp[0];
                    dataTypes.unshift(tmp[1]);
                  }
                  break;
                }
              }
            }
          }

          // Apply converter (if not an equivalence)
          if (conv !== true) {
            // Unless errors are allowed to bubble, catch and return them
            if (conv && s.throws) {
              response = conv(response);
            } else {
              try {
                response = conv(response);
              } catch (e) {
                return {
                  state: "parsererror",
                  error: conv
                    ? e
                    : "No conversion from " + prev + " to " + current,
                };
              }
            }
          }
        }
      }
    }

    return { state: "success", data: response };
  }

  jQuery.extend({
    // Counter for holding the number of active queries
    active: 0,

    // Last-Modified header cache for next request
    lastModified: {},
    etag: {},

    ajaxSettings: {
      url: location.href,
      type: "GET",
      isLocal: rlocalProtocol.test(location.protocol),
      global: true,
      processData: true,
      async: true,
      contentType: "application/x-www-form-urlencoded; charset=UTF-8",

      /*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

      accepts: {
        "*": allTypes,
        text: "text/plain",
        html: "text/html",
        xml: "application/xml, text/xml",
        json: "application/json, text/javascript",
      },

      contents: {
        xml: /\bxml\b/,
        html: /\bhtml/,
        json: /\bjson\b/,
      },

      responseFields: {
        xml: "responseXML",
        text: "responseText",
        json: "responseJSON",
      },

      // Data converters
      // Keys separate source (or catchall "*") and destination types with a single space
      converters: {
        // Convert anything to text
        "* text": String,

        // Text to html (true = no transformation)
        "text html": true,

        // Evaluate text as a json expression
        "text json": JSON.parse,

        // Parse text as xml
        "text xml": jQuery.parseXML,
      },

      // For options that shouldn't be deep extended:
      // you can add your own custom options here if
      // and when you create one that shouldn't be
      // deep extended (see ajaxExtend)
      flatOptions: {
        url: true,
        context: true,
      },
    },

    // Creates a full fledged settings object into target
    // with both ajaxSettings and settings fields.
    // If target is omitted, writes into ajaxSettings.
    ajaxSetup: function (target, settings) {
      return settings
        ? // Building a settings object
          ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings)
        : // Extending ajaxSettings
          ajaxExtend(jQuery.ajaxSettings, target);
    },

    ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
    ajaxTransport: addToPrefiltersOrTransports(transports),

    // Main method
    ajax: function (url, options) {
      // If url is an object, simulate pre-1.5 signature
      if (typeof url === "object") {
        options = url;
        url = undefined;
      }

      // Force options to be an object
      options = options || {};

      var transport,
        // URL without anti-cache param
        cacheURL,
        // Response headers
        responseHeadersString,
        responseHeaders,
        // timeout handle
        timeoutTimer,
        // Url cleanup var
        urlAnchor,
        // Request state (becomes false upon send and true upon completion)
        completed,
        // To know if global events are to be dispatched
        fireGlobals,
        // Loop variable
        i,
        // uncached part of the url
        uncached,
        // Create the final options object
        s = jQuery.ajaxSetup({}, options),
        // Callbacks context
        callbackContext = s.context || s,
        // Context for global events is callbackContext if it is a DOM node or jQuery collection
        globalEventContext =
          s.context && (callbackContext.nodeType || callbackContext.jquery)
            ? jQuery(callbackContext)
            : jQuery.event,
        // Deferreds
        deferred = jQuery.Deferred(),
        completeDeferred = jQuery.Callbacks("once memory"),
        // Status-dependent callbacks
        statusCode = s.statusCode || {},
        // Headers (they are sent all at once)
        requestHeaders = {},
        requestHeadersNames = {},
        // Default abort message
        strAbort = "canceled",
        // Fake xhr
        jqXHR = {
          readyState: 0,

          // Builds headers hashtable if needed
          getResponseHeader: function (key) {
            var match;
            if (completed) {
              if (!responseHeaders) {
                responseHeaders = {};
                while ((match = rheaders.exec(responseHeadersString))) {
                  responseHeaders[match[1].toLowerCase() + " "] = (
                    responseHeaders[match[1].toLowerCase() + " "] || []
                  ).concat(match[2]);
                }
              }
              match = responseHeaders[key.toLowerCase() + " "];
            }
            return match == null ? null : match.join(", ");
          },

          // Raw string
          getAllResponseHeaders: function () {
            return completed ? responseHeadersString : null;
          },

          // Caches the header
          setRequestHeader: function (name, value) {
            if (completed == null) {
              name = requestHeadersNames[name.toLowerCase()] =
                requestHeadersNames[name.toLowerCase()] || name;
              requestHeaders[name] = value;
            }
            return this;
          },

          // Overrides response content-type header
          overrideMimeType: function (type) {
            if (completed == null) {
              s.mimeType = type;
            }
            return this;
          },

          // Status-dependent callbacks
          statusCode: function (map) {
            var code;
            if (map) {
              if (completed) {
                // Execute the appropriate callbacks
                jqXHR.always(map[jqXHR.status]);
              } else {
                // Lazy-add the new callbacks in a way that preserves old ones
                for (code in map) {
                  statusCode[code] = [statusCode[code], map[code]];
                }
              }
            }
            return this;
          },

          // Cancel the request
          abort: function (statusText) {
            var finalText = statusText || strAbort;
            if (transport) {
              transport.abort(finalText);
            }
            done(0, finalText);
            return this;
          },
        };

      // Attach deferreds
      deferred.promise(jqXHR);

      // Add protocol if not provided (prefilters might expect it)
      // Handle falsy url in the settings object (trac-10093: consistency with old signature)
      // We also use the url parameter if available
      s.url = ((url || s.url || location.href) + "").replace(
        rprotocol,
        location.protocol + "//"
      );

      // Alias method option to type as per ticket trac-12004
      s.type = options.method || options.type || s.method || s.type;

      // Extract dataTypes list
      s.dataTypes = (s.dataType || "*").toLowerCase().match(rnothtmlwhite) || [
        "",
      ];

      // A cross-domain request is in order when the origin doesn't match the current origin.
      if (s.crossDomain == null) {
        urlAnchor = document.createElement("a");

        // Support: IE <=8 - 11, Edge 12 - 15
        // IE throws exception on accessing the href property if url is malformed,
        // e.g. http://example.com:80x/
        try {
          urlAnchor.href = s.url;

          // Support: IE <=8 - 11 only
          // Anchor's host property isn't correctly set when s.url is relative
          urlAnchor.href = urlAnchor.href;
          s.crossDomain =
            originAnchor.protocol + "//" + originAnchor.host !==
            urlAnchor.protocol + "//" + urlAnchor.host;
        } catch (e) {
          // If there is an error parsing the URL, assume it is crossDomain,
          // it can be rejected by the transport if it is invalid
          s.crossDomain = true;
        }
      }

      // Convert data if not already a string
      if (s.data && s.processData && typeof s.data !== "string") {
        s.data = jQuery.param(s.data, s.traditional);
      }

      // Apply prefilters
      inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);

      // If request was aborted inside a prefilter, stop there
      if (completed) {
        return jqXHR;
      }

      // We can fire global events as of now if asked to
      // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (trac-15118)
      fireGlobals = jQuery.event && s.global;

      // Watch for a new set of requests
      if (fireGlobals && jQuery.active++ === 0) {
        jQuery.event.trigger("ajaxStart");
      }

      // Uppercase the type
      s.type = s.type.toUpperCase();

      // Determine if request has content
      s.hasContent = !rnoContent.test(s.type);

      // Save the URL in case we're toying with the If-Modified-Since
      // and/or If-None-Match header later on
      // Remove hash to simplify url manipulation
      cacheURL = s.url.replace(rhash, "");

      // More options handling for requests with no content
      if (!s.hasContent) {
        // Remember the hash so we can put it back
        uncached = s.url.slice(cacheURL.length);

        // If data is available and should be processed, append data to url
        if (s.data && (s.processData || typeof s.data === "string")) {
          cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data;

          // trac-9682: remove data so that it's not used in an eventual retry
          delete s.data;
        }

        // Add or update anti-cache param if needed
        if (s.cache === false) {
          cacheURL = cacheURL.replace(rantiCache, "$1");
          uncached =
            (rquery.test(cacheURL) ? "&" : "?") +
            "_=" +
            nonce.guid++ +
            uncached;
        }

        // Put hash and anti-cache on the URL that will be requested (gh-1732)
        s.url = cacheURL + uncached;

        // Change '%20' to '+' if this is encoded form body content (gh-2658)
      } else if (
        s.data &&
        s.processData &&
        (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0
      ) {
        s.data = s.data.replace(r20, "+");
      }

      // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
      if (s.ifModified) {
        if (jQuery.lastModified[cacheURL]) {
          jqXHR.setRequestHeader(
            "If-Modified-Since",
            jQuery.lastModified[cacheURL]
          );
        }
        if (jQuery.etag[cacheURL]) {
          jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
        }
      }

      // Set the correct header, if data is being sent
      if (
        (s.data && s.hasContent && s.contentType !== false) ||
        options.contentType
      ) {
        jqXHR.setRequestHeader("Content-Type", s.contentType);
      }

      // Set the Accepts header for the server, depending on the dataType
      jqXHR.setRequestHeader(
        "Accept",
        s.dataTypes[0] && s.accepts[s.dataTypes[0]]
          ? s.accepts[s.dataTypes[0]] +
              (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "")
          : s.accepts["*"]
      );

      // Check for headers option
      for (i in s.headers) {
        jqXHR.setRequestHeader(i, s.headers[i]);
      }

      // Allow custom headers/mimetypes and early abort
      if (
        s.beforeSend &&
        (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)
      ) {
        // Abort if not done already and return
        return jqXHR.abort();
      }

      // Aborting is no longer a cancellation
      strAbort = "abort";

      // Install callbacks on deferreds
      completeDeferred.add(s.complete);
      jqXHR.done(s.success);
      jqXHR.fail(s.error);

      // Get transport
      transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);

      // If no transport, we auto-abort
      if (!transport) {
        done(-1, "No Transport");
      } else {
        jqXHR.readyState = 1;

        // Send global event
        if (fireGlobals) {
          globalEventContext.trigger("ajaxSend", [jqXHR, s]);
        }

        // If request was aborted inside ajaxSend, stop there
        if (completed) {
          return jqXHR;
        }

        // Timeout
        if (s.async && s.timeout > 0) {
          timeoutTimer = window.setTimeout(function () {
            jqXHR.abort("timeout");
          }, s.timeout);
        }

        try {
          completed = false;
          transport.send(requestHeaders, done);
        } catch (e) {
          // Rethrow post-completion exceptions
          if (completed) {
            throw e;
          }

          // Propagate others as results
          done(-1, e);
        }
      }

      // Callback for when everything is done
      function done(status, nativeStatusText, responses, headers) {
        var isSuccess,
          success,
          error,
          response,
          modified,
          statusText = nativeStatusText;

        // Ignore repeat invocations
        if (completed) {
          return;
        }

        completed = true;

        // Clear timeout if it exists
        if (timeoutTimer) {
          window.clearTimeout(timeoutTimer);
        }

        // Dereference transport for early garbage collection
        // (no matter how long the jqXHR object will be used)
        transport = undefined;

        // Cache response headers
        responseHeadersString = headers || "";

        // Set readyState
        jqXHR.readyState = status > 0 ? 4 : 0;

        // Determine if successful
        isSuccess = (status >= 200 && status < 300) || status === 304;

        // Get response data
        if (responses) {
          response = ajaxHandleResponses(s, jqXHR, responses);
        }

        // Use a noop converter for missing script but not if jsonp
        if (
          !isSuccess &&
          jQuery.inArray("script", s.dataTypes) > -1 &&
          jQuery.inArray("json", s.dataTypes) < 0
        ) {
          s.converters["text script"] = function () {};
        }

        // Convert no matter what (that way responseXXX fields are always set)
        response = ajaxConvert(s, response, jqXHR, isSuccess);

        // If successful, handle type chaining
        if (isSuccess) {
          // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
          if (s.ifModified) {
            modified = jqXHR.getResponseHeader("Last-Modified");
            if (modified) {
              jQuery.lastModified[cacheURL] = modified;
            }
            modified = jqXHR.getResponseHeader("etag");
            if (modified) {
              jQuery.etag[cacheURL] = modified;
            }
          }

          // if no content
          if (status === 204 || s.type === "HEAD") {
            statusText = "nocontent";

            // if not modified
          } else if (status === 304) {
            statusText = "notmodified";

            // If we have data, let's convert it
          } else {
            statusText = response.state;
            success = response.data;
            error = response.error;
            isSuccess = !error;
          }
        } else {
          // Extract error from statusText and normalize for non-aborts
          error = statusText;
          if (status || !statusText) {
            statusText = "error";
            if (status < 0) {
              status = 0;
            }
          }
        }

        // Set data for the fake xhr object
        jqXHR.status = status;
        jqXHR.statusText = (nativeStatusText || statusText) + "";

        // Success/Error
        if (isSuccess) {
          deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
        } else {
          deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
        }

        // Status-dependent callbacks
        jqXHR.statusCode(statusCode);
        statusCode = undefined;

        if (fireGlobals) {
          globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [
            jqXHR,
            s,
            isSuccess ? success : error,
          ]);
        }

        // Complete
        completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

        if (fireGlobals) {
          globalEventContext.trigger("ajaxComplete", [jqXHR, s]);

          // Handle the global AJAX counter
          if (!--jQuery.active) {
            jQuery.event.trigger("ajaxStop");
          }
        }
      }

      return jqXHR;
    },

    getJSON: function (url, data, callback) {
      return jQuery.get(url, data, callback, "json");
    },

    getScript: function (url, callback) {
      return jQuery.get(url, undefined, callback, "script");
    },
  });

  jQuery.each(["get", "post"], function (_i, method) {
    jQuery[method] = function (url, data, callback, type) {
      // Shift arguments if data argument was omitted
      if (isFunction(data)) {
        type = type || callback;
        callback = data;
        data = undefined;
      }

      // The url can be an options object (which then must have .url)
      return jQuery.ajax(
        jQuery.extend(
          {
            url: url,
            type: method,
            dataType: type,
            data: data,
            success: callback,
          },
          jQuery.isPlainObject(url) && url
        )
      );
    };
  });

  jQuery.ajaxPrefilter(function (s) {
    var i;
    for (i in s.headers) {
      if (i.toLowerCase() === "content-type") {
        s.contentType = s.headers[i] || "";
      }
    }
  });

  jQuery._evalUrl = function (url, options, doc) {
    return jQuery.ajax({
      url: url,

      // Make this explicit, since user can override this through ajaxSetup (trac-11264)
      type: "GET",
      dataType: "script",
      cache: true,
      async: false,
      global: false,

      // Only evaluate the response if it is successful (gh-4126)
      // dataFilter is not invoked for failure responses, so using it instead
      // of the default converter is kludgy but it works.
      converters: {
        "text script": function () {},
      },
      dataFilter: function (response) {
        jQuery.globalEval(response, options, doc);
      },
    });
  };

  jQuery.fn.extend({
    wrapAll: function (html) {
      var wrap;

      if (this[0]) {
        if (isFunction(html)) {
          html = html.call(this[0]);
        }

        // The elements to wrap the target around
        wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

        if (this[0].parentNode) {
          wrap.insertBefore(this[0]);
        }

        wrap
          .map(function () {
            var elem = this;

            while (elem.firstElementChild) {
              elem = elem.firstElementChild;
            }

            return elem;
          })
          .append(this);
      }

      return this;
    },

    wrapInner: function (html) {
      if (isFunction(html)) {
        return this.each(function (i) {
          jQuery(this).wrapInner(html.call(this, i));
        });
      }

      return this.each(function () {
        var self = jQuery(this),
          contents = self.contents();

        if (contents.length) {
          contents.wrapAll(html);
        } else {
          self.append(html);
        }
      });
    },

    wrap: function (html) {
      var htmlIsFunction = isFunction(html);

      return this.each(function (i) {
        jQuery(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);
      });
    },

    unwrap: function (selector) {
      this.parent(selector)
        .not("body")
        .each(function () {
          jQuery(this).replaceWith(this.childNodes);
        });
      return this;
    },
  });

  jQuery.expr.pseudos.hidden = function (elem) {
    return !jQuery.expr.pseudos.visible(elem);
  };
  jQuery.expr.pseudos.visible = function (elem) {
    return !!(
      elem.offsetWidth ||
      elem.offsetHeight ||
      elem.getClientRects().length
    );
  };

  jQuery.ajaxSettings.xhr = function () {
    try {
      return new window.XMLHttpRequest();
    } catch (e) {}
  };

  var xhrSuccessStatus = {
      // File protocol always yields status code 0, assume 200
      0: 200,

      // Support: IE <=9 only
      // trac-1450: sometimes IE returns 1223 when it should be 204
      1223: 204,
    },
    xhrSupported = jQuery.ajaxSettings.xhr();

  support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
  support.ajax = xhrSupported = !!xhrSupported;

  jQuery.ajaxTransport(function (options) {
    var callback, errorCallback;

    // Cross domain only allowed if supported through XMLHttpRequest
    if (support.cors || (xhrSupported && !options.crossDomain)) {
      return {
        send: function (headers, complete) {
          var i,
            xhr = options.xhr();

          xhr.open(
            options.type,
            options.url,
            options.async,
            options.username,
            options.password
          );

          // Apply custom fields if provided
          if (options.xhrFields) {
            for (i in options.xhrFields) {
              xhr[i] = options.xhrFields[i];
            }
          }

          // Override mime type if needed
          if (options.mimeType && xhr.overrideMimeType) {
            xhr.overrideMimeType(options.mimeType);
          }

          // X-Requested-With header
          // For cross-domain requests, seeing as conditions for a preflight are
          // akin to a jigsaw puzzle, we simply never set it to be sure.
          // (it can always be set on a per-request basis or even using ajaxSetup)
          // For same-domain requests, won't change header if already provided.
          if (!options.crossDomain && !headers["X-Requested-With"]) {
            headers["X-Requested-With"] = "XMLHttpRequest";
          }

          // Set headers
          for (i in headers) {
            xhr.setRequestHeader(i, headers[i]);
          }

          // Callback
          callback = function (type) {
            return function () {
              if (callback) {
                callback =
                  errorCallback =
                  xhr.onload =
                  xhr.onerror =
                  xhr.onabort =
                  xhr.ontimeout =
                  xhr.onreadystatechange =
                    null;

                if (type === "abort") {
                  xhr.abort();
                } else if (type === "error") {
                  // Support: IE <=9 only
                  // On a manual native abort, IE9 throws
                  // errors on any property access that is not readyState
                  if (typeof xhr.status !== "number") {
                    complete(0, "error");
                  } else {
                    complete(
                      // File: protocol always yields status 0; see trac-8605, trac-14207
                      xhr.status,
                      xhr.statusText
                    );
                  }
                } else {
                  complete(
                    xhrSuccessStatus[xhr.status] || xhr.status,
                    xhr.statusText,

                    // Support: IE <=9 only
                    // IE9 has no XHR2 but throws on binary (trac-11426)
                    // For XHR2 non-text, let the caller handle it (gh-2498)
                    (xhr.responseType || "text") !== "text" ||
                      typeof xhr.responseText !== "string"
                      ? { binary: xhr.response }
                      : { text: xhr.responseText },
                    xhr.getAllResponseHeaders()
                  );
                }
              }
            };
          };

          // Listen to events
          xhr.onload = callback();
          errorCallback = xhr.onerror = xhr.ontimeout = callback("error");

          // Support: IE 9 only
          // Use onreadystatechange to replace onabort
          // to handle uncaught aborts
          if (xhr.onabort !== undefined) {
            xhr.onabort = errorCallback;
          } else {
            xhr.onreadystatechange = function () {
              // Check readyState before timeout as it changes
              if (xhr.readyState === 4) {
                // Allow onerror to be called first,
                // but that will not handle a native abort
                // Also, save errorCallback to a variable
                // as xhr.onerror cannot be accessed
                window.setTimeout(function () {
                  if (callback) {
                    errorCallback();
                  }
                });
              }
            };
          }

          // Create the abort callback
          callback = callback("abort");

          try {
            // Do send the request (this may raise an exception)
            xhr.send((options.hasContent && options.data) || null);
          } catch (e) {
            // trac-14683: Only rethrow if this hasn't been notified as an error yet
            if (callback) {
              throw e;
            }
          }
        },

        abort: function () {
          if (callback) {
            callback();
          }
        },
      };
    }
  });

  // Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
  jQuery.ajaxPrefilter(function (s) {
    if (s.crossDomain) {
      s.contents.script = false;
    }
  });

  // Install script dataType
  jQuery.ajaxSetup({
    accepts: {
      script:
        "text/javascript, application/javascript, " +
        "application/ecmascript, application/x-ecmascript",
    },
    contents: {
      script: /\b(?:java|ecma)script\b/,
    },
    converters: {
      "text script": function (text) {
        jQuery.globalEval(text);
        return text;
      },
    },
  });

  // Handle cache's special case and crossDomain
  jQuery.ajaxPrefilter("script", function (s) {
    if (s.cache === undefined) {
      s.cache = false;
    }
    if (s.crossDomain) {
      s.type = "GET";
    }
  });

  // Bind script tag hack transport
  jQuery.ajaxTransport("script", function (s) {
    // This transport only deals with cross domain or forced-by-attrs requests
    if (s.crossDomain || s.scriptAttrs) {
      var script, callback;
      return {
        send: function (_, complete) {
          script = jQuery("<script>")
            .attr(s.scriptAttrs || {})
            .prop({ charset: s.scriptCharset, src: s.url })
            .on(
              "load error",
              (callback = function (evt) {
                script.remove();
                callback = null;
                if (evt) {
                  complete(evt.type === "error" ? 404 : 200, evt.type);
                }
              })
            );

          // Use native DOM manipulation to avoid our domManip AJAX trickery
          document.head.appendChild(script[0]);
        },
        abort: function () {
          if (callback) {
            callback();
          }
        },
      };
    }
  });

  var oldCallbacks = [],
    rjsonp = /(=)\?(?=&|$)|\?\?/;

  // Default jsonp settings
  jQuery.ajaxSetup({
    jsonp: "callback",
    jsonpCallback: function () {
      var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce.guid++;
      this[callback] = true;
      return callback;
    },
  });

  // Detect, normalize options and install callbacks for jsonp requests
  jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {
    var callbackName,
      overwritten,
      responseContainer,
      jsonProp =
        s.jsonp !== false &&
        (rjsonp.test(s.url)
          ? "url"
          : typeof s.data === "string" &&
            (s.contentType || "").indexOf(
              "application/x-www-form-urlencoded"
            ) === 0 &&
            rjsonp.test(s.data) &&
            "data");

    // Handle iff the expected data type is "jsonp" or we have a parameter to set
    if (jsonProp || s.dataTypes[0] === "jsonp") {
      // Get callback name, remembering preexisting value associated with it
      callbackName = s.jsonpCallback = isFunction(s.jsonpCallback)
        ? s.jsonpCallback()
        : s.jsonpCallback;

      // Insert callback into url or form data
      if (jsonProp) {
        s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
      } else if (s.jsonp !== false) {
        s.url +=
          (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
      }

      // Use data converter to retrieve json after script execution
      s.converters["script json"] = function () {
        if (!responseContainer) {
          jQuery.error(callbackName + " was not called");
        }
        return responseContainer[0];
      };

      // Force json dataType
      s.dataTypes[0] = "json";

      // Install callback
      overwritten = window[callbackName];
      window[callbackName] = function () {
        responseContainer = arguments;
      };

      // Clean-up function (fires after converters)
      jqXHR.always(function () {
        // If previous value didn't exist - remove it
        if (overwritten === undefined) {
          jQuery(window).removeProp(callbackName);

          // Otherwise restore preexisting value
        } else {
          window[callbackName] = overwritten;
        }

        // Save back as free
        if (s[callbackName]) {
          // Make sure that re-using the options doesn't screw things around
          s.jsonpCallback = originalSettings.jsonpCallback;

          // Save the callback name for future use
          oldCallbacks.push(callbackName);
        }

        // Call if it was a function and we have a response
        if (responseContainer && isFunction(overwritten)) {
          overwritten(responseContainer[0]);
        }

        responseContainer = overwritten = undefined;
      });

      // Delegate to script
      return "script";
    }
  });

  // Support: Safari 8 only
  // In Safari 8 documents created via document.implementation.createHTMLDocument
  // collapse sibling forms: the second one becomes a child of the first one.
  // Because of that, this security measure has to be disabled in Safari 8.
  // https://bugs.webkit.org/show_bug.cgi?id=137337
  support.createHTMLDocument = (function () {
    var body = document.implementation.createHTMLDocument("").body;
    body.innerHTML = "<form></form><form></form>";
    return body.childNodes.length === 2;
  })();

  // Argument "data" should be string of html
  // context (optional): If specified, the fragment will be created in this context,
  // defaults to document
  // keepScripts (optional): If true, will include scripts passed in the html string
  jQuery.parseHTML = function (data, context, keepScripts) {
    if (typeof data !== "string") {
      return [];
    }
    if (typeof context === "boolean") {
      keepScripts = context;
      context = false;
    }

    var base, parsed, scripts;

    if (!context) {
      // Stop scripts or inline event handlers from being executed immediately
      // by using document.implementation
      if (support.createHTMLDocument) {
        context = document.implementation.createHTMLDocument("");

        // Set the base href for the created document
        // so any parsed elements with URLs
        // are based on the document's URL (gh-2965)
        base = context.createElement("base");
        base.href = document.location.href;
        context.head.appendChild(base);
      } else {
        context = document;
      }
    }

    parsed = rsingleTag.exec(data);
    scripts = !keepScripts && [];

    // Single tag
    if (parsed) {
      return [context.createElement(parsed[1])];
    }

    parsed = buildFragment([data], context, scripts);

    if (scripts && scripts.length) {
      jQuery(scripts).remove();
    }

    return jQuery.merge([], parsed.childNodes);
  };

  /**
   * Load a url into a page
   */
  jQuery.fn.load = function (url, params, callback) {
    var selector,
      type,
      response,
      self = this,
      off = url.indexOf(" ");

    if (off > -1) {
      selector = stripAndCollapse(url.slice(off));
      url = url.slice(0, off);
    }

    // If it's a function
    if (isFunction(params)) {
      // We assume that it's the callback
      callback = params;
      params = undefined;

      // Otherwise, build a param string
    } else if (params && typeof params === "object") {
      type = "POST";
    }

    // If we have elements to modify, make the request
    if (self.length > 0) {
      jQuery
        .ajax({
          url: url,

          // If "type" variable is undefined, then "GET" method will be used.
          // Make value of this field explicit since
          // user can override it through ajaxSetup method
          type: type || "GET",
          dataType: "html",
          data: params,
        })
        .done(function (responseText) {
          // Save response for use in complete callback
          response = arguments;

          self.html(
            selector
              ? // If a selector was specified, locate the right elements in a dummy div
                // Exclude scripts to avoid IE 'Permission Denied' errors
                jQuery("<div>")
                  .append(jQuery.parseHTML(responseText))
                  .find(selector)
              : // Otherwise use the full result
                responseText
          );

          // If the request succeeds, this function gets "data", "status", "jqXHR"
          // but they are ignored because response was set above.
          // If it fails, this function gets "jqXHR", "status", "error"
        })
        .always(
          callback &&
            function (jqXHR, status) {
              self.each(function () {
                callback.apply(
                  this,
                  response || [jqXHR.responseText, status, jqXHR]
                );
              });
            }
        );
    }

    return this;
  };

  jQuery.expr.pseudos.animated = function (elem) {
    return jQuery.grep(jQuery.timers, function (fn) {
      return elem === fn.elem;
    }).length;
  };

  jQuery.offset = {
    setOffset: function (elem, options, i) {
      var curPosition,
        curLeft,
        curCSSTop,
        curTop,
        curOffset,
        curCSSLeft,
        calculatePosition,
        position = jQuery.css(elem, "position"),
        curElem = jQuery(elem),
        props = {};

      // Set position first, in-case top/left are set even on static elem
      if (position === "static") {
        elem.style.position = "relative";
      }

      curOffset = curElem.offset();
      curCSSTop = jQuery.css(elem, "top");
      curCSSLeft = jQuery.css(elem, "left");
      calculatePosition =
        (position === "absolute" || position === "fixed") &&
        (curCSSTop + curCSSLeft).indexOf("auto") > -1;

      // Need to be able to calculate position if either
      // top or left is auto and position is either absolute or fixed
      if (calculatePosition) {
        curPosition = curElem.position();
        curTop = curPosition.top;
        curLeft = curPosition.left;
      } else {
        curTop = parseFloat(curCSSTop) || 0;
        curLeft = parseFloat(curCSSLeft) || 0;
      }

      if (isFunction(options)) {
        // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
        options = options.call(elem, i, jQuery.extend({}, curOffset));
      }

      if (options.top != null) {
        props.top = options.top - curOffset.top + curTop;
      }
      if (options.left != null) {
        props.left = options.left - curOffset.left + curLeft;
      }

      if ("using" in options) {
        options.using.call(elem, props);
      } else {
        curElem.css(props);
      }
    },
  };

  jQuery.fn.extend({
    // offset() relates an element's border box to the document origin
    offset: function (options) {
      // Preserve chaining for setter
      if (arguments.length) {
        return options === undefined
          ? this
          : this.each(function (i) {
              jQuery.offset.setOffset(this, options, i);
            });
      }

      var rect,
        win,
        elem = this[0];

      if (!elem) {
        return;
      }

      // Return zeros for disconnected and hidden (display: none) elements (gh-2310)
      // Support: IE <=11 only
      // Running getBoundingClientRect on a
      // disconnected node in IE throws an error
      if (!elem.getClientRects().length) {
        return { top: 0, left: 0 };
      }

      // Get document-relative position by adding viewport scroll to viewport-relative gBCR
      rect = elem.getBoundingClientRect();
      win = elem.ownerDocument.defaultView;
      return {
        top: rect.top + win.pageYOffset,
        left: rect.left + win.pageXOffset,
      };
    },

    // position() relates an element's margin box to its offset parent's padding box
    // This corresponds to the behavior of CSS absolute positioning
    position: function () {
      if (!this[0]) {
        return;
      }

      var offsetParent,
        offset,
        doc,
        elem = this[0],
        parentOffset = { top: 0, left: 0 };

      // position:fixed elements are offset from the viewport, which itself always has zero offset
      if (jQuery.css(elem, "position") === "fixed") {
        // Assume position:fixed implies availability of getBoundingClientRect
        offset = elem.getBoundingClientRect();
      } else {
        offset = this.offset();

        // Account for the *real* offset parent, which can be the document or its root element
        // when a statically positioned element is identified
        doc = elem.ownerDocument;
        offsetParent = elem.offsetParent || doc.documentElement;
        while (
          offsetParent &&
          (offsetParent === doc.body || offsetParent === doc.documentElement) &&
          jQuery.css(offsetParent, "position") === "static"
        ) {
          offsetParent = offsetParent.parentNode;
        }
        if (
          offsetParent &&
          offsetParent !== elem &&
          offsetParent.nodeType === 1
        ) {
          // Incorporate borders into its offset, since they are outside its content origin
          parentOffset = jQuery(offsetParent).offset();
          parentOffset.top += jQuery.css(offsetParent, "borderTopWidth", true);
          parentOffset.left += jQuery.css(
            offsetParent,
            "borderLeftWidth",
            true
          );
        }
      }

      // Subtract parent offsets and element margins
      return {
        top:
          offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
        left:
          offset.left -
          parentOffset.left -
          jQuery.css(elem, "marginLeft", true),
      };
    },

    // This method will return documentElement in the following cases:
    // 1) For the element inside the iframe without offsetParent, this method will return
    //    documentElement of the parent window
    // 2) For the hidden or detached element
    // 3) For body or html element, i.e. in case of the html node - it will return itself
    //
    // but those exceptions were never presented as a real life use-cases
    // and might be considered as more preferable results.
    //
    // This logic, however, is not guaranteed and can change at any point in the future
    offsetParent: function () {
      return this.map(function () {
        var offsetParent = this.offsetParent;

        while (
          offsetParent &&
          jQuery.css(offsetParent, "position") === "static"
        ) {
          offsetParent = offsetParent.offsetParent;
        }

        return offsetParent || documentElement;
      });
    },
  });

  // Create scrollLeft and scrollTop methods
  jQuery.each(
    { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" },
    function (method, prop) {
      var top = "pageYOffset" === prop;

      jQuery.fn[method] = function (val) {
        return access(
          this,
          function (elem, method, val) {
            // Coalesce documents and windows
            var win;
            if (isWindow(elem)) {
              win = elem;
            } else if (elem.nodeType === 9) {
              win = elem.defaultView;
            }

            if (val === undefined) {
              return win ? win[prop] : elem[method];
            }

            if (win) {
              win.scrollTo(
                !top ? val : win.pageXOffset,
                top ? val : win.pageYOffset
              );
            } else {
              elem[method] = val;
            }
          },
          method,
          val,
          arguments.length
        );
      };
    }
  );

  // Support: Safari <=7 - 9.1, Chrome <=37 - 49
  // Add the top/left cssHooks using jQuery.fn.position
  // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
  // Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
  // getComputedStyle returns percent when specified for top/left/bottom/right;
  // rather than make the css module depend on the offset module, just check for it here
  jQuery.each(["top", "left"], function (_i, prop) {
    jQuery.cssHooks[prop] = addGetHookIf(
      support.pixelPosition,
      function (elem, computed) {
        if (computed) {
          computed = curCSS(elem, prop);

          // If curCSS returns percentage, fallback to offset
          return rnumnonpx.test(computed)
            ? jQuery(elem).position()[prop] + "px"
            : computed;
        }
      }
    );
  });

  // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
  jQuery.each({ Height: "height", Width: "width" }, function (name, type) {
    jQuery.each(
      {
        padding: "inner" + name,
        content: type,
        "": "outer" + name,
      },
      function (defaultExtra, funcName) {
        // Margin is only for outerHeight, outerWidth
        jQuery.fn[funcName] = function (margin, value) {
          var chainable =
              arguments.length && (defaultExtra || typeof margin !== "boolean"),
            extra =
              defaultExtra ||
              (margin === true || value === true ? "margin" : "border");

          return access(
            this,
            function (elem, type, value) {
              var doc;

              if (isWindow(elem)) {
                // $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
                return funcName.indexOf("outer") === 0
                  ? elem["inner" + name]
                  : elem.document.documentElement["client" + name];
              }

              // Get document width or height
              if (elem.nodeType === 9) {
                doc = elem.documentElement;

                // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
                // whichever is greatest
                return Math.max(
                  elem.body["scroll" + name],
                  doc["scroll" + name],
                  elem.body["offset" + name],
                  doc["offset" + name],
                  doc["client" + name]
                );
              }

              return value === undefined
                ? // Get width or height on the element, requesting but not forcing parseFloat
                  jQuery.css(elem, type, extra)
                : // Set width or height on the element
                  jQuery.style(elem, type, value, extra);
            },
            type,
            chainable ? margin : undefined,
            chainable
          );
        };
      }
    );
  });

  jQuery.each(
    [
      "ajaxStart",
      "ajaxStop",
      "ajaxComplete",
      "ajaxError",
      "ajaxSuccess",
      "ajaxSend",
    ],
    function (_i, type) {
      jQuery.fn[type] = function (fn) {
        return this.on(type, fn);
      };
    }
  );

  jQuery.fn.extend({
    bind: function (types, data, fn) {
      return this.on(types, null, data, fn);
    },
    unbind: function (types, fn) {
      return this.off(types, null, fn);
    },

    delegate: function (selector, types, data, fn) {
      return this.on(types, selector, data, fn);
    },
    undelegate: function (selector, types, fn) {
      // ( namespace ) or ( selector, types [, fn] )
      return arguments.length === 1
        ? this.off(selector, "**")
        : this.off(types, selector || "**", fn);
    },

    hover: function (fnOver, fnOut) {
      return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
    },
  });

  jQuery.each(
    (
      "blur focus focusin focusout resize scroll click dblclick " +
      "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
      "change select submit keydown keypress keyup contextmenu"
    ).split(" "),
    function (_i, name) {
      // Handle event binding
      jQuery.fn[name] = function (data, fn) {
        return arguments.length > 0
          ? this.on(name, null, data, fn)
          : this.trigger(name);
      };
    }
  );

  // Support: Android <=4.0 only
  // Make sure we trim BOM and NBSP
  // Require that the "whitespace run" starts from a non-whitespace
  // to avoid O(N^2) behavior when the engine would try matching "\s+$" at each space position.
  var rtrim = /^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;

  // Bind a function to a context, optionally partially applying any
  // arguments.
  // jQuery.proxy is deprecated to promote standards (specifically Function#bind)
  // However, it is not slated for removal any time soon
  jQuery.proxy = function (fn, context) {
    var tmp, args, proxy;

    if (typeof context === "string") {
      tmp = fn[context];
      context = fn;
      fn = tmp;
    }

    // Quick check to determine if target is callable, in the spec
    // this throws a TypeError, but we will just return undefined.
    if (!isFunction(fn)) {
      return undefined;
    }

    // Simulated bind
    args = slice.call(arguments, 2);
    proxy = function () {
      return fn.apply(context || this, args.concat(slice.call(arguments)));
    };

    // Set the guid of unique handler to the same of original handler, so it can be removed
    proxy.guid = fn.guid = fn.guid || jQuery.guid++;

    return proxy;
  };

  jQuery.holdReady = function (hold) {
    if (hold) {
      jQuery.readyWait++;
    } else {
      jQuery.ready(true);
    }
  };
  jQuery.isArray = Array.isArray;
  jQuery.parseJSON = JSON.parse;
  jQuery.nodeName = nodeName;
  jQuery.isFunction = isFunction;
  jQuery.isWindow = isWindow;
  jQuery.camelCase = camelCase;
  jQuery.type = toType;

  jQuery.now = Date.now;

  jQuery.isNumeric = function (obj) {
    // As of jQuery 3.0, isNumeric is limited to
    // strings and numbers (primitives or objects)
    // that can be coerced to finite numbers (gh-2662)
    var type = jQuery.type(obj);
    return (
      (type === "number" || type === "string") &&
      // parseFloat NaNs numeric-cast false positives ("")
      // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
      // subtraction forces infinities to NaN
      !isNaN(obj - parseFloat(obj))
    );
  };

  jQuery.trim = function (text) {
    return text == null ? "" : (text + "").replace(rtrim, "$1");
  };

  // Register as a named AMD module, since jQuery can be concatenated with other
  // files that may use define, but not via a proper concatenation script that
  // understands anonymous AMD modules. A named AMD is safest and most robust
  // way to register. Lowercase jquery is used because AMD module names are
  // derived from file names, and jQuery is normally delivered in a lowercase
  // file name. Do this after creating the global so that if an AMD module wants
  // to call noConflict to hide this version of jQuery, it will work.

  // Note that for maximum portability, libraries that are not jQuery should
  // declare themselves as anonymous modules, and avoid setting a global if an
  // AMD loader is present. jQuery is a special case. For more information, see
  // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

  if (typeof define === "function" && define.amd) {
    define("jquery", [], function () {
      return jQuery;
    });
  }

  var // Map over jQuery in case of overwrite
    _jQuery = window.jQuery,
    // Map over the $ in case of overwrite
    _$ = window.$;

  jQuery.noConflict = function (deep) {
    if (window.$ === jQuery) {
      window.$ = _$;
    }

    if (deep && window.jQuery === jQuery) {
      window.jQuery = _jQuery;
    }

    return jQuery;
  };

  // Expose jQuery and $ identifiers, even in AMD
  // (trac-7102#comment:10, https://github.com/jquery/jquery/pull/557)
  // and CommonJS for browser emulators (trac-13566)
  if (typeof noGlobal === "undefined") {
    window.jQuery = window.$ = jQuery;
  }

  return jQuery;
});

/*! modernizr 3.3.1 (Custom Build) | MIT *
 * https://modernizr.com/download/?-forcetouch-touchevents-setclasses !*/
!(function (e, n, t) {
  function r(e, n) {
    return typeof e === n;
  }
  function o() {
    var e, n, t, o, i, s, a;
    for (var u in g)
      if (g.hasOwnProperty(u)) {
        if (
          ((e = []),
          (n = g[u]),
          n.name &&
            (e.push(n.name.toLowerCase()),
            n.options && n.options.aliases && n.options.aliases.length))
        )
          for (t = 0; t < n.options.aliases.length; t++)
            e.push(n.options.aliases[t].toLowerCase());
        for (o = r(n.fn, "function") ? n.fn() : n.fn, i = 0; i < e.length; i++)
          (s = e[i]),
            (a = s.split(".")),
            1 === a.length
              ? (Modernizr[a[0]] = o)
              : (!Modernizr[a[0]] ||
                  Modernizr[a[0]] instanceof Boolean ||
                  (Modernizr[a[0]] = new Boolean(Modernizr[a[0]])),
                (Modernizr[a[0]][a[1]] = o)),
            y.push((o ? "" : "no-") + a.join("-"));
      }
  }
  function i(e) {
    var n = C.className,
      t = Modernizr._config.classPrefix || "";
    if ((w && (n = n.baseVal), Modernizr._config.enableJSClass)) {
      var r = new RegExp("(^|\\s)" + t + "no-js(\\s|$)");
      n = n.replace(r, "$1" + t + "js$2");
    }
    Modernizr._config.enableClasses &&
      ((n += " " + t + e.join(" " + t)),
      w ? (C.className.baseVal = n) : (C.className = n));
  }
  function s() {
    return "function" != typeof n.createElement
      ? n.createElement(arguments[0])
      : w
      ? n.createElementNS.call(n, "http://www.w3.org/2000/svg", arguments[0])
      : n.createElement.apply(n, arguments);
  }
  function a() {
    var e = n.body;
    return e || ((e = s(w ? "svg" : "body")), (e.fake = !0)), e;
  }
  function u(e, t, r, o) {
    var i,
      u,
      f,
      l,
      c = "modernizr",
      p = s("div"),
      d = a();
    if (parseInt(r, 10))
      for (; r--; )
        (f = s("div")), (f.id = o ? o[r] : c + (r + 1)), p.appendChild(f);
    return (
      (i = s("style")),
      (i.type = "text/css"),
      (i.id = "s" + c),
      (d.fake ? d : p).appendChild(i),
      d.appendChild(p),
      i.styleSheet
        ? (i.styleSheet.cssText = e)
        : i.appendChild(n.createTextNode(e)),
      (p.id = c),
      d.fake &&
        ((d.style.background = ""),
        (d.style.overflow = "hidden"),
        (l = C.style.overflow),
        (C.style.overflow = "hidden"),
        C.appendChild(d)),
      (u = t(p, e)),
      d.fake
        ? (d.parentNode.removeChild(d), (C.style.overflow = l), C.offsetHeight)
        : p.parentNode.removeChild(p),
      !!u
    );
  }
  function f(e) {
    return e
      .replace(/([a-z])-([a-z])/g, function (e, n, t) {
        return n + t.toUpperCase();
      })
      .replace(/^-/, "");
  }
  function l(e, n) {
    return !!~("" + e).indexOf(n);
  }
  function c(e, n) {
    return function () {
      return e.apply(n, arguments);
    };
  }
  function p(e, n, t) {
    var o;
    for (var i in e)
      if (e[i] in n)
        return t === !1
          ? e[i]
          : ((o = n[e[i]]), r(o, "function") ? c(o, t || n) : o);
    return !1;
  }
  function d(e) {
    return e
      .replace(/([A-Z])/g, function (e, n) {
        return "-" + n.toLowerCase();
      })
      .replace(/^ms-/, "-ms-");
  }
  function m(n, r) {
    var o = n.length;
    if ("CSS" in e && "supports" in e.CSS) {
      for (; o--; ) if (e.CSS.supports(d(n[o]), r)) return !0;
      return !1;
    }
    if ("CSSSupportsRule" in e) {
      for (var i = []; o--; ) i.push("(" + d(n[o]) + ":" + r + ")");
      return (
        (i = i.join(" or ")),
        u(
          "@supports (" + i + ") { #modernizr { position: absolute; } }",
          function (e) {
            return "absolute" == getComputedStyle(e, null).position;
          }
        )
      );
    }
    return t;
  }
  function v(e, n, o, i) {
    function a() {
      c && (delete A.style, delete A.modElem);
    }
    if (((i = r(i, "undefined") ? !1 : i), !r(o, "undefined"))) {
      var u = m(e, o);
      if (!r(u, "undefined")) return u;
    }
    for (
      var c, p, d, v, h, y = ["modernizr", "tspan", "samp"];
      !A.style && y.length;

    )
      (c = !0), (A.modElem = s(y.shift())), (A.style = A.modElem.style);
    for (d = e.length, p = 0; d > p; p++)
      if (
        ((v = e[p]),
        (h = A.style[v]),
        l(v, "-") && (v = f(v)),
        A.style[v] !== t)
      ) {
        if (i || r(o, "undefined")) return a(), "pfx" == n ? v : !0;
        try {
          A.style[v] = o;
        } catch (g) {}
        if (A.style[v] != h) return a(), "pfx" == n ? v : !0;
      }
    return a(), !1;
  }
  function h(e, n, t, o, i) {
    var s = e.charAt(0).toUpperCase() + e.slice(1),
      a = (e + " " + T.join(s + " ") + s).split(" ");
    return r(n, "string") || r(n, "undefined")
      ? v(a, n, o, i)
      : ((a = (e + " " + z.join(s + " ") + s).split(" ")), p(a, n, t));
  }
  var y = [],
    g = [],
    _ = {
      _version: "3.3.1",
      _config: {
        classPrefix: "",
        enableClasses: !0,
        enableJSClass: !0,
        usePrefixes: !0,
      },
      _q: [],
      on: function (e, n) {
        var t = this;
        setTimeout(function () {
          n(t[e]);
        }, 0);
      },
      addTest: function (e, n, t) {
        g.push({ name: e, fn: n, options: t });
      },
      addAsyncTest: function (e) {
        g.push({ name: null, fn: e });
      },
    },
    Modernizr = function () {};
  (Modernizr.prototype = _), (Modernizr = new Modernizr());
  var C = n.documentElement,
    w = "svg" === C.nodeName.toLowerCase(),
    E = _._config.usePrefixes
      ? " -webkit- -moz- -o- -ms- ".split(" ")
      : ["", ""];
  _._prefixes = E;
  var x = (_.testStyles = u);
  Modernizr.addTest("touchevents", function () {
    var t;
    if ("ontouchstart" in e || (e.DocumentTouch && n instanceof DocumentTouch))
      t = !0;
    else {
      var r = [
        "@media (",
        E.join("touch-enabled),("),
        "heartz",
        ")",
        "{#modernizr{top:9px;position:absolute}}",
      ].join("");
      x(r, function (e) {
        t = 9 === e.offsetTop;
      });
    }
    return t;
  });
  var S = (function () {
    function e(e, n) {
      var o;
      return e
        ? ((n && "string" != typeof n) || (n = s(n || "div")),
          (e = "on" + e),
          (o = e in n),
          !o &&
            r &&
            (n.setAttribute || (n = s("div")),
            n.setAttribute(e, ""),
            (o = "function" == typeof n[e]),
            n[e] !== t && (n[e] = t),
            n.removeAttribute(e)),
          o)
        : !1;
    }
    var r = !("onblur" in n.documentElement);
    return e;
  })();
  _.hasEvent = S;
  var b = "Moz O ms Webkit",
    T = _._config.usePrefixes ? b.split(" ") : [];
  _._cssomPrefixes = T;
  var O = function (n) {
    var r,
      o = E.length,
      i = e.CSSRule;
    if ("undefined" == typeof i) return t;
    if (!n) return !1;
    if (
      ((n = n.replace(/^@/, "")),
      (r = n.replace(/-/g, "_").toUpperCase() + "_RULE"),
      r in i)
    )
      return "@" + n;
    for (var s = 0; o > s; s++) {
      var a = E[s],
        u = a.toUpperCase() + "_" + r;
      if (u in i) return "@-" + a.toLowerCase() + "-" + n;
    }
    return !1;
  };
  _.atRule = O;
  var z = _._config.usePrefixes ? b.toLowerCase().split(" ") : [];
  _._domPrefixes = z;
  var N = { elem: s("modernizr") };
  Modernizr._q.push(function () {
    delete N.elem;
  });
  var A = { style: N.elem.style };
  Modernizr._q.unshift(function () {
    delete A.style;
  }),
    (_.testAllProps = h);
  var P = (_.prefixed = function (e, n, t) {
    return 0 === e.indexOf("@")
      ? O(e)
      : (-1 != e.indexOf("-") && (e = f(e)), n ? h(e, n, t) : h(e, "pfx"));
  });
  Modernizr.addTest("forcetouch", function () {
    return S(P("mouseforcewillbegin", e, !1), e)
      ? MouseEvent.WEBKIT_FORCE_AT_MOUSE_DOWN &&
          MouseEvent.WEBKIT_FORCE_AT_FORCE_MOUSE_DOWN
      : !1;
  }),
    o(),
    i(y),
    delete _.addTest,
    delete _.addAsyncTest;
  for (var j = 0; j < Modernizr._q.length; j++) Modernizr._q[j]();
  e.Modernizr = Modernizr;
})(window, document);
/*!
 * Bootstrap v3.4.1 (https://getbootstrap.com/)
 * Copyright 2011-2019 Twitter, Inc.
 * Licensed under the MIT license
 */

if (typeof jQuery === "undefined") {
  throw new Error("Bootstrap's JavaScript requires jQuery");
}

+(function ($) {
  "use strict";
  var version = $.fn.jquery.split(" ")[0].split(".");
  if (
    (version[0] < 2 && version[1] < 9) ||
    (version[0] == 1 && version[1] == 9 && version[2] < 1) ||
    version[0] > 3
  ) {
    throw new Error(
      "Bootstrap's JavaScript requires jQuery version 1.9.1 or higher, but lower than version 4"
    );
  }
})(jQuery);

/* ========================================================================
 * Bootstrap: transition.js v3.4.1
 * https://getbootstrap.com/docs/3.4/javascript/#transitions
 * ========================================================================
 * Copyright 2011-2019 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

+(function ($) {
  "use strict";

  // CSS TRANSITION SUPPORT (Shoutout: https://modernizr.com/)
  // ============================================================

  function transitionEnd() {
    var el = document.createElement("bootstrap");

    var transEndEventNames = {
      WebkitTransition: "webkitTransitionEnd",
      MozTransition: "transitionend",
      OTransition: "oTransitionEnd otransitionend",
      transition: "transitionend",
    };

    for (var name in transEndEventNames) {
      if (el.style[name] !== undefined) {
        return { end: transEndEventNames[name] };
      }
    }

    return false; // explicit for ie8 (  ._.)
  }

  // https://blog.alexmaccaw.com/css-transitions
  $.fn.emulateTransitionEnd = function (duration) {
    var called = false;
    var $el = this;
    $(this).one("bsTransitionEnd", function () {
      called = true;
    });
    var callback = function () {
      if (!called) $($el).trigger($.support.transition.end);
    };
    setTimeout(callback, duration);
    return this;
  };

  $(function () {
    $.support.transition = transitionEnd();

    if (!$.support.transition) return;

    $.event.special.bsTransitionEnd = {
      bindType: $.support.transition.end,
      delegateType: $.support.transition.end,
      handle: function (e) {
        if ($(e.target).is(this))
          return e.handleObj.handler.apply(this, arguments);
      },
    };
  });
})(jQuery);

/* ========================================================================
 * Bootstrap: alert.js v3.4.1
 * https://getbootstrap.com/docs/3.4/javascript/#alerts
 * ========================================================================
 * Copyright 2011-2019 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

+(function ($) {
  "use strict";

  // ALERT CLASS DEFINITION
  // ======================

  var dismiss = '[data-dismiss="alert"]';
  var Alert = function (el) {
    $(el).on("click", dismiss, this.close);
  };

  Alert.VERSION = "3.4.1";

  Alert.TRANSITION_DURATION = 150;

  Alert.prototype.close = function (e) {
    var $this = $(this);
    var selector = $this.attr("data-target");

    if (!selector) {
      selector = $this.attr("href");
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, ""); // strip for ie7
    }

    selector = selector === "#" ? [] : selector;
    var $parent = $(document).find(selector);

    if (e) e.preventDefault();

    if (!$parent.length) {
      $parent = $this.closest(".alert");
    }

    $parent.trigger((e = $.Event("close.bs.alert")));

    if (e.isDefaultPrevented()) return;

    $parent.removeClass("in");

    function removeElement() {
      // detach from parent, fire event then clean up data
      $parent.detach().trigger("closed.bs.alert").remove();
    }

    $.support.transition && $parent.hasClass("fade")
      ? $parent
          .one("bsTransitionEnd", removeElement)
          .emulateTransitionEnd(Alert.TRANSITION_DURATION)
      : removeElement();
  };

  // ALERT PLUGIN DEFINITION
  // =======================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data("bs.alert");

      if (!data) $this.data("bs.alert", (data = new Alert(this)));
      if (typeof option == "string") data[option].call($this);
    });
  }

  var old = $.fn.alert;

  $.fn.alert = Plugin;
  $.fn.alert.Constructor = Alert;

  // ALERT NO CONFLICT
  // =================

  $.fn.alert.noConflict = function () {
    $.fn.alert = old;
    return this;
  };

  // ALERT DATA-API
  // ==============

  $(document).on("click.bs.alert.data-api", dismiss, Alert.prototype.close);
})(jQuery);

/* ========================================================================
 * Bootstrap: button.js v3.4.1
 * https://getbootstrap.com/docs/3.4/javascript/#buttons
 * ========================================================================
 * Copyright 2011-2019 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

+(function ($) {
  "use strict";

  // BUTTON PUBLIC CLASS DEFINITION
  // ==============================

  var Button = function (element, options) {
    this.$element = $(element);
    this.options = $.extend({}, Button.DEFAULTS, options);
    this.isLoading = false;
  };

  Button.VERSION = "3.4.1";

  Button.DEFAULTS = {
    loadingText: "loading...",
  };

  Button.prototype.setState = function (state) {
    var d = "disabled";
    var $el = this.$element;
    var val = $el.is("input") ? "val" : "html";
    var data = $el.data();

    state += "Text";

    if (data.resetText == null) $el.data("resetText", $el[val]());

    // push to event loop to allow forms to submit
    setTimeout(
      $.proxy(function () {
        $el[val](data[state] == null ? this.options[state] : data[state]);

        if (state == "loadingText") {
          this.isLoading = true;
          $el.addClass(d).attr(d, d).prop(d, true);
        } else if (this.isLoading) {
          this.isLoading = false;
          $el.removeClass(d).removeAttr(d).prop(d, false);
        }
      }, this),
      0
    );
  };

  Button.prototype.toggle = function () {
    var changed = true;
    var $parent = this.$element.closest('[data-toggle="buttons"]');

    if ($parent.length) {
      var $input = this.$element.find("input");
      if ($input.prop("type") == "radio") {
        if ($input.prop("checked")) changed = false;
        $parent.find(".active").removeClass("active");
        this.$element.addClass("active");
      } else if ($input.prop("type") == "checkbox") {
        if ($input.prop("checked") !== this.$element.hasClass("active"))
          changed = false;
        this.$element.toggleClass("active");
      }
      $input.prop("checked", this.$element.hasClass("active"));
      if (changed) $input.trigger("change");
    } else {
      this.$element.attr("aria-pressed", !this.$element.hasClass("active"));
      this.$element.toggleClass("active");
    }
  };

  // BUTTON PLUGIN DEFINITION
  // ========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data("bs.button");
      var options = typeof option == "object" && option;

      if (!data) $this.data("bs.button", (data = new Button(this, options)));

      if (option == "toggle") data.toggle();
      else if (option) data.setState(option);
    });
  }

  var old = $.fn.button;

  $.fn.button = Plugin;
  $.fn.button.Constructor = Button;

  // BUTTON NO CONFLICT
  // ==================

  $.fn.button.noConflict = function () {
    $.fn.button = old;
    return this;
  };

  // BUTTON DATA-API
  // ===============

  $(document)
    .on("click.bs.button.data-api", '[data-toggle^="button"]', function (e) {
      var $btn = $(e.target).closest(".btn");
      Plugin.call($btn, "toggle");
      if (!$(e.target).is('input[type="radio"], input[type="checkbox"]')) {
        // Prevent double click on radios, and the double selections (so cancellation) on checkboxes
        e.preventDefault();
        // The target component still receive the focus
        if ($btn.is("input,button")) $btn.trigger("focus");
        else $btn.find("input:visible,button:visible").first().trigger("focus");
      }
    })
    .on(
      "focus.bs.button.data-api blur.bs.button.data-api",
      '[data-toggle^="button"]',
      function (e) {
        $(e.target)
          .closest(".btn")
          .toggleClass("focus", /^focus(in)?$/.test(e.type));
      }
    );
})(jQuery);

/* ========================================================================
 * Bootstrap: carousel.js v3.4.1
 * https://getbootstrap.com/docs/3.4/javascript/#carousel
 * ========================================================================
 * Copyright 2011-2019 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

+(function ($) {
  "use strict";

  // CAROUSEL CLASS DEFINITION
  // =========================

  var Carousel = function (element, options) {
    this.$element = $(element);
    this.$indicators = this.$element.find(".carousel-indicators");
    this.options = options;
    this.paused = null;
    this.sliding = null;
    this.interval = null;
    this.$active = null;
    this.$items = null;

    this.options.keyboard &&
      this.$element.on("keydown.bs.carousel", $.proxy(this.keydown, this));

    this.options.pause == "hover" &&
      !("ontouchstart" in document.documentElement) &&
      this.$element
        .on("mouseenter.bs.carousel", $.proxy(this.pause, this))
        .on("mouseleave.bs.carousel", $.proxy(this.cycle, this));
  };

  Carousel.VERSION = "3.4.1";

  Carousel.TRANSITION_DURATION = 600;

  Carousel.DEFAULTS = {
    interval: 5000,
    pause: "hover",
    wrap: true,
    keyboard: true,
  };

  Carousel.prototype.keydown = function (e) {
    if (/input|textarea/i.test(e.target.tagName)) return;
    switch (e.which) {
      case 37:
        this.prev();
        break;
      case 39:
        this.next();
        break;
      default:
        return;
    }

    e.preventDefault();
  };

  Carousel.prototype.cycle = function (e) {
    e || (this.paused = false);

    this.interval && clearInterval(this.interval);

    this.options.interval &&
      !this.paused &&
      (this.interval = setInterval(
        $.proxy(this.next, this),
        this.options.interval
      ));

    return this;
  };

  Carousel.prototype.getItemIndex = function (item) {
    this.$items = item.parent().children(".item");
    return this.$items.index(item || this.$active);
  };

  Carousel.prototype.getItemForDirection = function (direction, active) {
    var activeIndex = this.getItemIndex(active);
    var willWrap =
      (direction == "prev" && activeIndex === 0) ||
      (direction == "next" && activeIndex == this.$items.length - 1);
    if (willWrap && !this.options.wrap) return active;
    var delta = direction == "prev" ? -1 : 1;
    var itemIndex = (activeIndex + delta) % this.$items.length;
    return this.$items.eq(itemIndex);
  };

  Carousel.prototype.to = function (pos) {
    var that = this;
    var activeIndex = this.getItemIndex(
      (this.$active = this.$element.find(".item.active"))
    );

    if (pos > this.$items.length - 1 || pos < 0) return;

    if (this.sliding)
      return this.$element.one("slid.bs.carousel", function () {
        that.to(pos);
      }); // yes, "slid"
    if (activeIndex == pos) return this.pause().cycle();

    return this.slide(pos > activeIndex ? "next" : "prev", this.$items.eq(pos));
  };

  Carousel.prototype.pause = function (e) {
    e || (this.paused = true);

    if (this.$element.find(".next, .prev").length && $.support.transition) {
      this.$element.trigger($.support.transition.end);
      this.cycle(true);
    }

    this.interval = clearInterval(this.interval);

    return this;
  };

  Carousel.prototype.next = function () {
    if (this.sliding) return;
    return this.slide("next");
  };

  Carousel.prototype.prev = function () {
    if (this.sliding) return;
    return this.slide("prev");
  };

  Carousel.prototype.slide = function (type, next) {
    var $active = this.$element.find(".item.active");
    var $next = next || this.getItemForDirection(type, $active);
    var isCycling = this.interval;
    var direction = type == "next" ? "left" : "right";
    var that = this;

    if ($next.hasClass("active")) return (this.sliding = false);

    var relatedTarget = $next[0];
    var slideEvent = $.Event("slide.bs.carousel", {
      relatedTarget: relatedTarget,
      direction: direction,
    });
    this.$element.trigger(slideEvent);
    if (slideEvent.isDefaultPrevented()) return;

    this.sliding = true;

    isCycling && this.pause();

    if (this.$indicators.length) {
      this.$indicators.find(".active").removeClass("active");
      var $nextIndicator = $(
        this.$indicators.children()[this.getItemIndex($next)]
      );
      $nextIndicator && $nextIndicator.addClass("active");
    }

    var slidEvent = $.Event("slid.bs.carousel", {
      relatedTarget: relatedTarget,
      direction: direction,
    }); // yes, "slid"
    if ($.support.transition && this.$element.hasClass("slide")) {
      $next.addClass(type);
      if (typeof $next === "object" && $next.length) {
        $next[0].offsetWidth; // force reflow
      }
      $active.addClass(direction);
      $next.addClass(direction);
      $active
        .one("bsTransitionEnd", function () {
          $next.removeClass([type, direction].join(" ")).addClass("active");
          $active.removeClass(["active", direction].join(" "));
          that.sliding = false;
          setTimeout(function () {
            that.$element.trigger(slidEvent);
          }, 0);
        })
        .emulateTransitionEnd(Carousel.TRANSITION_DURATION);
    } else {
      $active.removeClass("active");
      $next.addClass("active");
      this.sliding = false;
      this.$element.trigger(slidEvent);
    }

    isCycling && this.cycle();

    return this;
  };

  // CAROUSEL PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data("bs.carousel");
      var options = $.extend(
        {},
        Carousel.DEFAULTS,
        $this.data(),
        typeof option == "object" && option
      );
      var action = typeof option == "string" ? option : options.slide;

      if (!data)
        $this.data("bs.carousel", (data = new Carousel(this, options)));
      if (typeof option == "number") data.to(option);
      else if (action) data[action]();
      else if (options.interval) data.pause().cycle();
    });
  }

  var old = $.fn.carousel;

  $.fn.carousel = Plugin;
  $.fn.carousel.Constructor = Carousel;

  // CAROUSEL NO CONFLICT
  // ====================

  $.fn.carousel.noConflict = function () {
    $.fn.carousel = old;
    return this;
  };

  // CAROUSEL DATA-API
  // =================

  var clickHandler = function (e) {
    var $this = $(this);
    var href = $this.attr("href");
    if (href) {
      href = href.replace(/.*(?=#[^\s]+$)/, ""); // strip for ie7
    }

    var target = $this.attr("data-target") || href;
    var $target = $(document).find(target);

    if (!$target.hasClass("carousel")) return;

    var options = $.extend({}, $target.data(), $this.data());
    var slideIndex = $this.attr("data-slide-to");
    if (slideIndex) options.interval = false;

    Plugin.call($target, options);

    if (slideIndex) {
      $target.data("bs.carousel").to(slideIndex);
    }

    e.preventDefault();
  };

  $(document)
    .on("click.bs.carousel.data-api", "[data-slide]", clickHandler)
    .on("click.bs.carousel.data-api", "[data-slide-to]", clickHandler);

  $(window).on("load", function () {
    $('[data-ride="carousel"]').each(function () {
      var $carousel = $(this);
      Plugin.call($carousel, $carousel.data());
    });
  });
})(jQuery);

/* ========================================================================
 * Bootstrap: collapse.js v3.4.1
 * https://getbootstrap.com/docs/3.4/javascript/#collapse
 * ========================================================================
 * Copyright 2011-2019 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

/* jshint latedef: false */

+(function ($) {
  "use strict";

  // COLLAPSE PUBLIC CLASS DEFINITION
  // ================================

  var Collapse = function (element, options) {
    this.$element = $(element);
    this.options = $.extend({}, Collapse.DEFAULTS, options);
    this.$trigger = $(
      '[data-toggle="collapse"][href="#' +
        element.id +
        '"],' +
        '[data-toggle="collapse"][data-target="#' +
        element.id +
        '"]'
    );
    this.transitioning = null;

    if (this.options.parent) {
      this.$parent = this.getParent();
    } else {
      this.addAriaAndCollapsedClass(this.$element, this.$trigger);
    }

    if (this.options.toggle) this.toggle();
  };

  Collapse.VERSION = "3.4.1";

  Collapse.TRANSITION_DURATION = 350;

  Collapse.DEFAULTS = {
    toggle: true,
  };

  Collapse.prototype.dimension = function () {
    var hasWidth = this.$element.hasClass("width");
    return hasWidth ? "width" : "height";
  };

  Collapse.prototype.show = function () {
    if (this.transitioning || this.$element.hasClass("in")) return;

    var activesData;
    var actives =
      this.$parent &&
      this.$parent.children(".panel").children(".in, .collapsing");

    if (actives && actives.length) {
      activesData = actives.data("bs.collapse");
      if (activesData && activesData.transitioning) return;
    }

    var startEvent = $.Event("show.bs.collapse");
    this.$element.trigger(startEvent);
    if (startEvent.isDefaultPrevented()) return;

    if (actives && actives.length) {
      Plugin.call(actives, "hide");
      activesData || actives.data("bs.collapse", null);
    }

    var dimension = this.dimension();

    this.$element
      .removeClass("collapse")
      .addClass("collapsing")
      [dimension](0)
      .attr("aria-expanded", true);

    this.$trigger.removeClass("collapsed").attr("aria-expanded", true);

    this.transitioning = 1;

    var complete = function () {
      this.$element
        .removeClass("collapsing")
        .addClass("collapse in")
        [dimension]("");
      this.transitioning = 0;
      this.$element.trigger("shown.bs.collapse");
    };

    if (!$.support.transition) return complete.call(this);

    var scrollSize = $.camelCase(["scroll", dimension].join("-"));

    this.$element
      .one("bsTransitionEnd", $.proxy(complete, this))
      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)
      [dimension](this.$element[0][scrollSize]);
  };

  Collapse.prototype.hide = function () {
    if (this.transitioning || !this.$element.hasClass("in")) return;

    var startEvent = $.Event("hide.bs.collapse");
    this.$element.trigger(startEvent);
    if (startEvent.isDefaultPrevented()) return;

    var dimension = this.dimension();

    this.$element[dimension](this.$element[dimension]())[0].offsetHeight;

    this.$element
      .addClass("collapsing")
      .removeClass("collapse in")
      .attr("aria-expanded", false);

    this.$trigger.addClass("collapsed").attr("aria-expanded", false);

    this.transitioning = 1;

    var complete = function () {
      this.transitioning = 0;
      this.$element
        .removeClass("collapsing")
        .addClass("collapse")
        .trigger("hidden.bs.collapse");
    };

    if (!$.support.transition) return complete.call(this);

    this.$element[dimension](0)
      .one("bsTransitionEnd", $.proxy(complete, this))
      .emulateTransitionEnd(Collapse.TRANSITION_DURATION);
  };

  Collapse.prototype.toggle = function () {
    this[this.$element.hasClass("in") ? "hide" : "show"]();
  };

  Collapse.prototype.getParent = function () {
    return $(document)
      .find(this.options.parent)
      .find(
        '[data-toggle="collapse"][data-parent="' + this.options.parent + '"]'
      )
      .each(
        $.proxy(function (i, element) {
          var $element = $(element);
          this.addAriaAndCollapsedClass(
            getTargetFromTrigger($element),
            $element
          );
        }, this)
      )
      .end();
  };

  Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {
    var isOpen = $element.hasClass("in");

    $element.attr("aria-expanded", isOpen);
    $trigger.toggleClass("collapsed", !isOpen).attr("aria-expanded", isOpen);
  };

  function getTargetFromTrigger($trigger) {
    var href;
    var target =
      $trigger.attr("data-target") ||
      ((href = $trigger.attr("href")) && href.replace(/.*(?=#[^\s]+$)/, "")); // strip for ie7

    return $(document).find(target);
  }

  // COLLAPSE PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data("bs.collapse");
      var options = $.extend(
        {},
        Collapse.DEFAULTS,
        $this.data(),
        typeof option == "object" && option
      );

      if (!data && options.toggle && /show|hide/.test(option))
        options.toggle = false;
      if (!data)
        $this.data("bs.collapse", (data = new Collapse(this, options)));
      if (typeof option == "string") data[option]();
    });
  }

  var old = $.fn.collapse;

  $.fn.collapse = Plugin;
  $.fn.collapse.Constructor = Collapse;

  // COLLAPSE NO CONFLICT
  // ====================

  $.fn.collapse.noConflict = function () {
    $.fn.collapse = old;
    return this;
  };

  // COLLAPSE DATA-API
  // =================

  $(document).on(
    "click.bs.collapse.data-api",
    '[data-toggle="collapse"]',
    function (e) {
      var $this = $(this);

      if (!$this.attr("data-target")) e.preventDefault();

      var $target = getTargetFromTrigger($this);
      var data = $target.data("bs.collapse");
      var option = data ? "toggle" : $this.data();

      Plugin.call($target, option);
    }
  );
})(jQuery);

/* ========================================================================
 * Bootstrap: dropdown.js v3.4.1
 * https://getbootstrap.com/docs/3.4/javascript/#dropdowns
 * ========================================================================
 * Copyright 2011-2019 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

+(function ($) {
  "use strict";

  // DROPDOWN CLASS DEFINITION
  // =========================

  var backdrop = ".dropdown-backdrop";
  var toggle = '[data-toggle="dropdown"]';
  var Dropdown = function (element) {
    $(element).on("click.bs.dropdown", this.toggle);
  };

  Dropdown.VERSION = "3.4.1";

  function getParent($this) {
    var selector = $this.attr("data-target");

    if (!selector) {
      selector = $this.attr("href");
      selector =
        selector &&
        /#[A-Za-z]/.test(selector) &&
        selector.replace(/.*(?=#[^\s]*$)/, ""); // strip for ie7
    }

    var $parent = selector !== "#" ? $(document).find(selector) : null;

    return $parent && $parent.length ? $parent : $this.parent();
  }

  function clearMenus(e) {
    if (e && e.which === 3) return;
    $(backdrop).remove();
    $(toggle).each(function () {
      var $this = $(this);
      var $parent = getParent($this);
      var relatedTarget = { relatedTarget: this };

      if (!$parent.hasClass("open")) return;

      if (
        e &&
        e.type == "click" &&
        /input|textarea/i.test(e.target.tagName) &&
        $.contains($parent[0], e.target)
      )
        return;

      $parent.trigger((e = $.Event("hide.bs.dropdown", relatedTarget)));

      if (e.isDefaultPrevented()) return;

      $this.attr("aria-expanded", "false");
      $parent
        .removeClass("open")
        .trigger($.Event("hidden.bs.dropdown", relatedTarget));
    });
  }

  Dropdown.prototype.toggle = function (e) {
    var $this = $(this);

    if ($this.is(".disabled, :disabled")) return;

    var $parent = getParent($this);
    var isActive = $parent.hasClass("open");

    clearMenus();

    if (!isActive) {
      if (
        "ontouchstart" in document.documentElement &&
        !$parent.closest(".navbar-nav").length
      ) {
        // if mobile we use a backdrop because click events don't delegate
        $(document.createElement("div"))
          .addClass("dropdown-backdrop")
          .insertAfter($(this))
          .on("click", clearMenus);
      }

      var relatedTarget = { relatedTarget: this };
      $parent.trigger((e = $.Event("show.bs.dropdown", relatedTarget)));

      if (e.isDefaultPrevented()) return;

      $this.trigger("focus").attr("aria-expanded", "true");

      $parent
        .toggleClass("open")
        .trigger($.Event("shown.bs.dropdown", relatedTarget));
    }

    return false;
  };

  Dropdown.prototype.keydown = function (e) {
    if (
      !/(38|40|27|32)/.test(e.which) ||
      /input|textarea/i.test(e.target.tagName)
    )
      return;

    var $this = $(this);

    e.preventDefault();
    e.stopPropagation();

    if ($this.is(".disabled, :disabled")) return;

    var $parent = getParent($this);
    var isActive = $parent.hasClass("open");

    if ((!isActive && e.which != 27) || (isActive && e.which == 27)) {
      if (e.which == 27) $parent.find(toggle).trigger("focus");
      return $this.trigger("click");
    }

    var desc = " li:not(.disabled):visible a";
    var $items = $parent.find(".dropdown-menu" + desc);

    if (!$items.length) return;

    var index = $items.index(e.target);

    if (e.which == 38 && index > 0) index--; // up
    if (e.which == 40 && index < $items.length - 1) index++; // down
    if (!~index) index = 0;

    $items.eq(index).trigger("focus");
  };

  // DROPDOWN PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data("bs.dropdown");

      if (!data) $this.data("bs.dropdown", (data = new Dropdown(this)));
      if (typeof option == "string") data[option].call($this);
    });
  }

  var old = $.fn.dropdown;

  $.fn.dropdown = Plugin;
  $.fn.dropdown.Constructor = Dropdown;

  // DROPDOWN NO CONFLICT
  // ====================

  $.fn.dropdown.noConflict = function () {
    $.fn.dropdown = old;
    return this;
  };

  // APPLY TO STANDARD DROPDOWN ELEMENTS
  // ===================================

  $(document)
    .on("click.bs.dropdown.data-api", clearMenus)
    .on("click.bs.dropdown.data-api", ".dropdown form", function (e) {
      e.stopPropagation();
    })
    .on("click.bs.dropdown.data-api", toggle, Dropdown.prototype.toggle)
    .on("keydown.bs.dropdown.data-api", toggle, Dropdown.prototype.keydown)
    .on(
      "keydown.bs.dropdown.data-api",
      ".dropdown-menu",
      Dropdown.prototype.keydown
    );
})(jQuery);

/* ========================================================================
 * Bootstrap: modal.js v3.4.1
 * https://getbootstrap.com/docs/3.4/javascript/#modals
 * ========================================================================
 * Copyright 2011-2019 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

+(function ($) {
  "use strict";

  // MODAL CLASS DEFINITION
  // ======================

  var Modal = function (element, options) {
    this.options = options;
    this.$body = $(document.body);
    this.$element = $(element);
    this.$dialog = this.$element.find(".modal-dialog");
    this.$backdrop = null;
    this.isShown = null;
    this.originalBodyPad = null;
    this.scrollbarWidth = 0;
    this.ignoreBackdropClick = false;
    this.fixedContent = ".navbar-fixed-top, .navbar-fixed-bottom";

    if (this.options.remote) {
      this.$element.find(".modal-content").load(
        this.options.remote,
        $.proxy(function () {
          this.$element.trigger("loaded.bs.modal");
        }, this)
      );
    }
  };

  Modal.VERSION = "3.4.1";

  Modal.TRANSITION_DURATION = 300;
  Modal.BACKDROP_TRANSITION_DURATION = 150;

  Modal.DEFAULTS = {
    backdrop: true,
    keyboard: true,
    show: true,
  };

  Modal.prototype.toggle = function (_relatedTarget) {
    return this.isShown ? this.hide() : this.show(_relatedTarget);
  };

  Modal.prototype.show = function (_relatedTarget) {
    var that = this;
    var e = $.Event("show.bs.modal", { relatedTarget: _relatedTarget });

    this.$element.trigger(e);

    if (this.isShown || e.isDefaultPrevented()) return;

    this.isShown = true;

    this.checkScrollbar();
    this.setScrollbar();
    this.$body.addClass("modal-open");

    this.escape();
    this.resize();

    this.$element.on(
      "click.dismiss.bs.modal",
      '[data-dismiss="modal"]',
      $.proxy(this.hide, this)
    );

    this.$dialog.on("mousedown.dismiss.bs.modal", function () {
      that.$element.one("mouseup.dismiss.bs.modal", function (e) {
        if ($(e.target).is(that.$element)) that.ignoreBackdropClick = true;
      });
    });

    this.backdrop(function () {
      var transition = $.support.transition && that.$element.hasClass("fade");

      if (!that.$element.parent().length) {
        that.$element.appendTo(that.$body); // don't move modals dom position
      }

      that.$element.show().scrollTop(0);

      that.adjustDialog();

      if (transition) {
        that.$element[0].offsetWidth; // force reflow
      }

      that.$element.addClass("in");

      that.enforceFocus();

      var e = $.Event("shown.bs.modal", { relatedTarget: _relatedTarget });

      transition
        ? that.$dialog // wait for modal to slide in
            .one("bsTransitionEnd", function () {
              that.$element.trigger("focus").trigger(e);
            })
            .emulateTransitionEnd(Modal.TRANSITION_DURATION)
        : that.$element.trigger("focus").trigger(e);
    });
  };

  Modal.prototype.hide = function (e) {
    if (e) e.preventDefault();

    e = $.Event("hide.bs.modal");

    this.$element.trigger(e);

    if (!this.isShown || e.isDefaultPrevented()) return;

    this.isShown = false;

    this.escape();
    this.resize();

    $(document).off("focusin.bs.modal");

    this.$element
      .removeClass("in")
      .off("click.dismiss.bs.modal")
      .off("mouseup.dismiss.bs.modal");

    this.$dialog.off("mousedown.dismiss.bs.modal");

    $.support.transition && this.$element.hasClass("fade")
      ? this.$element
          .one("bsTransitionEnd", $.proxy(this.hideModal, this))
          .emulateTransitionEnd(Modal.TRANSITION_DURATION)
      : this.hideModal();
  };

  Modal.prototype.enforceFocus = function () {
    $(document)
      .off("focusin.bs.modal") // guard against infinite focus loop
      .on(
        "focusin.bs.modal",
        $.proxy(function (e) {
          if (
            document !== e.target &&
            this.$element[0] !== e.target &&
            !this.$element.has(e.target).length
          ) {
            this.$element.trigger("focus");
          }
        }, this)
      );
  };

  Modal.prototype.escape = function () {
    if (this.isShown && this.options.keyboard) {
      this.$element.on(
        "keydown.dismiss.bs.modal",
        $.proxy(function (e) {
          e.which == 27 && this.hide();
        }, this)
      );
    } else if (!this.isShown) {
      this.$element.off("keydown.dismiss.bs.modal");
    }
  };

  Modal.prototype.resize = function () {
    if (this.isShown) {
      $(window).on("resize.bs.modal", $.proxy(this.handleUpdate, this));
    } else {
      $(window).off("resize.bs.modal");
    }
  };

  Modal.prototype.hideModal = function () {
    var that = this;
    this.$element.hide();
    this.backdrop(function () {
      that.$body.removeClass("modal-open");
      that.resetAdjustments();
      that.resetScrollbar();
      that.$element.trigger("hidden.bs.modal");
    });
  };

  Modal.prototype.removeBackdrop = function () {
    this.$backdrop && this.$backdrop.remove();
    this.$backdrop = null;
  };

  Modal.prototype.backdrop = function (callback) {
    var that = this;
    var animate = this.$element.hasClass("fade") ? "fade" : "";

    if (this.isShown && this.options.backdrop) {
      var doAnimate = $.support.transition && animate;

      this.$backdrop = $(document.createElement("div"))
        .addClass("modal-backdrop " + animate)
        .appendTo(this.$body);

      this.$element.on(
        "click.dismiss.bs.modal",
        $.proxy(function (e) {
          if (this.ignoreBackdropClick) {
            this.ignoreBackdropClick = false;
            return;
          }
          if (e.target !== e.currentTarget) return;
          this.options.backdrop == "static"
            ? this.$element[0].focus()
            : this.hide();
        }, this)
      );

      if (doAnimate) this.$backdrop[0].offsetWidth; // force reflow

      this.$backdrop.addClass("in");

      if (!callback) return;

      doAnimate
        ? this.$backdrop
            .one("bsTransitionEnd", callback)
            .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION)
        : callback();
    } else if (!this.isShown && this.$backdrop) {
      this.$backdrop.removeClass("in");

      var callbackRemove = function () {
        that.removeBackdrop();
        callback && callback();
      };
      $.support.transition && this.$element.hasClass("fade")
        ? this.$backdrop
            .one("bsTransitionEnd", callbackRemove)
            .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION)
        : callbackRemove();
    } else if (callback) {
      callback();
    }
  };

  // these following methods are used to handle overflowing modals

  Modal.prototype.handleUpdate = function () {
    this.adjustDialog();
  };

  Modal.prototype.adjustDialog = function () {
    var modalIsOverflowing =
      this.$element[0].scrollHeight > document.documentElement.clientHeight;

    this.$element.css({
      paddingLeft:
        !this.bodyIsOverflowing && modalIsOverflowing
          ? this.scrollbarWidth
          : "",
      paddingRight:
        this.bodyIsOverflowing && !modalIsOverflowing
          ? this.scrollbarWidth
          : "",
    });
  };

  Modal.prototype.resetAdjustments = function () {
    this.$element.css({
      paddingLeft: "",
      paddingRight: "",
    });
  };

  Modal.prototype.checkScrollbar = function () {
    var fullWindowWidth = window.innerWidth;
    if (!fullWindowWidth) {
      // workaround for missing window.innerWidth in IE8
      var documentElementRect =
        document.documentElement.getBoundingClientRect();
      fullWindowWidth =
        documentElementRect.right - Math.abs(documentElementRect.left);
    }
    this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth;
    this.scrollbarWidth = this.measureScrollbar();
  };

  Modal.prototype.setScrollbar = function () {
    var bodyPad = parseInt(this.$body.css("padding-right") || 0, 10);
    this.originalBodyPad = document.body.style.paddingRight || "";
    var scrollbarWidth = this.scrollbarWidth;
    if (this.bodyIsOverflowing) {
      this.$body.css("padding-right", bodyPad + scrollbarWidth);
      $(this.fixedContent).each(function (index, element) {
        var actualPadding = element.style.paddingRight;
        var calculatedPadding = $(element).css("padding-right");
        $(element)
          .data("padding-right", actualPadding)
          .css(
            "padding-right",
            parseFloat(calculatedPadding) + scrollbarWidth + "px"
          );
      });
    }
  };

  Modal.prototype.resetScrollbar = function () {
    this.$body.css("padding-right", this.originalBodyPad);
    $(this.fixedContent).each(function (index, element) {
      var padding = $(element).data("padding-right");
      $(element).removeData("padding-right");
      element.style.paddingRight = padding ? padding : "";
    });
  };

  Modal.prototype.measureScrollbar = function () {
    // thx walsh
    var scrollDiv = document.createElement("div");
    scrollDiv.className = "modal-scrollbar-measure";
    this.$body.append(scrollDiv);
    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
    this.$body[0].removeChild(scrollDiv);
    return scrollbarWidth;
  };

  // MODAL PLUGIN DEFINITION
  // =======================

  function Plugin(option, _relatedTarget) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data("bs.modal");
      var options = $.extend(
        {},
        Modal.DEFAULTS,
        $this.data(),
        typeof option == "object" && option
      );

      if (!data) $this.data("bs.modal", (data = new Modal(this, options)));
      if (typeof option == "string") data[option](_relatedTarget);
      else if (options.show) data.show(_relatedTarget);
    });
  }

  var old = $.fn.modal;

  $.fn.modal = Plugin;
  $.fn.modal.Constructor = Modal;

  // MODAL NO CONFLICT
  // =================

  $.fn.modal.noConflict = function () {
    $.fn.modal = old;
    return this;
  };

  // MODAL DATA-API
  // ==============

  $(document).on(
    "click.bs.modal.data-api",
    '[data-toggle="modal"]',
    function (e) {
      var $this = $(this);
      var href = $this.attr("href");
      var target =
        $this.attr("data-target") ||
        (href && href.replace(/.*(?=#[^\s]+$)/, "")); // strip for ie7

      var $target = $(document).find(target);
      var option = $target.data("bs.modal")
        ? "toggle"
        : $.extend(
            { remote: !/#/.test(href) && href },
            $target.data(),
            $this.data()
          );

      if ($this.is("a")) e.preventDefault();

      $target.one("show.bs.modal", function (showEvent) {
        if (showEvent.isDefaultPrevented()) return; // only register focus restorer if modal will actually get shown
        $target.one("hidden.bs.modal", function () {
          $this.is(":visible") && $this.trigger("focus");
        });
      });
      Plugin.call($target, option, this);
    }
  );
})(jQuery);

/* ========================================================================
 * Bootstrap: tooltip.js v3.4.1
 * https://getbootstrap.com/docs/3.4/javascript/#tooltip
 * Inspired by the original jQuery.tipsy by Jason Frame
 * ========================================================================
 * Copyright 2011-2019 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

+(function ($) {
  "use strict";

  var DISALLOWED_ATTRIBUTES = ["sanitize", "whiteList", "sanitizeFn"];

  var uriAttrs = [
    "background",
    "cite",
    "href",
    "itemtype",
    "longdesc",
    "poster",
    "src",
    "xlink:href",
  ];

  var ARIA_ATTRIBUTE_PATTERN = /^aria-[\w-]*$/i;

  var DefaultWhitelist = {
    // Global attributes allowed on any supplied element below.
    "*": ["class", "dir", "id", "lang", "role", ARIA_ATTRIBUTE_PATTERN],
    a: ["target", "href", "title", "rel"],
    area: [],
    b: [],
    br: [],
    col: [],
    code: [],
    div: [],
    em: [],
    hr: [],
    h1: [],
    h2: [],
    h3: [],
    h4: [],
    h5: [],
    h6: [],
    i: [],
    img: ["src", "alt", "title", "width", "height"],
    li: [],
    ol: [],
    p: [],
    pre: [],
    s: [],
    small: [],
    span: [],
    sub: [],
    sup: [],
    strong: [],
    u: [],
    ul: [],
  };

  /**
   * A pattern that recognizes a commonly useful subset of URLs that are safe.
   *
   * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts
   */
  var SAFE_URL_PATTERN =
    /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;

  /**
   * A pattern that matches safe data URLs. Only matches image, video and audio types.
   *
   * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts
   */
  var DATA_URL_PATTERN =
    /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+/]+=*$/i;

  function allowedAttribute(attr, allowedAttributeList) {
    var attrName = attr.nodeName.toLowerCase();

    if ($.inArray(attrName, allowedAttributeList) !== -1) {
      if ($.inArray(attrName, uriAttrs) !== -1) {
        return Boolean(
          attr.nodeValue.match(SAFE_URL_PATTERN) ||
            attr.nodeValue.match(DATA_URL_PATTERN)
        );
      }

      return true;
    }

    var regExp = $(allowedAttributeList).filter(function (index, value) {
      return value instanceof RegExp;
    });

    // Check if a regular expression validates the attribute.
    for (var i = 0, l = regExp.length; i < l; i++) {
      if (attrName.match(regExp[i])) {
        return true;
      }
    }

    return false;
  }

  function sanitizeHtml(unsafeHtml, whiteList, sanitizeFn) {
    if (unsafeHtml.length === 0) {
      return unsafeHtml;
    }

    if (sanitizeFn && typeof sanitizeFn === "function") {
      return sanitizeFn(unsafeHtml);
    }

    // IE 8 and below don't support createHTMLDocument
    if (
      !document.implementation ||
      !document.implementation.createHTMLDocument
    ) {
      return unsafeHtml;
    }

    var createdDocument =
      document.implementation.createHTMLDocument("sanitization");
    createdDocument.body.innerHTML = unsafeHtml;

    var whitelistKeys = $.map(whiteList, function (el, i) {
      return i;
    });
    var elements = $(createdDocument.body).find("*");

    for (var i = 0, len = elements.length; i < len; i++) {
      var el = elements[i];
      var elName = el.nodeName.toLowerCase();

      if ($.inArray(elName, whitelistKeys) === -1) {
        el.parentNode.removeChild(el);

        continue;
      }

      var attributeList = $.map(el.attributes, function (el) {
        return el;
      });
      var whitelistedAttributes = [].concat(
        whiteList["*"] || [],
        whiteList[elName] || []
      );

      for (var j = 0, len2 = attributeList.length; j < len2; j++) {
        if (!allowedAttribute(attributeList[j], whitelistedAttributes)) {
          el.removeAttribute(attributeList[j].nodeName);
        }
      }
    }

    return createdDocument.body.innerHTML;
  }

  // TOOLTIP PUBLIC CLASS DEFINITION
  // ===============================

  var Tooltip = function (element, options) {
    this.type = null;
    this.options = null;
    this.enabled = null;
    this.timeout = null;
    this.hoverState = null;
    this.$element = null;
    this.inState = null;

    this.init("tooltip", element, options);
  };

  Tooltip.VERSION = "3.4.1";

  Tooltip.TRANSITION_DURATION = 150;

  Tooltip.DEFAULTS = {
    animation: true,
    placement: "top",
    selector: false,
    template:
      '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
    trigger: "hover focus",
    title: "",
    delay: 0,
    html: false,
    container: false,
    viewport: {
      selector: "body",
      padding: 0,
    },
    sanitize: true,
    sanitizeFn: null,
    whiteList: DefaultWhitelist,
  };

  Tooltip.prototype.init = function (type, element, options) {
    this.enabled = true;
    this.type = type;
    this.$element = $(element);
    this.options = this.getOptions(options);
    this.$viewport =
      this.options.viewport &&
      $(document).find(
        $.isFunction(this.options.viewport)
          ? this.options.viewport.call(this, this.$element)
          : this.options.viewport.selector || this.options.viewport
      );
    this.inState = { click: false, hover: false, focus: false };

    if (
      this.$element[0] instanceof document.constructor &&
      !this.options.selector
    ) {
      throw new Error(
        "`selector` option must be specified when initializing " +
          this.type +
          " on the window.document object!"
      );
    }

    var triggers = this.options.trigger.split(" ");

    for (var i = triggers.length; i--; ) {
      var trigger = triggers[i];

      if (trigger == "click") {
        this.$element.on(
          "click." + this.type,
          this.options.selector,
          $.proxy(this.toggle, this)
        );
      } else if (trigger != "manual") {
        var eventIn = trigger == "hover" ? "mouseenter" : "focusin";
        var eventOut = trigger == "hover" ? "mouseleave" : "focusout";

        this.$element.on(
          eventIn + "." + this.type,
          this.options.selector,
          $.proxy(this.enter, this)
        );
        this.$element.on(
          eventOut + "." + this.type,
          this.options.selector,
          $.proxy(this.leave, this)
        );
      }
    }

    this.options.selector
      ? (this._options = $.extend({}, this.options, {
          trigger: "manual",
          selector: "",
        }))
      : this.fixTitle();
  };

  Tooltip.prototype.getDefaults = function () {
    return Tooltip.DEFAULTS;
  };

  Tooltip.prototype.getOptions = function (options) {
    var dataAttributes = this.$element.data();

    for (var dataAttr in dataAttributes) {
      if (
        dataAttributes.hasOwnProperty(dataAttr) &&
        $.inArray(dataAttr, DISALLOWED_ATTRIBUTES) !== -1
      ) {
        delete dataAttributes[dataAttr];
      }
    }

    options = $.extend({}, this.getDefaults(), dataAttributes, options);

    if (options.delay && typeof options.delay == "number") {
      options.delay = {
        show: options.delay,
        hide: options.delay,
      };
    }

    if (options.sanitize) {
      options.template = sanitizeHtml(
        options.template,
        options.whiteList,
        options.sanitizeFn
      );
    }

    return options;
  };

  Tooltip.prototype.getDelegateOptions = function () {
    var options = {};
    var defaults = this.getDefaults();

    this._options &&
      $.each(this._options, function (key, value) {
        if (defaults[key] != value) options[key] = value;
      });

    return options;
  };

  Tooltip.prototype.enter = function (obj) {
    var self =
      obj instanceof this.constructor
        ? obj
        : $(obj.currentTarget).data("bs." + this.type);

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions());
      $(obj.currentTarget).data("bs." + this.type, self);
    }

    if (obj instanceof $.Event) {
      self.inState[obj.type == "focusin" ? "focus" : "hover"] = true;
    }

    if (self.tip().hasClass("in") || self.hoverState == "in") {
      self.hoverState = "in";
      return;
    }

    clearTimeout(self.timeout);

    self.hoverState = "in";

    if (!self.options.delay || !self.options.delay.show) return self.show();

    self.timeout = setTimeout(function () {
      if (self.hoverState == "in") self.show();
    }, self.options.delay.show);
  };

  Tooltip.prototype.isInStateTrue = function () {
    for (var key in this.inState) {
      if (this.inState[key]) return true;
    }

    return false;
  };

  Tooltip.prototype.leave = function (obj) {
    var self =
      obj instanceof this.constructor
        ? obj
        : $(obj.currentTarget).data("bs." + this.type);

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions());
      $(obj.currentTarget).data("bs." + this.type, self);
    }

    if (obj instanceof $.Event) {
      self.inState[obj.type == "focusout" ? "focus" : "hover"] = false;
    }

    if (self.isInStateTrue()) return;

    clearTimeout(self.timeout);

    self.hoverState = "out";

    if (!self.options.delay || !self.options.delay.hide) return self.hide();

    self.timeout = setTimeout(function () {
      if (self.hoverState == "out") self.hide();
    }, self.options.delay.hide);
  };

  Tooltip.prototype.show = function () {
    var e = $.Event("show.bs." + this.type);

    if (this.hasContent() && this.enabled) {
      this.$element.trigger(e);

      var inDom = $.contains(
        this.$element[0].ownerDocument.documentElement,
        this.$element[0]
      );
      if (e.isDefaultPrevented() || !inDom) return;
      var that = this;

      var $tip = this.tip();

      var tipId = this.getUID(this.type);

      this.setContent();
      $tip.attr("id", tipId);
      this.$element.attr("aria-describedby", tipId);

      if (this.options.animation) $tip.addClass("fade");

      var placement =
        typeof this.options.placement == "function"
          ? this.options.placement.call(this, $tip[0], this.$element[0])
          : this.options.placement;

      var autoToken = /\s?auto?\s?/i;
      var autoPlace = autoToken.test(placement);
      if (autoPlace) placement = placement.replace(autoToken, "") || "top";

      $tip
        .detach()
        .css({ top: 0, left: 0, display: "block" })
        .addClass(placement)
        .data("bs." + this.type, this);

      this.options.container
        ? $tip.appendTo($(document).find(this.options.container))
        : $tip.insertAfter(this.$element);
      this.$element.trigger("inserted.bs." + this.type);

      var pos = this.getPosition();
      var actualWidth = $tip[0].offsetWidth;
      var actualHeight = $tip[0].offsetHeight;

      if (autoPlace) {
        var orgPlacement = placement;
        var viewportDim = this.getPosition(this.$viewport);

        placement =
          placement == "bottom" &&
          pos.bottom + actualHeight > viewportDim.bottom
            ? "top"
            : placement == "top" && pos.top - actualHeight < viewportDim.top
            ? "bottom"
            : placement == "right" &&
              pos.right + actualWidth > viewportDim.width
            ? "left"
            : placement == "left" && pos.left - actualWidth < viewportDim.left
            ? "right"
            : placement;

        $tip.removeClass(orgPlacement).addClass(placement);
      }

      var calculatedOffset = this.getCalculatedOffset(
        placement,
        pos,
        actualWidth,
        actualHeight
      );

      this.applyPlacement(calculatedOffset, placement);

      var complete = function () {
        var prevHoverState = that.hoverState;
        that.$element.trigger("shown.bs." + that.type);
        that.hoverState = null;

        if (prevHoverState == "out") that.leave(that);
      };

      $.support.transition && this.$tip.hasClass("fade")
        ? $tip
            .one("bsTransitionEnd", complete)
            .emulateTransitionEnd(Tooltip.TRANSITION_DURATION)
        : complete();
    }
  };

  Tooltip.prototype.applyPlacement = function (offset, placement) {
    var $tip = this.tip();
    var width = $tip[0].offsetWidth;
    var height = $tip[0].offsetHeight;

    // manually read margins because getBoundingClientRect includes difference
    var marginTop = parseInt($tip.css("margin-top"), 10);
    var marginLeft = parseInt($tip.css("margin-left"), 10);

    // we must check for NaN for ie 8/9
    if (isNaN(marginTop)) marginTop = 0;
    if (isNaN(marginLeft)) marginLeft = 0;

    offset.top += marginTop;
    offset.left += marginLeft;

    // $.fn.offset doesn't round pixel values
    // so we use setOffset directly with our own function B-0
    $.offset.setOffset(
      $tip[0],
      $.extend(
        {
          using: function (props) {
            $tip.css({
              top: Math.round(props.top),
              left: Math.round(props.left),
            });
          },
        },
        offset
      ),
      0
    );

    $tip.addClass("in");

    // check to see if placing tip in new offset caused the tip to resize itself
    var actualWidth = $tip[0].offsetWidth;
    var actualHeight = $tip[0].offsetHeight;

    if (placement == "top" && actualHeight != height) {
      offset.top = offset.top + height - actualHeight;
    }

    var delta = this.getViewportAdjustedDelta(
      placement,
      offset,
      actualWidth,
      actualHeight
    );

    if (delta.left) offset.left += delta.left;
    else offset.top += delta.top;

    var isVertical = /top|bottom/.test(placement);
    var arrowDelta = isVertical
      ? delta.left * 2 - width + actualWidth
      : delta.top * 2 - height + actualHeight;
    var arrowOffsetPosition = isVertical ? "offsetWidth" : "offsetHeight";

    $tip.offset(offset);
    this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical);
  };

  Tooltip.prototype.replaceArrow = function (delta, dimension, isVertical) {
    this.arrow()
      .css(isVertical ? "left" : "top", 50 * (1 - delta / dimension) + "%")
      .css(isVertical ? "top" : "left", "");
  };

  Tooltip.prototype.setContent = function () {
    var $tip = this.tip();
    var title = this.getTitle();

    if (this.options.html) {
      if (this.options.sanitize) {
        title = sanitizeHtml(
          title,
          this.options.whiteList,
          this.options.sanitizeFn
        );
      }

      $tip.find(".tooltip-inner").html(title);
    } else {
      $tip.find(".tooltip-inner").text(title);
    }

    $tip.removeClass("fade in top bottom left right");
  };

  Tooltip.prototype.hide = function (callback) {
    var that = this;
    var $tip = $(this.$tip);
    var e = $.Event("hide.bs." + this.type);

    function complete() {
      if (that.hoverState != "in") $tip.detach();
      if (that.$element) {
        // TODO: Check whether guarding this code with this `if` is really necessary.
        that.$element
          .removeAttr("aria-describedby")
          .trigger("hidden.bs." + that.type);
      }
      callback && callback();
    }

    this.$element.trigger(e);

    if (e.isDefaultPrevented()) return;

    $tip.removeClass("in");

    $.support.transition && $tip.hasClass("fade")
      ? $tip
          .one("bsTransitionEnd", complete)
          .emulateTransitionEnd(Tooltip.TRANSITION_DURATION)
      : complete();

    this.hoverState = null;

    return this;
  };

  Tooltip.prototype.fixTitle = function () {
    var $e = this.$element;
    if ($e.attr("title") || typeof $e.attr("data-original-title") != "string") {
      $e.attr("data-original-title", $e.attr("title") || "").attr("title", "");
    }
  };

  Tooltip.prototype.hasContent = function () {
    return this.getTitle();
  };

  Tooltip.prototype.getPosition = function ($element) {
    $element = $element || this.$element;

    var el = $element[0];
    var isBody = el.tagName == "BODY";

    var elRect = el.getBoundingClientRect();
    if (elRect.width == null) {
      // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093
      elRect = $.extend({}, elRect, {
        width: elRect.right - elRect.left,
        height: elRect.bottom - elRect.top,
      });
    }
    var isSvg = window.SVGElement && el instanceof window.SVGElement;
    // Avoid using $.offset() on SVGs since it gives incorrect results in jQuery 3.
    // See https://github.com/twbs/bootstrap/issues/20280
    var elOffset = isBody
      ? { top: 0, left: 0 }
      : isSvg
      ? null
      : $element.offset();
    var scroll = {
      scroll: isBody
        ? document.documentElement.scrollTop || document.body.scrollTop
        : $element.scrollTop(),
    };
    var outerDims = isBody
      ? { width: $(window).width(), height: $(window).height() }
      : null;

    return $.extend({}, elRect, scroll, outerDims, elOffset);
  };

  Tooltip.prototype.getCalculatedOffset = function (
    placement,
    pos,
    actualWidth,
    actualHeight
  ) {
    return placement == "bottom"
      ? {
          top: pos.top + pos.height,
          left: pos.left + pos.width / 2 - actualWidth / 2,
        }
      : placement == "top"
      ? {
          top: pos.top - actualHeight,
          left: pos.left + pos.width / 2 - actualWidth / 2,
        }
      : placement == "left"
      ? {
          top: pos.top + pos.height / 2 - actualHeight / 2,
          left: pos.left - actualWidth,
        }
      : /* placement == 'right' */ {
          top: pos.top + pos.height / 2 - actualHeight / 2,
          left: pos.left + pos.width,
        };
  };

  Tooltip.prototype.getViewportAdjustedDelta = function (
    placement,
    pos,
    actualWidth,
    actualHeight
  ) {
    var delta = { top: 0, left: 0 };
    if (!this.$viewport) return delta;

    var viewportPadding =
      (this.options.viewport && this.options.viewport.padding) || 0;
    var viewportDimensions = this.getPosition(this.$viewport);

    if (/right|left/.test(placement)) {
      var topEdgeOffset = pos.top - viewportPadding - viewportDimensions.scroll;
      var bottomEdgeOffset =
        pos.top + viewportPadding - viewportDimensions.scroll + actualHeight;
      if (topEdgeOffset < viewportDimensions.top) {
        // top overflow
        delta.top = viewportDimensions.top - topEdgeOffset;
      } else if (
        bottomEdgeOffset >
        viewportDimensions.top + viewportDimensions.height
      ) {
        // bottom overflow
        delta.top =
          viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;
      }
    } else {
      var leftEdgeOffset = pos.left - viewportPadding;
      var rightEdgeOffset = pos.left + viewportPadding + actualWidth;
      if (leftEdgeOffset < viewportDimensions.left) {
        // left overflow
        delta.left = viewportDimensions.left - leftEdgeOffset;
      } else if (rightEdgeOffset > viewportDimensions.right) {
        // right overflow
        delta.left =
          viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;
      }
    }

    return delta;
  };

  Tooltip.prototype.getTitle = function () {
    var title;
    var $e = this.$element;
    var o = this.options;

    title =
      $e.attr("data-original-title") ||
      (typeof o.title == "function" ? o.title.call($e[0]) : o.title);

    return title;
  };

  Tooltip.prototype.getUID = function (prefix) {
    do prefix += ~~(Math.random() * 1000000);
    while (document.getElementById(prefix));
    return prefix;
  };

  Tooltip.prototype.tip = function () {
    if (!this.$tip) {
      this.$tip = $(this.options.template);
      if (this.$tip.length != 1) {
        throw new Error(
          this.type +
            " `template` option must consist of exactly 1 top-level element!"
        );
      }
    }
    return this.$tip;
  };

  Tooltip.prototype.arrow = function () {
    return (this.$arrow = this.$arrow || this.tip().find(".tooltip-arrow"));
  };

  Tooltip.prototype.enable = function () {
    this.enabled = true;
  };

  Tooltip.prototype.disable = function () {
    this.enabled = false;
  };

  Tooltip.prototype.toggleEnabled = function () {
    this.enabled = !this.enabled;
  };

  Tooltip.prototype.toggle = function (e) {
    var self = this;
    if (e) {
      self = $(e.currentTarget).data("bs." + this.type);
      if (!self) {
        self = new this.constructor(e.currentTarget, this.getDelegateOptions());
        $(e.currentTarget).data("bs." + this.type, self);
      }
    }

    if (e) {
      self.inState.click = !self.inState.click;
      if (self.isInStateTrue()) self.enter(self);
      else self.leave(self);
    } else {
      self.tip().hasClass("in") ? self.leave(self) : self.enter(self);
    }
  };

  Tooltip.prototype.destroy = function () {
    var that = this;
    clearTimeout(this.timeout);
    this.hide(function () {
      that.$element.off("." + that.type).removeData("bs." + that.type);
      if (that.$tip) {
        that.$tip.detach();
      }
      that.$tip = null;
      that.$arrow = null;
      that.$viewport = null;
      that.$element = null;
    });
  };

  Tooltip.prototype.sanitizeHtml = function (unsafeHtml) {
    return sanitizeHtml(
      unsafeHtml,
      this.options.whiteList,
      this.options.sanitizeFn
    );
  };

  // TOOLTIP PLUGIN DEFINITION
  // =========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data("bs.tooltip");
      var options = typeof option == "object" && option;

      if (!data && /destroy|hide/.test(option)) return;
      if (!data) $this.data("bs.tooltip", (data = new Tooltip(this, options)));
      if (typeof option == "string") data[option]();
    });
  }

  var old = $.fn.tooltip;

  $.fn.tooltip = Plugin;
  $.fn.tooltip.Constructor = Tooltip;

  // TOOLTIP NO CONFLICT
  // ===================

  $.fn.tooltip.noConflict = function () {
    $.fn.tooltip = old;
    return this;
  };
})(jQuery);

/* ========================================================================
 * Bootstrap: popover.js v3.4.1
 * https://getbootstrap.com/docs/3.4/javascript/#popovers
 * ========================================================================
 * Copyright 2011-2019 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

+(function ($) {
  "use strict";

  // POPOVER PUBLIC CLASS DEFINITION
  // ===============================

  var Popover = function (element, options) {
    this.init("popover", element, options);
  };

  if (!$.fn.tooltip) throw new Error("Popover requires tooltip.js");

  Popover.VERSION = "3.4.1";

  Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {
    placement: "right",
    trigger: "click",
    content: "",
    template:
      '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>',
  });

  // NOTE: POPOVER EXTENDS tooltip.js
  // ================================

  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype);

  Popover.prototype.constructor = Popover;

  Popover.prototype.getDefaults = function () {
    return Popover.DEFAULTS;
  };

  Popover.prototype.setContent = function () {
    var $tip = this.tip();
    var title = this.getTitle();
    var content = this.getContent();

    if (this.options.html) {
      var typeContent = typeof content;

      if (this.options.sanitize) {
        title = this.sanitizeHtml(title);

        if (typeContent === "string") {
          content = this.sanitizeHtml(content);
        }
      }

      $tip.find(".popover-title").html(title);
      $tip
        .find(".popover-content")
        .children()
        .detach()
        .end()
        [typeContent === "string" ? "html" : "append"](content);
    } else {
      $tip.find(".popover-title").text(title);
      $tip.find(".popover-content").children().detach().end().text(content);
    }

    $tip.removeClass("fade top bottom left right in");

    // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do
    // this manually by checking the contents.
    if (!$tip.find(".popover-title").html()) $tip.find(".popover-title").hide();
  };

  Popover.prototype.hasContent = function () {
    return this.getTitle() || this.getContent();
  };

  Popover.prototype.getContent = function () {
    var $e = this.$element;
    var o = this.options;

    return (
      $e.attr("data-content") ||
      (typeof o.content == "function" ? o.content.call($e[0]) : o.content)
    );
  };

  Popover.prototype.arrow = function () {
    return (this.$arrow = this.$arrow || this.tip().find(".arrow"));
  };

  // POPOVER PLUGIN DEFINITION
  // =========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data("bs.popover");
      var options = typeof option == "object" && option;

      if (!data && /destroy|hide/.test(option)) return;
      if (!data) $this.data("bs.popover", (data = new Popover(this, options)));
      if (typeof option == "string") data[option]();
    });
  }

  var old = $.fn.popover;

  $.fn.popover = Plugin;
  $.fn.popover.Constructor = Popover;

  // POPOVER NO CONFLICT
  // ===================

  $.fn.popover.noConflict = function () {
    $.fn.popover = old;
    return this;
  };
})(jQuery);

/* ========================================================================
 * Bootstrap: scrollspy.js v3.4.1
 * https://getbootstrap.com/docs/3.4/javascript/#scrollspy
 * ========================================================================
 * Copyright 2011-2019 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

+(function ($) {
  "use strict";

  // SCROLLSPY CLASS DEFINITION
  // ==========================

  function ScrollSpy(element, options) {
    this.$body = $(document.body);
    this.$scrollElement = $(element).is(document.body) ? $(window) : $(element);
    this.options = $.extend({}, ScrollSpy.DEFAULTS, options);
    this.selector = (this.options.target || "") + " .nav li > a";
    this.offsets = [];
    this.targets = [];
    this.activeTarget = null;
    this.scrollHeight = 0;

    this.$scrollElement.on("scroll.bs.scrollspy", $.proxy(this.process, this));
    this.refresh();
    this.process();
  }

  ScrollSpy.VERSION = "3.4.1";

  ScrollSpy.DEFAULTS = {
    offset: 10,
  };

  ScrollSpy.prototype.getScrollHeight = function () {
    return (
      this.$scrollElement[0].scrollHeight ||
      Math.max(
        this.$body[0].scrollHeight,
        document.documentElement.scrollHeight
      )
    );
  };

  ScrollSpy.prototype.refresh = function () {
    var that = this;
    var offsetMethod = "offset";
    var offsetBase = 0;

    this.offsets = [];
    this.targets = [];
    this.scrollHeight = this.getScrollHeight();

    if (!$.isWindow(this.$scrollElement[0])) {
      offsetMethod = "position";
      offsetBase = this.$scrollElement.scrollTop();
    }

    this.$body
      .find(this.selector)
      .map(function () {
        var $el = $(this);
        var href = $el.data("target") || $el.attr("href");
        var $href = /^#./.test(href) && $(href);

        return (
          ($href &&
            $href.length &&
            $href.is(":visible") && [
              [$href[offsetMethod]().top + offsetBase, href],
            ]) ||
          null
        );
      })
      .sort(function (a, b) {
        return a[0] - b[0];
      })
      .each(function () {
        that.offsets.push(this[0]);
        that.targets.push(this[1]);
      });
  };

  ScrollSpy.prototype.process = function () {
    var scrollTop = this.$scrollElement.scrollTop() + this.options.offset;
    var scrollHeight = this.getScrollHeight();
    var maxScroll =
      this.options.offset + scrollHeight - this.$scrollElement.height();
    var offsets = this.offsets;
    var targets = this.targets;
    var activeTarget = this.activeTarget;
    var i;

    if (this.scrollHeight != scrollHeight) {
      this.refresh();
    }

    if (scrollTop >= maxScroll) {
      return (
        activeTarget != (i = targets[targets.length - 1]) && this.activate(i)
      );
    }

    if (activeTarget && scrollTop < offsets[0]) {
      this.activeTarget = null;
      return this.clear();
    }

    for (i = offsets.length; i--; ) {
      activeTarget != targets[i] &&
        scrollTop >= offsets[i] &&
        (offsets[i + 1] === undefined || scrollTop < offsets[i + 1]) &&
        this.activate(targets[i]);
    }
  };

  ScrollSpy.prototype.activate = function (target) {
    this.activeTarget = target;

    this.clear();

    var selector =
      this.selector +
      '[data-target="' +
      target +
      '"],' +
      this.selector +
      '[href="' +
      target +
      '"]';

    var active = $(selector).parents("li").addClass("active");

    if (active.parent(".dropdown-menu").length) {
      active = active.closest("li.dropdown").addClass("active");
    }

    active.trigger("activate.bs.scrollspy");
  };

  ScrollSpy.prototype.clear = function () {
    $(this.selector)
      .parentsUntil(this.options.target, ".active")
      .removeClass("active");
  };

  // SCROLLSPY PLUGIN DEFINITION
  // ===========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data("bs.scrollspy");
      var options = typeof option == "object" && option;

      if (!data)
        $this.data("bs.scrollspy", (data = new ScrollSpy(this, options)));
      if (typeof option == "string") data[option]();
    });
  }

  var old = $.fn.scrollspy;

  $.fn.scrollspy = Plugin;
  $.fn.scrollspy.Constructor = ScrollSpy;

  // SCROLLSPY NO CONFLICT
  // =====================

  $.fn.scrollspy.noConflict = function () {
    $.fn.scrollspy = old;
    return this;
  };

  // SCROLLSPY DATA-API
  // ==================

  $(window).on("load.bs.scrollspy.data-api", function () {
    $('[data-spy="scroll"]').each(function () {
      var $spy = $(this);
      Plugin.call($spy, $spy.data());
    });
  });
})(jQuery);

/* ========================================================================
 * Bootstrap: tab.js v3.4.1
 * https://getbootstrap.com/docs/3.4/javascript/#tabs
 * ========================================================================
 * Copyright 2011-2019 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

+(function ($) {
  "use strict";

  // TAB CLASS DEFINITION
  // ====================

  var Tab = function (element) {
    // jscs:disable requireDollarBeforejQueryAssignment
    this.element = $(element);
    // jscs:enable requireDollarBeforejQueryAssignment
  };

  Tab.VERSION = "3.4.1";

  Tab.TRANSITION_DURATION = 150;

  Tab.prototype.show = function () {
    var $this = this.element;
    var $ul = $this.closest("ul:not(.dropdown-menu)");
    var selector = $this.data("target");

    if (!selector) {
      selector = $this.attr("href");
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, ""); // strip for ie7
    }

    if ($this.parent("li").hasClass("active")) return;

    var $previous = $ul.find(".active:last a");
    var hideEvent = $.Event("hide.bs.tab", {
      relatedTarget: $this[0],
    });
    var showEvent = $.Event("show.bs.tab", {
      relatedTarget: $previous[0],
    });

    $previous.trigger(hideEvent);
    $this.trigger(showEvent);

    if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented())
      return;

    var $target = $(document).find(selector);

    this.activate($this.closest("li"), $ul);
    this.activate($target, $target.parent(), function () {
      $previous.trigger({
        type: "hidden.bs.tab",
        relatedTarget: $this[0],
      });
      $this.trigger({
        type: "shown.bs.tab",
        relatedTarget: $previous[0],
      });
    });
  };

  Tab.prototype.activate = function (element, container, callback) {
    var $active = container.find("> .active");
    var transition =
      callback &&
      $.support.transition &&
      (($active.length && $active.hasClass("fade")) ||
        !!container.find("> .fade").length);

    function next() {
      $active
        .removeClass("active")
        .find("> .dropdown-menu > .active")
        .removeClass("active")
        .end()
        .find('[data-toggle="tab"]')
        .attr("aria-expanded", false);

      element
        .addClass("active")
        .find('[data-toggle="tab"]')
        .attr("aria-expanded", true);

      if (transition) {
        element[0].offsetWidth; // reflow for transition
        element.addClass("in");
      } else {
        element.removeClass("fade");
      }

      if (element.parent(".dropdown-menu").length) {
        element
          .closest("li.dropdown")
          .addClass("active")
          .end()
          .find('[data-toggle="tab"]')
          .attr("aria-expanded", true);
      }

      callback && callback();
    }

    $active.length && transition
      ? $active
          .one("bsTransitionEnd", next)
          .emulateTransitionEnd(Tab.TRANSITION_DURATION)
      : next();

    $active.removeClass("in");
  };

  // TAB PLUGIN DEFINITION
  // =====================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data("bs.tab");

      if (!data) $this.data("bs.tab", (data = new Tab(this)));
      if (typeof option == "string") data[option]();
    });
  }

  var old = $.fn.tab;

  $.fn.tab = Plugin;
  $.fn.tab.Constructor = Tab;

  // TAB NO CONFLICT
  // ===============

  $.fn.tab.noConflict = function () {
    $.fn.tab = old;
    return this;
  };

  // TAB DATA-API
  // ============

  var clickHandler = function (e) {
    e.preventDefault();
    Plugin.call($(this), "show");
  };

  $(document)
    .on("click.bs.tab.data-api", '[data-toggle="tab"]', clickHandler)
    .on("click.bs.tab.data-api", '[data-toggle="pill"]', clickHandler);
})(jQuery);

/* ========================================================================
 * Bootstrap: affix.js v3.4.1
 * https://getbootstrap.com/docs/3.4/javascript/#affix
 * ========================================================================
 * Copyright 2011-2019 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

+(function ($) {
  "use strict";

  // AFFIX CLASS DEFINITION
  // ======================

  var Affix = function (element, options) {
    this.options = $.extend({}, Affix.DEFAULTS, options);

    var target =
      this.options.target === Affix.DEFAULTS.target
        ? $(this.options.target)
        : $(document).find(this.options.target);

    this.$target = target
      .on("scroll.bs.affix.data-api", $.proxy(this.checkPosition, this))
      .on(
        "click.bs.affix.data-api",
        $.proxy(this.checkPositionWithEventLoop, this)
      );

    this.$element = $(element);
    this.affixed = null;
    this.unpin = null;
    this.pinnedOffset = null;

    this.checkPosition();
  };

  Affix.VERSION = "3.4.1";

  Affix.RESET = "affix affix-top affix-bottom";

  Affix.DEFAULTS = {
    offset: 0,
    target: window,
  };

  Affix.prototype.getState = function (
    scrollHeight,
    height,
    offsetTop,
    offsetBottom
  ) {
    var scrollTop = this.$target.scrollTop();
    var position = this.$element.offset();
    var targetHeight = this.$target.height();

    if (offsetTop != null && this.affixed == "top")
      return scrollTop < offsetTop ? "top" : false;

    if (this.affixed == "bottom") {
      if (offsetTop != null)
        return scrollTop + this.unpin <= position.top ? false : "bottom";
      return scrollTop + targetHeight <= scrollHeight - offsetBottom
        ? false
        : "bottom";
    }

    var initializing = this.affixed == null;
    var colliderTop = initializing ? scrollTop : position.top;
    var colliderHeight = initializing ? targetHeight : height;

    if (offsetTop != null && scrollTop <= offsetTop) return "top";
    if (
      offsetBottom != null &&
      colliderTop + colliderHeight >= scrollHeight - offsetBottom
    )
      return "bottom";

    return false;
  };

  Affix.prototype.getPinnedOffset = function () {
    if (this.pinnedOffset) return this.pinnedOffset;
    this.$element.removeClass(Affix.RESET).addClass("affix");
    var scrollTop = this.$target.scrollTop();
    var position = this.$element.offset();
    return (this.pinnedOffset = position.top - scrollTop);
  };

  Affix.prototype.checkPositionWithEventLoop = function () {
    setTimeout($.proxy(this.checkPosition, this), 1);
  };

  Affix.prototype.checkPosition = function () {
    if (!this.$element.is(":visible")) return;

    var height = this.$element.height();
    var offset = this.options.offset;
    var offsetTop = offset.top;
    var offsetBottom = offset.bottom;
    var scrollHeight = Math.max(
      $(document).height(),
      $(document.body).height()
    );

    if (typeof offset != "object") offsetBottom = offsetTop = offset;
    if (typeof offsetTop == "function") offsetTop = offset.top(this.$element);
    if (typeof offsetBottom == "function")
      offsetBottom = offset.bottom(this.$element);

    var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom);

    if (this.affixed != affix) {
      if (this.unpin != null) this.$element.css("top", "");

      var affixType = "affix" + (affix ? "-" + affix : "");
      var e = $.Event(affixType + ".bs.affix");

      this.$element.trigger(e);

      if (e.isDefaultPrevented()) return;

      this.affixed = affix;
      this.unpin = affix == "bottom" ? this.getPinnedOffset() : null;

      this.$element
        .removeClass(Affix.RESET)
        .addClass(affixType)
        .trigger(affixType.replace("affix", "affixed") + ".bs.affix");
    }

    if (affix == "bottom") {
      this.$element.offset({
        top: scrollHeight - height - offsetBottom,
      });
    }
  };

  // AFFIX PLUGIN DEFINITION
  // =======================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data("bs.affix");
      var options = typeof option == "object" && option;

      if (!data) $this.data("bs.affix", (data = new Affix(this, options)));
      if (typeof option == "string") data[option]();
    });
  }

  var old = $.fn.affix;

  $.fn.affix = Plugin;
  $.fn.affix.Constructor = Affix;

  // AFFIX NO CONFLICT
  // =================

  $.fn.affix.noConflict = function () {
    $.fn.affix = old;
    return this;
  };

  // AFFIX DATA-API
  // ==============

  $(window).on("load", function () {
    $('[data-spy="affix"]').each(function () {
      var $spy = $(this);
      var data = $spy.data();

      data.offset = data.offset || {};

      if (data.offsetBottom != null) data.offset.bottom = data.offsetBottom;
      if (data.offsetTop != null) data.offset.top = data.offsetTop;

      Plugin.call($spy, data);
    });
  });
})(jQuery);

/*!
 * Chart.js
 * http://chartjs.org/
 * Version: 2.1.6
 *
 * Copyright 2016 Nick Downie
 * Released under the MIT license
 * https://github.com/chartjs/Chart.js/blob/master/LICENSE.md
 */
(function (f) {
  if (typeof exports === "object" && typeof module !== "undefined") {
    module.exports = f();
  } else if (typeof define === "function" && define.amd) {
    define([], f);
  } else {
    var g;
    if (typeof window !== "undefined") {
      g = window;
    } else if (typeof global !== "undefined") {
      g = global;
    } else if (typeof self !== "undefined") {
      g = self;
    } else {
      g = this;
    }
    g.Chart = f();
  }
})(function () {
  var define, module, exports;
  return (function e(t, n, r) {
    function s(o, u) {
      if (!n[o]) {
        if (!t[o]) {
          var a = typeof require == "function" && require;
          if (!u && a) return a(o, !0);
          if (i) return i(o, !0);
          var f = new Error("Cannot find module '" + o + "'");
          throw ((f.code = "MODULE_NOT_FOUND"), f);
        }
        var l = (n[o] = { exports: {} });
        t[o][0].call(
          l.exports,
          function (e) {
            var n = t[o][1][e];
            return s(n ? n : e);
          },
          l,
          l.exports,
          e,
          t,
          n,
          r
        );
      }
      return n[o].exports;
    }
    var i = typeof require == "function" && require;
    for (var o = 0; o < r.length; o++) s(r[o]);
    return s;
  })(
    {
      1: [function (require, module, exports) {}, {}],
      2: [
        function (require, module, exports) {
          /* MIT license */
          var colorNames = require(6);

          module.exports = {
            getRgba: getRgba,
            getHsla: getHsla,
            getRgb: getRgb,
            getHsl: getHsl,
            getHwb: getHwb,
            getAlpha: getAlpha,

            hexString: hexString,
            rgbString: rgbString,
            rgbaString: rgbaString,
            percentString: percentString,
            percentaString: percentaString,
            hslString: hslString,
            hslaString: hslaString,
            hwbString: hwbString,
            keyword: keyword,
          };

          function getRgba(string) {
            if (!string) {
              return;
            }
            var abbr = /^#([a-fA-F0-9]{3})$/,
              hex = /^#([a-fA-F0-9]{6})$/,
              rgba =
                /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/,
              per =
                /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/,
              keyword = /(\w+)/;

            var rgb = [0, 0, 0],
              a = 1,
              match = string.match(abbr);
            if (match) {
              match = match[1];
              for (var i = 0; i < rgb.length; i++) {
                rgb[i] = parseInt(match[i] + match[i], 16);
              }
            } else if ((match = string.match(hex))) {
              match = match[1];
              for (var i = 0; i < rgb.length; i++) {
                rgb[i] = parseInt(match.slice(i * 2, i * 2 + 2), 16);
              }
            } else if ((match = string.match(rgba))) {
              for (var i = 0; i < rgb.length; i++) {
                rgb[i] = parseInt(match[i + 1]);
              }
              a = parseFloat(match[4]);
            } else if ((match = string.match(per))) {
              for (var i = 0; i < rgb.length; i++) {
                rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
              }
              a = parseFloat(match[4]);
            } else if ((match = string.match(keyword))) {
              if (match[1] == "transparent") {
                return [0, 0, 0, 0];
              }
              rgb = colorNames[match[1]];
              if (!rgb) {
                return;
              }
            }

            for (var i = 0; i < rgb.length; i++) {
              rgb[i] = scale(rgb[i], 0, 255);
            }
            if (!a && a != 0) {
              a = 1;
            } else {
              a = scale(a, 0, 1);
            }
            rgb[3] = a;
            return rgb;
          }

          function getHsla(string) {
            if (!string) {
              return;
            }
            var hsl =
              /^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
            var match = string.match(hsl);
            if (match) {
              var alpha = parseFloat(match[4]);
              var h = scale(parseInt(match[1]), 0, 360),
                s = scale(parseFloat(match[2]), 0, 100),
                l = scale(parseFloat(match[3]), 0, 100),
                a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
              return [h, s, l, a];
            }
          }

          function getHwb(string) {
            if (!string) {
              return;
            }
            var hwb =
              /^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
            var match = string.match(hwb);
            if (match) {
              var alpha = parseFloat(match[4]);
              var h = scale(parseInt(match[1]), 0, 360),
                w = scale(parseFloat(match[2]), 0, 100),
                b = scale(parseFloat(match[3]), 0, 100),
                a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
              return [h, w, b, a];
            }
          }

          function getRgb(string) {
            var rgba = getRgba(string);
            return rgba && rgba.slice(0, 3);
          }

          function getHsl(string) {
            var hsla = getHsla(string);
            return hsla && hsla.slice(0, 3);
          }

          function getAlpha(string) {
            var vals = getRgba(string);
            if (vals) {
              return vals[3];
            } else if ((vals = getHsla(string))) {
              return vals[3];
            } else if ((vals = getHwb(string))) {
              return vals[3];
            }
          }

          // generators
          function hexString(rgb) {
            return (
              "#" + hexDouble(rgb[0]) + hexDouble(rgb[1]) + hexDouble(rgb[2])
            );
          }

          function rgbString(rgba, alpha) {
            if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {
              return rgbaString(rgba, alpha);
            }
            return "rgb(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2] + ")";
          }

          function rgbaString(rgba, alpha) {
            if (alpha === undefined) {
              alpha = rgba[3] !== undefined ? rgba[3] : 1;
            }
            return (
              "rgba(" +
              rgba[0] +
              ", " +
              rgba[1] +
              ", " +
              rgba[2] +
              ", " +
              alpha +
              ")"
            );
          }

          function percentString(rgba, alpha) {
            if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {
              return percentaString(rgba, alpha);
            }
            var r = Math.round((rgba[0] / 255) * 100),
              g = Math.round((rgba[1] / 255) * 100),
              b = Math.round((rgba[2] / 255) * 100);

            return "rgb(" + r + "%, " + g + "%, " + b + "%)";
          }

          function percentaString(rgba, alpha) {
            var r = Math.round((rgba[0] / 255) * 100),
              g = Math.round((rgba[1] / 255) * 100),
              b = Math.round((rgba[2] / 255) * 100);
            return (
              "rgba(" +
              r +
              "%, " +
              g +
              "%, " +
              b +
              "%, " +
              (alpha || rgba[3] || 1) +
              ")"
            );
          }

          function hslString(hsla, alpha) {
            if (alpha < 1 || (hsla[3] && hsla[3] < 1)) {
              return hslaString(hsla, alpha);
            }
            return "hsl(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%)";
          }

          function hslaString(hsla, alpha) {
            if (alpha === undefined) {
              alpha = hsla[3] !== undefined ? hsla[3] : 1;
            }
            return (
              "hsla(" +
              hsla[0] +
              ", " +
              hsla[1] +
              "%, " +
              hsla[2] +
              "%, " +
              alpha +
              ")"
            );
          }

          // hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax
          // (hwb have alpha optional & 1 is default value)
          function hwbString(hwb, alpha) {
            if (alpha === undefined) {
              alpha = hwb[3] !== undefined ? hwb[3] : 1;
            }
            return (
              "hwb(" +
              hwb[0] +
              ", " +
              hwb[1] +
              "%, " +
              hwb[2] +
              "%" +
              (alpha !== undefined && alpha !== 1 ? ", " + alpha : "") +
              ")"
            );
          }

          function keyword(rgb) {
            return reverseNames[rgb.slice(0, 3)];
          }

          // helpers
          function scale(num, min, max) {
            return Math.min(Math.max(min, num), max);
          }

          function hexDouble(num) {
            var str = num.toString(16).toUpperCase();
            return str.length < 2 ? "0" + str : str;
          }

          //create a list of reverse color names
          var reverseNames = {};
          for (var name in colorNames) {
            reverseNames[colorNames[name]] = name;
          }
        },
        { 6: 6 },
      ],
      3: [
        function (require, module, exports) {
          /* MIT license */
          var convert = require(5);
          var string = require(2);

          var Color = function (obj) {
            if (obj instanceof Color) {
              return obj;
            }
            if (!(this instanceof Color)) {
              return new Color(obj);
            }

            this.values = {
              rgb: [0, 0, 0],
              hsl: [0, 0, 0],
              hsv: [0, 0, 0],
              hwb: [0, 0, 0],
              cmyk: [0, 0, 0, 0],
              alpha: 1,
            };

            // parse Color() argument
            var vals;
            if (typeof obj === "string") {
              vals = string.getRgba(obj);
              if (vals) {
                this.setValues("rgb", vals);
              } else if ((vals = string.getHsla(obj))) {
                this.setValues("hsl", vals);
              } else if ((vals = string.getHwb(obj))) {
                this.setValues("hwb", vals);
              } else {
                throw new Error(
                  'Unable to parse color from string "' + obj + '"'
                );
              }
            } else if (typeof obj === "object") {
              vals = obj;
              if (vals.r !== undefined || vals.red !== undefined) {
                this.setValues("rgb", vals);
              } else if (vals.l !== undefined || vals.lightness !== undefined) {
                this.setValues("hsl", vals);
              } else if (vals.v !== undefined || vals.value !== undefined) {
                this.setValues("hsv", vals);
              } else if (vals.w !== undefined || vals.whiteness !== undefined) {
                this.setValues("hwb", vals);
              } else if (vals.c !== undefined || vals.cyan !== undefined) {
                this.setValues("cmyk", vals);
              } else {
                throw new Error(
                  "Unable to parse color from object " + JSON.stringify(obj)
                );
              }
            }
          };

          Color.prototype = {
            rgb: function () {
              return this.setSpace("rgb", arguments);
            },
            hsl: function () {
              return this.setSpace("hsl", arguments);
            },
            hsv: function () {
              return this.setSpace("hsv", arguments);
            },
            hwb: function () {
              return this.setSpace("hwb", arguments);
            },
            cmyk: function () {
              return this.setSpace("cmyk", arguments);
            },

            rgbArray: function () {
              return this.values.rgb;
            },
            hslArray: function () {
              return this.values.hsl;
            },
            hsvArray: function () {
              return this.values.hsv;
            },
            hwbArray: function () {
              var values = this.values;
              if (values.alpha !== 1) {
                return values.hwb.concat([values.alpha]);
              }
              return values.hwb;
            },
            cmykArray: function () {
              return this.values.cmyk;
            },
            rgbaArray: function () {
              var values = this.values;
              return values.rgb.concat([values.alpha]);
            },
            hslaArray: function () {
              var values = this.values;
              return values.hsl.concat([values.alpha]);
            },
            alpha: function (val) {
              if (val === undefined) {
                return this.values.alpha;
              }
              this.setValues("alpha", val);
              return this;
            },

            red: function (val) {
              return this.setChannel("rgb", 0, val);
            },
            green: function (val) {
              return this.setChannel("rgb", 1, val);
            },
            blue: function (val) {
              return this.setChannel("rgb", 2, val);
            },
            hue: function (val) {
              if (val) {
                val %= 360;
                val = val < 0 ? 360 + val : val;
              }
              return this.setChannel("hsl", 0, val);
            },
            saturation: function (val) {
              return this.setChannel("hsl", 1, val);
            },
            lightness: function (val) {
              return this.setChannel("hsl", 2, val);
            },
            saturationv: function (val) {
              return this.setChannel("hsv", 1, val);
            },
            whiteness: function (val) {
              return this.setChannel("hwb", 1, val);
            },
            blackness: function (val) {
              return this.setChannel("hwb", 2, val);
            },
            value: function (val) {
              return this.setChannel("hsv", 2, val);
            },
            cyan: function (val) {
              return this.setChannel("cmyk", 0, val);
            },
            magenta: function (val) {
              return this.setChannel("cmyk", 1, val);
            },
            yellow: function (val) {
              return this.setChannel("cmyk", 2, val);
            },
            black: function (val) {
              return this.setChannel("cmyk", 3, val);
            },

            hexString: function () {
              return string.hexString(this.values.rgb);
            },
            rgbString: function () {
              return string.rgbString(this.values.rgb, this.values.alpha);
            },
            rgbaString: function () {
              return string.rgbaString(this.values.rgb, this.values.alpha);
            },
            percentString: function () {
              return string.percentString(this.values.rgb, this.values.alpha);
            },
            hslString: function () {
              return string.hslString(this.values.hsl, this.values.alpha);
            },
            hslaString: function () {
              return string.hslaString(this.values.hsl, this.values.alpha);
            },
            hwbString: function () {
              return string.hwbString(this.values.hwb, this.values.alpha);
            },
            keyword: function () {
              return string.keyword(this.values.rgb, this.values.alpha);
            },

            rgbNumber: function () {
              var rgb = this.values.rgb;
              return (rgb[0] << 16) | (rgb[1] << 8) | rgb[2];
            },

            luminosity: function () {
              // http://www.w3.org/TR/WCAG20/#relativeluminancedef
              var rgb = this.values.rgb;
              var lum = [];
              for (var i = 0; i < rgb.length; i++) {
                var chan = rgb[i] / 255;
                lum[i] =
                  chan <= 0.03928
                    ? chan / 12.92
                    : Math.pow((chan + 0.055) / 1.055, 2.4);
              }
              return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
            },

            contrast: function (color2) {
              // http://www.w3.org/TR/WCAG20/#contrast-ratiodef
              var lum1 = this.luminosity();
              var lum2 = color2.luminosity();
              if (lum1 > lum2) {
                return (lum1 + 0.05) / (lum2 + 0.05);
              }
              return (lum2 + 0.05) / (lum1 + 0.05);
            },

            level: function (color2) {
              var contrastRatio = this.contrast(color2);
              if (contrastRatio >= 7.1) {
                return "AAA";
              }

              return contrastRatio >= 4.5 ? "AA" : "";
            },

            dark: function () {
              // YIQ equation from http://24ways.org/2010/calculating-color-contrast
              var rgb = this.values.rgb;
              var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;
              return yiq < 128;
            },

            light: function () {
              return !this.dark();
            },

            negate: function () {
              var rgb = [];
              for (var i = 0; i < 3; i++) {
                rgb[i] = 255 - this.values.rgb[i];
              }
              this.setValues("rgb", rgb);
              return this;
            },

            lighten: function (ratio) {
              var hsl = this.values.hsl;
              hsl[2] += hsl[2] * ratio;
              this.setValues("hsl", hsl);
              return this;
            },

            darken: function (ratio) {
              var hsl = this.values.hsl;
              hsl[2] -= hsl[2] * ratio;
              this.setValues("hsl", hsl);
              return this;
            },

            saturate: function (ratio) {
              var hsl = this.values.hsl;
              hsl[1] += hsl[1] * ratio;
              this.setValues("hsl", hsl);
              return this;
            },

            desaturate: function (ratio) {
              var hsl = this.values.hsl;
              hsl[1] -= hsl[1] * ratio;
              this.setValues("hsl", hsl);
              return this;
            },

            whiten: function (ratio) {
              var hwb = this.values.hwb;
              hwb[1] += hwb[1] * ratio;
              this.setValues("hwb", hwb);
              return this;
            },

            blacken: function (ratio) {
              var hwb = this.values.hwb;
              hwb[2] += hwb[2] * ratio;
              this.setValues("hwb", hwb);
              return this;
            },

            greyscale: function () {
              var rgb = this.values.rgb;
              // http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale
              var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
              this.setValues("rgb", [val, val, val]);
              return this;
            },

            clearer: function (ratio) {
              var alpha = this.values.alpha;
              this.setValues("alpha", alpha - alpha * ratio);
              return this;
            },

            opaquer: function (ratio) {
              var alpha = this.values.alpha;
              this.setValues("alpha", alpha + alpha * ratio);
              return this;
            },

            rotate: function (degrees) {
              var hsl = this.values.hsl;
              var hue = (hsl[0] + degrees) % 360;
              hsl[0] = hue < 0 ? 360 + hue : hue;
              this.setValues("hsl", hsl);
              return this;
            },

            /**
             * Ported from sass implementation in C
             * https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209
             */
            mix: function (mixinColor, weight) {
              var color1 = this;
              var color2 = mixinColor;
              var p = weight === undefined ? 0.5 : weight;

              var w = 2 * p - 1;
              var a = color1.alpha() - color2.alpha();

              var w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
              var w2 = 1 - w1;

              return this.rgb(
                w1 * color1.red() + w2 * color2.red(),
                w1 * color1.green() + w2 * color2.green(),
                w1 * color1.blue() + w2 * color2.blue()
              ).alpha(color1.alpha() * p + color2.alpha() * (1 - p));
            },

            toJSON: function () {
              return this.rgb();
            },

            clone: function () {
              // NOTE(SB): using node-clone creates a dependency to Buffer when using browserify,
              // making the final build way to big to embed in Chart.js. So let's do it manually,
              // assuming that values to clone are 1 dimension arrays containing only numbers,
              // except 'alpha' which is a number.
              var result = new Color();
              var source = this.values;
              var target = result.values;
              var value, type;

              for (var prop in source) {
                if (source.hasOwnProperty(prop)) {
                  value = source[prop];
                  type = {}.toString.call(value);
                  if (type === "[object Array]") {
                    target[prop] = value.slice(0);
                  } else if (type === "[object Number]") {
                    target[prop] = value;
                  } else {
                    console.error("unexpected color value:", value);
                  }
                }
              }

              return result;
            },
          };

          Color.prototype.spaces = {
            rgb: ["red", "green", "blue"],
            hsl: ["hue", "saturation", "lightness"],
            hsv: ["hue", "saturation", "value"],
            hwb: ["hue", "whiteness", "blackness"],
            cmyk: ["cyan", "magenta", "yellow", "black"],
          };

          Color.prototype.maxes = {
            rgb: [255, 255, 255],
            hsl: [360, 100, 100],
            hsv: [360, 100, 100],
            hwb: [360, 100, 100],
            cmyk: [100, 100, 100, 100],
          };

          Color.prototype.getValues = function (space) {
            var values = this.values;
            var vals = {};

            for (var i = 0; i < space.length; i++) {
              vals[space.charAt(i)] = values[space][i];
            }

            if (values.alpha !== 1) {
              vals.a = values.alpha;
            }

            // {r: 255, g: 255, b: 255, a: 0.4}
            return vals;
          };

          Color.prototype.setValues = function (space, vals) {
            var values = this.values;
            var spaces = this.spaces;
            var maxes = this.maxes;
            var alpha = 1;
            var i;

            if (space === "alpha") {
              alpha = vals;
            } else if (vals.length) {
              // [10, 10, 10]
              values[space] = vals.slice(0, space.length);
              alpha = vals[space.length];
            } else if (vals[space.charAt(0)] !== undefined) {
              // {r: 10, g: 10, b: 10}
              for (i = 0; i < space.length; i++) {
                values[space][i] = vals[space.charAt(i)];
              }

              alpha = vals.a;
            } else if (vals[spaces[space][0]] !== undefined) {
              // {red: 10, green: 10, blue: 10}
              var chans = spaces[space];

              for (i = 0; i < space.length; i++) {
                values[space][i] = vals[chans[i]];
              }

              alpha = vals.alpha;
            }

            values.alpha = Math.max(
              0,
              Math.min(1, alpha === undefined ? values.alpha : alpha)
            );

            if (space === "alpha") {
              return false;
            }

            var capped;

            // cap values of the space prior converting all values
            for (i = 0; i < space.length; i++) {
              capped = Math.max(0, Math.min(maxes[space][i], values[space][i]));
              values[space][i] = Math.round(capped);
            }

            // convert to all the other color spaces
            for (var sname in spaces) {
              if (sname !== space) {
                values[sname] = convert[space][sname](values[space]);
              }
            }

            return true;
          };

          Color.prototype.setSpace = function (space, args) {
            var vals = args[0];

            if (vals === undefined) {
              // color.rgb()
              return this.getValues(space);
            }

            // color.rgb(10, 10, 10)
            if (typeof vals === "number") {
              vals = Array.prototype.slice.call(args);
            }

            this.setValues(space, vals);
            return this;
          };

          Color.prototype.setChannel = function (space, index, val) {
            var svalues = this.values[space];
            if (val === undefined) {
              // color.red()
              return svalues[index];
            } else if (val === svalues[index]) {
              // color.red(color.red())
              return this;
            }

            // color.red(100)
            svalues[index] = val;
            this.setValues(space, svalues);

            return this;
          };

          if (typeof window !== "undefined") {
            window.Color = Color;
          }

          module.exports = Color;
        },
        { 2: 2, 5: 5 },
      ],
      4: [
        function (require, module, exports) {
          /* MIT license */

          module.exports = {
            rgb2hsl: rgb2hsl,
            rgb2hsv: rgb2hsv,
            rgb2hwb: rgb2hwb,
            rgb2cmyk: rgb2cmyk,
            rgb2keyword: rgb2keyword,
            rgb2xyz: rgb2xyz,
            rgb2lab: rgb2lab,
            rgb2lch: rgb2lch,

            hsl2rgb: hsl2rgb,
            hsl2hsv: hsl2hsv,
            hsl2hwb: hsl2hwb,
            hsl2cmyk: hsl2cmyk,
            hsl2keyword: hsl2keyword,

            hsv2rgb: hsv2rgb,
            hsv2hsl: hsv2hsl,
            hsv2hwb: hsv2hwb,
            hsv2cmyk: hsv2cmyk,
            hsv2keyword: hsv2keyword,

            hwb2rgb: hwb2rgb,
            hwb2hsl: hwb2hsl,
            hwb2hsv: hwb2hsv,
            hwb2cmyk: hwb2cmyk,
            hwb2keyword: hwb2keyword,

            cmyk2rgb: cmyk2rgb,
            cmyk2hsl: cmyk2hsl,
            cmyk2hsv: cmyk2hsv,
            cmyk2hwb: cmyk2hwb,
            cmyk2keyword: cmyk2keyword,

            keyword2rgb: keyword2rgb,
            keyword2hsl: keyword2hsl,
            keyword2hsv: keyword2hsv,
            keyword2hwb: keyword2hwb,
            keyword2cmyk: keyword2cmyk,
            keyword2lab: keyword2lab,
            keyword2xyz: keyword2xyz,

            xyz2rgb: xyz2rgb,
            xyz2lab: xyz2lab,
            xyz2lch: xyz2lch,

            lab2xyz: lab2xyz,
            lab2rgb: lab2rgb,
            lab2lch: lab2lch,

            lch2lab: lch2lab,
            lch2xyz: lch2xyz,
            lch2rgb: lch2rgb,
          };

          function rgb2hsl(rgb) {
            var r = rgb[0] / 255,
              g = rgb[1] / 255,
              b = rgb[2] / 255,
              min = Math.min(r, g, b),
              max = Math.max(r, g, b),
              delta = max - min,
              h,
              s,
              l;

            if (max == min) h = 0;
            else if (r == max) h = (g - b) / delta;
            else if (g == max) h = 2 + (b - r) / delta;
            else if (b == max) h = 4 + (r - g) / delta;

            h = Math.min(h * 60, 360);

            if (h < 0) h += 360;

            l = (min + max) / 2;

            if (max == min) s = 0;
            else if (l <= 0.5) s = delta / (max + min);
            else s = delta / (2 - max - min);

            return [h, s * 100, l * 100];
          }

          function rgb2hsv(rgb) {
            var r = rgb[0],
              g = rgb[1],
              b = rgb[2],
              min = Math.min(r, g, b),
              max = Math.max(r, g, b),
              delta = max - min,
              h,
              s,
              v;

            if (max == 0) s = 0;
            else s = ((delta / max) * 1000) / 10;

            if (max == min) h = 0;
            else if (r == max) h = (g - b) / delta;
            else if (g == max) h = 2 + (b - r) / delta;
            else if (b == max) h = 4 + (r - g) / delta;

            h = Math.min(h * 60, 360);

            if (h < 0) h += 360;

            v = ((max / 255) * 1000) / 10;

            return [h, s, v];
          }

          function rgb2hwb(rgb) {
            var r = rgb[0],
              g = rgb[1],
              b = rgb[2],
              h = rgb2hsl(rgb)[0],
              w = (1 / 255) * Math.min(r, Math.min(g, b)),
              b = 1 - (1 / 255) * Math.max(r, Math.max(g, b));

            return [h, w * 100, b * 100];
          }

          function rgb2cmyk(rgb) {
            var r = rgb[0] / 255,
              g = rgb[1] / 255,
              b = rgb[2] / 255,
              c,
              m,
              y,
              k;

            k = Math.min(1 - r, 1 - g, 1 - b);
            c = (1 - r - k) / (1 - k) || 0;
            m = (1 - g - k) / (1 - k) || 0;
            y = (1 - b - k) / (1 - k) || 0;
            return [c * 100, m * 100, y * 100, k * 100];
          }

          function rgb2keyword(rgb) {
            return reverseKeywords[JSON.stringify(rgb)];
          }

          function rgb2xyz(rgb) {
            var r = rgb[0] / 255,
              g = rgb[1] / 255,
              b = rgb[2] / 255;

            // assume sRGB
            r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
            g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
            b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;

            var x = r * 0.4124 + g * 0.3576 + b * 0.1805;
            var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
            var z = r * 0.0193 + g * 0.1192 + b * 0.9505;

            return [x * 100, y * 100, z * 100];
          }

          function rgb2lab(rgb) {
            var xyz = rgb2xyz(rgb),
              x = xyz[0],
              y = xyz[1],
              z = xyz[2],
              l,
              a,
              b;

            x /= 95.047;
            y /= 100;
            z /= 108.883;

            x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
            y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
            z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;

            l = 116 * y - 16;
            a = 500 * (x - y);
            b = 200 * (y - z);

            return [l, a, b];
          }

          function rgb2lch(args) {
            return lab2lch(rgb2lab(args));
          }

          function hsl2rgb(hsl) {
            var h = hsl[0] / 360,
              s = hsl[1] / 100,
              l = hsl[2] / 100,
              t1,
              t2,
              t3,
              rgb,
              val;

            if (s == 0) {
              val = l * 255;
              return [val, val, val];
            }

            if (l < 0.5) t2 = l * (1 + s);
            else t2 = l + s - l * s;
            t1 = 2 * l - t2;

            rgb = [0, 0, 0];
            for (var i = 0; i < 3; i++) {
              t3 = h + (1 / 3) * -(i - 1);
              t3 < 0 && t3++;
              t3 > 1 && t3--;

              if (6 * t3 < 1) val = t1 + (t2 - t1) * 6 * t3;
              else if (2 * t3 < 1) val = t2;
              else if (3 * t3 < 2) val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
              else val = t1;

              rgb[i] = val * 255;
            }

            return rgb;
          }

          function hsl2hsv(hsl) {
            var h = hsl[0],
              s = hsl[1] / 100,
              l = hsl[2] / 100,
              sv,
              v;

            if (l === 0) {
              // no need to do calc on black
              // also avoids divide by 0 error
              return [0, 0, 0];
            }

            l *= 2;
            s *= l <= 1 ? l : 2 - l;
            v = (l + s) / 2;
            sv = (2 * s) / (l + s);
            return [h, sv * 100, v * 100];
          }

          function hsl2hwb(args) {
            return rgb2hwb(hsl2rgb(args));
          }

          function hsl2cmyk(args) {
            return rgb2cmyk(hsl2rgb(args));
          }

          function hsl2keyword(args) {
            return rgb2keyword(hsl2rgb(args));
          }

          function hsv2rgb(hsv) {
            var h = hsv[0] / 60,
              s = hsv[1] / 100,
              v = hsv[2] / 100,
              hi = Math.floor(h) % 6;

            var f = h - Math.floor(h),
              p = 255 * v * (1 - s),
              q = 255 * v * (1 - s * f),
              t = 255 * v * (1 - s * (1 - f)),
              v = 255 * v;

            switch (hi) {
              case 0:
                return [v, t, p];
              case 1:
                return [q, v, p];
              case 2:
                return [p, v, t];
              case 3:
                return [p, q, v];
              case 4:
                return [t, p, v];
              case 5:
                return [v, p, q];
            }
          }

          function hsv2hsl(hsv) {
            var h = hsv[0],
              s = hsv[1] / 100,
              v = hsv[2] / 100,
              sl,
              l;

            l = (2 - s) * v;
            sl = s * v;
            sl /= l <= 1 ? l : 2 - l;
            sl = sl || 0;
            l /= 2;
            return [h, sl * 100, l * 100];
          }

          function hsv2hwb(args) {
            return rgb2hwb(hsv2rgb(args));
          }

          function hsv2cmyk(args) {
            return rgb2cmyk(hsv2rgb(args));
          }

          function hsv2keyword(args) {
            return rgb2keyword(hsv2rgb(args));
          }

          // http://dev.w3.org/csswg/css-color/#hwb-to-rgb
          function hwb2rgb(hwb) {
            var h = hwb[0] / 360,
              wh = hwb[1] / 100,
              bl = hwb[2] / 100,
              ratio = wh + bl,
              i,
              v,
              f,
              n;

            // wh + bl cant be > 1
            if (ratio > 1) {
              wh /= ratio;
              bl /= ratio;
            }

            i = Math.floor(6 * h);
            v = 1 - bl;
            f = 6 * h - i;
            if ((i & 0x01) != 0) {
              f = 1 - f;
            }
            n = wh + f * (v - wh); // linear interpolation

            switch (i) {
              default:
              case 6:
              case 0:
                r = v;
                g = n;
                b = wh;
                break;
              case 1:
                r = n;
                g = v;
                b = wh;
                break;
              case 2:
                r = wh;
                g = v;
                b = n;
                break;
              case 3:
                r = wh;
                g = n;
                b = v;
                break;
              case 4:
                r = n;
                g = wh;
                b = v;
                break;
              case 5:
                r = v;
                g = wh;
                b = n;
                break;
            }

            return [r * 255, g * 255, b * 255];
          }

          function hwb2hsl(args) {
            return rgb2hsl(hwb2rgb(args));
          }

          function hwb2hsv(args) {
            return rgb2hsv(hwb2rgb(args));
          }

          function hwb2cmyk(args) {
            return rgb2cmyk(hwb2rgb(args));
          }

          function hwb2keyword(args) {
            return rgb2keyword(hwb2rgb(args));
          }

          function cmyk2rgb(cmyk) {
            var c = cmyk[0] / 100,
              m = cmyk[1] / 100,
              y = cmyk[2] / 100,
              k = cmyk[3] / 100,
              r,
              g,
              b;

            r = 1 - Math.min(1, c * (1 - k) + k);
            g = 1 - Math.min(1, m * (1 - k) + k);
            b = 1 - Math.min(1, y * (1 - k) + k);
            return [r * 255, g * 255, b * 255];
          }

          function cmyk2hsl(args) {
            return rgb2hsl(cmyk2rgb(args));
          }

          function cmyk2hsv(args) {
            return rgb2hsv(cmyk2rgb(args));
          }

          function cmyk2hwb(args) {
            return rgb2hwb(cmyk2rgb(args));
          }

          function cmyk2keyword(args) {
            return rgb2keyword(cmyk2rgb(args));
          }

          function xyz2rgb(xyz) {
            var x = xyz[0] / 100,
              y = xyz[1] / 100,
              z = xyz[2] / 100,
              r,
              g,
              b;

            r = x * 3.2406 + y * -1.5372 + z * -0.4986;
            g = x * -0.9689 + y * 1.8758 + z * 0.0415;
            b = x * 0.0557 + y * -0.204 + z * 1.057;

            // assume sRGB
            r =
              r > 0.0031308
                ? 1.055 * Math.pow(r, 1.0 / 2.4) - 0.055
                : (r = r * 12.92);

            g =
              g > 0.0031308
                ? 1.055 * Math.pow(g, 1.0 / 2.4) - 0.055
                : (g = g * 12.92);

            b =
              b > 0.0031308
                ? 1.055 * Math.pow(b, 1.0 / 2.4) - 0.055
                : (b = b * 12.92);

            r = Math.min(Math.max(0, r), 1);
            g = Math.min(Math.max(0, g), 1);
            b = Math.min(Math.max(0, b), 1);

            return [r * 255, g * 255, b * 255];
          }

          function xyz2lab(xyz) {
            var x = xyz[0],
              y = xyz[1],
              z = xyz[2],
              l,
              a,
              b;

            x /= 95.047;
            y /= 100;
            z /= 108.883;

            x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
            y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
            z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;

            l = 116 * y - 16;
            a = 500 * (x - y);
            b = 200 * (y - z);

            return [l, a, b];
          }

          function xyz2lch(args) {
            return lab2lch(xyz2lab(args));
          }

          function lab2xyz(lab) {
            var l = lab[0],
              a = lab[1],
              b = lab[2],
              x,
              y,
              z,
              y2;

            if (l <= 8) {
              y = (l * 100) / 903.3;
              y2 = 7.787 * (y / 100) + 16 / 116;
            } else {
              y = 100 * Math.pow((l + 16) / 116, 3);
              y2 = Math.pow(y / 100, 1 / 3);
            }

            x =
              x / 95.047 <= 0.008856
                ? (x = (95.047 * (a / 500 + y2 - 16 / 116)) / 7.787)
                : 95.047 * Math.pow(a / 500 + y2, 3);

            z =
              z / 108.883 <= 0.008859
                ? (z = (108.883 * (y2 - b / 200 - 16 / 116)) / 7.787)
                : 108.883 * Math.pow(y2 - b / 200, 3);

            return [x, y, z];
          }

          function lab2lch(lab) {
            var l = lab[0],
              a = lab[1],
              b = lab[2],
              hr,
              h,
              c;

            hr = Math.atan2(b, a);
            h = (hr * 360) / 2 / Math.PI;
            if (h < 0) {
              h += 360;
            }
            c = Math.sqrt(a * a + b * b);
            return [l, c, h];
          }

          function lab2rgb(args) {
            return xyz2rgb(lab2xyz(args));
          }

          function lch2lab(lch) {
            var l = lch[0],
              c = lch[1],
              h = lch[2],
              a,
              b,
              hr;

            hr = (h / 360) * 2 * Math.PI;
            a = c * Math.cos(hr);
            b = c * Math.sin(hr);
            return [l, a, b];
          }

          function lch2xyz(args) {
            return lab2xyz(lch2lab(args));
          }

          function lch2rgb(args) {
            return lab2rgb(lch2lab(args));
          }

          function keyword2rgb(keyword) {
            return cssKeywords[keyword];
          }

          function keyword2hsl(args) {
            return rgb2hsl(keyword2rgb(args));
          }

          function keyword2hsv(args) {
            return rgb2hsv(keyword2rgb(args));
          }

          function keyword2hwb(args) {
            return rgb2hwb(keyword2rgb(args));
          }

          function keyword2cmyk(args) {
            return rgb2cmyk(keyword2rgb(args));
          }

          function keyword2lab(args) {
            return rgb2lab(keyword2rgb(args));
          }

          function keyword2xyz(args) {
            return rgb2xyz(keyword2rgb(args));
          }

          var cssKeywords = {
            aliceblue: [240, 248, 255],
            antiquewhite: [250, 235, 215],
            aqua: [0, 255, 255],
            aquamarine: [127, 255, 212],
            azure: [240, 255, 255],
            beige: [245, 245, 220],
            bisque: [255, 228, 196],
            black: [0, 0, 0],
            blanchedalmond: [255, 235, 205],
            blue: [0, 0, 255],
            blueviolet: [138, 43, 226],
            brown: [165, 42, 42],
            burlywood: [222, 184, 135],
            cadetblue: [95, 158, 160],
            chartreuse: [127, 255, 0],
            chocolate: [210, 105, 30],
            coral: [255, 127, 80],
            cornflowerblue: [100, 149, 237],
            cornsilk: [255, 248, 220],
            crimson: [220, 20, 60],
            cyan: [0, 255, 255],
            darkblue: [0, 0, 139],
            darkcyan: [0, 139, 139],
            darkgoldenrod: [184, 134, 11],
            darkgray: [169, 169, 169],
            darkgreen: [0, 100, 0],
            darkgrey: [169, 169, 169],
            darkkhaki: [189, 183, 107],
            darkmagenta: [139, 0, 139],
            darkolivegreen: [85, 107, 47],
            darkorange: [255, 140, 0],
            darkorchid: [153, 50, 204],
            darkred: [139, 0, 0],
            darksalmon: [233, 150, 122],
            darkseagreen: [143, 188, 143],
            darkslateblue: [72, 61, 139],
            darkslategray: [47, 79, 79],
            darkslategrey: [47, 79, 79],
            darkturquoise: [0, 206, 209],
            darkviolet: [148, 0, 211],
            deeppink: [255, 20, 147],
            deepskyblue: [0, 191, 255],
            dimgray: [105, 105, 105],
            dimgrey: [105, 105, 105],
            dodgerblue: [30, 144, 255],
            firebrick: [178, 34, 34],
            floralwhite: [255, 250, 240],
            forestgreen: [34, 139, 34],
            fuchsia: [255, 0, 255],
            gainsboro: [220, 220, 220],
            ghostwhite: [248, 248, 255],
            gold: [255, 215, 0],
            goldenrod: [218, 165, 32],
            gray: [128, 128, 128],
            green: [0, 128, 0],
            greenyellow: [173, 255, 47],
            grey: [128, 128, 128],
            honeydew: [240, 255, 240],
            hotpink: [255, 105, 180],
            indianred: [205, 92, 92],
            indigo: [75, 0, 130],
            ivory: [255, 255, 240],
            khaki: [240, 230, 140],
            lavender: [230, 230, 250],
            lavenderblush: [255, 240, 245],
            lawngreen: [124, 252, 0],
            lemonchiffon: [255, 250, 205],
            lightblue: [173, 216, 230],
            lightcoral: [240, 128, 128],
            lightcyan: [224, 255, 255],
            lightgoldenrodyellow: [250, 250, 210],
            lightgray: [211, 211, 211],
            lightgreen: [144, 238, 144],
            lightgrey: [211, 211, 211],
            lightpink: [255, 182, 193],
            lightsalmon: [255, 160, 122],
            lightseagreen: [32, 178, 170],
            lightskyblue: [135, 206, 250],
            lightslategray: [119, 136, 153],
            lightslategrey: [119, 136, 153],
            lightsteelblue: [176, 196, 222],
            lightyellow: [255, 255, 224],
            lime: [0, 255, 0],
            limegreen: [50, 205, 50],
            linen: [250, 240, 230],
            magenta: [255, 0, 255],
            maroon: [128, 0, 0],
            mediumaquamarine: [102, 205, 170],
            mediumblue: [0, 0, 205],
            mediumorchid: [186, 85, 211],
            mediumpurple: [147, 112, 219],
            mediumseagreen: [60, 179, 113],
            mediumslateblue: [123, 104, 238],
            mediumspringgreen: [0, 250, 154],
            mediumturquoise: [72, 209, 204],
            mediumvioletred: [199, 21, 133],
            midnightblue: [25, 25, 112],
            mintcream: [245, 255, 250],
            mistyrose: [255, 228, 225],
            moccasin: [255, 228, 181],
            navajowhite: [255, 222, 173],
            navy: [0, 0, 128],
            oldlace: [253, 245, 230],
            olive: [128, 128, 0],
            olivedrab: [107, 142, 35],
            orange: [255, 165, 0],
            orangered: [255, 69, 0],
            orchid: [218, 112, 214],
            palegoldenrod: [238, 232, 170],
            palegreen: [152, 251, 152],
            paleturquoise: [175, 238, 238],
            palevioletred: [219, 112, 147],
            papayawhip: [255, 239, 213],
            peachpuff: [255, 218, 185],
            peru: [205, 133, 63],
            pink: [255, 192, 203],
            plum: [221, 160, 221],
            powderblue: [176, 224, 230],
            purple: [128, 0, 128],
            rebeccapurple: [102, 51, 153],
            red: [255, 0, 0],
            rosybrown: [188, 143, 143],
            royalblue: [65, 105, 225],
            saddlebrown: [139, 69, 19],
            salmon: [250, 128, 114],
            sandybrown: [244, 164, 96],
            seagreen: [46, 139, 87],
            seashell: [255, 245, 238],
            sienna: [160, 82, 45],
            silver: [192, 192, 192],
            skyblue: [135, 206, 235],
            slateblue: [106, 90, 205],
            slategray: [112, 128, 144],
            slategrey: [112, 128, 144],
            snow: [255, 250, 250],
            springgreen: [0, 255, 127],
            steelblue: [70, 130, 180],
            tan: [210, 180, 140],
            teal: [0, 128, 128],
            thistle: [216, 191, 216],
            tomato: [255, 99, 71],
            turquoise: [64, 224, 208],
            violet: [238, 130, 238],
            wheat: [245, 222, 179],
            white: [255, 255, 255],
            whitesmoke: [245, 245, 245],
            yellow: [255, 255, 0],
            yellowgreen: [154, 205, 50],
          };

          var reverseKeywords = {};
          for (var key in cssKeywords) {
            reverseKeywords[JSON.stringify(cssKeywords[key])] = key;
          }
        },
        {},
      ],
      5: [
        function (require, module, exports) {
          var conversions = require(4);

          var convert = function () {
            return new Converter();
          };

          for (var func in conversions) {
            // export Raw versions
            convert[func + "Raw"] = (function (func) {
              // accept array or plain args
              return function (arg) {
                if (typeof arg == "number")
                  arg = Array.prototype.slice.call(arguments);
                return conversions[func](arg);
              };
            })(func);

            var pair = /(\w+)2(\w+)/.exec(func),
              from = pair[1],
              to = pair[2];

            // export rgb2hsl and ["rgb"]["hsl"]
            convert[from] = convert[from] || {};

            convert[from][to] = convert[func] = (function (func) {
              return function (arg) {
                if (typeof arg == "number")
                  arg = Array.prototype.slice.call(arguments);

                var val = conversions[func](arg);
                if (typeof val == "string" || val === undefined) return val; // keyword

                for (var i = 0; i < val.length; i++)
                  val[i] = Math.round(val[i]);
                return val;
              };
            })(func);
          }

          /* Converter does lazy conversion and caching */
          var Converter = function () {
            this.convs = {};
          };

          /* Either get the values for a space or
  set the values for a space, depending on args */
          Converter.prototype.routeSpace = function (space, args) {
            var values = args[0];
            if (values === undefined) {
              // color.rgb()
              return this.getValues(space);
            }
            // color.rgb(10, 10, 10)
            if (typeof values == "number") {
              values = Array.prototype.slice.call(args);
            }

            return this.setValues(space, values);
          };

          /* Set the values for a space, invalidating cache */
          Converter.prototype.setValues = function (space, values) {
            this.space = space;
            this.convs = {};
            this.convs[space] = values;
            return this;
          };

          /* Get the values for a space. If there's already
  a conversion for the space, fetch it, otherwise
  compute it */
          Converter.prototype.getValues = function (space) {
            var vals = this.convs[space];
            if (!vals) {
              var fspace = this.space,
                from = this.convs[fspace];
              vals = convert[fspace][space](from);

              this.convs[space] = vals;
            }
            return vals;
          };

          ["rgb", "hsl", "hsv", "cmyk", "keyword"].forEach(function (space) {
            Converter.prototype[space] = function (vals) {
              return this.routeSpace(space, arguments);
            };
          });

          module.exports = convert;
        },
        { 4: 4 },
      ],
      6: [
        function (require, module, exports) {
          module.exports = {
            aliceblue: [240, 248, 255],
            antiquewhite: [250, 235, 215],
            aqua: [0, 255, 255],
            aquamarine: [127, 255, 212],
            azure: [240, 255, 255],
            beige: [245, 245, 220],
            bisque: [255, 228, 196],
            black: [0, 0, 0],
            blanchedalmond: [255, 235, 205],
            blue: [0, 0, 255],
            blueviolet: [138, 43, 226],
            brown: [165, 42, 42],
            burlywood: [222, 184, 135],
            cadetblue: [95, 158, 160],
            chartreuse: [127, 255, 0],
            chocolate: [210, 105, 30],
            coral: [255, 127, 80],
            cornflowerblue: [100, 149, 237],
            cornsilk: [255, 248, 220],
            crimson: [220, 20, 60],
            cyan: [0, 255, 255],
            darkblue: [0, 0, 139],
            darkcyan: [0, 139, 139],
            darkgoldenrod: [184, 134, 11],
            darkgray: [169, 169, 169],
            darkgreen: [0, 100, 0],
            darkgrey: [169, 169, 169],
            darkkhaki: [189, 183, 107],
            darkmagenta: [139, 0, 139],
            darkolivegreen: [85, 107, 47],
            darkorange: [255, 140, 0],
            darkorchid: [153, 50, 204],
            darkred: [139, 0, 0],
            darksalmon: [233, 150, 122],
            darkseagreen: [143, 188, 143],
            darkslateblue: [72, 61, 139],
            darkslategray: [47, 79, 79],
            darkslategrey: [47, 79, 79],
            darkturquoise: [0, 206, 209],
            darkviolet: [148, 0, 211],
            deeppink: [255, 20, 147],
            deepskyblue: [0, 191, 255],
            dimgray: [105, 105, 105],
            dimgrey: [105, 105, 105],
            dodgerblue: [30, 144, 255],
            firebrick: [178, 34, 34],
            floralwhite: [255, 250, 240],
            forestgreen: [34, 139, 34],
            fuchsia: [255, 0, 255],
            gainsboro: [220, 220, 220],
            ghostwhite: [248, 248, 255],
            gold: [255, 215, 0],
            goldenrod: [218, 165, 32],
            gray: [128, 128, 128],
            green: [0, 128, 0],
            greenyellow: [173, 255, 47],
            grey: [128, 128, 128],
            honeydew: [240, 255, 240],
            hotpink: [255, 105, 180],
            indianred: [205, 92, 92],
            indigo: [75, 0, 130],
            ivory: [255, 255, 240],
            khaki: [240, 230, 140],
            lavender: [230, 230, 250],
            lavenderblush: [255, 240, 245],
            lawngreen: [124, 252, 0],
            lemonchiffon: [255, 250, 205],
            lightblue: [173, 216, 230],
            lightcoral: [240, 128, 128],
            lightcyan: [224, 255, 255],
            lightgoldenrodyellow: [250, 250, 210],
            lightgray: [211, 211, 211],
            lightgreen: [144, 238, 144],
            lightgrey: [211, 211, 211],
            lightpink: [255, 182, 193],
            lightsalmon: [255, 160, 122],
            lightseagreen: [32, 178, 170],
            lightskyblue: [135, 206, 250],
            lightslategray: [119, 136, 153],
            lightslategrey: [119, 136, 153],
            lightsteelblue: [176, 196, 222],
            lightyellow: [255, 255, 224],
            lime: [0, 255, 0],
            limegreen: [50, 205, 50],
            linen: [250, 240, 230],
            magenta: [255, 0, 255],
            maroon: [128, 0, 0],
            mediumaquamarine: [102, 205, 170],
            mediumblue: [0, 0, 205],
            mediumorchid: [186, 85, 211],
            mediumpurple: [147, 112, 219],
            mediumseagreen: [60, 179, 113],
            mediumslateblue: [123, 104, 238],
            mediumspringgreen: [0, 250, 154],
            mediumturquoise: [72, 209, 204],
            mediumvioletred: [199, 21, 133],
            midnightblue: [25, 25, 112],
            mintcream: [245, 255, 250],
            mistyrose: [255, 228, 225],
            moccasin: [255, 228, 181],
            navajowhite: [255, 222, 173],
            navy: [0, 0, 128],
            oldlace: [253, 245, 230],
            olive: [128, 128, 0],
            olivedrab: [107, 142, 35],
            orange: [255, 165, 0],
            orangered: [255, 69, 0],
            orchid: [218, 112, 214],
            palegoldenrod: [238, 232, 170],
            palegreen: [152, 251, 152],
            paleturquoise: [175, 238, 238],
            palevioletred: [219, 112, 147],
            papayawhip: [255, 239, 213],
            peachpuff: [255, 218, 185],
            peru: [205, 133, 63],
            pink: [255, 192, 203],
            plum: [221, 160, 221],
            powderblue: [176, 224, 230],
            purple: [128, 0, 128],
            rebeccapurple: [102, 51, 153],
            red: [255, 0, 0],
            rosybrown: [188, 143, 143],
            royalblue: [65, 105, 225],
            saddlebrown: [139, 69, 19],
            salmon: [250, 128, 114],
            sandybrown: [244, 164, 96],
            seagreen: [46, 139, 87],
            seashell: [255, 245, 238],
            sienna: [160, 82, 45],
            silver: [192, 192, 192],
            skyblue: [135, 206, 235],
            slateblue: [106, 90, 205],
            slategray: [112, 128, 144],
            slategrey: [112, 128, 144],
            snow: [255, 250, 250],
            springgreen: [0, 255, 127],
            steelblue: [70, 130, 180],
            tan: [210, 180, 140],
            teal: [0, 128, 128],
            thistle: [216, 191, 216],
            tomato: [255, 99, 71],
            turquoise: [64, 224, 208],
            violet: [238, 130, 238],
            wheat: [245, 222, 179],
            white: [255, 255, 255],
            whitesmoke: [245, 245, 245],
            yellow: [255, 255, 0],
            yellowgreen: [154, 205, 50],
          };
        },
        {},
      ],
      7: [
        function (require, module, exports) {
          /**
           * @namespace Chart
           */
          var Chart = require(26)();

          require(25)(Chart);
          require(24)(Chart);
          require(21)(Chart);
          require(22)(Chart);
          require(23)(Chart);
          require(27)(Chart);
          require(31)(Chart);
          require(29)(Chart);
          require(30)(Chart);
          require(32)(Chart);
          require(28)(Chart);
          require(33)(Chart);

          require(34)(Chart);
          require(35)(Chart);
          require(36)(Chart);
          require(37)(Chart);

          require(40)(Chart);
          require(38)(Chart);
          require(39)(Chart);
          require(41)(Chart);
          require(42)(Chart);
          require(43)(Chart);

          // Controllers must be loaded after elements
          // See Chart.core.datasetController.dataElementType
          require(15)(Chart);
          require(16)(Chart);
          require(17)(Chart);
          require(18)(Chart);
          require(19)(Chart);
          require(20)(Chart);

          require(8)(Chart);
          require(9)(Chart);
          require(10)(Chart);
          require(11)(Chart);
          require(12)(Chart);
          require(13)(Chart);
          require(14)(Chart);

          window.Chart = module.exports = Chart;
        },
        {
          10: 10,
          11: 11,
          12: 12,
          13: 13,
          14: 14,
          15: 15,
          16: 16,
          17: 17,
          18: 18,
          19: 19,
          20: 20,
          21: 21,
          22: 22,
          23: 23,
          24: 24,
          25: 25,
          26: 26,
          27: 27,
          28: 28,
          29: 29,
          30: 30,
          31: 31,
          32: 32,
          33: 33,
          34: 34,
          35: 35,
          36: 36,
          37: 37,
          38: 38,
          39: 39,
          40: 40,
          41: 41,
          42: 42,
          43: 43,
          8: 8,
          9: 9,
        },
      ],
      8: [
        function (require, module, exports) {
          "use strict";

          module.exports = function (Chart) {
            Chart.Bar = function (context, config) {
              config.type = "bar";

              return new Chart(context, config);
            };
          };
        },
        {},
      ],
      9: [
        function (require, module, exports) {
          "use strict";

          module.exports = function (Chart) {
            Chart.Bubble = function (context, config) {
              config.type = "bubble";
              return new Chart(context, config);
            };
          };
        },
        {},
      ],
      10: [
        function (require, module, exports) {
          "use strict";

          module.exports = function (Chart) {
            Chart.Doughnut = function (context, config) {
              config.type = "doughnut";

              return new Chart(context, config);
            };
          };
        },
        {},
      ],
      11: [
        function (require, module, exports) {
          "use strict";

          module.exports = function (Chart) {
            Chart.Line = function (context, config) {
              config.type = "line";

              return new Chart(context, config);
            };
          };
        },
        {},
      ],
      12: [
        function (require, module, exports) {
          "use strict";

          module.exports = function (Chart) {
            Chart.PolarArea = function (context, config) {
              config.type = "polarArea";

              return new Chart(context, config);
            };
          };
        },
        {},
      ],
      13: [
        function (require, module, exports) {
          "use strict";

          module.exports = function (Chart) {
            Chart.Radar = function (context, config) {
              config.options = Chart.helpers.configMerge(
                { aspectRatio: 1 },
                config.options
              );
              config.type = "radar";

              return new Chart(context, config);
            };
          };
        },
        {},
      ],
      14: [
        function (require, module, exports) {
          "use strict";

          module.exports = function (Chart) {
            var defaultConfig = {
              hover: {
                mode: "single",
              },

              scales: {
                xAxes: [
                  {
                    type: "linear", // scatter should not use a category axis
                    position: "bottom",
                    id: "x-axis-1", // need an ID so datasets can reference the scale
                  },
                ],
                yAxes: [
                  {
                    type: "linear",
                    position: "left",
                    id: "y-axis-1",
                  },
                ],
              },

              tooltips: {
                callbacks: {
                  title: function (tooltipItems, data) {
                    // Title doesn't make sense for scatter since we format the data as a point
                    return "";
                  },
                  label: function (tooltipItem, data) {
                    return (
                      "(" + tooltipItem.xLabel + ", " + tooltipItem.yLabel + ")"
                    );
                  },
                },
              },
            };

            // Register the default config for this type
            Chart.defaults.scatter = defaultConfig;

            // Scatter charts use line controllers
            Chart.controllers.scatter = Chart.controllers.line;

            Chart.Scatter = function (context, config) {
              config.type = "scatter";
              return new Chart(context, config);
            };
          };
        },
        {},
      ],
      15: [
        function (require, module, exports) {
          "use strict";

          module.exports = function (Chart) {
            var helpers = Chart.helpers;

            Chart.defaults.bar = {
              hover: {
                mode: "label",
              },

              scales: {
                xAxes: [
                  {
                    type: "category",

                    // Specific to Bar Controller
                    categoryPercentage: 0.8,
                    barPercentage: 0.9,

                    // grid line settings
                    gridLines: {
                      offsetGridLines: true,
                    },
                  },
                ],
                yAxes: [
                  {
                    type: "linear",
                  },
                ],
              },
            };

            Chart.controllers.bar = Chart.DatasetController.extend({
              dataElementType: Chart.elements.Rectangle,

              initialize: function (chart, datasetIndex) {
                Chart.DatasetController.prototype.initialize.call(
                  this,
                  chart,
                  datasetIndex
                );

                // Use this to indicate that this is a bar dataset.
                this.getMeta().bar = true;
              },

              // Get the number of datasets that display bars. We use this to correctly calculate the bar width
              getBarCount: function getBarCount() {
                var me = this;
                var barCount = 0;
                helpers.each(
                  me.chart.data.datasets,
                  function (dataset, datasetIndex) {
                    var meta = me.chart.getDatasetMeta(datasetIndex);
                    if (meta.bar && me.chart.isDatasetVisible(datasetIndex)) {
                      ++barCount;
                    }
                  },
                  me
                );
                return barCount;
              },

              update: function update(reset) {
                var me = this;
                helpers.each(
                  me.getMeta().data,
                  function (rectangle, index) {
                    me.updateElement(rectangle, index, reset);
                  },
                  me
                );
              },

              updateElement: function updateElement(rectangle, index, reset) {
                var me = this;
                var meta = me.getMeta();
                var xScale = me.getScaleForId(meta.xAxisID);
                var yScale = me.getScaleForId(meta.yAxisID);
                var scaleBase = yScale.getBasePixel();
                var rectangleElementOptions =
                  me.chart.options.elements.rectangle;
                var custom = rectangle.custom || {};
                var dataset = me.getDataset();

                helpers.extend(rectangle, {
                  // Utility
                  _xScale: xScale,
                  _yScale: yScale,
                  _datasetIndex: me.index,
                  _index: index,

                  // Desired view properties
                  _model: {
                    x: me.calculateBarX(index, me.index),
                    y: reset ? scaleBase : me.calculateBarY(index, me.index),

                    // Tooltip
                    label: me.chart.data.labels[index],
                    datasetLabel: dataset.label,

                    // Appearance
                    base: reset
                      ? scaleBase
                      : me.calculateBarBase(me.index, index),
                    width: me.calculateBarWidth(index),
                    backgroundColor: custom.backgroundColor
                      ? custom.backgroundColor
                      : helpers.getValueAtIndexOrDefault(
                          dataset.backgroundColor,
                          index,
                          rectangleElementOptions.backgroundColor
                        ),
                    borderSkipped: custom.borderSkipped
                      ? custom.borderSkipped
                      : rectangleElementOptions.borderSkipped,
                    borderColor: custom.borderColor
                      ? custom.borderColor
                      : helpers.getValueAtIndexOrDefault(
                          dataset.borderColor,
                          index,
                          rectangleElementOptions.borderColor
                        ),
                    borderWidth: custom.borderWidth
                      ? custom.borderWidth
                      : helpers.getValueAtIndexOrDefault(
                          dataset.borderWidth,
                          index,
                          rectangleElementOptions.borderWidth
                        ),
                  },
                });
                rectangle.pivot();
              },

              calculateBarBase: function (datasetIndex, index) {
                var me = this;
                var meta = me.getMeta();
                var yScale = me.getScaleForId(meta.yAxisID);
                var base = 0;

                if (yScale.options.stacked) {
                  var chart = me.chart;
                  var datasets = chart.data.datasets;
                  var value = datasets[datasetIndex].data[index];

                  if (value < 0) {
                    for (var i = 0; i < datasetIndex; i++) {
                      var negDS = datasets[i];
                      var negDSMeta = chart.getDatasetMeta(i);
                      if (
                        negDSMeta.bar &&
                        negDSMeta.yAxisID === yScale.id &&
                        chart.isDatasetVisible(i)
                      ) {
                        base += negDS.data[index] < 0 ? negDS.data[index] : 0;
                      }
                    }
                  } else {
                    for (var j = 0; j < datasetIndex; j++) {
                      var posDS = datasets[j];
                      var posDSMeta = chart.getDatasetMeta(j);
                      if (
                        posDSMeta.bar &&
                        posDSMeta.yAxisID === yScale.id &&
                        chart.isDatasetVisible(j)
                      ) {
                        base += posDS.data[index] > 0 ? posDS.data[index] : 0;
                      }
                    }
                  }

                  return yScale.getPixelForValue(base);
                }

                return yScale.getBasePixel();
              },

              getRuler: function (index) {
                var me = this;
                var meta = me.getMeta();
                var xScale = me.getScaleForId(meta.xAxisID);
                var datasetCount = me.getBarCount();

                var tickWidth;

                if (xScale.options.type === "category") {
                  tickWidth =
                    xScale.getPixelForTick(index + 1) -
                    xScale.getPixelForTick(index);
                } else {
                  // Average width
                  tickWidth = xScale.width / xScale.ticks.length;
                }
                var categoryWidth =
                  tickWidth * xScale.options.categoryPercentage;
                var categorySpacing =
                  (tickWidth - tickWidth * xScale.options.categoryPercentage) /
                  2;
                var fullBarWidth = categoryWidth / datasetCount;

                if (xScale.ticks.length !== me.chart.data.labels.length) {
                  var perc = xScale.ticks.length / me.chart.data.labels.length;
                  fullBarWidth = fullBarWidth * perc;
                }

                var barWidth = fullBarWidth * xScale.options.barPercentage;
                var barSpacing =
                  fullBarWidth - fullBarWidth * xScale.options.barPercentage;

                return {
                  datasetCount: datasetCount,
                  tickWidth: tickWidth,
                  categoryWidth: categoryWidth,
                  categorySpacing: categorySpacing,
                  fullBarWidth: fullBarWidth,
                  barWidth: barWidth,
                  barSpacing: barSpacing,
                };
              },

              calculateBarWidth: function (index) {
                var xScale = this.getScaleForId(this.getMeta().xAxisID);
                var ruler = this.getRuler(index);
                return xScale.options.stacked
                  ? ruler.categoryWidth
                  : ruler.barWidth;
              },

              // Get bar index from the given dataset index accounting for the fact that not all bars are visible
              getBarIndex: function (datasetIndex) {
                var barIndex = 0;
                var meta, j;

                for (j = 0; j < datasetIndex; ++j) {
                  meta = this.chart.getDatasetMeta(j);
                  if (meta.bar && this.chart.isDatasetVisible(j)) {
                    ++barIndex;
                  }
                }

                return barIndex;
              },

              calculateBarX: function (index, datasetIndex) {
                var me = this;
                var meta = me.getMeta();
                var xScale = me.getScaleForId(meta.xAxisID);
                var barIndex = me.getBarIndex(datasetIndex);

                var ruler = me.getRuler(index);
                var leftTick = xScale.getPixelForValue(
                  null,
                  index,
                  datasetIndex,
                  me.chart.isCombo
                );
                leftTick -= me.chart.isCombo ? ruler.tickWidth / 2 : 0;

                if (xScale.options.stacked) {
                  return (
                    leftTick + ruler.categoryWidth / 2 + ruler.categorySpacing
                  );
                }

                return (
                  leftTick +
                  ruler.barWidth / 2 +
                  ruler.categorySpacing +
                  ruler.barWidth * barIndex +
                  ruler.barSpacing / 2 +
                  ruler.barSpacing * barIndex
                );
              },

              calculateBarY: function (index, datasetIndex) {
                var me = this;
                var meta = me.getMeta();
                var yScale = me.getScaleForId(meta.yAxisID);
                var value = me.getDataset().data[index];

                if (yScale.options.stacked) {
                  var sumPos = 0,
                    sumNeg = 0;

                  for (var i = 0; i < datasetIndex; i++) {
                    var ds = me.chart.data.datasets[i];
                    var dsMeta = me.chart.getDatasetMeta(i);
                    if (
                      dsMeta.bar &&
                      dsMeta.yAxisID === yScale.id &&
                      me.chart.isDatasetVisible(i)
                    ) {
                      if (ds.data[index] < 0) {
                        sumNeg += ds.data[index] || 0;
                      } else {
                        sumPos += ds.data[index] || 0;
                      }
                    }
                  }

                  if (value < 0) {
                    return yScale.getPixelForValue(sumNeg + value);
                  } else {
                    return yScale.getPixelForValue(sumPos + value);
                  }
                }

                return yScale.getPixelForValue(value);
              },

              draw: function (ease) {
                var me = this;
                var easingDecimal = ease || 1;
                helpers.each(
                  me.getMeta().data,
                  function (rectangle, index) {
                    var d = me.getDataset().data[index];
                    if (d !== null && d !== undefined && !isNaN(d)) {
                      rectangle.transition(easingDecimal).draw();
                    }
                  },
                  me
                );
              },

              setHoverStyle: function (rectangle) {
                var dataset = this.chart.data.datasets[rectangle._datasetIndex];
                var index = rectangle._index;

                var custom = rectangle.custom || {};
                var model = rectangle._model;
                model.backgroundColor = custom.hoverBackgroundColor
                  ? custom.hoverBackgroundColor
                  : helpers.getValueAtIndexOrDefault(
                      dataset.hoverBackgroundColor,
                      index,
                      helpers.getHoverColor(model.backgroundColor)
                    );
                model.borderColor = custom.hoverBorderColor
                  ? custom.hoverBorderColor
                  : helpers.getValueAtIndexOrDefault(
                      dataset.hoverBorderColor,
                      index,
                      helpers.getHoverColor(model.borderColor)
                    );
                model.borderWidth = custom.hoverBorderWidth
                  ? custom.hoverBorderWidth
                  : helpers.getValueAtIndexOrDefault(
                      dataset.hoverBorderWidth,
                      index,
                      model.borderWidth
                    );
              },

              removeHoverStyle: function (rectangle) {
                var dataset = this.chart.data.datasets[rectangle._datasetIndex];
                var index = rectangle._index;
                var custom = rectangle.custom || {};
                var model = rectangle._model;
                var rectangleElementOptions =
                  this.chart.options.elements.rectangle;

                model.backgroundColor = custom.backgroundColor
                  ? custom.backgroundColor
                  : helpers.getValueAtIndexOrDefault(
                      dataset.backgroundColor,
                      index,
                      rectangleElementOptions.backgroundColor
                    );
                model.borderColor = custom.borderColor
                  ? custom.borderColor
                  : helpers.getValueAtIndexOrDefault(
                      dataset.borderColor,
                      index,
                      rectangleElementOptions.borderColor
                    );
                model.borderWidth = custom.borderWidth
                  ? custom.borderWidth
                  : helpers.getValueAtIndexOrDefault(
                      dataset.borderWidth,
                      index,
                      rectangleElementOptions.borderWidth
                    );
              },
            });

            // including horizontalBar in the bar file, instead of a file of its own
            // it extends bar (like pie extends doughnut)
            Chart.defaults.horizontalBar = {
              hover: {
                mode: "label",
              },

              scales: {
                xAxes: [
                  {
                    type: "linear",
                    position: "bottom",
                  },
                ],
                yAxes: [
                  {
                    position: "left",
                    type: "category",

                    // Specific to Horizontal Bar Controller
                    categoryPercentage: 0.8,
                    barPercentage: 0.9,

                    // grid line settings
                    gridLines: {
                      offsetGridLines: true,
                    },
                  },
                ],
              },
              elements: {
                rectangle: {
                  borderSkipped: "left",
                },
              },
              tooltips: {
                callbacks: {
                  title: function (tooltipItems, data) {
                    // Pick first xLabel for now
                    var title = "";

                    if (tooltipItems.length > 0) {
                      if (tooltipItems[0].yLabel) {
                        title = tooltipItems[0].yLabel;
                      } else if (
                        data.labels.length > 0 &&
                        tooltipItems[0].index < data.labels.length
                      ) {
                        title = data.labels[tooltipItems[0].index];
                      }
                    }

                    return title;
                  },
                  label: function (tooltipItem, data) {
                    var datasetLabel =
                      data.datasets[tooltipItem.datasetIndex].label || "";
                    return datasetLabel + ": " + tooltipItem.xLabel;
                  },
                },
              },
            };

            Chart.controllers.horizontalBar = Chart.controllers.bar.extend({
              updateElement: function updateElement(
                rectangle,
                index,
                reset,
                numBars
              ) {
                var me = this;
                var meta = me.getMeta();
                var xScale = me.getScaleForId(meta.xAxisID);
                var yScale = me.getScaleForId(meta.yAxisID);
                var scaleBase = xScale.getBasePixel();
                var custom = rectangle.custom || {};
                var dataset = me.getDataset();
                var rectangleElementOptions =
                  me.chart.options.elements.rectangle;

                helpers.extend(rectangle, {
                  // Utility
                  _xScale: xScale,
                  _yScale: yScale,
                  _datasetIndex: me.index,
                  _index: index,

                  // Desired view properties
                  _model: {
                    x: reset ? scaleBase : me.calculateBarX(index, me.index),
                    y: me.calculateBarY(index, me.index),

                    // Tooltip
                    label: me.chart.data.labels[index],
                    datasetLabel: dataset.label,

                    // Appearance
                    base: reset
                      ? scaleBase
                      : me.calculateBarBase(me.index, index),
                    height: me.calculateBarHeight(index),
                    backgroundColor: custom.backgroundColor
                      ? custom.backgroundColor
                      : helpers.getValueAtIndexOrDefault(
                          dataset.backgroundColor,
                          index,
                          rectangleElementOptions.backgroundColor
                        ),
                    borderSkipped: custom.borderSkipped
                      ? custom.borderSkipped
                      : rectangleElementOptions.borderSkipped,
                    borderColor: custom.borderColor
                      ? custom.borderColor
                      : helpers.getValueAtIndexOrDefault(
                          dataset.borderColor,
                          index,
                          rectangleElementOptions.borderColor
                        ),
                    borderWidth: custom.borderWidth
                      ? custom.borderWidth
                      : helpers.getValueAtIndexOrDefault(
                          dataset.borderWidth,
                          index,
                          rectangleElementOptions.borderWidth
                        ),
                  },

                  draw: function () {
                    var ctx = this._chart.ctx;
                    var vm = this._view;

                    var halfHeight = vm.height / 2,
                      topY = vm.y - halfHeight,
                      bottomY = vm.y + halfHeight,
                      right = vm.base - (vm.base - vm.x),
                      halfStroke = vm.borderWidth / 2;

                    // Canvas doesn't allow us to stroke inside the width so we can
                    // adjust the sizes to fit if we're setting a stroke on the line
                    if (vm.borderWidth) {
                      topY += halfStroke;
                      bottomY -= halfStroke;
                      right += halfStroke;
                    }

                    ctx.beginPath();

                    ctx.fillStyle = vm.backgroundColor;
                    ctx.strokeStyle = vm.borderColor;
                    ctx.lineWidth = vm.borderWidth;

                    // Corner points, from bottom-left to bottom-right clockwise
                    // | 1 2 |
                    // | 0 3 |
                    var corners = [
                      [vm.base, bottomY],
                      [vm.base, topY],
                      [right, topY],
                      [right, bottomY],
                    ];

                    // Find first (starting) corner with fallback to 'bottom'
                    var borders = ["bottom", "left", "top", "right"];
                    var startCorner = borders.indexOf(vm.borderSkipped, 0);
                    if (startCorner === -1) startCorner = 0;

                    function cornerAt(index) {
                      return corners[(startCorner + index) % 4];
                    }

                    // Draw rectangle from 'startCorner'
                    ctx.moveTo.apply(ctx, cornerAt(0));
                    for (var i = 1; i < 4; i++)
                      ctx.lineTo.apply(ctx, cornerAt(i));

                    ctx.fill();
                    if (vm.borderWidth) {
                      ctx.stroke();
                    }
                  },

                  inRange: function (mouseX, mouseY) {
                    var vm = this._view;
                    var inRange = false;

                    if (vm) {
                      if (vm.x < vm.base) {
                        inRange =
                          mouseY >= vm.y - vm.height / 2 &&
                          mouseY <= vm.y + vm.height / 2 &&
                          mouseX >= vm.x &&
                          mouseX <= vm.base;
                      } else {
                        inRange =
                          mouseY >= vm.y - vm.height / 2 &&
                          mouseY <= vm.y + vm.height / 2 &&
                          mouseX >= vm.base &&
                          mouseX <= vm.x;
                      }
                    }

                    return inRange;
                  },
                });

                rectangle.pivot();
              },

              calculateBarBase: function (datasetIndex, index) {
                var me = this;
                var meta = me.getMeta();
                var xScale = me.getScaleForId(meta.xAxisID);
                var base = 0;

                if (xScale.options.stacked) {
                  var value = me.chart.data.datasets[datasetIndex].data[index];

                  if (value < 0) {
                    for (var i = 0; i < datasetIndex; i++) {
                      var negDS = me.chart.data.datasets[i];
                      var negDSMeta = me.chart.getDatasetMeta(i);
                      if (
                        negDSMeta.bar &&
                        negDSMeta.xAxisID === xScale.id &&
                        me.chart.isDatasetVisible(i)
                      ) {
                        base += negDS.data[index] < 0 ? negDS.data[index] : 0;
                      }
                    }
                  } else {
                    for (var j = 0; j < datasetIndex; j++) {
                      var posDS = me.chart.data.datasets[j];
                      var posDSMeta = me.chart.getDatasetMeta(j);
                      if (
                        posDSMeta.bar &&
                        posDSMeta.xAxisID === xScale.id &&
                        me.chart.isDatasetVisible(j)
                      ) {
                        base += posDS.data[index] > 0 ? posDS.data[index] : 0;
                      }
                    }
                  }

                  return xScale.getPixelForValue(base);
                }

                return xScale.getBasePixel();
              },

              getRuler: function (index) {
                var me = this;
                var meta = me.getMeta();
                var yScale = me.getScaleForId(meta.yAxisID);
                var datasetCount = me.getBarCount();

                var tickHeight;
                if (yScale.options.type === "category") {
                  tickHeight =
                    yScale.getPixelForTick(index + 1) -
                    yScale.getPixelForTick(index);
                } else {
                  // Average width
                  tickHeight = yScale.width / yScale.ticks.length;
                }
                var categoryHeight =
                  tickHeight * yScale.options.categoryPercentage;
                var categorySpacing =
                  (tickHeight -
                    tickHeight * yScale.options.categoryPercentage) /
                  2;
                var fullBarHeight = categoryHeight / datasetCount;

                if (yScale.ticks.length !== me.chart.data.labels.length) {
                  var perc = yScale.ticks.length / me.chart.data.labels.length;
                  fullBarHeight = fullBarHeight * perc;
                }

                var barHeight = fullBarHeight * yScale.options.barPercentage;
                var barSpacing =
                  fullBarHeight - fullBarHeight * yScale.options.barPercentage;

                return {
                  datasetCount: datasetCount,
                  tickHeight: tickHeight,
                  categoryHeight: categoryHeight,
                  categorySpacing: categorySpacing,
                  fullBarHeight: fullBarHeight,
                  barHeight: barHeight,
                  barSpacing: barSpacing,
                };
              },

              calculateBarHeight: function (index) {
                var me = this;
                var yScale = me.getScaleForId(me.getMeta().yAxisID);
                var ruler = me.getRuler(index);
                return yScale.options.stacked
                  ? ruler.categoryHeight
                  : ruler.barHeight;
              },

              calculateBarX: function (index, datasetIndex) {
                var me = this;
                var meta = me.getMeta();
                var xScale = me.getScaleForId(meta.xAxisID);
                var value = me.getDataset().data[index];

                if (xScale.options.stacked) {
                  var sumPos = 0,
                    sumNeg = 0;

                  for (var i = 0; i < datasetIndex; i++) {
                    var ds = me.chart.data.datasets[i];
                    var dsMeta = me.chart.getDatasetMeta(i);
                    if (
                      dsMeta.bar &&
                      dsMeta.xAxisID === xScale.id &&
                      me.chart.isDatasetVisible(i)
                    ) {
                      if (ds.data[index] < 0) {
                        sumNeg += ds.data[index] || 0;
                      } else {
                        sumPos += ds.data[index] || 0;
                      }
                    }
                  }

                  if (value < 0) {
                    return xScale.getPixelForValue(sumNeg + value);
                  } else {
                    return xScale.getPixelForValue(sumPos + value);
                  }
                }

                return xScale.getPixelForValue(value);
              },

              calculateBarY: function (index, datasetIndex) {
                var me = this;
                var meta = me.getMeta();
                var yScale = me.getScaleForId(meta.yAxisID);
                var barIndex = me.getBarIndex(datasetIndex);

                var ruler = me.getRuler(index);
                var topTick = yScale.getPixelForValue(
                  null,
                  index,
                  datasetIndex,
                  me.chart.isCombo
                );
                topTick -= me.chart.isCombo ? ruler.tickHeight / 2 : 0;

                if (yScale.options.stacked) {
                  return (
                    topTick + ruler.categoryHeight / 2 + ruler.categorySpacing
                  );
                }

                return (
                  topTick +
                  ruler.barHeight / 2 +
                  ruler.categorySpacing +
                  ruler.barHeight * barIndex +
                  ruler.barSpacing / 2 +
                  ruler.barSpacing * barIndex
                );
              },
            });
          };
        },
        {},
      ],
      16: [
        function (require, module, exports) {
          "use strict";

          module.exports = function (Chart) {
            var helpers = Chart.helpers;

            Chart.defaults.bubble = {
              hover: {
                mode: "single",
              },

              scales: {
                xAxes: [
                  {
                    type: "linear", // bubble should probably use a linear scale by default
                    position: "bottom",
                    id: "x-axis-0", // need an ID so datasets can reference the scale
                  },
                ],
                yAxes: [
                  {
                    type: "linear",
                    position: "left",
                    id: "y-axis-0",
                  },
                ],
              },

              tooltips: {
                callbacks: {
                  title: function (tooltipItems, data) {
                    // Title doesn't make sense for scatter since we format the data as a point
                    return "";
                  },
                  label: function (tooltipItem, data) {
                    var datasetLabel =
                      data.datasets[tooltipItem.datasetIndex].label || "";
                    var dataPoint =
                      data.datasets[tooltipItem.datasetIndex].data[
                        tooltipItem.index
                      ];
                    return (
                      datasetLabel +
                      ": (" +
                      dataPoint.x +
                      ", " +
                      dataPoint.y +
                      ", " +
                      dataPoint.r +
                      ")"
                    );
                  },
                },
              },
            };

            Chart.controllers.bubble = Chart.DatasetController.extend({
              dataElementType: Chart.elements.Point,

              update: function update(reset) {
                var me = this;
                var meta = me.getMeta();
                var points = meta.data;

                // Update Points
                helpers.each(points, function (point, index) {
                  me.updateElement(point, index, reset);
                });
              },

              updateElement: function (point, index, reset) {
                var me = this;
                var meta = me.getMeta();
                var xScale = me.getScaleForId(meta.xAxisID);
                var yScale = me.getScaleForId(meta.yAxisID);

                var custom = point.custom || {};
                var dataset = me.getDataset();
                var data = dataset.data[index];
                var pointElementOptions = me.chart.options.elements.point;
                var dsIndex = me.index;

                helpers.extend(point, {
                  // Utility
                  _xScale: xScale,
                  _yScale: yScale,
                  _datasetIndex: dsIndex,
                  _index: index,

                  // Desired view properties
                  _model: {
                    x: reset
                      ? xScale.getPixelForDecimal(0.5)
                      : xScale.getPixelForValue(
                          data,
                          index,
                          dsIndex,
                          me.chart.isCombo
                        ),
                    y: reset
                      ? yScale.getBasePixel()
                      : yScale.getPixelForValue(data, index, dsIndex),
                    // Appearance
                    radius: reset
                      ? 0
                      : custom.radius
                      ? custom.radius
                      : me.getRadius(data),

                    // Tooltip
                    hitRadius: custom.hitRadius
                      ? custom.hitRadius
                      : helpers.getValueAtIndexOrDefault(
                          dataset.hitRadius,
                          index,
                          pointElementOptions.hitRadius
                        ),
                  },
                });

                // Trick to reset the styles of the point
                Chart.DatasetController.prototype.removeHoverStyle.call(
                  me,
                  point,
                  pointElementOptions
                );

                var model = point._model;
                model.skip = custom.skip
                  ? custom.skip
                  : isNaN(model.x) || isNaN(model.y);

                point.pivot();
              },

              getRadius: function (value) {
                return value.r || this.chart.options.elements.point.radius;
              },

              setHoverStyle: function (point) {
                var me = this;
                Chart.DatasetController.prototype.setHoverStyle.call(me, point);

                // Radius
                var dataset = me.chart.data.datasets[point._datasetIndex];
                var index = point._index;
                var custom = point.custom || {};
                var model = point._model;
                model.radius = custom.hoverRadius
                  ? custom.hoverRadius
                  : helpers.getValueAtIndexOrDefault(
                      dataset.hoverRadius,
                      index,
                      me.chart.options.elements.point.hoverRadius
                    ) + me.getRadius(dataset.data[index]);
              },

              removeHoverStyle: function (point) {
                var me = this;
                Chart.DatasetController.prototype.removeHoverStyle.call(
                  me,
                  point,
                  me.chart.options.elements.point
                );

                var dataVal =
                  me.chart.data.datasets[point._datasetIndex].data[
                    point._index
                  ];
                var custom = point.custom || {};
                var model = point._model;

                model.radius = custom.radius
                  ? custom.radius
                  : me.getRadius(dataVal);
              },
            });
          };
        },
        {},
      ],
      17: [
        function (require, module, exports) {
          "use strict";

          module.exports = function (Chart) {
            var helpers = Chart.helpers,
              defaults = Chart.defaults;

            defaults.doughnut = {
              animation: {
                //Boolean - Whether we animate the rotation of the Doughnut
                animateRotate: true,
                //Boolean - Whether we animate scaling the Doughnut from the centre
                animateScale: false,
              },
              aspectRatio: 1,
              hover: {
                mode: "single",
              },
              legendCallback: function (chart) {
                var text = [];
                text.push('<ul class="' + chart.id + '-legend">');

                var data = chart.data;
                var datasets = data.datasets;
                var labels = data.labels;

                if (datasets.length) {
                  for (var i = 0; i < datasets[0].data.length; ++i) {
                    text.push(
                      '<li><span style="background-color:' +
                        datasets[0].backgroundColor[i] +
                        '"></span>'
                    );
                    if (labels[i]) {
                      text.push(labels[i]);
                    }
                    text.push("</li>");
                  }
                }

                text.push("</ul>");
                return text.join("");
              },
              legend: {
                labels: {
                  generateLabels: function (chart) {
                    var data = chart.data;
                    if (data.labels.length && data.datasets.length) {
                      return data.labels.map(function (label, i) {
                        var meta = chart.getDatasetMeta(0);
                        var ds = data.datasets[0];
                        var arc = meta.data[i];
                        var custom = arc.custom || {};
                        var getValueAtIndexOrDefault =
                          helpers.getValueAtIndexOrDefault;
                        var arcOpts = chart.options.elements.arc;
                        var fill = custom.backgroundColor
                          ? custom.backgroundColor
                          : getValueAtIndexOrDefault(
                              ds.backgroundColor,
                              i,
                              arcOpts.backgroundColor
                            );
                        var stroke = custom.borderColor
                          ? custom.borderColor
                          : getValueAtIndexOrDefault(
                              ds.borderColor,
                              i,
                              arcOpts.borderColor
                            );
                        var bw = custom.borderWidth
                          ? custom.borderWidth
                          : getValueAtIndexOrDefault(
                              ds.borderWidth,
                              i,
                              arcOpts.borderWidth
                            );

                        return {
                          text: label,
                          fillStyle: fill,
                          strokeStyle: stroke,
                          lineWidth: bw,
                          hidden: isNaN(ds.data[i]) || meta.data[i].hidden,

                          // Extra data used for toggling the correct item
                          index: i,
                        };
                      });
                    } else {
                      return [];
                    }
                  },
                },

                onClick: function (e, legendItem) {
                  var index = legendItem.index;
                  var chart = this.chart;
                  var i, ilen, meta;

                  for (
                    i = 0, ilen = (chart.data.datasets || []).length;
                    i < ilen;
                    ++i
                  ) {
                    meta = chart.getDatasetMeta(i);
                    meta.data[index].hidden = !meta.data[index].hidden;
                  }

                  chart.update();
                },
              },

              //The percentage of the chart that we cut out of the middle.
              cutoutPercentage: 50,

              //The rotation of the chart, where the first data arc begins.
              rotation: Math.PI * -0.5,

              //The total circumference of the chart.
              circumference: Math.PI * 2.0,

              // Need to override these to give a nice default
              tooltips: {
                callbacks: {
                  title: function () {
                    return "";
                  },
                  label: function (tooltipItem, data) {
                    return (
                      data.labels[tooltipItem.index] +
                      ": " +
                      data.datasets[tooltipItem.datasetIndex].data[
                        tooltipItem.index
                      ]
                    );
                  },
                },
              },
            };

            defaults.pie = helpers.clone(defaults.doughnut);
            helpers.extend(defaults.pie, {
              cutoutPercentage: 0,
            });

            Chart.controllers.doughnut = Chart.controllers.pie =
              Chart.DatasetController.extend({
                dataElementType: Chart.elements.Arc,

                linkScales: helpers.noop,

                // Get index of the dataset in relation to the visible datasets. This allows determining the inner and outer radius correctly
                getRingIndex: function getRingIndex(datasetIndex) {
                  var ringIndex = 0;

                  for (var j = 0; j < datasetIndex; ++j) {
                    if (this.chart.isDatasetVisible(j)) {
                      ++ringIndex;
                    }
                  }

                  return ringIndex;
                },

                update: function update(reset) {
                  var me = this;
                  var chart = me.chart,
                    chartArea = chart.chartArea,
                    opts = chart.options,
                    arcOpts = opts.elements.arc,
                    availableWidth =
                      chartArea.right - chartArea.left - arcOpts.borderWidth,
                    availableHeight =
                      chartArea.bottom - chartArea.top - arcOpts.borderWidth,
                    minSize = Math.min(availableWidth, availableHeight),
                    offset = {
                      x: 0,
                      y: 0,
                    },
                    meta = me.getMeta(),
                    cutoutPercentage = opts.cutoutPercentage,
                    circumference = opts.circumference;

                  // If the chart's circumference isn't a full circle, calculate minSize as a ratio of the width/height of the arc
                  if (circumference < Math.PI * 2.0) {
                    var startAngle = opts.rotation % (Math.PI * 2.0);
                    startAngle +=
                      Math.PI *
                      2.0 *
                      (startAngle >= Math.PI
                        ? -1
                        : startAngle < -Math.PI
                        ? 1
                        : 0);
                    var endAngle = startAngle + circumference;
                    var start = {
                      x: Math.cos(startAngle),
                      y: Math.sin(startAngle),
                    };
                    var end = { x: Math.cos(endAngle), y: Math.sin(endAngle) };
                    var contains0 =
                      (startAngle <= 0 && 0 <= endAngle) ||
                      (startAngle <= Math.PI * 2.0 &&
                        Math.PI * 2.0 <= endAngle);
                    var contains90 =
                      (startAngle <= Math.PI * 0.5 &&
                        Math.PI * 0.5 <= endAngle) ||
                      (startAngle <= Math.PI * 2.5 &&
                        Math.PI * 2.5 <= endAngle);
                    var contains180 =
                      (startAngle <= -Math.PI && -Math.PI <= endAngle) ||
                      (startAngle <= Math.PI && Math.PI <= endAngle);
                    var contains270 =
                      (startAngle <= -Math.PI * 0.5 &&
                        -Math.PI * 0.5 <= endAngle) ||
                      (startAngle <= Math.PI * 1.5 &&
                        Math.PI * 1.5 <= endAngle);
                    var cutout = cutoutPercentage / 100.0;
                    var min = {
                      x: contains180
                        ? -1
                        : Math.min(
                            start.x * (start.x < 0 ? 1 : cutout),
                            end.x * (end.x < 0 ? 1 : cutout)
                          ),
                      y: contains270
                        ? -1
                        : Math.min(
                            start.y * (start.y < 0 ? 1 : cutout),
                            end.y * (end.y < 0 ? 1 : cutout)
                          ),
                    };
                    var max = {
                      x: contains0
                        ? 1
                        : Math.max(
                            start.x * (start.x > 0 ? 1 : cutout),
                            end.x * (end.x > 0 ? 1 : cutout)
                          ),
                      y: contains90
                        ? 1
                        : Math.max(
                            start.y * (start.y > 0 ? 1 : cutout),
                            end.y * (end.y > 0 ? 1 : cutout)
                          ),
                    };
                    var size = {
                      width: (max.x - min.x) * 0.5,
                      height: (max.y - min.y) * 0.5,
                    };
                    minSize = Math.min(
                      availableWidth / size.width,
                      availableHeight / size.height
                    );
                    offset = {
                      x: (max.x + min.x) * -0.5,
                      y: (max.y + min.y) * -0.5,
                    };
                  }

                  chart.outerRadius = Math.max(minSize / 2, 0);
                  chart.innerRadius = Math.max(
                    cutoutPercentage
                      ? (chart.outerRadius / 100) * cutoutPercentage
                      : 1,
                    0
                  );
                  chart.radiusLength =
                    (chart.outerRadius - chart.innerRadius) /
                    chart.getVisibleDatasetCount();
                  chart.offsetX = offset.x * chart.outerRadius;
                  chart.offsetY = offset.y * chart.outerRadius;

                  meta.total = me.calculateTotal();

                  me.outerRadius =
                    chart.outerRadius -
                    chart.radiusLength * me.getRingIndex(me.index);
                  me.innerRadius = me.outerRadius - chart.radiusLength;

                  helpers.each(meta.data, function (arc, index) {
                    me.updateElement(arc, index, reset);
                  });
                },

                updateElement: function (arc, index, reset) {
                  var me = this;
                  var chart = me.chart,
                    chartArea = chart.chartArea,
                    opts = chart.options,
                    animationOpts = opts.animation,
                    arcOpts = opts.elements.arc,
                    centerX = (chartArea.left + chartArea.right) / 2,
                    centerY = (chartArea.top + chartArea.bottom) / 2,
                    startAngle = opts.rotation, // non reset case handled later
                    endAngle = opts.rotation, // non reset case handled later
                    dataset = me.getDataset(),
                    circumference =
                      reset && animationOpts.animateRotate
                        ? 0
                        : arc.hidden
                        ? 0
                        : me.calculateCircumference(dataset.data[index]) *
                          (opts.circumference / (2.0 * Math.PI)),
                    innerRadius =
                      reset && animationOpts.animateScale ? 0 : me.innerRadius,
                    outerRadius =
                      reset && animationOpts.animateScale ? 0 : me.outerRadius,
                    custom = arc.custom || {},
                    valueAtIndexOrDefault = helpers.getValueAtIndexOrDefault;

                  helpers.extend(arc, {
                    // Utility
                    _datasetIndex: me.index,
                    _index: index,

                    // Desired view properties
                    _model: {
                      x: centerX + chart.offsetX,
                      y: centerY + chart.offsetY,
                      startAngle: startAngle,
                      endAngle: endAngle,
                      circumference: circumference,
                      outerRadius: outerRadius,
                      innerRadius: innerRadius,
                      label: valueAtIndexOrDefault(
                        dataset.label,
                        index,
                        chart.data.labels[index]
                      ),
                    },
                  });

                  var model = arc._model;
                  // Resets the visual styles
                  this.removeHoverStyle(arc);

                  // Set correct angles if not resetting
                  if (!reset || !animationOpts.animateRotate) {
                    if (index === 0) {
                      model.startAngle = opts.rotation;
                    } else {
                      model.startAngle =
                        me.getMeta().data[index - 1]._model.endAngle;
                    }

                    model.endAngle = model.startAngle + model.circumference;
                  }

                  arc.pivot();
                },

                removeHoverStyle: function (arc) {
                  Chart.DatasetController.prototype.removeHoverStyle.call(
                    this,
                    arc,
                    this.chart.options.elements.arc
                  );
                },

                calculateTotal: function () {
                  var dataset = this.getDataset();
                  var meta = this.getMeta();
                  var total = 0;
                  var value;

                  helpers.each(meta.data, function (element, index) {
                    value = dataset.data[index];
                    if (!isNaN(value) && !element.hidden) {
                      total += Math.abs(value);
                    }
                  });

                  return total;
                },

                calculateCircumference: function (value) {
                  var total = this.getMeta().total;
                  if (total > 0 && !isNaN(value)) {
                    return Math.PI * 2.0 * (value / total);
                  } else {
                    return 0;
                  }
                },
              });
          };
        },
        {},
      ],
      18: [
        function (require, module, exports) {
          "use strict";

          module.exports = function (Chart) {
            var helpers = Chart.helpers;

            Chart.defaults.line = {
              showLines: true,

              hover: {
                mode: "label",
              },

              scales: {
                xAxes: [
                  {
                    type: "category",
                    id: "x-axis-0",
                  },
                ],
                yAxes: [
                  {
                    type: "linear",
                    id: "y-axis-0",
                  },
                ],
              },
            };

            function lineEnabled(dataset, options) {
              return helpers.getValueOrDefault(
                dataset.showLine,
                options.showLines
              );
            }

            Chart.controllers.line = Chart.DatasetController.extend({
              datasetElementType: Chart.elements.Line,

              dataElementType: Chart.elements.Point,

              addElementAndReset: function (index) {
                var me = this;
                var options = me.chart.options;
                var meta = me.getMeta();

                Chart.DatasetController.prototype.addElementAndReset.call(
                  me,
                  index
                );

                // Make sure bezier control points are updated
                if (
                  lineEnabled(me.getDataset(), options) &&
                  meta.dataset._model.tension !== 0
                ) {
                  me.updateBezierControlPoints();
                }
              },

              update: function update(reset) {
                var me = this;
                var meta = me.getMeta();
                var line = meta.dataset;
                var points = meta.data || [];
                var options = me.chart.options;
                var lineElementOptions = options.elements.line;
                var scale = me.getScaleForId(meta.yAxisID);
                var i, ilen, custom;
                var dataset = me.getDataset();
                var showLine = lineEnabled(dataset, options);

                // Update Line
                if (showLine) {
                  custom = line.custom || {};

                  // Compatibility: If the properties are defined with only the old name, use those values
                  if (
                    dataset.tension !== undefined &&
                    dataset.lineTension === undefined
                  ) {
                    dataset.lineTension = dataset.tension;
                  }

                  // Utility
                  line._scale = scale;
                  line._datasetIndex = me.index;
                  // Data
                  line._children = points;
                  // Model
                  line._model = {
                    // Appearance
                    // The default behavior of lines is to break at null values, according
                    // to https://github.com/chartjs/Chart.js/issues/2435#issuecomment-216718158
                    // This option gives linse the ability to span gaps
                    spanGaps: dataset.spanGaps ? dataset.spanGaps : false,
                    tension: custom.tension
                      ? custom.tension
                      : helpers.getValueOrDefault(
                          dataset.lineTension,
                          lineElementOptions.tension
                        ),
                    backgroundColor: custom.backgroundColor
                      ? custom.backgroundColor
                      : dataset.backgroundColor ||
                        lineElementOptions.backgroundColor,
                    borderWidth: custom.borderWidth
                      ? custom.borderWidth
                      : dataset.borderWidth || lineElementOptions.borderWidth,
                    borderColor: custom.borderColor
                      ? custom.borderColor
                      : dataset.borderColor || lineElementOptions.borderColor,
                    borderCapStyle: custom.borderCapStyle
                      ? custom.borderCapStyle
                      : dataset.borderCapStyle ||
                        lineElementOptions.borderCapStyle,
                    borderDash: custom.borderDash
                      ? custom.borderDash
                      : dataset.borderDash || lineElementOptions.borderDash,
                    borderDashOffset: custom.borderDashOffset
                      ? custom.borderDashOffset
                      : dataset.borderDashOffset ||
                        lineElementOptions.borderDashOffset,
                    borderJoinStyle: custom.borderJoinStyle
                      ? custom.borderJoinStyle
                      : dataset.borderJoinStyle ||
                        lineElementOptions.borderJoinStyle,
                    fill: custom.fill
                      ? custom.fill
                      : dataset.fill !== undefined
                      ? dataset.fill
                      : lineElementOptions.fill,
                    // Scale
                    scaleTop: scale.top,
                    scaleBottom: scale.bottom,
                    scaleZero: scale.getBasePixel(),
                  };

                  line.pivot();
                }

                // Update Points
                for (i = 0, ilen = points.length; i < ilen; ++i) {
                  me.updateElement(points[i], i, reset);
                }

                if (showLine && line._model.tension !== 0) {
                  me.updateBezierControlPoints();
                }

                // Now pivot the point for animation
                for (i = 0, ilen = points.length; i < ilen; ++i) {
                  points[i].pivot();
                }
              },

              getPointBackgroundColor: function (point, index) {
                var backgroundColor =
                  this.chart.options.elements.point.backgroundColor;
                var dataset = this.getDataset();
                var custom = point.custom || {};

                if (custom.backgroundColor) {
                  backgroundColor = custom.backgroundColor;
                } else if (dataset.pointBackgroundColor) {
                  backgroundColor = helpers.getValueAtIndexOrDefault(
                    dataset.pointBackgroundColor,
                    index,
                    backgroundColor
                  );
                } else if (dataset.backgroundColor) {
                  backgroundColor = dataset.backgroundColor;
                }

                return backgroundColor;
              },

              getPointBorderColor: function (point, index) {
                var borderColor = this.chart.options.elements.point.borderColor;
                var dataset = this.getDataset();
                var custom = point.custom || {};

                if (custom.borderColor) {
                  borderColor = custom.borderColor;
                } else if (dataset.pointBorderColor) {
                  borderColor = helpers.getValueAtIndexOrDefault(
                    dataset.pointBorderColor,
                    index,
                    borderColor
                  );
                } else if (dataset.borderColor) {
                  borderColor = dataset.borderColor;
                }

                return borderColor;
              },

              getPointBorderWidth: function (point, index) {
                var borderWidth = this.chart.options.elements.point.borderWidth;
                var dataset = this.getDataset();
                var custom = point.custom || {};

                if (custom.borderWidth) {
                  borderWidth = custom.borderWidth;
                } else if (dataset.pointBorderWidth) {
                  borderWidth = helpers.getValueAtIndexOrDefault(
                    dataset.pointBorderWidth,
                    index,
                    borderWidth
                  );
                } else if (dataset.borderWidth) {
                  borderWidth = dataset.borderWidth;
                }

                return borderWidth;
              },

              updateElement: function (point, index, reset) {
                var me = this;
                var meta = me.getMeta();
                var custom = point.custom || {};
                var dataset = me.getDataset();
                var datasetIndex = me.index;
                var value = dataset.data[index];
                var yScale = me.getScaleForId(meta.yAxisID);
                var xScale = me.getScaleForId(meta.xAxisID);
                var pointOptions = me.chart.options.elements.point;
                var x, y;

                // Compatibility: If the properties are defined with only the old name, use those values
                if (
                  dataset.radius !== undefined &&
                  dataset.pointRadius === undefined
                ) {
                  dataset.pointRadius = dataset.radius;
                }
                if (
                  dataset.hitRadius !== undefined &&
                  dataset.pointHitRadius === undefined
                ) {
                  dataset.pointHitRadius = dataset.hitRadius;
                }

                x = xScale.getPixelForValue(
                  value,
                  index,
                  datasetIndex,
                  me.chart.isCombo
                );
                y = reset
                  ? yScale.getBasePixel()
                  : me.calculatePointY(
                      value,
                      index,
                      datasetIndex,
                      me.chart.isCombo
                    );

                // Utility
                point._xScale = xScale;
                point._yScale = yScale;
                point._datasetIndex = datasetIndex;
                point._index = index;

                // Desired view properties
                point._model = {
                  x: x,
                  y: y,
                  skip: custom.skip || isNaN(x) || isNaN(y),
                  // Appearance
                  radius:
                    custom.radius ||
                    helpers.getValueAtIndexOrDefault(
                      dataset.pointRadius,
                      index,
                      pointOptions.radius
                    ),
                  pointStyle:
                    custom.pointStyle ||
                    helpers.getValueAtIndexOrDefault(
                      dataset.pointStyle,
                      index,
                      pointOptions.pointStyle
                    ),
                  backgroundColor: me.getPointBackgroundColor(point, index),
                  borderColor: me.getPointBorderColor(point, index),
                  borderWidth: me.getPointBorderWidth(point, index),
                  tension: meta.dataset._model
                    ? meta.dataset._model.tension
                    : 0,
                  // Tooltip
                  hitRadius:
                    custom.hitRadius ||
                    helpers.getValueAtIndexOrDefault(
                      dataset.pointHitRadius,
                      index,
                      pointOptions.hitRadius
                    ),
                };
              },

              calculatePointY: function (value, index, datasetIndex, isCombo) {
                var me = this;
                var chart = me.chart;
                var meta = me.getMeta();
                var yScale = me.getScaleForId(meta.yAxisID);
                var sumPos = 0;
                var sumNeg = 0;
                var i, ds, dsMeta;

                if (yScale.options.stacked) {
                  for (i = 0; i < datasetIndex; i++) {
                    ds = chart.data.datasets[i];
                    dsMeta = chart.getDatasetMeta(i);
                    if (dsMeta.type === "line" && chart.isDatasetVisible(i)) {
                      if (ds.data[index] < 0) {
                        sumNeg += ds.data[index] || 0;
                      } else {
                        sumPos += ds.data[index] || 0;
                      }
                    }
                  }

                  if (value < 0) {
                    return yScale.getPixelForValue(sumNeg + value);
                  } else {
                    return yScale.getPixelForValue(sumPos + value);
                  }
                }

                return yScale.getPixelForValue(value);
              },

              updateBezierControlPoints: function () {
                var meta = this.getMeta();
                var area = this.chart.chartArea;
                var points = meta.data || [];
                var i, ilen, point, model, controlPoints;

                for (i = 0, ilen = points.length; i < ilen; ++i) {
                  point = points[i];
                  model = point._model;
                  controlPoints = helpers.splineCurve(
                    helpers.previousItem(points, i)._model,
                    model,
                    helpers.nextItem(points, i)._model,
                    meta.dataset._model.tension
                  );

                  model.controlPointPreviousX = controlPoints.previous.x;
                  model.controlPointPreviousY = controlPoints.previous.y;
                  model.controlPointNextX = controlPoints.next.x;
                  model.controlPointNextY = controlPoints.next.y;
                }
              },

              draw: function (ease) {
                var me = this;
                var meta = me.getMeta();
                var points = meta.data || [];
                var easingDecimal = ease || 1;
                var i, ilen;

                // Transition Point Locations
                for (i = 0, ilen = points.length; i < ilen; ++i) {
                  points[i].transition(easingDecimal);
                }

                // Transition and Draw the line
                if (lineEnabled(me.getDataset(), me.chart.options)) {
                  meta.dataset.transition(easingDecimal).draw();
                }

                // Draw the points
                for (i = 0, ilen = points.length; i < ilen; ++i) {
                  points[i].draw();
                }
              },

              setHoverStyle: function (point) {
                // Point
                var dataset = this.chart.data.datasets[point._datasetIndex];
                var index = point._index;
                var custom = point.custom || {};
                var model = point._model;

                model.radius =
                  custom.hoverRadius ||
                  helpers.getValueAtIndexOrDefault(
                    dataset.pointHoverRadius,
                    index,
                    this.chart.options.elements.point.hoverRadius
                  );
                model.backgroundColor =
                  custom.hoverBackgroundColor ||
                  helpers.getValueAtIndexOrDefault(
                    dataset.pointHoverBackgroundColor,
                    index,
                    helpers.getHoverColor(model.backgroundColor)
                  );
                model.borderColor =
                  custom.hoverBorderColor ||
                  helpers.getValueAtIndexOrDefault(
                    dataset.pointHoverBorderColor,
                    index,
                    helpers.getHoverColor(model.borderColor)
                  );
                model.borderWidth =
                  custom.hoverBorderWidth ||
                  helpers.getValueAtIndexOrDefault(
                    dataset.pointHoverBorderWidth,
                    index,
                    model.borderWidth
                  );
              },

              removeHoverStyle: function (point) {
                var me = this;
                var dataset = me.chart.data.datasets[point._datasetIndex];
                var index = point._index;
                var custom = point.custom || {};
                var model = point._model;

                // Compatibility: If the properties are defined with only the old name, use those values
                if (
                  dataset.radius !== undefined &&
                  dataset.pointRadius === undefined
                ) {
                  dataset.pointRadius = dataset.radius;
                }

                model.radius =
                  custom.radius ||
                  helpers.getValueAtIndexOrDefault(
                    dataset.pointRadius,
                    index,
                    me.chart.options.elements.point.radius
                  );
                model.backgroundColor = me.getPointBackgroundColor(
                  point,
                  index
                );
                model.borderColor = me.getPointBorderColor(point, index);
                model.borderWidth = me.getPointBorderWidth(point, index);
              },
            });
          };
        },
        {},
      ],
      19: [
        function (require, module, exports) {
          "use strict";

          module.exports = function (Chart) {
            var helpers = Chart.helpers;

            Chart.defaults.polarArea = {
              scale: {
                type: "radialLinear",
                lineArc: true, // so that lines are circular
              },

              //Boolean - Whether to animate the rotation of the chart
              animation: {
                animateRotate: true,
                animateScale: true,
              },

              aspectRatio: 1,
              legendCallback: function (chart) {
                var text = [];
                text.push('<ul class="' + chart.id + '-legend">');

                var data = chart.data;
                var datasets = data.datasets;
                var labels = data.labels;

                if (datasets.length) {
                  for (var i = 0; i < datasets[0].data.length; ++i) {
                    text.push(
                      '<li><span style="background-color:' +
                        datasets[0].backgroundColor[i] +
                        '">'
                    );
                    if (labels[i]) {
                      text.push(labels[i]);
                    }
                    text.push("</span></li>");
                  }
                }

                text.push("</ul>");
                return text.join("");
              },
              legend: {
                labels: {
                  generateLabels: function (chart) {
                    var data = chart.data;
                    if (data.labels.length && data.datasets.length) {
                      return data.labels.map(function (label, i) {
                        var meta = chart.getDatasetMeta(0);
                        var ds = data.datasets[0];
                        var arc = meta.data[i];
                        var custom = arc.custom || {};
                        var getValueAtIndexOrDefault =
                          helpers.getValueAtIndexOrDefault;
                        var arcOpts = chart.options.elements.arc;
                        var fill = custom.backgroundColor
                          ? custom.backgroundColor
                          : getValueAtIndexOrDefault(
                              ds.backgroundColor,
                              i,
                              arcOpts.backgroundColor
                            );
                        var stroke = custom.borderColor
                          ? custom.borderColor
                          : getValueAtIndexOrDefault(
                              ds.borderColor,
                              i,
                              arcOpts.borderColor
                            );
                        var bw = custom.borderWidth
                          ? custom.borderWidth
                          : getValueAtIndexOrDefault(
                              ds.borderWidth,
                              i,
                              arcOpts.borderWidth
                            );

                        return {
                          text: label,
                          fillStyle: fill,
                          strokeStyle: stroke,
                          lineWidth: bw,
                          hidden: isNaN(ds.data[i]) || meta.data[i].hidden,

                          // Extra data used for toggling the correct item
                          index: i,
                        };
                      });
                    } else {
                      return [];
                    }
                  },
                },

                onClick: function (e, legendItem) {
                  var index = legendItem.index;
                  var chart = this.chart;
                  var i, ilen, meta;

                  for (
                    i = 0, ilen = (chart.data.datasets || []).length;
                    i < ilen;
                    ++i
                  ) {
                    meta = chart.getDatasetMeta(i);
                    meta.data[index].hidden = !meta.data[index].hidden;
                  }

                  chart.update();
                },
              },

              // Need to override these to give a nice default
              tooltips: {
                callbacks: {
                  title: function () {
                    return "";
                  },
                  label: function (tooltipItem, data) {
                    return (
                      data.labels[tooltipItem.index] + ": " + tooltipItem.yLabel
                    );
                  },
                },
              },
            };

            Chart.controllers.polarArea = Chart.DatasetController.extend({
              dataElementType: Chart.elements.Arc,

              linkScales: helpers.noop,

              update: function update(reset) {
                var me = this;
                var chart = me.chart;
                var chartArea = chart.chartArea;
                var meta = me.getMeta();
                var opts = chart.options;
                var arcOpts = opts.elements.arc;
                var minSize = Math.min(
                  chartArea.right - chartArea.left,
                  chartArea.bottom - chartArea.top
                );
                chart.outerRadius = Math.max(
                  (minSize - arcOpts.borderWidth / 2) / 2,
                  0
                );
                chart.innerRadius = Math.max(
                  opts.cutoutPercentage
                    ? (chart.outerRadius / 100) * opts.cutoutPercentage
                    : 1,
                  0
                );
                chart.radiusLength =
                  (chart.outerRadius - chart.innerRadius) /
                  chart.getVisibleDatasetCount();

                me.outerRadius =
                  chart.outerRadius - chart.radiusLength * me.index;
                me.innerRadius = me.outerRadius - chart.radiusLength;

                meta.count = me.countVisibleElements();

                helpers.each(meta.data, function (arc, index) {
                  me.updateElement(arc, index, reset);
                });
              },

              updateElement: function (arc, index, reset) {
                var me = this;
                var chart = me.chart;
                var chartArea = chart.chartArea;
                var dataset = me.getDataset();
                var opts = chart.options;
                var animationOpts = opts.animation;
                var arcOpts = opts.elements.arc;
                var custom = arc.custom || {};
                var scale = chart.scale;
                var getValueAtIndexOrDefault = helpers.getValueAtIndexOrDefault;
                var labels = chart.data.labels;

                var circumference = me.calculateCircumference(
                  dataset.data[index]
                );
                var centerX = (chartArea.left + chartArea.right) / 2;
                var centerY = (chartArea.top + chartArea.bottom) / 2;

                // If there is NaN data before us, we need to calculate the starting angle correctly.
                // We could be way more efficient here, but its unlikely that the polar area chart will have a lot of data
                var visibleCount = 0;
                var meta = me.getMeta();
                for (var i = 0; i < index; ++i) {
                  if (!isNaN(dataset.data[i]) && !meta.data[i].hidden) {
                    ++visibleCount;
                  }
                }

                var negHalfPI = -0.5 * Math.PI;
                var distance = arc.hidden
                  ? 0
                  : scale.getDistanceFromCenterForValue(dataset.data[index]);
                var startAngle = negHalfPI + circumference * visibleCount;
                var endAngle = startAngle + (arc.hidden ? 0 : circumference);

                var resetRadius = animationOpts.animateScale
                  ? 0
                  : scale.getDistanceFromCenterForValue(dataset.data[index]);

                helpers.extend(arc, {
                  // Utility
                  _datasetIndex: me.index,
                  _index: index,
                  _scale: scale,

                  // Desired view properties
                  _model: {
                    x: centerX,
                    y: centerY,
                    innerRadius: 0,
                    outerRadius: reset ? resetRadius : distance,
                    startAngle:
                      reset && animationOpts.animateRotate
                        ? negHalfPI
                        : startAngle,
                    endAngle:
                      reset && animationOpts.animateRotate
                        ? negHalfPI
                        : endAngle,
                    label: getValueAtIndexOrDefault(
                      labels,
                      index,
                      labels[index]
                    ),
                  },
                });

                // Apply border and fill style
                me.removeHoverStyle(arc);

                arc.pivot();
              },

              removeHoverStyle: function (arc) {
                Chart.DatasetController.prototype.removeHoverStyle.call(
                  this,
                  arc,
                  this.chart.options.elements.arc
                );
              },

              countVisibleElements: function () {
                var dataset = this.getDataset();
                var meta = this.getMeta();
                var count = 0;

                helpers.each(meta.data, function (element, index) {
                  if (!isNaN(dataset.data[index]) && !element.hidden) {
                    count++;
                  }
                });

                return count;
              },

              calculateCircumference: function (value) {
                var count = this.getMeta().count;
                if (count > 0 && !isNaN(value)) {
                  return (2 * Math.PI) / count;
                } else {
                  return 0;
                }
              },
            });
          };
        },
        {},
      ],
      20: [
        function (require, module, exports) {
          "use strict";

          module.exports = function (Chart) {
            var helpers = Chart.helpers;

            Chart.defaults.radar = {
              scale: {
                type: "radialLinear",
              },
              elements: {
                line: {
                  tension: 0, // no bezier in radar
                },
              },
            };

            Chart.controllers.radar = Chart.DatasetController.extend({
              datasetElementType: Chart.elements.Line,

              dataElementType: Chart.elements.Point,

              linkScales: helpers.noop,

              addElementAndReset: function (index) {
                Chart.DatasetController.prototype.addElementAndReset.call(
                  this,
                  index
                );

                // Make sure bezier control points are updated
                this.updateBezierControlPoints();
              },

              update: function update(reset) {
                var me = this;
                var meta = me.getMeta();
                var line = meta.dataset;
                var points = meta.data;
                var custom = line.custom || {};
                var dataset = me.getDataset();
                var lineElementOptions = me.chart.options.elements.line;
                var scale = me.chart.scale;

                // Compatibility: If the properties are defined with only the old name, use those values
                if (
                  dataset.tension !== undefined &&
                  dataset.lineTension === undefined
                ) {
                  dataset.lineTension = dataset.tension;
                }

                helpers.extend(meta.dataset, {
                  // Utility
                  _datasetIndex: me.index,
                  // Data
                  _children: points,
                  _loop: true,
                  // Model
                  _model: {
                    // Appearance
                    tension: custom.tension
                      ? custom.tension
                      : helpers.getValueOrDefault(
                          dataset.lineTension,
                          lineElementOptions.tension
                        ),
                    backgroundColor: custom.backgroundColor
                      ? custom.backgroundColor
                      : dataset.backgroundColor ||
                        lineElementOptions.backgroundColor,
                    borderWidth: custom.borderWidth
                      ? custom.borderWidth
                      : dataset.borderWidth || lineElementOptions.borderWidth,
                    borderColor: custom.borderColor
                      ? custom.borderColor
                      : dataset.borderColor || lineElementOptions.borderColor,
                    fill: custom.fill
                      ? custom.fill
                      : dataset.fill !== undefined
                      ? dataset.fill
                      : lineElementOptions.fill,
                    borderCapStyle: custom.borderCapStyle
                      ? custom.borderCapStyle
                      : dataset.borderCapStyle ||
                        lineElementOptions.borderCapStyle,
                    borderDash: custom.borderDash
                      ? custom.borderDash
                      : dataset.borderDash || lineElementOptions.borderDash,
                    borderDashOffset: custom.borderDashOffset
                      ? custom.borderDashOffset
                      : dataset.borderDashOffset ||
                        lineElementOptions.borderDashOffset,
                    borderJoinStyle: custom.borderJoinStyle
                      ? custom.borderJoinStyle
                      : dataset.borderJoinStyle ||
                        lineElementOptions.borderJoinStyle,

                    // Scale
                    scaleTop: scale.top,
                    scaleBottom: scale.bottom,
                    scaleZero: scale.getBasePosition(),
                  },
                });

                meta.dataset.pivot();

                // Update Points
                helpers.each(
                  points,
                  function (point, index) {
                    me.updateElement(point, index, reset);
                  },
                  me
                );

                // Update bezier control points
                me.updateBezierControlPoints();
              },
              updateElement: function (point, index, reset) {
                var me = this;
                var custom = point.custom || {};
                var dataset = me.getDataset();
                var scale = me.chart.scale;
                var pointElementOptions = me.chart.options.elements.point;
                var pointPosition = scale.getPointPositionForValue(
                  index,
                  dataset.data[index]
                );

                helpers.extend(point, {
                  // Utility
                  _datasetIndex: me.index,
                  _index: index,
                  _scale: scale,

                  // Desired view properties
                  _model: {
                    x: reset ? scale.xCenter : pointPosition.x, // value not used in dataset scale, but we want a consistent API between scales
                    y: reset ? scale.yCenter : pointPosition.y,

                    // Appearance
                    tension: custom.tension
                      ? custom.tension
                      : helpers.getValueOrDefault(
                          dataset.tension,
                          me.chart.options.elements.line.tension
                        ),
                    radius: custom.radius
                      ? custom.radius
                      : helpers.getValueAtIndexOrDefault(
                          dataset.pointRadius,
                          index,
                          pointElementOptions.radius
                        ),
                    backgroundColor: custom.backgroundColor
                      ? custom.backgroundColor
                      : helpers.getValueAtIndexOrDefault(
                          dataset.pointBackgroundColor,
                          index,
                          pointElementOptions.backgroundColor
                        ),
                    borderColor: custom.borderColor
                      ? custom.borderColor
                      : helpers.getValueAtIndexOrDefault(
                          dataset.pointBorderColor,
                          index,
                          pointElementOptions.borderColor
                        ),
                    borderWidth: custom.borderWidth
                      ? custom.borderWidth
                      : helpers.getValueAtIndexOrDefault(
                          dataset.pointBorderWidth,
                          index,
                          pointElementOptions.borderWidth
                        ),
                    pointStyle: custom.pointStyle
                      ? custom.pointStyle
                      : helpers.getValueAtIndexOrDefault(
                          dataset.pointStyle,
                          index,
                          pointElementOptions.pointStyle
                        ),

                    // Tooltip
                    hitRadius: custom.hitRadius
                      ? custom.hitRadius
                      : helpers.getValueAtIndexOrDefault(
                          dataset.hitRadius,
                          index,
                          pointElementOptions.hitRadius
                        ),
                  },
                });

                point._model.skip = custom.skip
                  ? custom.skip
                  : isNaN(point._model.x) || isNaN(point._model.y);
              },
              updateBezierControlPoints: function () {
                var chartArea = this.chart.chartArea;
                var meta = this.getMeta();

                helpers.each(meta.data, function (point, index) {
                  var model = point._model;
                  var controlPoints = helpers.splineCurve(
                    helpers.previousItem(meta.data, index, true)._model,
                    model,
                    helpers.nextItem(meta.data, index, true)._model,
                    model.tension
                  );

                  // Prevent the bezier going outside of the bounds of the graph
                  model.controlPointPreviousX = Math.max(
                    Math.min(controlPoints.previous.x, chartArea.right),
                    chartArea.left
                  );
                  model.controlPointPreviousY = Math.max(
                    Math.min(controlPoints.previous.y, chartArea.bottom),
                    chartArea.top
                  );

                  model.controlPointNextX = Math.max(
                    Math.min(controlPoints.next.x, chartArea.right),
                    chartArea.left
                  );
                  model.controlPointNextY = Math.max(
                    Math.min(controlPoints.next.y, chartArea.bottom),
                    chartArea.top
                  );

                  // Now pivot the point for animation
                  point.pivot();
                });
              },

              draw: function (ease) {
                var meta = this.getMeta();
                var easingDecimal = ease || 1;

                // Transition Point Locations
                helpers.each(meta.data, function (point, index) {
                  point.transition(easingDecimal);
                });

                // Transition and Draw the line
                meta.dataset.transition(easingDecimal).draw();

                // Draw the points
                helpers.each(meta.data, function (point) {
                  point.draw();
                });
              },

              setHoverStyle: function (point) {
                // Point
                var dataset = this.chart.data.datasets[point._datasetIndex];
                var custom = point.custom || {};
                var index = point._index;
                var model = point._model;

                model.radius = custom.hoverRadius
                  ? custom.hoverRadius
                  : helpers.getValueAtIndexOrDefault(
                      dataset.pointHoverRadius,
                      index,
                      this.chart.options.elements.point.hoverRadius
                    );
                model.backgroundColor = custom.hoverBackgroundColor
                  ? custom.hoverBackgroundColor
                  : helpers.getValueAtIndexOrDefault(
                      dataset.pointHoverBackgroundColor,
                      index,
                      helpers.getHoverColor(model.backgroundColor)
                    );
                model.borderColor = custom.hoverBorderColor
                  ? custom.hoverBorderColor
                  : helpers.getValueAtIndexOrDefault(
                      dataset.pointHoverBorderColor,
                      index,
                      helpers.getHoverColor(model.borderColor)
                    );
                model.borderWidth = custom.hoverBorderWidth
                  ? custom.hoverBorderWidth
                  : helpers.getValueAtIndexOrDefault(
                      dataset.pointHoverBorderWidth,
                      index,
                      model.borderWidth
                    );
              },

              removeHoverStyle: function (point) {
                var dataset = this.chart.data.datasets[point._datasetIndex];
                var custom = point.custom || {};
                var index = point._index;
                var model = point._model;
                var pointElementOptions = this.chart.options.elements.point;

                model.radius = custom.radius
                  ? custom.radius
                  : helpers.getValueAtIndexOrDefault(
                      dataset.radius,
                      index,
                      pointElementOptions.radius
                    );
                model.backgroundColor = custom.backgroundColor
                  ? custom.backgroundColor
                  : helpers.getValueAtIndexOrDefault(
                      dataset.pointBackgroundColor,
                      index,
                      pointElementOptions.backgroundColor
                    );
                model.borderColor = custom.borderColor
                  ? custom.borderColor
                  : helpers.getValueAtIndexOrDefault(
                      dataset.pointBorderColor,
                      index,
                      pointElementOptions.borderColor
                    );
                model.borderWidth = custom.borderWidth
                  ? custom.borderWidth
                  : helpers.getValueAtIndexOrDefault(
                      dataset.pointBorderWidth,
                      index,
                      pointElementOptions.borderWidth
                    );
              },
            });
          };
        },
        {},
      ],
      21: [
        function (require, module, exports) {
          /*global window: false */
          "use strict";

          module.exports = function (Chart) {
            var helpers = Chart.helpers;

            Chart.defaults.global.animation = {
              duration: 1000,
              easing: "easeOutQuart",
              onProgress: helpers.noop,
              onComplete: helpers.noop,
            };

            Chart.Animation = Chart.Element.extend({
              currentStep: null, // the current animation step
              numSteps: 60, // default number of steps
              easing: "", // the easing to use for this animation
              render: null, // render function used by the animation service

              onAnimationProgress: null, // user specified callback to fire on each step of the animation
              onAnimationComplete: null, // user specified callback to fire when the animation finishes
            });

            Chart.animationService = {
              frameDuration: 17,
              animations: [],
              dropFrames: 0,
              request: null,
              addAnimation: function (
                chartInstance,
                animationObject,
                duration,
                lazy
              ) {
                var me = this;

                if (!lazy) {
                  chartInstance.animating = true;
                }

                for (var index = 0; index < me.animations.length; ++index) {
                  if (me.animations[index].chartInstance === chartInstance) {
                    // replacing an in progress animation
                    me.animations[index].animationObject = animationObject;
                    return;
                  }
                }

                me.animations.push({
                  chartInstance: chartInstance,
                  animationObject: animationObject,
                });

                // If there are no animations queued, manually kickstart a digest, for lack of a better word
                if (me.animations.length === 1) {
                  me.requestAnimationFrame();
                }
              },
              // Cancel the animation for a given chart instance
              cancelAnimation: function (chartInstance) {
                var index = helpers.findIndex(
                  this.animations,
                  function (animationWrapper) {
                    return animationWrapper.chartInstance === chartInstance;
                  }
                );

                if (index !== -1) {
                  this.animations.splice(index, 1);
                  chartInstance.animating = false;
                }
              },
              requestAnimationFrame: function () {
                var me = this;
                if (me.request === null) {
                  // Skip animation frame requests until the active one is executed.
                  // This can happen when processing mouse events, e.g. 'mousemove'
                  // and 'mouseout' events will trigger multiple renders.
                  me.request = helpers.requestAnimFrame.call(
                    window,
                    function () {
                      me.request = null;
                      me.startDigest();
                    }
                  );
                }
              },
              startDigest: function () {
                var me = this;

                var startTime = Date.now();
                var framesToDrop = 0;

                if (me.dropFrames > 1) {
                  framesToDrop = Math.floor(me.dropFrames);
                  me.dropFrames = me.dropFrames % 1;
                }

                var i = 0;
                while (i < me.animations.length) {
                  if (me.animations[i].animationObject.currentStep === null) {
                    me.animations[i].animationObject.currentStep = 0;
                  }

                  me.animations[i].animationObject.currentStep +=
                    1 + framesToDrop;

                  if (
                    me.animations[i].animationObject.currentStep >
                    me.animations[i].animationObject.numSteps
                  ) {
                    me.animations[i].animationObject.currentStep =
                      me.animations[i].animationObject.numSteps;
                  }

                  me.animations[i].animationObject.render(
                    me.animations[i].chartInstance,
                    me.animations[i].animationObject
                  );
                  if (
                    me.animations[i].animationObject.onAnimationProgress &&
                    me.animations[i].animationObject.onAnimationProgress.call
                  ) {
                    me.animations[i].animationObject.onAnimationProgress.call(
                      me.animations[i].chartInstance,
                      me.animations[i]
                    );
                  }

                  if (
                    me.animations[i].animationObject.currentStep ===
                    me.animations[i].animationObject.numSteps
                  ) {
                    if (
                      me.animations[i].animationObject.onAnimationComplete &&
                      me.animations[i].animationObject.onAnimationComplete.call
                    ) {
                      me.animations[i].animationObject.onAnimationComplete.call(
                        me.animations[i].chartInstance,
                        me.animations[i]
                      );
                    }

                    // executed the last frame. Remove the animation.
                    me.animations[i].chartInstance.animating = false;

                    me.animations.splice(i, 1);
                  } else {
                    ++i;
                  }
                }

                var endTime = Date.now();
                var dropFrames = (endTime - startTime) / me.frameDuration;

                me.dropFrames += dropFrames;

                // Do we have more stuff to animate?
                if (me.animations.length > 0) {
                  me.requestAnimationFrame();
                }
              },
            };
          };
        },
        {},
      ],
      22: [
        function (require, module, exports) {
          "use strict";

          module.exports = function (Chart) {
            var helpers = Chart.helpers;
            //Create a dictionary of chart types, to allow for extension of existing types
            Chart.types = {};

            //Store a reference to each instance - allowing us to globally resize chart instances on window resize.
            //Destroy method on the chart will remove the instance of the chart from this reference.
            Chart.instances = {};

            // Controllers available for dataset visualization eg. bar, line, slice, etc.
            Chart.controllers = {};

            /**
             * @class Chart.Controller
             * The main controller of a chart.
             */
            Chart.Controller = function (instance) {
              this.chart = instance;
              this.config = instance.config;
              this.options = this.config.options = helpers.configMerge(
                Chart.defaults.global,
                Chart.defaults[this.config.type],
                this.config.options || {}
              );
              this.id = helpers.uid();

              Object.defineProperty(this, "data", {
                get: function () {
                  return this.config.data;
                },
              });

              //Add the chart instance to the global namespace
              Chart.instances[this.id] = this;

              if (this.options.responsive) {
                // Silent resize before chart draws
                this.resize(true);
              }

              this.initialize();

              return this;
            };

            helpers.extend(
              Chart.Controller.prototype,
              /** @lends Chart.Controller */ {
                initialize: function initialize() {
                  var me = this;
                  // Before init plugin notification
                  Chart.plugins.notify("beforeInit", [me]);

                  me.bindEvents();

                  // Make sure controllers are built first so that each dataset is bound to an axis before the scales
                  // are built
                  me.ensureScalesHaveIDs();
                  me.buildOrUpdateControllers();
                  me.buildScales();
                  me.updateLayout();
                  me.resetElements();
                  me.initToolTip();
                  me.update();

                  // After init plugin notification
                  Chart.plugins.notify("afterInit", [me]);

                  return me;
                },

                clear: function clear() {
                  helpers.clear(this.chart);
                  return this;
                },

                stop: function stop() {
                  // Stops any current animation loop occuring
                  Chart.animationService.cancelAnimation(this);
                  return this;
                },

                resize: function resize(silent) {
                  var me = this;
                  var chart = me.chart;
                  var canvas = chart.canvas;
                  var newWidth = helpers.getMaximumWidth(canvas);
                  var aspectRatio = chart.aspectRatio;
                  var newHeight =
                    me.options.maintainAspectRatio &&
                    isNaN(aspectRatio) === false &&
                    isFinite(aspectRatio) &&
                    aspectRatio !== 0
                      ? newWidth / aspectRatio
                      : helpers.getMaximumHeight(canvas);

                  var sizeChanged =
                    chart.width !== newWidth || chart.height !== newHeight;

                  if (!sizeChanged) {
                    return me;
                  }

                  canvas.width = chart.width = newWidth;
                  canvas.height = chart.height = newHeight;

                  helpers.retinaScale(chart);

                  // Notify any plugins about the resize
                  var newSize = { width: newWidth, height: newHeight };
                  Chart.plugins.notify("resize", [me, newSize]);

                  // Notify of resize
                  if (me.options.onResize) {
                    me.options.onResize(me, newSize);
                  }

                  if (!silent) {
                    me.stop();
                    me.update(me.options.responsiveAnimationDuration);
                  }

                  return me;
                },

                ensureScalesHaveIDs: function ensureScalesHaveIDs() {
                  var options = this.options;
                  var scalesOptions = options.scales || {};
                  var scaleOptions = options.scale;

                  helpers.each(
                    scalesOptions.xAxes,
                    function (xAxisOptions, index) {
                      xAxisOptions.id = xAxisOptions.id || "x-axis-" + index;
                    }
                  );

                  helpers.each(
                    scalesOptions.yAxes,
                    function (yAxisOptions, index) {
                      yAxisOptions.id = yAxisOptions.id || "y-axis-" + index;
                    }
                  );

                  if (scaleOptions) {
                    scaleOptions.id = scaleOptions.id || "scale";
                  }
                },

                /**
                 * Builds a map of scale ID to scale object for future lookup.
                 */
                buildScales: function buildScales() {
                  var me = this;
                  var options = me.options;
                  var scales = (me.scales = {});
                  var items = [];

                  if (options.scales) {
                    items = items.concat(
                      (options.scales.xAxes || []).map(function (xAxisOptions) {
                        return { options: xAxisOptions, dtype: "category" };
                      }),
                      (options.scales.yAxes || []).map(function (yAxisOptions) {
                        return { options: yAxisOptions, dtype: "linear" };
                      })
                    );
                  }

                  if (options.scale) {
                    items.push({
                      options: options.scale,
                      dtype: "radialLinear",
                      isDefault: true,
                    });
                  }

                  helpers.each(items, function (item, index) {
                    var scaleOptions = item.options;
                    var scaleType = helpers.getValueOrDefault(
                      scaleOptions.type,
                      item.dtype
                    );
                    var scaleClass =
                      Chart.scaleService.getScaleConstructor(scaleType);
                    if (!scaleClass) {
                      return;
                    }

                    var scale = new scaleClass({
                      id: scaleOptions.id,
                      options: scaleOptions,
                      ctx: me.chart.ctx,
                      chart: me,
                    });

                    scales[scale.id] = scale;

                    // TODO(SB): I think we should be able to remove this custom case (options.scale)
                    // and consider it as a regular scale part of the "scales"" map only! This would
                    // make the logic easier and remove some useless? custom code.
                    if (item.isDefault) {
                      me.scale = scale;
                    }
                  });

                  Chart.scaleService.addScalesToLayout(this);
                },

                updateLayout: function () {
                  Chart.layoutService.update(
                    this,
                    this.chart.width,
                    this.chart.height
                  );
                },

                buildOrUpdateControllers: function buildOrUpdateControllers() {
                  var me = this;
                  var types = [];
                  var newControllers = [];

                  helpers.each(
                    me.data.datasets,
                    function (dataset, datasetIndex) {
                      var meta = me.getDatasetMeta(datasetIndex);
                      if (!meta.type) {
                        meta.type = dataset.type || me.config.type;
                      }

                      types.push(meta.type);

                      if (meta.controller) {
                        meta.controller.updateIndex(datasetIndex);
                      } else {
                        meta.controller = new Chart.controllers[meta.type](
                          me,
                          datasetIndex
                        );
                        newControllers.push(meta.controller);
                      }
                    },
                    me
                  );

                  if (types.length > 1) {
                    for (var i = 1; i < types.length; i++) {
                      if (types[i] !== types[i - 1]) {
                        me.isCombo = true;
                        break;
                      }
                    }
                  }

                  return newControllers;
                },

                resetElements: function resetElements() {
                  var me = this;
                  helpers.each(
                    me.data.datasets,
                    function (dataset, datasetIndex) {
                      me.getDatasetMeta(datasetIndex).controller.reset();
                    },
                    me
                  );
                },

                update: function update(animationDuration, lazy) {
                  var me = this;
                  Chart.plugins.notify("beforeUpdate", [me]);

                  // In case the entire data object changed
                  me.tooltip._data = me.data;

                  // Make sure dataset controllers are updated and new controllers are reset
                  var newControllers = me.buildOrUpdateControllers();

                  // Make sure all dataset controllers have correct meta data counts
                  helpers.each(
                    me.data.datasets,
                    function (dataset, datasetIndex) {
                      me.getDatasetMeta(
                        datasetIndex
                      ).controller.buildOrUpdateElements();
                    },
                    me
                  );

                  Chart.layoutService.update(
                    me,
                    me.chart.width,
                    me.chart.height
                  );

                  // Apply changes to the dataets that require the scales to have been calculated i.e BorderColor chages
                  Chart.plugins.notify("afterScaleUpdate", [me]);

                  // Can only reset the new controllers after the scales have been updated
                  helpers.each(newControllers, function (controller) {
                    controller.reset();
                  });

                  me.updateDatasets();

                  // Do this before render so that any plugins that need final scale updates can use it
                  Chart.plugins.notify("afterUpdate", [me]);

                  me.render(animationDuration, lazy);
                },

                /**
                 * @method beforeDatasetsUpdate
                 * @description Called before all datasets are updated. If a plugin returns false,
                 * the datasets update will be cancelled until another chart update is triggered.
                 * @param {Object} instance the chart instance being updated.
                 * @returns {Boolean} false to cancel the datasets update.
                 * @memberof Chart.PluginBase
                 * @since version 2.1.5
                 * @instance
                 */

                /**
                 * @method afterDatasetsUpdate
                 * @description Called after all datasets have been updated. Note that this
                 * extension will not be called if the datasets update has been cancelled.
                 * @param {Object} instance the chart instance being updated.
                 * @memberof Chart.PluginBase
                 * @since version 2.1.5
                 * @instance
                 */

                /**
                 * Updates all datasets unless a plugin returns false to the beforeDatasetsUpdate
                 * extension, in which case no datasets will be updated and the afterDatasetsUpdate
                 * notification will be skipped.
                 * @protected
                 * @instance
                 */
                updateDatasets: function () {
                  var me = this;
                  var i, ilen;

                  if (Chart.plugins.notify("beforeDatasetsUpdate", [me])) {
                    for (i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
                      me.getDatasetMeta(i).controller.update();
                    }

                    Chart.plugins.notify("afterDatasetsUpdate", [me]);
                  }
                },

                render: function render(duration, lazy) {
                  var me = this;
                  Chart.plugins.notify("beforeRender", [me]);

                  var animationOptions = me.options.animation;
                  if (
                    animationOptions &&
                    ((typeof duration !== "undefined" && duration !== 0) ||
                      (typeof duration === "undefined" &&
                        animationOptions.duration !== 0))
                  ) {
                    var animation = new Chart.Animation();
                    animation.numSteps =
                      (duration || animationOptions.duration) / 16.66; //60 fps
                    animation.easing = animationOptions.easing;

                    // render function
                    animation.render = function (
                      chartInstance,
                      animationObject
                    ) {
                      var easingFunction =
                        helpers.easingEffects[animationObject.easing];
                      var stepDecimal =
                        animationObject.currentStep / animationObject.numSteps;
                      var easeDecimal = easingFunction(stepDecimal);

                      chartInstance.draw(
                        easeDecimal,
                        stepDecimal,
                        animationObject.currentStep
                      );
                    };

                    // user events
                    animation.onAnimationProgress = animationOptions.onProgress;
                    animation.onAnimationComplete = animationOptions.onComplete;

                    Chart.animationService.addAnimation(
                      me,
                      animation,
                      duration,
                      lazy
                    );
                  } else {
                    me.draw();
                    if (
                      animationOptions &&
                      animationOptions.onComplete &&
                      animationOptions.onComplete.call
                    ) {
                      animationOptions.onComplete.call(me);
                    }
                  }
                  return me;
                },

                draw: function (ease) {
                  var me = this;
                  var easingDecimal = ease || 1;
                  me.clear();

                  Chart.plugins.notify("beforeDraw", [me, easingDecimal]);

                  // Draw all the scales
                  helpers.each(
                    me.boxes,
                    function (box) {
                      box.draw(me.chartArea);
                    },
                    me
                  );
                  if (me.scale) {
                    me.scale.draw();
                  }

                  Chart.plugins.notify("beforeDatasetsDraw", [
                    me,
                    easingDecimal,
                  ]);

                  // Draw each dataset via its respective controller (reversed to support proper line stacking)
                  helpers.each(
                    me.data.datasets,
                    function (dataset, datasetIndex) {
                      if (me.isDatasetVisible(datasetIndex)) {
                        me.getDatasetMeta(datasetIndex).controller.draw(ease);
                      }
                    },
                    me,
                    true
                  );

                  Chart.plugins.notify("afterDatasetsDraw", [
                    me,
                    easingDecimal,
                  ]);

                  // Finally draw the tooltip
                  me.tooltip.transition(easingDecimal).draw();

                  Chart.plugins.notify("afterDraw", [me, easingDecimal]);
                },

                // Get the single element that was clicked on
                // @return : An object containing the dataset index and element index of the matching element. Also contains the rectangle that was draw
                getElementAtEvent: function (e) {
                  var me = this;
                  var eventPosition = helpers.getRelativePosition(e, me.chart);
                  var elementsArray = [];

                  helpers.each(
                    me.data.datasets,
                    function (dataset, datasetIndex) {
                      if (me.isDatasetVisible(datasetIndex)) {
                        var meta = me.getDatasetMeta(datasetIndex);
                        helpers.each(meta.data, function (element, index) {
                          if (
                            element.inRange(eventPosition.x, eventPosition.y)
                          ) {
                            elementsArray.push(element);
                            return elementsArray;
                          }
                        });
                      }
                    }
                  );

                  return elementsArray;
                },

                getElementsAtEvent: function (e) {
                  var me = this;
                  var eventPosition = helpers.getRelativePosition(e, me.chart);
                  var elementsArray = [];

                  var found = function () {
                    if (me.data.datasets) {
                      for (var i = 0; i < me.data.datasets.length; i++) {
                        var meta = me.getDatasetMeta(i);
                        if (me.isDatasetVisible(i)) {
                          for (var j = 0; j < meta.data.length; j++) {
                            if (
                              meta.data[j].inRange(
                                eventPosition.x,
                                eventPosition.y
                              )
                            ) {
                              return meta.data[j];
                            }
                          }
                        }
                      }
                    }
                  }.call(me);

                  if (!found) {
                    return elementsArray;
                  }

                  helpers.each(
                    me.data.datasets,
                    function (dataset, datasetIndex) {
                      if (me.isDatasetVisible(datasetIndex)) {
                        var meta = me.getDatasetMeta(datasetIndex);
                        elementsArray.push(meta.data[found._index]);
                      }
                    },
                    me
                  );

                  return elementsArray;
                },

                getElementsAtEventForMode: function (e, mode) {
                  var me = this;
                  switch (mode) {
                    case "single":
                      return me.getElementAtEvent(e);
                    case "label":
                      return me.getElementsAtEvent(e);
                    case "dataset":
                      return me.getDatasetAtEvent(e);
                    default:
                      return e;
                  }
                },

                getDatasetAtEvent: function (e) {
                  var elementsArray = this.getElementAtEvent(e);

                  if (elementsArray.length > 0) {
                    elementsArray = this.getDatasetMeta(
                      elementsArray[0]._datasetIndex
                    ).data;
                  }

                  return elementsArray;
                },

                getDatasetMeta: function (datasetIndex) {
                  var me = this;
                  var dataset = me.data.datasets[datasetIndex];
                  if (!dataset._meta) {
                    dataset._meta = {};
                  }

                  var meta = dataset._meta[me.id];
                  if (!meta) {
                    meta = dataset._meta[me.id] = {
                      type: null,
                      data: [],
                      dataset: null,
                      controller: null,
                      hidden: null, // See isDatasetVisible() comment
                      xAxisID: null,
                      yAxisID: null,
                    };
                  }

                  return meta;
                },

                getVisibleDatasetCount: function () {
                  var count = 0;
                  for (
                    var i = 0, ilen = this.data.datasets.length;
                    i < ilen;
                    ++i
                  ) {
                    if (this.isDatasetVisible(i)) {
                      count++;
                    }
                  }
                  return count;
                },

                isDatasetVisible: function (datasetIndex) {
                  var meta = this.getDatasetMeta(datasetIndex);

                  // meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,
                  // the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.
                  return typeof meta.hidden === "boolean"
                    ? !meta.hidden
                    : !this.data.datasets[datasetIndex].hidden;
                },

                generateLegend: function generateLegend() {
                  return this.options.legendCallback(this);
                },

                destroy: function destroy() {
                  var me = this;
                  me.stop();
                  me.clear();
                  helpers.unbindEvents(me, me.events);
                  helpers.removeResizeListener(me.chart.canvas.parentNode);

                  // Reset canvas height/width attributes
                  var canvas = me.chart.canvas;
                  canvas.width = me.chart.width;
                  canvas.height = me.chart.height;

                  // if we scaled the canvas in response to a devicePixelRatio !== 1, we need to undo that transform here
                  if (me.chart.originalDevicePixelRatio !== undefined) {
                    me.chart.ctx.scale(
                      1 / me.chart.originalDevicePixelRatio,
                      1 / me.chart.originalDevicePixelRatio
                    );
                  }

                  // Reset to the old style since it may have been changed by the device pixel ratio changes
                  canvas.style.width = me.chart.originalCanvasStyleWidth;
                  canvas.style.height = me.chart.originalCanvasStyleHeight;

                  Chart.plugins.notify("destroy", [me]);

                  delete Chart.instances[me.id];
                },

                toBase64Image: function toBase64Image() {
                  return this.chart.canvas.toDataURL.apply(
                    this.chart.canvas,
                    arguments
                  );
                },

                initToolTip: function initToolTip() {
                  var me = this;
                  me.tooltip = new Chart.Tooltip(
                    {
                      _chart: me.chart,
                      _chartInstance: me,
                      _data: me.data,
                      _options: me.options.tooltips,
                    },
                    me
                  );
                },

                bindEvents: function bindEvents() {
                  var me = this;
                  helpers.bindEvents(me, me.options.events, function (evt) {
                    me.eventHandler(evt);
                  });
                },

                updateHoverStyle: function (elements, mode, enabled) {
                  var method = enabled ? "setHoverStyle" : "removeHoverStyle";
                  var element, i, ilen;

                  switch (mode) {
                    case "single":
                      elements = [elements[0]];
                      break;
                    case "label":
                    case "dataset":
                      // elements = elements;
                      break;
                    default:
                      // unsupported mode
                      return;
                  }

                  for (i = 0, ilen = elements.length; i < ilen; ++i) {
                    element = elements[i];
                    if (element) {
                      this.getDatasetMeta(element._datasetIndex).controller[
                        method
                      ](element);
                    }
                  }
                },

                eventHandler: function eventHandler(e) {
                  var me = this;
                  var tooltip = me.tooltip;
                  var options = me.options || {};
                  var hoverOptions = options.hover;
                  var tooltipsOptions = options.tooltips;

                  me.lastActive = me.lastActive || [];
                  me.lastTooltipActive = me.lastTooltipActive || [];

                  // Find Active Elements for hover and tooltips
                  if (e.type === "mouseout") {
                    me.active = [];
                    me.tooltipActive = [];
                  } else {
                    me.active = me.getElementsAtEventForMode(
                      e,
                      hoverOptions.mode
                    );
                    me.tooltipActive = me.getElementsAtEventForMode(
                      e,
                      tooltipsOptions.mode
                    );
                  }

                  // On Hover hook
                  if (hoverOptions.onHover) {
                    hoverOptions.onHover.call(me, me.active);
                  }

                  if (e.type === "mouseup" || e.type === "click") {
                    if (options.onClick) {
                      options.onClick.call(me, e, me.active);
                    }
                    if (me.legend && me.legend.handleEvent) {
                      me.legend.handleEvent(e);
                    }
                  }

                  // Remove styling for last active (even if it may still be active)
                  if (me.lastActive.length) {
                    me.updateHoverStyle(
                      me.lastActive,
                      hoverOptions.mode,
                      false
                    );
                  }

                  // Built in hover styling
                  if (me.active.length && hoverOptions.mode) {
                    me.updateHoverStyle(me.active, hoverOptions.mode, true);
                  }

                  // Built in Tooltips
                  if (tooltipsOptions.enabled || tooltipsOptions.custom) {
                    tooltip.initialize();
                    tooltip._active = me.tooltipActive;
                    tooltip.update(true);
                  }

                  // Hover animations
                  tooltip.pivot();

                  if (!me.animating) {
                    // If entering, leaving, or changing elements, animate the change via pivot
                    if (
                      !helpers.arrayEquals(me.active, me.lastActive) ||
                      !helpers.arrayEquals(
                        me.tooltipActive,
                        me.lastTooltipActive
                      )
                    ) {
                      me.stop();

                      if (tooltipsOptions.enabled || tooltipsOptions.custom) {
                        tooltip.update(true);
                      }

                      // We only need to render at this point. Updating will cause scales to be
                      // recomputed generating flicker & using more memory than necessary.
                      me.render(hoverOptions.animationDuration, true);
                    }
                  }

                  // Remember Last Actives
                  me.lastActive = me.active;
                  me.lastTooltipActive = me.tooltipActive;
                  return me;
                },
              }
            );
          };
        },
        {},
      ],
      23: [
        function (require, module, exports) {
          "use strict";

          module.exports = function (Chart) {
            var helpers = Chart.helpers;
            var noop = helpers.noop;

            // Base class for all dataset controllers (line, bar, etc)
            Chart.DatasetController = function (chart, datasetIndex) {
              this.initialize.call(this, chart, datasetIndex);
            };

            helpers.extend(Chart.DatasetController.prototype, {
              /**
               * Element type used to generate a meta dataset (e.g. Chart.element.Line).
               * @type {Chart.core.element}
               */
              datasetElementType: null,

              /**
               * Element type used to generate a meta data (e.g. Chart.element.Point).
               * @type {Chart.core.element}
               */
              dataElementType: null,

              initialize: function (chart, datasetIndex) {
                var me = this;
                me.chart = chart;
                me.index = datasetIndex;
                me.linkScales();
                me.addElements();
              },

              updateIndex: function (datasetIndex) {
                this.index = datasetIndex;
              },

              linkScales: function () {
                var me = this;
                var meta = me.getMeta();
                var dataset = me.getDataset();

                if (meta.xAxisID === null) {
                  meta.xAxisID =
                    dataset.xAxisID || me.chart.options.scales.xAxes[0].id;
                }
                if (meta.yAxisID === null) {
                  meta.yAxisID =
                    dataset.yAxisID || me.chart.options.scales.yAxes[0].id;
                }
              },

              getDataset: function () {
                return this.chart.data.datasets[this.index];
              },

              getMeta: function () {
                return this.chart.getDatasetMeta(this.index);
              },

              getScaleForId: function (scaleID) {
                return this.chart.scales[scaleID];
              },

              reset: function () {
                this.update(true);
              },

              createMetaDataset: function () {
                var me = this;
                var type = me.datasetElementType;
                return (
                  type &&
                  new type({
                    _chart: me.chart.chart,
                    _datasetIndex: me.index,
                  })
                );
              },

              createMetaData: function (index) {
                var me = this;
                var type = me.dataElementType;
                return (
                  type &&
                  new type({
                    _chart: me.chart.chart,
                    _datasetIndex: me.index,
                    _index: index,
                  })
                );
              },

              addElements: function () {
                var me = this;
                var meta = me.getMeta();
                var data = me.getDataset().data || [];
                var metaData = meta.data;
                var i, ilen;

                for (i = 0, ilen = data.length; i < ilen; ++i) {
                  metaData[i] = metaData[i] || me.createMetaData(meta, i);
                }

                meta.dataset = meta.dataset || me.createMetaDataset();
              },

              addElementAndReset: function (index) {
                var me = this;
                var element = me.createMetaData(index);
                me.getMeta().data.splice(index, 0, element);
                me.updateElement(element, index, true);
              },

              buildOrUpdateElements: function buildOrUpdateElements() {
                // Handle the number of data points changing
                var meta = this.getMeta(),
                  md = meta.data,
                  numData = this.getDataset().data.length,
                  numMetaData = md.length;

                // Make sure that we handle number of datapoints changing
                if (numData < numMetaData) {
                  // Remove excess bars for data points that have been removed
                  md.splice(numData, numMetaData - numData);
                } else if (numData > numMetaData) {
                  // Add new elements
                  for (var index = numMetaData; index < numData; ++index) {
                    this.addElementAndReset(index);
                  }
                }
              },

              update: noop,

              draw: function (ease) {
                var easingDecimal = ease || 1;
                helpers.each(this.getMeta().data, function (element, index) {
                  element.transition(easingDecimal).draw();
                });
              },

              removeHoverStyle: function (element, elementOpts) {
                var dataset = this.chart.data.datasets[element._datasetIndex],
                  index = element._index,
                  custom = element.custom || {},
                  valueOrDefault = helpers.getValueAtIndexOrDefault,
                  color = helpers.color,
                  model = element._model;

                model.backgroundColor = custom.backgroundColor
                  ? custom.backgroundColor
                  : valueOrDefault(
                      dataset.backgroundColor,
                      index,
                      elementOpts.backgroundColor
                    );
                model.borderColor = custom.borderColor
                  ? custom.borderColor
                  : valueOrDefault(
                      dataset.borderColor,
                      index,
                      elementOpts.borderColor
                    );
                model.borderWidth = custom.borderWidth
                  ? custom.borderWidth
                  : valueOrDefault(
                      dataset.borderWidth,
                      index,
                      elementOpts.borderWidth
                    );
              },

              setHoverStyle: function (element) {
                var dataset = this.chart.data.datasets[element._datasetIndex],
                  index = element._index,
                  custom = element.custom || {},
                  valueOrDefault = helpers.getValueAtIndexOrDefault,
                  color = helpers.color,
                  getHoverColor = helpers.getHoverColor,
                  model = element._model;

                model.backgroundColor = custom.hoverBackgroundColor
                  ? custom.hoverBackgroundColor
                  : valueOrDefault(
                      dataset.hoverBackgroundColor,
                      index,
                      getHoverColor(model.backgroundColor)
                    );
                model.borderColor = custom.hoverBorderColor
                  ? custom.hoverBorderColor
                  : valueOrDefault(
                      dataset.hoverBorderColor,
                      index,
                      getHoverColor(model.borderColor)
                    );
                model.borderWidth = custom.hoverBorderWidth
                  ? custom.hoverBorderWidth
                  : valueOrDefault(
                      dataset.hoverBorderWidth,
                      index,
                      model.borderWidth
                    );
              },
            });

            Chart.DatasetController.extend = helpers.inherits;
          };
        },
        {},
      ],
      24: [
        function (require, module, exports) {
          "use strict";

          module.exports = function (Chart) {
            var helpers = Chart.helpers;

            Chart.elements = {};

            Chart.Element = function (configuration) {
              helpers.extend(this, configuration);
              this.initialize.apply(this, arguments);
            };

            helpers.extend(Chart.Element.prototype, {
              initialize: function () {
                this.hidden = false;
              },

              pivot: function () {
                var me = this;
                if (!me._view) {
                  me._view = helpers.clone(me._model);
                }
                me._start = helpers.clone(me._view);
                return me;
              },

              transition: function (ease) {
                var me = this;

                if (!me._view) {
                  me._view = helpers.clone(me._model);
                }

                // No animation -> No Transition
                if (ease === 1) {
                  me._view = me._model;
                  me._start = null;
                  return me;
                }

                if (!me._start) {
                  me.pivot();
                }

                helpers.each(
                  me._model,
                  function (value, key) {
                    if (key[0] === "_") {
                      // Only non-underscored properties
                    }

                    // Init if doesn't exist
                    else if (!me._view.hasOwnProperty(key)) {
                      if (typeof value === "number" && !isNaN(me._view[key])) {
                        me._view[key] = value * ease;
                      } else {
                        me._view[key] = value;
                      }
                    }

                    // No unnecessary computations
                    else if (value === me._view[key]) {
                      // It's the same! Woohoo!
                    }

                    // Color transitions if possible
                    else if (typeof value === "string") {
                      try {
                        var color = helpers
                          .color(me._model[key])
                          .mix(helpers.color(me._start[key]), ease);
                        me._view[key] = color.rgbString();
                      } catch (err) {
                        me._view[key] = value;
                      }
                    }
                    // Number transitions
                    else if (typeof value === "number") {
                      var startVal =
                        me._start[key] !== undefined &&
                        isNaN(me._start[key]) === false
                          ? me._start[key]
                          : 0;
                      me._view[key] =
                        (me._model[key] - startVal) * ease + startVal;
                    }
                    // Everything else
                    else {
                      me._view[key] = value;
                    }
                  },
                  me
                );

                return me;
              },

              tooltipPosition: function () {
                return {
                  x: this._model.x,
                  y: this._model.y,
                };
              },

              hasValue: function () {
                return (
                  helpers.isNumber(this._model.x) &&
                  helpers.isNumber(this._model.y)
                );
              },
            });

            Chart.Element.extend = helpers.inherits;
          };
        },
        {},
      ],
      25: [
        function (require, module, exports) {
          /*global window: false */
          /*global document: false */
          "use strict";

          var color = require(3);

          module.exports = function (Chart) {
            //Global Chart helpers object for utility methods and classes
            var helpers = (Chart.helpers = {});

            //-- Basic js utility methods
            helpers.each = function (loopable, callback, self, reverse) {
              // Check to see if null or undefined firstly.
              var i, len;
              if (helpers.isArray(loopable)) {
                len = loopable.length;
                if (reverse) {
                  for (i = len - 1; i >= 0; i--) {
                    callback.call(self, loopable[i], i);
                  }
                } else {
                  for (i = 0; i < len; i++) {
                    callback.call(self, loopable[i], i);
                  }
                }
              } else if (typeof loopable === "object") {
                var keys = Object.keys(loopable);
                len = keys.length;
                for (i = 0; i < len; i++) {
                  callback.call(self, loopable[keys[i]], keys[i]);
                }
              }
            };
            helpers.clone = function (obj) {
              var objClone = {};
              helpers.each(obj, function (value, key) {
                if (helpers.isArray(value)) {
                  objClone[key] = value.slice(0);
                } else if (typeof value === "object" && value !== null) {
                  objClone[key] = helpers.clone(value);
                } else {
                  objClone[key] = value;
                }
              });
              return objClone;
            };
            helpers.extend = function (base) {
              var setFn = function (value, key) {
                base[key] = value;
              };
              for (var i = 1, ilen = arguments.length; i < ilen; i++) {
                helpers.each(arguments[i], setFn);
              }
              return base;
            };
            // Need a special merge function to chart configs since they are now grouped
            helpers.configMerge = function (_base) {
              var base = helpers.clone(_base);
              helpers.each(
                Array.prototype.slice.call(arguments, 1),
                function (extension) {
                  helpers.each(extension, function (value, key) {
                    if (key === "scales") {
                      // Scale config merging is complex. Add out own function here for that
                      base[key] = helpers.scaleMerge(
                        base.hasOwnProperty(key) ? base[key] : {},
                        value
                      );
                    } else if (key === "scale") {
                      // Used in polar area & radar charts since there is only one scale
                      base[key] = helpers.configMerge(
                        base.hasOwnProperty(key) ? base[key] : {},
                        Chart.scaleService.getScaleDefaults(value.type),
                        value
                      );
                    } else if (
                      base.hasOwnProperty(key) &&
                      helpers.isArray(base[key]) &&
                      helpers.isArray(value)
                    ) {
                      // In this case we have an array of objects replacing another array. Rather than doing a strict replace,
                      // merge. This allows easy scale option merging
                      var baseArray = base[key];

                      helpers.each(value, function (valueObj, index) {
                        if (index < baseArray.length) {
                          if (
                            typeof baseArray[index] === "object" &&
                            baseArray[index] !== null &&
                            typeof valueObj === "object" &&
                            valueObj !== null
                          ) {
                            // Two objects are coming together. Do a merge of them.
                            baseArray[index] = helpers.configMerge(
                              baseArray[index],
                              valueObj
                            );
                          } else {
                            // Just overwrite in this case since there is nothing to merge
                            baseArray[index] = valueObj;
                          }
                        } else {
                          baseArray.push(valueObj); // nothing to merge
                        }
                      });
                    } else if (
                      base.hasOwnProperty(key) &&
                      typeof base[key] === "object" &&
                      base[key] !== null &&
                      typeof value === "object"
                    ) {
                      // If we are overwriting an object with an object, do a merge of the properties.
                      base[key] = helpers.configMerge(base[key], value);
                    } else {
                      // can just overwrite the value in this case
                      base[key] = value;
                    }
                  });
                }
              );

              return base;
            };
            helpers.scaleMerge = function (_base, extension) {
              var base = helpers.clone(_base);

              helpers.each(extension, function (value, key) {
                if (key === "xAxes" || key === "yAxes") {
                  // These properties are arrays of items
                  if (base.hasOwnProperty(key)) {
                    helpers.each(value, function (valueObj, index) {
                      var axisType = helpers.getValueOrDefault(
                        valueObj.type,
                        key === "xAxes" ? "category" : "linear"
                      );
                      var axisDefaults =
                        Chart.scaleService.getScaleDefaults(axisType);
                      if (index >= base[key].length || !base[key][index].type) {
                        base[key].push(
                          helpers.configMerge(axisDefaults, valueObj)
                        );
                      } else if (
                        valueObj.type &&
                        valueObj.type !== base[key][index].type
                      ) {
                        // Type changed. Bring in the new defaults before we bring in valueObj so that valueObj can override the correct scale defaults
                        base[key][index] = helpers.configMerge(
                          base[key][index],
                          axisDefaults,
                          valueObj
                        );
                      } else {
                        // Type is the same
                        base[key][index] = helpers.configMerge(
                          base[key][index],
                          valueObj
                        );
                      }
                    });
                  } else {
                    base[key] = [];
                    helpers.each(value, function (valueObj) {
                      var axisType = helpers.getValueOrDefault(
                        valueObj.type,
                        key === "xAxes" ? "category" : "linear"
                      );
                      base[key].push(
                        helpers.configMerge(
                          Chart.scaleService.getScaleDefaults(axisType),
                          valueObj
                        )
                      );
                    });
                  }
                } else if (
                  base.hasOwnProperty(key) &&
                  typeof base[key] === "object" &&
                  base[key] !== null &&
                  typeof value === "object"
                ) {
                  // If we are overwriting an object with an object, do a merge of the properties.
                  base[key] = helpers.configMerge(base[key], value);
                } else {
                  // can just overwrite the value in this case
                  base[key] = value;
                }
              });

              return base;
            };
            helpers.getValueAtIndexOrDefault = function (
              value,
              index,
              defaultValue
            ) {
              if (value === undefined || value === null) {
                return defaultValue;
              }

              if (helpers.isArray(value)) {
                return index < value.length ? value[index] : defaultValue;
              }

              return value;
            };
            helpers.getValueOrDefault = function (value, defaultValue) {
              return value === undefined ? defaultValue : value;
            };
            helpers.indexOf = Array.prototype.indexOf
              ? function (array, item) {
                  return array.indexOf(item);
                }
              : function (array, item) {
                  for (var i = 0, ilen = array.length; i < ilen; ++i) {
                    if (array[i] === item) {
                      return i;
                    }
                  }
                  return -1;
                };
            helpers.where = function (collection, filterCallback) {
              if (helpers.isArray(collection) && Array.prototype.filter) {
                return collection.filter(filterCallback);
              } else {
                var filtered = [];

                helpers.each(collection, function (item) {
                  if (filterCallback(item)) {
                    filtered.push(item);
                  }
                });

                return filtered;
              }
            };
            helpers.findIndex = Array.prototype.findIndex
              ? function (array, callback, scope) {
                  return array.findIndex(callback, scope);
                }
              : function (array, callback, scope) {
                  scope = scope === undefined ? array : scope;
                  for (var i = 0, ilen = array.length; i < ilen; ++i) {
                    if (callback.call(scope, array[i], i, array)) {
                      return i;
                    }
                  }
                  return -1;
                };
            helpers.findNextWhere = function (
              arrayToSearch,
              filterCallback,
              startIndex
            ) {
              // Default to start of the array
              if (startIndex === undefined || startIndex === null) {
                startIndex = -1;
              }
              for (var i = startIndex + 1; i < arrayToSearch.length; i++) {
                var currentItem = arrayToSearch[i];
                if (filterCallback(currentItem)) {
                  return currentItem;
                }
              }
            };
            helpers.findPreviousWhere = function (
              arrayToSearch,
              filterCallback,
              startIndex
            ) {
              // Default to end of the array
              if (startIndex === undefined || startIndex === null) {
                startIndex = arrayToSearch.length;
              }
              for (var i = startIndex - 1; i >= 0; i--) {
                var currentItem = arrayToSearch[i];
                if (filterCallback(currentItem)) {
                  return currentItem;
                }
              }
            };
            helpers.inherits = function (extensions) {
              //Basic javascript inheritance based on the model created in Backbone.js
              var parent = this;
              var ChartElement =
                extensions && extensions.hasOwnProperty("constructor")
                  ? extensions.constructor
                  : function () {
                      return parent.apply(this, arguments);
                    };

              var Surrogate = function () {
                this.constructor = ChartElement;
              };
              Surrogate.prototype = parent.prototype;
              ChartElement.prototype = new Surrogate();

              ChartElement.extend = helpers.inherits;

              if (extensions) {
                helpers.extend(ChartElement.prototype, extensions);
              }

              ChartElement.__super__ = parent.prototype;

              return ChartElement;
            };
            helpers.noop = function () {};
            helpers.uid = (function () {
              var id = 0;
              return function () {
                return id++;
              };
            })();
            //-- Math methods
            helpers.isNumber = function (n) {
              return !isNaN(parseFloat(n)) && isFinite(n);
            };
            helpers.almostEquals = function (x, y, epsilon) {
              return Math.abs(x - y) < epsilon;
            };
            helpers.max = function (array) {
              return array.reduce(function (max, value) {
                if (!isNaN(value)) {
                  return Math.max(max, value);
                } else {
                  return max;
                }
              }, Number.NEGATIVE_INFINITY);
            };
            helpers.min = function (array) {
              return array.reduce(function (min, value) {
                if (!isNaN(value)) {
                  return Math.min(min, value);
                } else {
                  return min;
                }
              }, Number.POSITIVE_INFINITY);
            };
            helpers.sign = Math.sign
              ? function (x) {
                  return Math.sign(x);
                }
              : function (x) {
                  x = +x; // convert to a number
                  if (x === 0 || isNaN(x)) {
                    return x;
                  }
                  return x > 0 ? 1 : -1;
                };
            helpers.log10 = Math.log10
              ? function (x) {
                  return Math.log10(x);
                }
              : function (x) {
                  return Math.log(x) / Math.LN10;
                };
            helpers.toRadians = function (degrees) {
              return degrees * (Math.PI / 180);
            };
            helpers.toDegrees = function (radians) {
              return radians * (180 / Math.PI);
            };
            // Gets the angle from vertical upright to the point about a centre.
            helpers.getAngleFromPoint = function (centrePoint, anglePoint) {
              var distanceFromXCenter = anglePoint.x - centrePoint.x,
                distanceFromYCenter = anglePoint.y - centrePoint.y,
                radialDistanceFromCenter = Math.sqrt(
                  distanceFromXCenter * distanceFromXCenter +
                    distanceFromYCenter * distanceFromYCenter
                );

              var angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);

              if (angle < -0.5 * Math.PI) {
                angle += 2.0 * Math.PI; // make sure the returned angle is in the range of (-PI/2, 3PI/2]
              }

              return {
                angle: angle,
                distance: radialDistanceFromCenter,
              };
            };
            helpers.aliasPixel = function (pixelWidth) {
              return pixelWidth % 2 === 0 ? 0 : 0.5;
            };
            helpers.splineCurve = function (
              firstPoint,
              middlePoint,
              afterPoint,
              t
            ) {
              //Props to Rob Spencer at scaled innovation for his post on splining between points
              //http://scaledinnovation.com/analytics/splines/aboutSplines.html

              // This function must also respect "skipped" points

              var previous = firstPoint.skip ? middlePoint : firstPoint,
                current = middlePoint,
                next = afterPoint.skip ? middlePoint : afterPoint;

              var d01 = Math.sqrt(
                Math.pow(current.x - previous.x, 2) +
                  Math.pow(current.y - previous.y, 2)
              );
              var d12 = Math.sqrt(
                Math.pow(next.x - current.x, 2) +
                  Math.pow(next.y - current.y, 2)
              );

              var s01 = d01 / (d01 + d12);
              var s12 = d12 / (d01 + d12);

              // If all points are the same, s01 & s02 will be inf
              s01 = isNaN(s01) ? 0 : s01;
              s12 = isNaN(s12) ? 0 : s12;

              var fa = t * s01; // scaling factor for triangle Ta
              var fb = t * s12;

              return {
                previous: {
                  x: current.x - fa * (next.x - previous.x),
                  y: current.y - fa * (next.y - previous.y),
                },
                next: {
                  x: current.x + fb * (next.x - previous.x),
                  y: current.y + fb * (next.y - previous.y),
                },
              };
            };
            helpers.nextItem = function (collection, index, loop) {
              if (loop) {
                return index >= collection.length - 1
                  ? collection[0]
                  : collection[index + 1];
              }

              return index >= collection.length - 1
                ? collection[collection.length - 1]
                : collection[index + 1];
            };
            helpers.previousItem = function (collection, index, loop) {
              if (loop) {
                return index <= 0
                  ? collection[collection.length - 1]
                  : collection[index - 1];
              }
              return index <= 0 ? collection[0] : collection[index - 1];
            };
            // Implementation of the nice number algorithm used in determining where axis labels will go
            helpers.niceNum = function (range, round) {
              var exponent = Math.floor(helpers.log10(range));
              var fraction = range / Math.pow(10, exponent);
              var niceFraction;

              if (round) {
                if (fraction < 1.5) {
                  niceFraction = 1;
                } else if (fraction < 3) {
                  niceFraction = 2;
                } else if (fraction < 7) {
                  niceFraction = 5;
                } else {
                  niceFraction = 10;
                }
              } else {
                if (fraction <= 1.0) {
                  niceFraction = 1;
                } else if (fraction <= 2) {
                  niceFraction = 2;
                } else if (fraction <= 5) {
                  niceFraction = 5;
                } else {
                  niceFraction = 10;
                }
              }

              return niceFraction * Math.pow(10, exponent);
            };
            //Easing functions adapted from Robert Penner's easing equations
            //http://www.robertpenner.com/easing/
            var easingEffects = (helpers.easingEffects = {
              linear: function (t) {
                return t;
              },
              easeInQuad: function (t) {
                return t * t;
              },
              easeOutQuad: function (t) {
                return -1 * t * (t - 2);
              },
              easeInOutQuad: function (t) {
                if ((t /= 1 / 2) < 1) {
                  return (1 / 2) * t * t;
                }
                return (-1 / 2) * (--t * (t - 2) - 1);
              },
              easeInCubic: function (t) {
                return t * t * t;
              },
              easeOutCubic: function (t) {
                return 1 * ((t = t / 1 - 1) * t * t + 1);
              },
              easeInOutCubic: function (t) {
                if ((t /= 1 / 2) < 1) {
                  return (1 / 2) * t * t * t;
                }
                return (1 / 2) * ((t -= 2) * t * t + 2);
              },
              easeInQuart: function (t) {
                return t * t * t * t;
              },
              easeOutQuart: function (t) {
                return -1 * ((t = t / 1 - 1) * t * t * t - 1);
              },
              easeInOutQuart: function (t) {
                if ((t /= 1 / 2) < 1) {
                  return (1 / 2) * t * t * t * t;
                }
                return (-1 / 2) * ((t -= 2) * t * t * t - 2);
              },
              easeInQuint: function (t) {
                return 1 * (t /= 1) * t * t * t * t;
              },
              easeOutQuint: function (t) {
                return 1 * ((t = t / 1 - 1) * t * t * t * t + 1);
              },
              easeInOutQuint: function (t) {
                if ((t /= 1 / 2) < 1) {
                  return (1 / 2) * t * t * t * t * t;
                }
                return (1 / 2) * ((t -= 2) * t * t * t * t + 2);
              },
              easeInSine: function (t) {
                return -1 * Math.cos((t / 1) * (Math.PI / 2)) + 1;
              },
              easeOutSine: function (t) {
                return 1 * Math.sin((t / 1) * (Math.PI / 2));
              },
              easeInOutSine: function (t) {
                return (-1 / 2) * (Math.cos((Math.PI * t) / 1) - 1);
              },
              easeInExpo: function (t) {
                return t === 0 ? 1 : 1 * Math.pow(2, 10 * (t / 1 - 1));
              },
              easeOutExpo: function (t) {
                return t === 1 ? 1 : 1 * (-Math.pow(2, (-10 * t) / 1) + 1);
              },
              easeInOutExpo: function (t) {
                if (t === 0) {
                  return 0;
                }
                if (t === 1) {
                  return 1;
                }
                if ((t /= 1 / 2) < 1) {
                  return (1 / 2) * Math.pow(2, 10 * (t - 1));
                }
                return (1 / 2) * (-Math.pow(2, -10 * --t) + 2);
              },
              easeInCirc: function (t) {
                if (t >= 1) {
                  return t;
                }
                return -1 * (Math.sqrt(1 - (t /= 1) * t) - 1);
              },
              easeOutCirc: function (t) {
                return 1 * Math.sqrt(1 - (t = t / 1 - 1) * t);
              },
              easeInOutCirc: function (t) {
                if ((t /= 1 / 2) < 1) {
                  return (-1 / 2) * (Math.sqrt(1 - t * t) - 1);
                }
                return (1 / 2) * (Math.sqrt(1 - (t -= 2) * t) + 1);
              },
              easeInElastic: function (t) {
                var s = 1.70158;
                var p = 0;
                var a = 1;
                if (t === 0) {
                  return 0;
                }
                if ((t /= 1) === 1) {
                  return 1;
                }
                if (!p) {
                  p = 1 * 0.3;
                }
                if (a < Math.abs(1)) {
                  a = 1;
                  s = p / 4;
                } else {
                  s = (p / (2 * Math.PI)) * Math.asin(1 / a);
                }
                return -(
                  a *
                  Math.pow(2, 10 * (t -= 1)) *
                  Math.sin(((t * 1 - s) * (2 * Math.PI)) / p)
                );
              },
              easeOutElastic: function (t) {
                var s = 1.70158;
                var p = 0;
                var a = 1;
                if (t === 0) {
                  return 0;
                }
                if ((t /= 1) === 1) {
                  return 1;
                }
                if (!p) {
                  p = 1 * 0.3;
                }
                if (a < Math.abs(1)) {
                  a = 1;
                  s = p / 4;
                } else {
                  s = (p / (2 * Math.PI)) * Math.asin(1 / a);
                }
                return (
                  a *
                    Math.pow(2, -10 * t) *
                    Math.sin(((t * 1 - s) * (2 * Math.PI)) / p) +
                  1
                );
              },
              easeInOutElastic: function (t) {
                var s = 1.70158;
                var p = 0;
                var a = 1;
                if (t === 0) {
                  return 0;
                }
                if ((t /= 1 / 2) === 2) {
                  return 1;
                }
                if (!p) {
                  p = 1 * (0.3 * 1.5);
                }
                if (a < Math.abs(1)) {
                  a = 1;
                  s = p / 4;
                } else {
                  s = (p / (2 * Math.PI)) * Math.asin(1 / a);
                }
                if (t < 1) {
                  return (
                    -0.5 *
                    (a *
                      Math.pow(2, 10 * (t -= 1)) *
                      Math.sin(((t * 1 - s) * (2 * Math.PI)) / p))
                  );
                }
                return (
                  a *
                    Math.pow(2, -10 * (t -= 1)) *
                    Math.sin(((t * 1 - s) * (2 * Math.PI)) / p) *
                    0.5 +
                  1
                );
              },
              easeInBack: function (t) {
                var s = 1.70158;
                return 1 * (t /= 1) * t * ((s + 1) * t - s);
              },
              easeOutBack: function (t) {
                var s = 1.70158;
                return 1 * ((t = t / 1 - 1) * t * ((s + 1) * t + s) + 1);
              },
              easeInOutBack: function (t) {
                var s = 1.70158;
                if ((t /= 1 / 2) < 1) {
                  return (1 / 2) * (t * t * (((s *= 1.525) + 1) * t - s));
                }
                return (
                  (1 / 2) * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2)
                );
              },
              easeInBounce: function (t) {
                return 1 - easingEffects.easeOutBounce(1 - t);
              },
              easeOutBounce: function (t) {
                if ((t /= 1) < 1 / 2.75) {
                  return 1 * (7.5625 * t * t);
                } else if (t < 2 / 2.75) {
                  return 1 * (7.5625 * (t -= 1.5 / 2.75) * t + 0.75);
                } else if (t < 2.5 / 2.75) {
                  return 1 * (7.5625 * (t -= 2.25 / 2.75) * t + 0.9375);
                } else {
                  return 1 * (7.5625 * (t -= 2.625 / 2.75) * t + 0.984375);
                }
              },
              easeInOutBounce: function (t) {
                if (t < 1 / 2) {
                  return easingEffects.easeInBounce(t * 2) * 0.5;
                }
                return easingEffects.easeOutBounce(t * 2 - 1) * 0.5 + 1 * 0.5;
              },
            });
            //Request animation polyfill - http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/
            helpers.requestAnimFrame = (function () {
              return (
                window.requestAnimationFrame ||
                window.webkitRequestAnimationFrame ||
                window.mozRequestAnimationFrame ||
                window.oRequestAnimationFrame ||
                window.msRequestAnimationFrame ||
                function (callback) {
                  return window.setTimeout(callback, 1000 / 60);
                }
              );
            })();
            helpers.cancelAnimFrame = (function () {
              return (
                window.cancelAnimationFrame ||
                window.webkitCancelAnimationFrame ||
                window.mozCancelAnimationFrame ||
                window.oCancelAnimationFrame ||
                window.msCancelAnimationFrame ||
                function (callback) {
                  return window.clearTimeout(callback, 1000 / 60);
                }
              );
            })();
            //-- DOM methods
            helpers.getRelativePosition = function (evt, chart) {
              var mouseX, mouseY;
              var e = evt.originalEvent || evt,
                canvas = evt.currentTarget || evt.srcElement,
                boundingRect = canvas.getBoundingClientRect();

              var touches = e.touches;
              if (touches && touches.length > 0) {
                mouseX = touches[0].clientX;
                mouseY = touches[0].clientY;
              } else {
                mouseX = e.clientX;
                mouseY = e.clientY;
              }

              // Scale mouse coordinates into canvas coordinates
              // by following the pattern laid out by 'jerryj' in the comments of
              // http://www.html5canvastutorials.com/advanced/html5-canvas-mouse-coordinates/
              var paddingLeft = parseFloat(
                helpers.getStyle(canvas, "padding-left")
              );
              var paddingTop = parseFloat(
                helpers.getStyle(canvas, "padding-top")
              );
              var paddingRight = parseFloat(
                helpers.getStyle(canvas, "padding-right")
              );
              var paddingBottom = parseFloat(
                helpers.getStyle(canvas, "padding-bottom")
              );
              var width =
                boundingRect.right -
                boundingRect.left -
                paddingLeft -
                paddingRight;
              var height =
                boundingRect.bottom -
                boundingRect.top -
                paddingTop -
                paddingBottom;

              // We divide by the current device pixel ratio, because the canvas is scaled up by that amount in each direction. However
              // the backend model is in unscaled coordinates. Since we are going to deal with our model coordinates, we go back here
              mouseX = Math.round(
                (((mouseX - boundingRect.left - paddingLeft) / width) *
                  canvas.width) /
                  chart.currentDevicePixelRatio
              );
              mouseY = Math.round(
                (((mouseY - boundingRect.top - paddingTop) / height) *
                  canvas.height) /
                  chart.currentDevicePixelRatio
              );

              return {
                x: mouseX,
                y: mouseY,
              };
            };
            helpers.addEvent = function (node, eventType, method) {
              if (node.addEventListener) {
                node.addEventListener(eventType, method);
              } else if (node.attachEvent) {
                node.attachEvent("on" + eventType, method);
              } else {
                node["on" + eventType] = method;
              }
            };
            helpers.removeEvent = function (node, eventType, handler) {
              if (node.removeEventListener) {
                node.removeEventListener(eventType, handler, false);
              } else if (node.detachEvent) {
                node.detachEvent("on" + eventType, handler);
              } else {
                node["on" + eventType] = helpers.noop;
              }
            };
            helpers.bindEvents = function (
              chartInstance,
              arrayOfEvents,
              handler
            ) {
              // Create the events object if it's not already present
              var events = (chartInstance.events = chartInstance.events || {});

              helpers.each(arrayOfEvents, function (eventName) {
                events[eventName] = function () {
                  handler.apply(chartInstance, arguments);
                };
                helpers.addEvent(
                  chartInstance.chart.canvas,
                  eventName,
                  events[eventName]
                );
              });
            };
            helpers.unbindEvents = function (chartInstance, arrayOfEvents) {
              var canvas = chartInstance.chart.canvas;
              helpers.each(arrayOfEvents, function (handler, eventName) {
                helpers.removeEvent(canvas, eventName, handler);
              });
            };

            // Private helper function to convert max-width/max-height values that may be percentages into a number
            function parseMaxStyle(styleValue, node, parentProperty) {
              var valueInPixels;
              if (typeof styleValue === "string") {
                valueInPixels = parseInt(styleValue, 10);

                if (styleValue.indexOf("%") != -1) {
                  // percentage * size in dimension
                  valueInPixels =
                    (valueInPixels / 100) * node.parentNode[parentProperty];
                }
              } else {
                valueInPixels = styleValue;
              }

              return valueInPixels;
            }

            /**
             * Returns if the given value contains an effective constraint.
             * @private
             */
            function isConstrainedValue(value) {
              return value !== undefined && value !== null && value !== "none";
            }

            // Private helper to get a constraint dimension
            // @param domNode : the node to check the constraint on
            // @param maxStyle : the style that defines the maximum for the direction we are using (maxWidth / maxHeight)
            // @param percentageProperty : property of parent to use when calculating width as a percentage
            // @see http://www.nathanaeljones.com/blog/2013/reading-max-width-cross-browser
            function getConstraintDimension(
              domNode,
              maxStyle,
              percentageProperty
            ) {
              var view = document.defaultView;
              var parentNode = domNode.parentNode;
              var constrainedNode = view.getComputedStyle(domNode)[maxStyle];
              var constrainedContainer =
                view.getComputedStyle(parentNode)[maxStyle];
              var hasCNode = isConstrainedValue(constrainedNode);
              var hasCContainer = isConstrainedValue(constrainedContainer);
              var infinity = Number.POSITIVE_INFINITY;

              if (hasCNode || hasCContainer) {
                return Math.min(
                  hasCNode
                    ? parseMaxStyle(
                        constrainedNode,
                        domNode,
                        percentageProperty
                      )
                    : infinity,
                  hasCContainer
                    ? parseMaxStyle(
                        constrainedContainer,
                        parentNode,
                        percentageProperty
                      )
                    : infinity
                );
              }

              return "none";
            }
            // returns Number or undefined if no constraint
            helpers.getConstraintWidth = function (domNode) {
              return getConstraintDimension(
                domNode,
                "max-width",
                "clientWidth"
              );
            };
            // returns Number or undefined if no constraint
            helpers.getConstraintHeight = function (domNode) {
              return getConstraintDimension(
                domNode,
                "max-height",
                "clientHeight"
              );
            };
            helpers.getMaximumWidth = function (domNode) {
              var container = domNode.parentNode;
              var padding =
                parseInt(helpers.getStyle(container, "padding-left")) +
                parseInt(helpers.getStyle(container, "padding-right"));
              var w = container.clientWidth - padding;
              var cw = helpers.getConstraintWidth(domNode);
              return isNaN(cw) ? w : Math.min(w, cw);
            };
            helpers.getMaximumHeight = function (domNode) {
              var container = domNode.parentNode;
              var padding =
                parseInt(helpers.getStyle(container, "padding-top")) +
                parseInt(helpers.getStyle(container, "padding-bottom"));
              var h = container.clientHeight - padding;
              var ch = helpers.getConstraintHeight(domNode);
              return isNaN(ch) ? h : Math.min(h, ch);
            };
            helpers.getStyle = function (el, property) {
              return el.currentStyle
                ? el.currentStyle[property]
                : document.defaultView
                    .getComputedStyle(el, null)
                    .getPropertyValue(property);
            };
            helpers.retinaScale = function (chart) {
              var ctx = chart.ctx;
              var canvas = chart.canvas;
              var width = canvas.width;
              var height = canvas.height;
              var pixelRatio = (chart.currentDevicePixelRatio =
                window.devicePixelRatio || 1);

              if (pixelRatio !== 1) {
                canvas.height = height * pixelRatio;
                canvas.width = width * pixelRatio;
                ctx.scale(pixelRatio, pixelRatio);

                // Store the device pixel ratio so that we can go backwards in `destroy`.
                // The devicePixelRatio changes with zoom, so there are no guarantees that it is the same
                // when destroy is called
                chart.originalDevicePixelRatio =
                  chart.originalDevicePixelRatio || pixelRatio;
              }

              canvas.style.width = width + "px";
              canvas.style.height = height + "px";
            };
            //-- Canvas methods
            helpers.clear = function (chart) {
              chart.ctx.clearRect(0, 0, chart.width, chart.height);
            };
            helpers.fontString = function (pixelSize, fontStyle, fontFamily) {
              return fontStyle + " " + pixelSize + "px " + fontFamily;
            };
            helpers.longestText = function (ctx, font, arrayOfThings, cache) {
              cache = cache || {};
              var data = (cache.data = cache.data || {});
              var gc = (cache.garbageCollect = cache.garbageCollect || []);

              if (cache.font !== font) {
                data = cache.data = {};
                gc = cache.garbageCollect = [];
                cache.font = font;
              }

              ctx.font = font;
              var longest = 0;
              helpers.each(arrayOfThings, function (thing) {
                // Undefined strings and arrays should not be measured
                if (
                  thing !== undefined &&
                  thing !== null &&
                  helpers.isArray(thing) !== true
                ) {
                  longest = helpers.measureText(ctx, data, gc, longest, thing);
                } else if (helpers.isArray(thing)) {
                  // if it is an array lets measure each element
                  // to do maybe simplify this function a bit so we can do this more recursively?
                  helpers.each(thing, function (nestedThing) {
                    // Undefined strings and arrays should not be measured
                    if (
                      nestedThing !== undefined &&
                      nestedThing !== null &&
                      !helpers.isArray(nestedThing)
                    ) {
                      longest = helpers.measureText(
                        ctx,
                        data,
                        gc,
                        longest,
                        nestedThing
                      );
                    }
                  });
                }
              });

              var gcLen = gc.length / 2;
              if (gcLen > arrayOfThings.length) {
                for (var i = 0; i < gcLen; i++) {
                  delete data[gc[i]];
                }
                gc.splice(0, gcLen);
              }
              return longest;
            };
            helpers.measureText = function (ctx, data, gc, longest, string) {
              var textWidth = data[string];
              if (!textWidth) {
                textWidth = data[string] = ctx.measureText(string).width;
                gc.push(string);
              }
              if (textWidth > longest) {
                longest = textWidth;
              }
              return longest;
            };
            helpers.numberOfLabelLines = function (arrayOfThings) {
              var numberOfLines = 1;
              helpers.each(arrayOfThings, function (thing) {
                if (helpers.isArray(thing)) {
                  if (thing.length > numberOfLines) {
                    numberOfLines = thing.length;
                  }
                }
              });
              return numberOfLines;
            };
            helpers.drawRoundedRectangle = function (
              ctx,
              x,
              y,
              width,
              height,
              radius
            ) {
              ctx.beginPath();
              ctx.moveTo(x + radius, y);
              ctx.lineTo(x + width - radius, y);
              ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
              ctx.lineTo(x + width, y + height - radius);
              ctx.quadraticCurveTo(
                x + width,
                y + height,
                x + width - radius,
                y + height
              );
              ctx.lineTo(x + radius, y + height);
              ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
              ctx.lineTo(x, y + radius);
              ctx.quadraticCurveTo(x, y, x + radius, y);
              ctx.closePath();
            };
            helpers.color = function (c) {
              if (!color) {
                console.log("Color.js not found!");
                return c;
              }

              /* global CanvasGradient */
              if (c instanceof CanvasGradient) {
                return color(Chart.defaults.global.defaultColor);
              }

              return color(c);
            };
            helpers.addResizeListener = function (node, callback) {
              // Hide an iframe before the node
              var hiddenIframe = document.createElement("iframe");
              var hiddenIframeClass = "chartjs-hidden-iframe";

              if (hiddenIframe.classlist) {
                // can use classlist
                hiddenIframe.classlist.add(hiddenIframeClass);
              } else {
                hiddenIframe.setAttribute("class", hiddenIframeClass);
              }

              // Set the style
              var style = hiddenIframe.style;
              style.width = "100%";
              style.display = "block";
              style.border = 0;
              style.height = 0;
              style.margin = 0;
              style.position = "absolute";
              style.left = 0;
              style.right = 0;
              style.top = 0;
              style.bottom = 0;

              // Insert the iframe so that contentWindow is available
              node.insertBefore(hiddenIframe, node.firstChild);

              (hiddenIframe.contentWindow || hiddenIframe).onresize =
                function () {
                  if (callback) {
                    callback();
                  }
                };
            };
            helpers.removeResizeListener = function (node) {
              var hiddenIframe = node.querySelector(".chartjs-hidden-iframe");

              // Remove the resize detect iframe
              if (hiddenIframe) {
                hiddenIframe.parentNode.removeChild(hiddenIframe);
              }
            };
            helpers.isArray = Array.isArray
              ? function (obj) {
                  return Array.isArray(obj);
                }
              : function (obj) {
                  return (
                    Object.prototype.toString.call(obj) === "[object Array]"
                  );
                };
            //! @see http://stackoverflow.com/a/14853974
            helpers.arrayEquals = function (a0, a1) {
              var i, ilen, v0, v1;

              if (!a0 || !a1 || a0.length != a1.length) {
                return false;
              }

              for (i = 0, ilen = a0.length; i < ilen; ++i) {
                v0 = a0[i];
                v1 = a1[i];

                if (v0 instanceof Array && v1 instanceof Array) {
                  if (!helpers.arrayEquals(v0, v1)) {
                    return false;
                  }
                } else if (v0 != v1) {
                  // NOTE: two different object instances will never be equal: {x:20} != {x:20}
                  return false;
                }
              }

              return true;
            };
            helpers.callCallback = function (fn, args, _tArg) {
              if (fn && typeof fn.call === "function") {
                fn.apply(_tArg, args);
              }
            };
            helpers.getHoverColor = function (color) {
              /* global CanvasPattern */
              return color instanceof CanvasPattern
                ? color
                : helpers.color(color).saturate(0.5).darken(0.1).rgbString();
            };
          };
        },
        { 3: 3 },
      ],
      26: [
        function (require, module, exports) {
          "use strict";

          module.exports = function () {
            //Occupy the global variable of Chart, and create a simple base class
            var Chart = function (context, config) {
              var me = this;
              var helpers = Chart.helpers;
              me.config = config;

              // Support a jQuery'd canvas element
              if (context.length && context[0].getContext) {
                context = context[0];
              }

              // Support a canvas domnode
              if (context.getContext) {
                context = context.getContext("2d");
              }

              me.ctx = context;
              me.canvas = context.canvas;

              context.canvas.style.display =
                context.canvas.style.display || "block";

              // Figure out what the size of the chart will be.
              // If the canvas has a specified width and height, we use those else
              // we look to see if the canvas node has a CSS width and height.
              // If there is still no height, fill the parent container
              me.width =
                context.canvas.width ||
                parseInt(helpers.getStyle(context.canvas, "width"), 10) ||
                helpers.getMaximumWidth(context.canvas);
              me.height =
                context.canvas.height ||
                parseInt(helpers.getStyle(context.canvas, "height"), 10) ||
                helpers.getMaximumHeight(context.canvas);

              me.aspectRatio = me.width / me.height;

              if (isNaN(me.aspectRatio) || isFinite(me.aspectRatio) === false) {
                // If the canvas has no size, try and figure out what the aspect ratio will be.
                // Some charts prefer square canvases (pie, radar, etc). If that is specified, use that
                // else use the canvas default ratio of 2
                me.aspectRatio =
                  config.aspectRatio !== undefined ? config.aspectRatio : 2;
              }

              // Store the original style of the element so we can set it back
              me.originalCanvasStyleWidth = context.canvas.style.width;
              me.originalCanvasStyleHeight = context.canvas.style.height;

              // High pixel density displays - multiply the size of the canvas height/width by the device pixel ratio, then scale.
              helpers.retinaScale(me);

              if (config) {
                me.controller = new Chart.Controller(me);
              }

              // Always bind this so that if the responsive state changes we still work
              helpers.addResizeListener(context.canvas.parentNode, function () {
                if (me.controller && me.controller.config.options.responsive) {
                  me.controller.resize();
                }
              });

              return me.controller ? me.controller : me;
            };

            //Globally expose the defaults to allow for user updating/changing
            Chart.defaults = {
              global: {
                responsive: true,
                responsiveAnimationDuration: 0,
                maintainAspectRatio: true,
                events: [
                  "mousemove",
                  "mouseout",
                  "click",
                  "touchstart",
                  "touchmove",
                ],
                hover: {
                  onHover: null,
                  mode: "single",
                  animationDuration: 400,
                },
                onClick: null,
                defaultColor: "rgba(0,0,0,0.1)",
                defaultFontColor: "#666",
                defaultFontFamily:
                  "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
                defaultFontSize: 12,
                defaultFontStyle: "normal",
                showLines: true,

                // Element defaults defined in element extensions
                elements: {},

                // Legend callback string
                legendCallback: function (chart) {
                  var text = [];
                  text.push('<ul class="' + chart.id + '-legend">');
                  for (var i = 0; i < chart.data.datasets.length; i++) {
                    text.push(
                      '<li><span style="background-color:' +
                        chart.data.datasets[i].backgroundColor +
                        '"></span>'
                    );
                    if (chart.data.datasets[i].label) {
                      text.push(chart.data.datasets[i].label);
                    }
                    text.push("</li>");
                  }
                  text.push("</ul>");

                  return text.join("");
                },
              },
            };

            Chart.Chart = Chart;

            return Chart;
          };
        },
        {},
      ],
      27: [
        function (require, module, exports) {
          "use strict";

          module.exports = function (Chart) {
            var helpers = Chart.helpers;

            // The layout service is very self explanatory.  It's responsible for the layout within a chart.
            // Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need
            // It is this service's responsibility of carrying out that layout.
            Chart.layoutService = {
              defaults: {},

              // Register a box to a chartInstance. A box is simply a reference to an object that requires layout. eg. Scales, Legend, Plugins.
              addBox: function (chartInstance, box) {
                if (!chartInstance.boxes) {
                  chartInstance.boxes = [];
                }
                chartInstance.boxes.push(box);
              },

              removeBox: function (chartInstance, box) {
                if (!chartInstance.boxes) {
                  return;
                }
                chartInstance.boxes.splice(chartInstance.boxes.indexOf(box), 1);
              },

              // The most important function
              update: function (chartInstance, width, height) {
                if (!chartInstance) {
                  return;
                }

                var xPadding = 0;
                var yPadding = 0;

                var leftBoxes = helpers.where(
                  chartInstance.boxes,
                  function (box) {
                    return box.options.position === "left";
                  }
                );
                var rightBoxes = helpers.where(
                  chartInstance.boxes,
                  function (box) {
                    return box.options.position === "right";
                  }
                );
                var topBoxes = helpers.where(
                  chartInstance.boxes,
                  function (box) {
                    return box.options.position === "top";
                  }
                );
                var bottomBoxes = helpers.where(
                  chartInstance.boxes,
                  function (box) {
                    return box.options.position === "bottom";
                  }
                );

                // Boxes that overlay the chartarea such as the radialLinear scale
                var chartAreaBoxes = helpers.where(
                  chartInstance.boxes,
                  function (box) {
                    return box.options.position === "chartArea";
                  }
                );

                // Ensure that full width boxes are at the very top / bottom
                topBoxes.sort(function (a, b) {
                  return (
                    (b.options.fullWidth ? 1 : 0) -
                    (a.options.fullWidth ? 1 : 0)
                  );
                });
                bottomBoxes.sort(function (a, b) {
                  return (
                    (a.options.fullWidth ? 1 : 0) -
                    (b.options.fullWidth ? 1 : 0)
                  );
                });

                // Essentially we now have any number of boxes on each of the 4 sides.
                // Our canvas looks like the following.
                // The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and
                // B1 is the bottom axis
                // There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays
                // These locations are single-box locations only, when trying to register a chartArea location that is already taken,
                // an error will be thrown.
                //
                // |----------------------------------------------------|
                // |                  T1 (Full Width)                   |
                // |----------------------------------------------------|
                // |    |    |                 T2                  |    |
                // |    |----|-------------------------------------|----|
                // |    |    | C1 |                           | C2 |    |
                // |    |    |----|                           |----|    |
                // |    |    |                                     |    |
                // | L1 | L2 |           ChartArea (C0)            | R1 |
                // |    |    |                                     |    |
                // |    |    |----|                           |----|    |
                // |    |    | C3 |                           | C4 |    |
                // |    |----|-------------------------------------|----|
                // |    |    |                 B1                  |    |
                // |----------------------------------------------------|
                // |                  B2 (Full Width)                   |
                // |----------------------------------------------------|
                //
                // What we do to find the best sizing, we do the following
                // 1. Determine the minimum size of the chart area.
                // 2. Split the remaining width equally between each vertical axis
                // 3. Split the remaining height equally between each horizontal axis
                // 4. Give each layout the maximum size it can be. The layout will return it's minimum size
                // 5. Adjust the sizes of each axis based on it's minimum reported size.
                // 6. Refit each axis
                // 7. Position each axis in the final location
                // 8. Tell the chart the final location of the chart area
                // 9. Tell any axes that overlay the chart area the positions of the chart area

                // Step 1
                var chartWidth = width - 2 * xPadding;
                var chartHeight = height - 2 * yPadding;
                var chartAreaWidth = chartWidth / 2; // min 50%
                var chartAreaHeight = chartHeight / 2; // min 50%

                // Step 2
                var verticalBoxWidth =
                  (width - chartAreaWidth) /
                  (leftBoxes.length + rightBoxes.length);

                // Step 3
                var horizontalBoxHeight =
                  (height - chartAreaHeight) /
                  (topBoxes.length + bottomBoxes.length);

                // Step 4
                var maxChartAreaWidth = chartWidth;
                var maxChartAreaHeight = chartHeight;
                var minBoxSizes = [];

                helpers.each(
                  leftBoxes.concat(rightBoxes, topBoxes, bottomBoxes),
                  getMinimumBoxSize
                );

                function getMinimumBoxSize(box) {
                  var minSize;
                  var isHorizontal = box.isHorizontal();

                  if (isHorizontal) {
                    minSize = box.update(
                      box.options.fullWidth ? chartWidth : maxChartAreaWidth,
                      horizontalBoxHeight
                    );
                    maxChartAreaHeight -= minSize.height;
                  } else {
                    minSize = box.update(verticalBoxWidth, chartAreaHeight);
                    maxChartAreaWidth -= minSize.width;
                  }

                  minBoxSizes.push({
                    horizontal: isHorizontal,
                    minSize: minSize,
                    box: box,
                  });
                }

                // At this point, maxChartAreaHeight and maxChartAreaWidth are the size the chart area could
                // be if the axes are drawn at their minimum sizes.

                // Steps 5 & 6
                var totalLeftBoxesWidth = xPadding;
                var totalRightBoxesWidth = xPadding;
                var totalTopBoxesHeight = yPadding;
                var totalBottomBoxesHeight = yPadding;

                // Update, and calculate the left and right margins for the horizontal boxes
                helpers.each(leftBoxes.concat(rightBoxes), fitBox);

                helpers.each(leftBoxes, function (box) {
                  totalLeftBoxesWidth += box.width;
                });

                helpers.each(rightBoxes, function (box) {
                  totalRightBoxesWidth += box.width;
                });

                // Set the Left and Right margins for the horizontal boxes
                helpers.each(topBoxes.concat(bottomBoxes), fitBox);

                // Function to fit a box
                function fitBox(box) {
                  var minBoxSize = helpers.findNextWhere(
                    minBoxSizes,
                    function (minBoxSize) {
                      return minBoxSize.box === box;
                    }
                  );

                  if (minBoxSize) {
                    if (box.isHorizontal()) {
                      var scaleMargin = {
                        left: totalLeftBoxesWidth,
                        right: totalRightBoxesWidth,
                        top: 0,
                        bottom: 0,
                      };

                      // Don't use min size here because of label rotation. When the labels are rotated, their rotation highly depends
                      // on the margin. Sometimes they need to increase in size slightly
                      box.update(
                        box.options.fullWidth ? chartWidth : maxChartAreaWidth,
                        chartHeight / 2,
                        scaleMargin
                      );
                    } else {
                      box.update(minBoxSize.minSize.width, maxChartAreaHeight);
                    }
                  }
                }

                // Figure out how much margin is on the top and bottom of the vertical boxes
                helpers.each(topBoxes, function (box) {
                  totalTopBoxesHeight += box.height;
                });

                helpers.each(bottomBoxes, function (box) {
                  totalBottomBoxesHeight += box.height;
                });

                // Let the left layout know the final margin
                helpers.each(leftBoxes.concat(rightBoxes), finalFitVerticalBox);

                function finalFitVerticalBox(box) {
                  var minBoxSize = helpers.findNextWhere(
                    minBoxSizes,
                    function (minBoxSize) {
                      return minBoxSize.box === box;
                    }
                  );

                  var scaleMargin = {
                    left: 0,
                    right: 0,
                    top: totalTopBoxesHeight,
                    bottom: totalBottomBoxesHeight,
                  };

                  if (minBoxSize) {
                    box.update(
                      minBoxSize.minSize.width,
                      maxChartAreaHeight,
                      scaleMargin
                    );
                  }
                }

                // Recalculate because the size of each layout might have changed slightly due to the margins (label rotation for instance)
                totalLeftBoxesWidth = xPadding;
                totalRightBoxesWidth = xPadding;
                totalTopBoxesHeight = yPadding;
                totalBottomBoxesHeight = yPadding;

                helpers.each(leftBoxes, function (box) {
                  totalLeftBoxesWidth += box.width;
                });

                helpers.each(rightBoxes, function (box) {
                  totalRightBoxesWidth += box.width;
                });

                helpers.each(topBoxes, function (box) {
                  totalTopBoxesHeight += box.height;
                });
                helpers.each(bottomBoxes, function (box) {
                  totalBottomBoxesHeight += box.height;
                });

                // Figure out if our chart area changed. This would occur if the dataset layout label rotation
                // changed due to the application of the margins in step 6. Since we can only get bigger, this is safe to do
                // without calling `fit` again
                var newMaxChartAreaHeight =
                  height - totalTopBoxesHeight - totalBottomBoxesHeight;
                var newMaxChartAreaWidth =
                  width - totalLeftBoxesWidth - totalRightBoxesWidth;

                if (
                  newMaxChartAreaWidth !== maxChartAreaWidth ||
                  newMaxChartAreaHeight !== maxChartAreaHeight
                ) {
                  helpers.each(leftBoxes, function (box) {
                    box.height = newMaxChartAreaHeight;
                  });

                  helpers.each(rightBoxes, function (box) {
                    box.height = newMaxChartAreaHeight;
                  });

                  helpers.each(topBoxes, function (box) {
                    if (!box.options.fullWidth) {
                      box.width = newMaxChartAreaWidth;
                    }
                  });

                  helpers.each(bottomBoxes, function (box) {
                    if (!box.options.fullWidth) {
                      box.width = newMaxChartAreaWidth;
                    }
                  });

                  maxChartAreaHeight = newMaxChartAreaHeight;
                  maxChartAreaWidth = newMaxChartAreaWidth;
                }

                // Step 7 - Position the boxes
                var left = xPadding;
                var top = yPadding;
                var right = 0;
                var bottom = 0;

                helpers.each(leftBoxes.concat(topBoxes), placeBox);

                // Account for chart width and height
                left += maxChartAreaWidth;
                top += maxChartAreaHeight;

                helpers.each(rightBoxes, placeBox);
                helpers.each(bottomBoxes, placeBox);

                function placeBox(box) {
                  if (box.isHorizontal()) {
                    box.left = box.options.fullWidth
                      ? xPadding
                      : totalLeftBoxesWidth;
                    box.right = box.options.fullWidth
                      ? width - xPadding
                      : totalLeftBoxesWidth + maxChartAreaWidth;
                    box.top = top;
                    box.bottom = top + box.height;

                    // Move to next point
                    top = box.bottom;
                  } else {
                    box.left = left;
                    box.right = left + box.width;
                    box.top = totalTopBoxesHeight;
                    box.bottom = totalTopBoxesHeight + maxChartAreaHeight;

                    // Move to next point
                    left = box.right;
                  }
                }

                // Step 8
                chartInstance.chartArea = {
                  left: totalLeftBoxesWidth,
                  top: totalTopBoxesHeight,
                  right: totalLeftBoxesWidth + maxChartAreaWidth,
                  bottom: totalTopBoxesHeight + maxChartAreaHeight,
                };

                // Step 9
                helpers.each(chartAreaBoxes, function (box) {
                  box.left = chartInstance.chartArea.left;
                  box.top = chartInstance.chartArea.top;
                  box.right = chartInstance.chartArea.right;
                  box.bottom = chartInstance.chartArea.bottom;

                  box.update(maxChartAreaWidth, maxChartAreaHeight);
                });
              },
            };
          };
        },
        {},
      ],
      28: [
        function (require, module, exports) {
          "use strict";

          module.exports = function (Chart) {
            var helpers = Chart.helpers;
            var noop = helpers.noop;

            Chart.defaults.global.legend = {
              display: true,
              position: "top",
              fullWidth: true, // marks that this box should take the full width of the canvas (pushing down other boxes)
              reverse: false,

              // a callback that will handle
              onClick: function (e, legendItem) {
                var index = legendItem.datasetIndex;
                var ci = this.chart;
                var meta = ci.getDatasetMeta(index);

                // See controller.isDatasetVisible comment
                meta.hidden =
                  meta.hidden === null ? !ci.data.datasets[index].hidden : null;

                // We hid a dataset ... rerender the chart
                ci.update();
              },

              labels: {
                boxWidth: 40,
                padding: 10,
                // Generates labels shown in the legend
                // Valid properties to return:
                // text : text to display
                // fillStyle : fill of coloured box
                // strokeStyle: stroke of coloured box
                // hidden : if this legend item refers to a hidden item
                // lineCap : cap style for line
                // lineDash
                // lineDashOffset :
                // lineJoin :
                // lineWidth :
                generateLabels: function (chart) {
                  var data = chart.data;
                  return helpers.isArray(data.datasets)
                    ? data.datasets.map(function (dataset, i) {
                        return {
                          text: dataset.label,
                          fillStyle: !helpers.isArray(dataset.backgroundColor)
                            ? dataset.backgroundColor
                            : dataset.backgroundColor[0],
                          hidden: !chart.isDatasetVisible(i),
                          lineCap: dataset.borderCapStyle,
                          lineDash: dataset.borderDash,
                          lineDashOffset: dataset.borderDashOffset,
                          lineJoin: dataset.borderJoinStyle,
                          lineWidth: dataset.borderWidth,
                          strokeStyle: dataset.borderColor,

                          // Below is extra data used for toggling the datasets
                          datasetIndex: i,
                        };
                      }, this)
                    : [];
                },
              },
            };

            Chart.Legend = Chart.Element.extend({
              initialize: function (config) {
                helpers.extend(this, config);

                // Contains hit boxes for each dataset (in dataset order)
                this.legendHitBoxes = [];

                // Are we in doughnut mode which has a different data type
                this.doughnutMode = false;
              },

              // These methods are ordered by lifecyle. Utilities then follow.
              // Any function defined here is inherited by all legend types.
              // Any function can be extended by the legend type

              beforeUpdate: noop,
              update: function (maxWidth, maxHeight, margins) {
                var me = this;

                // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
                me.beforeUpdate();

                // Absorb the master measurements
                me.maxWidth = maxWidth;
                me.maxHeight = maxHeight;
                me.margins = margins;

                // Dimensions
                me.beforeSetDimensions();
                me.setDimensions();
                me.afterSetDimensions();
                // Labels
                me.beforeBuildLabels();
                me.buildLabels();
                me.afterBuildLabels();

                // Fit
                me.beforeFit();
                me.fit();
                me.afterFit();
                //
                me.afterUpdate();

                return me.minSize;
              },
              afterUpdate: noop,

              //

              beforeSetDimensions: noop,
              setDimensions: function () {
                var me = this;
                // Set the unconstrained dimension before label rotation
                if (me.isHorizontal()) {
                  // Reset position before calculating rotation
                  me.width = me.maxWidth;
                  me.left = 0;
                  me.right = me.width;
                } else {
                  me.height = me.maxHeight;

                  // Reset position before calculating rotation
                  me.top = 0;
                  me.bottom = me.height;
                }

                // Reset padding
                me.paddingLeft = 0;
                me.paddingTop = 0;
                me.paddingRight = 0;
                me.paddingBottom = 0;

                // Reset minSize
                me.minSize = {
                  width: 0,
                  height: 0,
                };
              },
              afterSetDimensions: noop,

              //

              beforeBuildLabels: noop,
              buildLabels: function () {
                var me = this;
                me.legendItems = me.options.labels.generateLabels.call(
                  me,
                  me.chart
                );
                if (me.options.reverse) {
                  me.legendItems.reverse();
                }
              },
              afterBuildLabels: noop,

              //

              beforeFit: noop,
              fit: function () {
                var me = this;
                var opts = me.options;
                var labelOpts = opts.labels;
                var display = opts.display;

                var ctx = me.ctx;

                var globalDefault = Chart.defaults.global,
                  itemOrDefault = helpers.getValueOrDefault,
                  fontSize = itemOrDefault(
                    labelOpts.fontSize,
                    globalDefault.defaultFontSize
                  ),
                  fontStyle = itemOrDefault(
                    labelOpts.fontStyle,
                    globalDefault.defaultFontStyle
                  ),
                  fontFamily = itemOrDefault(
                    labelOpts.fontFamily,
                    globalDefault.defaultFontFamily
                  ),
                  labelFont = helpers.fontString(
                    fontSize,
                    fontStyle,
                    fontFamily
                  );

                // Reset hit boxes
                var hitboxes = (me.legendHitBoxes = []);

                var minSize = me.minSize;
                var isHorizontal = me.isHorizontal();

                if (isHorizontal) {
                  minSize.width = me.maxWidth; // fill all the width
                  minSize.height = display ? 10 : 0;
                } else {
                  minSize.width = display ? 10 : 0;
                  minSize.height = me.maxHeight; // fill all the height
                }

                // Increase sizes here
                if (display) {
                  ctx.font = labelFont;

                  if (isHorizontal) {
                    // Labels

                    // Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one
                    var lineWidths = (me.lineWidths = [0]);
                    var totalHeight = me.legendItems.length
                      ? fontSize + labelOpts.padding
                      : 0;

                    ctx.textAlign = "left";
                    ctx.textBaseline = "top";

                    helpers.each(me.legendItems, function (legendItem, i) {
                      var width =
                        labelOpts.boxWidth +
                        fontSize / 2 +
                        ctx.measureText(legendItem.text).width;
                      if (
                        lineWidths[lineWidths.length - 1] +
                          width +
                          labelOpts.padding >=
                        me.width
                      ) {
                        totalHeight += fontSize + labelOpts.padding;
                        lineWidths[lineWidths.length] = me.left;
                      }

                      // Store the hitbox width and height here. Final position will be updated in `draw`
                      hitboxes[i] = {
                        left: 0,
                        top: 0,
                        width: width,
                        height: fontSize,
                      };

                      lineWidths[lineWidths.length - 1] +=
                        width + labelOpts.padding;
                    });

                    minSize.height += totalHeight;
                  } else {
                    var vPadding = labelOpts.padding;
                    var columnWidths = (me.columnWidths = []);
                    var totalWidth = labelOpts.padding;
                    var currentColWidth = 0;
                    var currentColHeight = 0;
                    var itemHeight = fontSize + vPadding;

                    helpers.each(me.legendItems, function (legendItem, i) {
                      var itemWidth =
                        labelOpts.boxWidth +
                        fontSize / 2 +
                        ctx.measureText(legendItem.text).width;

                      // If too tall, go to new column
                      if (currentColHeight + itemHeight > minSize.height) {
                        totalWidth += currentColWidth + labelOpts.padding;
                        columnWidths.push(currentColWidth); // previous column width

                        currentColWidth = 0;
                        currentColHeight = 0;
                      }

                      // Get max width
                      currentColWidth = Math.max(currentColWidth, itemWidth);
                      currentColHeight += itemHeight;

                      // Store the hitbox width and height here. Final position will be updated in `draw`
                      hitboxes[i] = {
                        left: 0,
                        top: 0,
                        width: itemWidth,
                        height: fontSize,
                      };
                    });

                    totalWidth += currentColWidth;
                    columnWidths.push(currentColWidth);
                    minSize.width += totalWidth;
                  }
                }

                me.width = minSize.width;
                me.height = minSize.height;
              },
              afterFit: noop,

              // Shared Methods
              isHorizontal: function () {
                return (
                  this.options.position === "top" ||
                  this.options.position === "bottom"
                );
              },

              // Actualy draw the legend on the canvas
              draw: function () {
                var me = this;
                var opts = me.options;
                var labelOpts = opts.labels;
                var globalDefault = Chart.defaults.global,
                  lineDefault = globalDefault.elements.line,
                  legendWidth = me.width,
                  legendHeight = me.height,
                  lineWidths = me.lineWidths;

                if (opts.display) {
                  var ctx = me.ctx,
                    cursor,
                    itemOrDefault = helpers.getValueOrDefault,
                    fontColor = itemOrDefault(
                      labelOpts.fontColor,
                      globalDefault.defaultFontColor
                    ),
                    fontSize = itemOrDefault(
                      labelOpts.fontSize,
                      globalDefault.defaultFontSize
                    ),
                    fontStyle = itemOrDefault(
                      labelOpts.fontStyle,
                      globalDefault.defaultFontStyle
                    ),
                    fontFamily = itemOrDefault(
                      labelOpts.fontFamily,
                      globalDefault.defaultFontFamily
                    ),
                    labelFont = helpers.fontString(
                      fontSize,
                      fontStyle,
                      fontFamily
                    );

                  // Canvas setup
                  ctx.textAlign = "left";
                  ctx.textBaseline = "top";
                  ctx.lineWidth = 0.5;
                  ctx.strokeStyle = fontColor; // for strikethrough effect
                  ctx.fillStyle = fontColor; // render in correct colour
                  ctx.font = labelFont;

                  var boxWidth = labelOpts.boxWidth,
                    hitboxes = me.legendHitBoxes;

                  // current position
                  var drawLegendBox = function (x, y, legendItem) {
                    // Set the ctx for the box
                    ctx.save();

                    ctx.fillStyle = itemOrDefault(
                      legendItem.fillStyle,
                      globalDefault.defaultColor
                    );
                    ctx.lineCap = itemOrDefault(
                      legendItem.lineCap,
                      lineDefault.borderCapStyle
                    );
                    ctx.lineDashOffset = itemOrDefault(
                      legendItem.lineDashOffset,
                      lineDefault.borderDashOffset
                    );
                    ctx.lineJoin = itemOrDefault(
                      legendItem.lineJoin,
                      lineDefault.borderJoinStyle
                    );
                    ctx.lineWidth = itemOrDefault(
                      legendItem.lineWidth,
                      lineDefault.borderWidth
                    );
                    ctx.strokeStyle = itemOrDefault(
                      legendItem.strokeStyle,
                      globalDefault.defaultColor
                    );

                    if (ctx.setLineDash) {
                      // IE 9 and 10 do not support line dash
                      ctx.setLineDash(
                        itemOrDefault(
                          legendItem.lineDash,
                          lineDefault.borderDash
                        )
                      );
                    }

                    // Draw the box
                    ctx.strokeRect(x, y, boxWidth, fontSize);
                    ctx.fillRect(x, y, boxWidth, fontSize);

                    ctx.restore();
                  };
                  var fillText = function (x, y, legendItem, textWidth) {
                    ctx.fillText(
                      legendItem.text,
                      boxWidth + fontSize / 2 + x,
                      y
                    );

                    if (legendItem.hidden) {
                      // Strikethrough the text if hidden
                      ctx.beginPath();
                      ctx.lineWidth = 2;
                      ctx.moveTo(boxWidth + fontSize / 2 + x, y + fontSize / 2);
                      ctx.lineTo(
                        boxWidth + fontSize / 2 + x + textWidth,
                        y + fontSize / 2
                      );
                      ctx.stroke();
                    }
                  };

                  // Horizontal
                  var isHorizontal = me.isHorizontal();
                  if (isHorizontal) {
                    cursor = {
                      x: me.left + (legendWidth - lineWidths[0]) / 2,
                      y: me.top + labelOpts.padding,
                      line: 0,
                    };
                  } else {
                    cursor = {
                      x: me.left + labelOpts.padding,
                      y: me.top,
                      line: 0,
                    };
                  }

                  var itemHeight = fontSize + labelOpts.padding;
                  helpers.each(me.legendItems, function (legendItem, i) {
                    var textWidth = ctx.measureText(legendItem.text).width,
                      width = boxWidth + fontSize / 2 + textWidth,
                      x = cursor.x,
                      y = cursor.y;

                    if (isHorizontal) {
                      if (x + width >= legendWidth) {
                        y = cursor.y += fontSize + labelOpts.padding;
                        cursor.line++;
                        x = cursor.x =
                          me.left + (legendWidth - lineWidths[cursor.line]) / 2;
                      }
                    } else {
                      if (y + itemHeight > me.bottom) {
                        x = cursor.x =
                          x + me.columnWidths[cursor.line] + labelOpts.padding;
                        y = cursor.y = me.top;
                        cursor.line++;
                      }
                    }

                    drawLegendBox(x, y, legendItem);

                    hitboxes[i].left = x;
                    hitboxes[i].top = y;

                    // Fill the actual label
                    fillText(x, y, legendItem, textWidth);

                    if (isHorizontal) {
                      cursor.x += width + labelOpts.padding;
                    } else {
                      cursor.y += itemHeight;
                    }
                  });
                }
              },

              // Handle an event
              handleEvent: function (e) {
                var me = this;
                var position = helpers.getRelativePosition(e, me.chart.chart),
                  x = position.x,
                  y = position.y,
                  opts = me.options;

                if (
                  x >= me.left &&
                  x <= me.right &&
                  y >= me.top &&
                  y <= me.bottom
                ) {
                  // See if we are touching one of the dataset boxes
                  var lh = me.legendHitBoxes;
                  for (var i = 0; i < lh.length; ++i) {
                    var hitBox = lh[i];

                    if (
                      x >= hitBox.left &&
                      x <= hitBox.left + hitBox.width &&
                      y >= hitBox.top &&
                      y <= hitBox.top + hitBox.height
                    ) {
                      // Touching an element
                      if (opts.onClick) {
                        opts.onClick.call(me, e, me.legendItems[i]);
                      }
                      break;
                    }
                  }
                }
              },
            });

            // Register the legend plugin
            Chart.plugins.register({
              beforeInit: function (chartInstance) {
                var opts = chartInstance.options;
                var legendOpts = opts.legend;

                if (legendOpts) {
                  chartInstance.legend = new Chart.Legend({
                    ctx: chartInstance.chart.ctx,
                    options: legendOpts,
                    chart: chartInstance,
                  });

                  Chart.layoutService.addBox(
                    chartInstance,
                    chartInstance.legend
                  );
                }
              },
            });
          };
        },
        {},
      ],
      29: [
        function (require, module, exports) {
          "use strict";

          module.exports = function (Chart) {
            var noop = Chart.helpers.noop;

            /**
             * The plugin service singleton
             * @namespace Chart.plugins
             * @since 2.1.0
             */
            Chart.plugins = {
              _plugins: [],

              /**
               * Registers the given plugin(s) if not already registered.
               * @param {Array|Object} plugins plugin instance(s).
               */
              register: function (plugins) {
                var p = this._plugins;
                [].concat(plugins).forEach(function (plugin) {
                  if (p.indexOf(plugin) === -1) {
                    p.push(plugin);
                  }
                });
              },

              /**
               * Unregisters the given plugin(s) only if registered.
               * @param {Array|Object} plugins plugin instance(s).
               */
              unregister: function (plugins) {
                var p = this._plugins;
                [].concat(plugins).forEach(function (plugin) {
                  var idx = p.indexOf(plugin);
                  if (idx !== -1) {
                    p.splice(idx, 1);
                  }
                });
              },

              /**
               * Remove all registered p^lugins.
               * @since 2.1.5
               */
              clear: function () {
                this._plugins = [];
              },

              /**
               * Returns the number of registered plugins?
               * @returns {Number}
               * @since 2.1.5
               */
              count: function () {
                return this._plugins.length;
              },

              /**
               * Returns all registered plugin intances.
               * @returns {Array} array of plugin objects.
               * @since 2.1.5
               */
              getAll: function () {
                return this._plugins;
              },

              /**
               * Calls registered plugins on the specified extension, with the given args. This
               * method immediately returns as soon as a plugin explicitly returns false. The
               * returned value can be used, for instance, to interrupt the current action.
               * @param {String} extension the name of the plugin method to call (e.g. 'beforeUpdate').
               * @param {Array} [args] extra arguments to apply to the extension call.
               * @returns {Boolean} false if any of the plugins return false, else returns true.
               */
              notify: function (extension, args) {
                var plugins = this._plugins;
                var ilen = plugins.length;
                var i, plugin;

                for (i = 0; i < ilen; ++i) {
                  plugin = plugins[i];
                  if (typeof plugin[extension] === "function") {
                    if (plugin[extension].apply(plugin, args || []) === false) {
                      return false;
                    }
                  }
                }

                return true;
              },
            };

            /**
             * Plugin extension methods.
             * @interface Chart.PluginBase
             * @since 2.1.0
             */
            Chart.PluginBase = Chart.Element.extend({
              // Called at start of chart init
              beforeInit: noop,

              // Called at end of chart init
              afterInit: noop,

              // Called at start of update
              beforeUpdate: noop,

              // Called at end of update
              afterUpdate: noop,

              // Called at start of draw
              beforeDraw: noop,

              // Called at end of draw
              afterDraw: noop,

              // Called during destroy
              destroy: noop,
            });

            /**
             * Provided for backward compatibility, use Chart.plugins instead
             * @namespace Chart.pluginService
             * @deprecated since version 2.1.5
             * @todo remove me at version 3
             */
            Chart.pluginService = Chart.plugins;
          };
        },
        {},
      ],
      30: [
        function (require, module, exports) {
          "use strict";

          module.exports = function (Chart) {
            var helpers = Chart.helpers;

            Chart.defaults.scale = {
              display: true,
              position: "left",

              // grid line settings
              gridLines: {
                display: true,
                color: "rgba(0, 0, 0, 0.1)",
                lineWidth: 1,
                drawBorder: true,
                drawOnChartArea: true,
                drawTicks: true,
                tickMarkLength: 10,
                zeroLineWidth: 1,
                zeroLineColor: "rgba(0,0,0,0.25)",
                offsetGridLines: false,
              },

              // scale label
              scaleLabel: {
                // actual label
                labelString: "",

                // display property
                display: false,
              },

              // label settings
              ticks: {
                beginAtZero: false,
                minRotation: 0,
                maxRotation: 50,
                mirror: false,
                padding: 10,
                reverse: false,
                display: true,
                autoSkip: true,
                autoSkipPadding: 0,
                labelOffset: 0,
                // We pass through arrays to be rendered as multiline labels, we convert Others to strings here.
                callback: function (value) {
                  return helpers.isArray(value) ? value : "" + value;
                },
              },
            };

            Chart.Scale = Chart.Element.extend({
              // These methods are ordered by lifecyle. Utilities then follow.
              // Any function defined here is inherited by all scale types.
              // Any function can be extended by the scale type

              beforeUpdate: function () {
                helpers.callCallback(this.options.beforeUpdate, [this]);
              },
              update: function (maxWidth, maxHeight, margins) {
                var me = this;

                // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
                me.beforeUpdate();

                // Absorb the master measurements
                me.maxWidth = maxWidth;
                me.maxHeight = maxHeight;
                me.margins = helpers.extend(
                  {
                    left: 0,
                    right: 0,
                    top: 0,
                    bottom: 0,
                  },
                  margins
                );

                // Dimensions
                me.beforeSetDimensions();
                me.setDimensions();
                me.afterSetDimensions();

                // Data min/max
                me.beforeDataLimits();
                me.determineDataLimits();
                me.afterDataLimits();

                // Ticks
                me.beforeBuildTicks();
                me.buildTicks();
                me.afterBuildTicks();

                me.beforeTickToLabelConversion();
                me.convertTicksToLabels();
                me.afterTickToLabelConversion();

                // Tick Rotation
                me.beforeCalculateTickRotation();
                me.calculateTickRotation();
                me.afterCalculateTickRotation();
                // Fit
                me.beforeFit();
                me.fit();
                me.afterFit();
                //
                me.afterUpdate();

                return me.minSize;
              },
              afterUpdate: function () {
                helpers.callCallback(this.options.afterUpdate, [this]);
              },

              //

              beforeSetDimensions: function () {
                helpers.callCallback(this.options.beforeSetDimensions, [this]);
              },
              setDimensions: function () {
                var me = this;
                // Set the unconstrained dimension before label rotation
                if (me.isHorizontal()) {
                  // Reset position before calculating rotation
                  me.width = me.maxWidth;
                  me.left = 0;
                  me.right = me.width;
                } else {
                  me.height = me.maxHeight;

                  // Reset position before calculating rotation
                  me.top = 0;
                  me.bottom = me.height;
                }

                // Reset padding
                me.paddingLeft = 0;
                me.paddingTop = 0;
                me.paddingRight = 0;
                me.paddingBottom = 0;
              },
              afterSetDimensions: function () {
                helpers.callCallback(this.options.afterSetDimensions, [this]);
              },

              // Data limits
              beforeDataLimits: function () {
                helpers.callCallback(this.options.beforeDataLimits, [this]);
              },
              determineDataLimits: helpers.noop,
              afterDataLimits: function () {
                helpers.callCallback(this.options.afterDataLimits, [this]);
              },

              //
              beforeBuildTicks: function () {
                helpers.callCallback(this.options.beforeBuildTicks, [this]);
              },
              buildTicks: helpers.noop,
              afterBuildTicks: function () {
                helpers.callCallback(this.options.afterBuildTicks, [this]);
              },

              beforeTickToLabelConversion: function () {
                helpers.callCallback(this.options.beforeTickToLabelConversion, [
                  this,
                ]);
              },
              convertTicksToLabels: function () {
                var me = this;
                // Convert ticks to strings
                me.ticks = me.ticks.map(function (numericalTick, index, ticks) {
                  if (me.options.ticks.userCallback) {
                    return me.options.ticks.userCallback(
                      numericalTick,
                      index,
                      ticks
                    );
                  }
                  return me.options.ticks.callback(numericalTick, index, ticks);
                }, me);
              },
              afterTickToLabelConversion: function () {
                helpers.callCallback(this.options.afterTickToLabelConversion, [
                  this,
                ]);
              },

              //

              beforeCalculateTickRotation: function () {
                helpers.callCallback(this.options.beforeCalculateTickRotation, [
                  this,
                ]);
              },
              calculateTickRotation: function () {
                var me = this;
                var context = me.ctx;
                var globalDefaults = Chart.defaults.global;
                var optionTicks = me.options.ticks;

                //Get the width of each grid by calculating the difference
                //between x offsets between 0 and 1.
                var tickFontSize = helpers.getValueOrDefault(
                  optionTicks.fontSize,
                  globalDefaults.defaultFontSize
                );
                var tickFontStyle = helpers.getValueOrDefault(
                  optionTicks.fontStyle,
                  globalDefaults.defaultFontStyle
                );
                var tickFontFamily = helpers.getValueOrDefault(
                  optionTicks.fontFamily,
                  globalDefaults.defaultFontFamily
                );
                var tickLabelFont = helpers.fontString(
                  tickFontSize,
                  tickFontStyle,
                  tickFontFamily
                );
                context.font = tickLabelFont;

                var firstWidth = context.measureText(me.ticks[0]).width;
                var lastWidth = context.measureText(
                  me.ticks[me.ticks.length - 1]
                ).width;
                var firstRotated;

                me.labelRotation = optionTicks.minRotation || 0;
                me.paddingRight = 0;
                me.paddingLeft = 0;

                if (me.options.display) {
                  if (me.isHorizontal()) {
                    me.paddingRight = lastWidth / 2 + 3;
                    me.paddingLeft = firstWidth / 2 + 3;

                    if (!me.longestTextCache) {
                      me.longestTextCache = {};
                    }
                    var originalLabelWidth = helpers.longestText(
                      context,
                      tickLabelFont,
                      me.ticks,
                      me.longestTextCache
                    );
                    var labelWidth = originalLabelWidth;
                    var cosRotation;
                    var sinRotation;

                    // Allow 3 pixels x2 padding either side for label readability
                    // only the index matters for a dataset scale, but we want a consistent interface between scales
                    var tickWidth =
                      me.getPixelForTick(1) - me.getPixelForTick(0) - 6;

                    //Max label rotation can be set or default to 90 - also act as a loop counter
                    while (
                      labelWidth > tickWidth &&
                      me.labelRotation < optionTicks.maxRotation
                    ) {
                      cosRotation = Math.cos(
                        helpers.toRadians(me.labelRotation)
                      );
                      sinRotation = Math.sin(
                        helpers.toRadians(me.labelRotation)
                      );

                      firstRotated = cosRotation * firstWidth;

                      // We're right aligning the text now.
                      if (firstRotated + tickFontSize / 2 > me.yLabelWidth) {
                        me.paddingLeft = firstRotated + tickFontSize / 2;
                      }

                      me.paddingRight = tickFontSize / 2;

                      if (sinRotation * originalLabelWidth > me.maxHeight) {
                        // go back one step
                        me.labelRotation--;
                        break;
                      }

                      me.labelRotation++;
                      labelWidth = cosRotation * originalLabelWidth;
                    }
                  }
                }

                if (me.margins) {
                  me.paddingLeft = Math.max(
                    me.paddingLeft - me.margins.left,
                    0
                  );
                  me.paddingRight = Math.max(
                    me.paddingRight - me.margins.right,
                    0
                  );
                }
              },
              afterCalculateTickRotation: function () {
                helpers.callCallback(this.options.afterCalculateTickRotation, [
                  this,
                ]);
              },

              //

              beforeFit: function () {
                helpers.callCallback(this.options.beforeFit, [this]);
              },
              fit: function () {
                var me = this;
                // Reset
                var minSize = (me.minSize = {
                  width: 0,
                  height: 0,
                });

                var opts = me.options;
                var globalDefaults = Chart.defaults.global;
                var tickOpts = opts.ticks;
                var scaleLabelOpts = opts.scaleLabel;
                var display = opts.display;
                var isHorizontal = me.isHorizontal();

                var tickFontSize = helpers.getValueOrDefault(
                  tickOpts.fontSize,
                  globalDefaults.defaultFontSize
                );
                var tickFontStyle = helpers.getValueOrDefault(
                  tickOpts.fontStyle,
                  globalDefaults.defaultFontStyle
                );
                var tickFontFamily = helpers.getValueOrDefault(
                  tickOpts.fontFamily,
                  globalDefaults.defaultFontFamily
                );
                var tickLabelFont = helpers.fontString(
                  tickFontSize,
                  tickFontStyle,
                  tickFontFamily
                );

                var scaleLabelFontSize = helpers.getValueOrDefault(
                  scaleLabelOpts.fontSize,
                  globalDefaults.defaultFontSize
                );
                var scaleLabelFontStyle = helpers.getValueOrDefault(
                  scaleLabelOpts.fontStyle,
                  globalDefaults.defaultFontStyle
                );
                var scaleLabelFontFamily = helpers.getValueOrDefault(
                  scaleLabelOpts.fontFamily,
                  globalDefaults.defaultFontFamily
                );
                var scaleLabelFont = helpers.fontString(
                  scaleLabelFontSize,
                  scaleLabelFontStyle,
                  scaleLabelFontFamily
                );

                var tickMarkLength = opts.gridLines.tickMarkLength;

                // Width
                if (isHorizontal) {
                  // subtract the margins to line up with the chartArea if we are a full width scale
                  minSize.width = me.isFullWidth()
                    ? me.maxWidth - me.margins.left - me.margins.right
                    : me.maxWidth;
                } else {
                  minSize.width = display ? tickMarkLength : 0;
                }

                // height
                if (isHorizontal) {
                  minSize.height = display ? tickMarkLength : 0;
                } else {
                  minSize.height = me.maxHeight; // fill all the height
                }

                // Are we showing a title for the scale?
                if (scaleLabelOpts.display && display) {
                  if (isHorizontal) {
                    minSize.height += scaleLabelFontSize * 1.5;
                  } else {
                    minSize.width += scaleLabelFontSize * 1.5;
                  }
                }

                if (tickOpts.display && display) {
                  // Don't bother fitting the ticks if we are not showing them
                  if (!me.longestTextCache) {
                    me.longestTextCache = {};
                  }

                  var largestTextWidth = helpers.longestText(
                    me.ctx,
                    tickLabelFont,
                    me.ticks,
                    me.longestTextCache
                  );
                  var tallestLabelHeightInLines = helpers.numberOfLabelLines(
                    me.ticks
                  );
                  var lineSpace = tickFontSize * 0.5;

                  if (isHorizontal) {
                    // A horizontal axis is more constrained by the height.
                    me.longestLabelWidth = largestTextWidth;

                    // TODO - improve this calculation
                    var labelHeight =
                      Math.sin(helpers.toRadians(me.labelRotation)) *
                        me.longestLabelWidth +
                      tickFontSize * tallestLabelHeightInLines +
                      lineSpace * tallestLabelHeightInLines;

                    minSize.height = Math.min(
                      me.maxHeight,
                      minSize.height + labelHeight
                    );
                    me.ctx.font = tickLabelFont;

                    var firstLabelWidth = me.ctx.measureText(me.ticks[0]).width;
                    var lastLabelWidth = me.ctx.measureText(
                      me.ticks[me.ticks.length - 1]
                    ).width;

                    // Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned which means that the right padding is dominated
                    // by the font height
                    var cosRotation = Math.cos(
                      helpers.toRadians(me.labelRotation)
                    );
                    var sinRotation = Math.sin(
                      helpers.toRadians(me.labelRotation)
                    );
                    me.paddingLeft =
                      me.labelRotation !== 0
                        ? cosRotation * firstLabelWidth + 3
                        : firstLabelWidth / 2 + 3; // add 3 px to move away from canvas edges
                    me.paddingRight =
                      me.labelRotation !== 0
                        ? sinRotation * (tickFontSize / 2) + 3
                        : lastLabelWidth / 2 + 3; // when rotated
                  } else {
                    // A vertical axis is more constrained by the width. Labels are the dominant factor here, so get that length first
                    var maxLabelWidth = me.maxWidth - minSize.width;

                    // Account for padding
                    var mirror = tickOpts.mirror;
                    if (!mirror) {
                      largestTextWidth += me.options.ticks.padding;
                    } else {
                      // If mirrored text is on the inside so don't expand
                      largestTextWidth = 0;
                    }

                    if (largestTextWidth < maxLabelWidth) {
                      // We don't need all the room
                      minSize.width += largestTextWidth;
                    } else {
                      // Expand to max size
                      minSize.width = me.maxWidth;
                    }

                    me.paddingTop = tickFontSize / 2;
                    me.paddingBottom = tickFontSize / 2;
                  }
                }

                if (me.margins) {
                  me.paddingLeft = Math.max(
                    me.paddingLeft - me.margins.left,
                    0
                  );
                  me.paddingTop = Math.max(me.paddingTop - me.margins.top, 0);
                  me.paddingRight = Math.max(
                    me.paddingRight - me.margins.right,
                    0
                  );
                  me.paddingBottom = Math.max(
                    me.paddingBottom - me.margins.bottom,
                    0
                  );
                }

                me.width = minSize.width;
                me.height = minSize.height;
              },
              afterFit: function () {
                helpers.callCallback(this.options.afterFit, [this]);
              },

              // Shared Methods
              isHorizontal: function () {
                return (
                  this.options.position === "top" ||
                  this.options.position === "bottom"
                );
              },
              isFullWidth: function () {
                return this.options.fullWidth;
              },

              // Get the correct value. NaN bad inputs, If the value type is object get the x or y based on whether we are horizontal or not
              getRightValue: function getRightValue(rawValue) {
                // Null and undefined values first
                if (rawValue === null || typeof rawValue === "undefined") {
                  return NaN;
                }
                // isNaN(object) returns true, so make sure NaN is checking for a number
                if (typeof rawValue === "number" && isNaN(rawValue)) {
                  return NaN;
                }
                // If it is in fact an object, dive in one more level
                if (typeof rawValue === "object") {
                  if (rawValue instanceof Date || rawValue.isValid) {
                    return rawValue;
                  } else {
                    return getRightValue(
                      this.isHorizontal() ? rawValue.x : rawValue.y
                    );
                  }
                }

                // Value is good, return it
                return rawValue;
              },

              // Used to get the value to display in the tooltip for the data at the given index
              // function getLabelForIndex(index, datasetIndex)
              getLabelForIndex: helpers.noop,

              // Used to get data value locations.  Value can either be an index or a numerical value
              getPixelForValue: helpers.noop,

              // Used to get the data value from a given pixel. This is the inverse of getPixelForValue
              getValueForPixel: helpers.noop,

              // Used for tick location, should
              getPixelForTick: function (index, includeOffset) {
                var me = this;
                if (me.isHorizontal()) {
                  var innerWidth =
                    me.width - (me.paddingLeft + me.paddingRight);
                  var tickWidth =
                    innerWidth /
                    Math.max(
                      me.ticks.length -
                        (me.options.gridLines.offsetGridLines ? 0 : 1),
                      1
                    );
                  var pixel = tickWidth * index + me.paddingLeft;

                  if (includeOffset) {
                    pixel += tickWidth / 2;
                  }

                  var finalVal = me.left + Math.round(pixel);
                  finalVal += me.isFullWidth() ? me.margins.left : 0;
                  return finalVal;
                } else {
                  var innerHeight =
                    me.height - (me.paddingTop + me.paddingBottom);
                  return me.top + index * (innerHeight / (me.ticks.length - 1));
                }
              },

              // Utility for getting the pixel location of a percentage of scale
              getPixelForDecimal: function (decimal /*, includeOffset*/) {
                var me = this;
                if (me.isHorizontal()) {
                  var innerWidth =
                    me.width - (me.paddingLeft + me.paddingRight);
                  var valueOffset = innerWidth * decimal + me.paddingLeft;

                  var finalVal = me.left + Math.round(valueOffset);
                  finalVal += me.isFullWidth() ? me.margins.left : 0;
                  return finalVal;
                } else {
                  return me.top + decimal * me.height;
                }
              },

              getBasePixel: function () {
                var me = this;
                var min = me.min;
                var max = me.max;

                return me.getPixelForValue(
                  me.beginAtZero
                    ? 0
                    : min < 0 && max < 0
                    ? max
                    : min > 0 && max > 0
                    ? min
                    : 0
                );
              },

              // Actualy draw the scale on the canvas
              // @param {rectangle} chartArea : the area of the chart to draw full grid lines on
              draw: function (chartArea) {
                var me = this;
                var options = me.options;
                if (!options.display) {
                  return;
                }

                var context = me.ctx;
                var globalDefaults = Chart.defaults.global;
                var optionTicks = options.ticks;
                var gridLines = options.gridLines;
                var scaleLabel = options.scaleLabel;

                var isRotated = me.labelRotation !== 0;
                var skipRatio;
                var useAutoskipper = optionTicks.autoSkip;
                var isHorizontal = me.isHorizontal();

                // figure out the maximum number of gridlines to show
                var maxTicks;
                if (optionTicks.maxTicksLimit) {
                  maxTicks = optionTicks.maxTicksLimit;
                }

                var tickFontColor = helpers.getValueOrDefault(
                  optionTicks.fontColor,
                  globalDefaults.defaultFontColor
                );
                var tickFontSize = helpers.getValueOrDefault(
                  optionTicks.fontSize,
                  globalDefaults.defaultFontSize
                );
                var tickFontStyle = helpers.getValueOrDefault(
                  optionTicks.fontStyle,
                  globalDefaults.defaultFontStyle
                );
                var tickFontFamily = helpers.getValueOrDefault(
                  optionTicks.fontFamily,
                  globalDefaults.defaultFontFamily
                );
                var tickLabelFont = helpers.fontString(
                  tickFontSize,
                  tickFontStyle,
                  tickFontFamily
                );
                var tl = gridLines.tickMarkLength;

                var scaleLabelFontColor = helpers.getValueOrDefault(
                  scaleLabel.fontColor,
                  globalDefaults.defaultFontColor
                );
                var scaleLabelFontSize = helpers.getValueOrDefault(
                  scaleLabel.fontSize,
                  globalDefaults.defaultFontSize
                );
                var scaleLabelFontStyle = helpers.getValueOrDefault(
                  scaleLabel.fontStyle,
                  globalDefaults.defaultFontStyle
                );
                var scaleLabelFontFamily = helpers.getValueOrDefault(
                  scaleLabel.fontFamily,
                  globalDefaults.defaultFontFamily
                );
                var scaleLabelFont = helpers.fontString(
                  scaleLabelFontSize,
                  scaleLabelFontStyle,
                  scaleLabelFontFamily
                );

                var labelRotationRadians = helpers.toRadians(me.labelRotation);
                var cosRotation = Math.cos(labelRotationRadians);
                var sinRotation = Math.sin(labelRotationRadians);
                var longestRotatedLabel = me.longestLabelWidth * cosRotation;
                var rotatedLabelHeight = tickFontSize * sinRotation;

                // Make sure we draw text in the correct color and font
                context.fillStyle = tickFontColor;

                var itemsToDraw = [];

                if (isHorizontal) {
                  skipRatio = false;

                  // Only calculate the skip ratio with the half width of longestRotateLabel if we got an actual rotation
                  // See #2584
                  if (isRotated) {
                    longestRotatedLabel /= 2;
                  }

                  if (
                    (longestRotatedLabel + optionTicks.autoSkipPadding) *
                      me.ticks.length >
                    me.width - (me.paddingLeft + me.paddingRight)
                  ) {
                    skipRatio =
                      1 +
                      Math.floor(
                        ((longestRotatedLabel + optionTicks.autoSkipPadding) *
                          me.ticks.length) /
                          (me.width - (me.paddingLeft + me.paddingRight))
                      );
                  }

                  // if they defined a max number of optionTicks,
                  // increase skipRatio until that number is met
                  if (maxTicks && me.ticks.length > maxTicks) {
                    while (
                      !skipRatio ||
                      me.ticks.length / (skipRatio || 1) > maxTicks
                    ) {
                      if (!skipRatio) {
                        skipRatio = 1;
                      }
                      skipRatio += 1;
                    }
                  }

                  if (!useAutoskipper) {
                    skipRatio = false;
                  }
                }

                var xTickStart =
                  options.position === "right" ? me.left : me.right - tl;
                var xTickEnd =
                  options.position === "right" ? me.left + tl : me.right;
                var yTickStart =
                  options.position === "bottom" ? me.top : me.bottom - tl;
                var yTickEnd =
                  options.position === "bottom" ? me.top + tl : me.bottom;

                helpers.each(me.ticks, function (label, index) {
                  // If the callback returned a null or undefined value, do not draw this line
                  if (label === undefined || label === null) {
                    return;
                  }

                  var isLastTick = me.ticks.length === index + 1;

                  // Since we always show the last tick,we need may need to hide the last shown one before
                  var shouldSkip =
                    (skipRatio > 1 && index % skipRatio > 0) ||
                    (index % skipRatio === 0 &&
                      index + skipRatio >= me.ticks.length);
                  if (
                    (shouldSkip && !isLastTick) ||
                    label === undefined ||
                    label === null
                  ) {
                    return;
                  }

                  var lineWidth, lineColor;
                  if (
                    index ===
                    (typeof me.zeroLineIndex !== "undefined"
                      ? me.zeroLineIndex
                      : 0)
                  ) {
                    // Draw the first index specially
                    lineWidth = gridLines.zeroLineWidth;
                    lineColor = gridLines.zeroLineColor;
                  } else {
                    lineWidth = helpers.getValueAtIndexOrDefault(
                      gridLines.lineWidth,
                      index
                    );
                    lineColor = helpers.getValueAtIndexOrDefault(
                      gridLines.color,
                      index
                    );
                  }

                  // Common properties
                  var tx1, ty1, tx2, ty2, x1, y1, x2, y2, labelX, labelY;
                  var textAlign,
                    textBaseline = "middle";

                  if (isHorizontal) {
                    if (!isRotated) {
                      textBaseline =
                        options.position === "top" ? "bottom" : "top";
                    }

                    textAlign = isRotated ? "right" : "center";

                    var xLineValue =
                      me.getPixelForTick(index) + helpers.aliasPixel(lineWidth); // xvalues for grid lines
                    labelX =
                      me.getPixelForTick(index, gridLines.offsetGridLines) +
                      optionTicks.labelOffset; // x values for optionTicks (need to consider offsetLabel option)
                    labelY = isRotated
                      ? me.top + 12
                      : options.position === "top"
                      ? me.bottom - tl
                      : me.top + tl;

                    tx1 = tx2 = x1 = x2 = xLineValue;
                    ty1 = yTickStart;
                    ty2 = yTickEnd;
                    y1 = chartArea.top;
                    y2 = chartArea.bottom;
                  } else {
                    if (options.position === "left") {
                      if (optionTicks.mirror) {
                        labelX = me.right + optionTicks.padding;
                        textAlign = "left";
                      } else {
                        labelX = me.right - optionTicks.padding;
                        textAlign = "right";
                      }
                    } else {
                      // right side
                      if (optionTicks.mirror) {
                        labelX = me.left - optionTicks.padding;
                        textAlign = "right";
                      } else {
                        labelX = me.left + optionTicks.padding;
                        textAlign = "left";
                      }
                    }

                    var yLineValue = me.getPixelForTick(index); // xvalues for grid lines
                    yLineValue += helpers.aliasPixel(lineWidth);
                    labelY = me.getPixelForTick(
                      index,
                      gridLines.offsetGridLines
                    );

                    tx1 = xTickStart;
                    tx2 = xTickEnd;
                    x1 = chartArea.left;
                    x2 = chartArea.right;
                    ty1 = ty2 = y1 = y2 = yLineValue;
                  }

                  itemsToDraw.push({
                    tx1: tx1,
                    ty1: ty1,
                    tx2: tx2,
                    ty2: ty2,
                    x1: x1,
                    y1: y1,
                    x2: x2,
                    y2: y2,
                    labelX: labelX,
                    labelY: labelY,
                    glWidth: lineWidth,
                    glColor: lineColor,
                    rotation: -1 * labelRotationRadians,
                    label: label,
                    textBaseline: textBaseline,
                    textAlign: textAlign,
                  });
                });

                // Draw all of the tick labels, tick marks, and grid lines at the correct places
                helpers.each(itemsToDraw, function (itemToDraw) {
                  if (gridLines.display) {
                    context.lineWidth = itemToDraw.glWidth;
                    context.strokeStyle = itemToDraw.glColor;

                    context.beginPath();

                    if (gridLines.drawTicks) {
                      context.moveTo(itemToDraw.tx1, itemToDraw.ty1);
                      context.lineTo(itemToDraw.tx2, itemToDraw.ty2);
                    }

                    if (gridLines.drawOnChartArea) {
                      context.moveTo(itemToDraw.x1, itemToDraw.y1);
                      context.lineTo(itemToDraw.x2, itemToDraw.y2);
                    }

                    context.stroke();
                  }

                  if (optionTicks.display) {
                    context.save();
                    context.translate(itemToDraw.labelX, itemToDraw.labelY);
                    context.rotate(itemToDraw.rotation);
                    context.font = tickLabelFont;
                    context.textBaseline = itemToDraw.textBaseline;
                    context.textAlign = itemToDraw.textAlign;

                    var label = itemToDraw.label;
                    if (helpers.isArray(label)) {
                      for (var i = 0, y = 0; i < label.length; ++i) {
                        // We just make sure the multiline element is a string here..
                        context.fillText("" + label[i], 0, y);
                        // apply same lineSpacing as calculated @ L#320
                        y += tickFontSize * 1.5;
                      }
                    } else {
                      context.fillText(label, 0, 0);
                    }
                    context.restore();
                  }
                });

                if (scaleLabel.display) {
                  // Draw the scale label
                  var scaleLabelX;
                  var scaleLabelY;
                  var rotation = 0;

                  if (isHorizontal) {
                    scaleLabelX = me.left + (me.right - me.left) / 2; // midpoint of the width
                    scaleLabelY =
                      options.position === "bottom"
                        ? me.bottom - scaleLabelFontSize / 2
                        : me.top + scaleLabelFontSize / 2;
                  } else {
                    var isLeft = options.position === "left";
                    scaleLabelX = isLeft
                      ? me.left + scaleLabelFontSize / 2
                      : me.right - scaleLabelFontSize / 2;
                    scaleLabelY = me.top + (me.bottom - me.top) / 2;
                    rotation = isLeft ? -0.5 * Math.PI : 0.5 * Math.PI;
                  }

                  context.save();
                  context.translate(scaleLabelX, scaleLabelY);
                  context.rotate(rotation);
                  context.textAlign = "center";
                  context.textBaseline = "middle";
                  context.fillStyle = scaleLabelFontColor; // render in correct colour
                  context.font = scaleLabelFont;
                  context.fillText(scaleLabel.labelString, 0, 0);
                  context.restore();
                }

                if (gridLines.drawBorder) {
                  // Draw the line at the edge of the axis
                  context.lineWidth = helpers.getValueAtIndexOrDefault(
                    gridLines.lineWidth,
                    0
                  );
                  context.strokeStyle = helpers.getValueAtIndexOrDefault(
                    gridLines.color,
                    0
                  );
                  var x1 = me.left,
                    x2 = me.right,
                    y1 = me.top,
                    y2 = me.bottom;

                  var aliasPixel = helpers.aliasPixel(context.lineWidth);
                  if (isHorizontal) {
                    y1 = y2 = options.position === "top" ? me.bottom : me.top;
                    y1 += aliasPixel;
                    y2 += aliasPixel;
                  } else {
                    x1 = x2 = options.position === "left" ? me.right : me.left;
                    x1 += aliasPixel;
                    x2 += aliasPixel;
                  }

                  context.beginPath();
                  context.moveTo(x1, y1);
                  context.lineTo(x2, y2);
                  context.stroke();
                }
              },
            });
          };
        },
        {},
      ],
      31: [
        function (require, module, exports) {
          "use strict";

          module.exports = function (Chart) {
            var helpers = Chart.helpers;

            Chart.scaleService = {
              // Scale registration object. Extensions can register new scale types (such as log or DB scales) and then
              // use the new chart options to grab the correct scale
              constructors: {},
              // Use a registration function so that we can move to an ES6 map when we no longer need to support
              // old browsers

              // Scale config defaults
              defaults: {},
              registerScaleType: function (type, scaleConstructor, defaults) {
                this.constructors[type] = scaleConstructor;
                this.defaults[type] = helpers.clone(defaults);
              },
              getScaleConstructor: function (type) {
                return this.constructors.hasOwnProperty(type)
                  ? this.constructors[type]
                  : undefined;
              },
              getScaleDefaults: function (type) {
                // Return the scale defaults merged with the global settings so that we always use the latest ones
                return this.defaults.hasOwnProperty(type)
                  ? helpers.scaleMerge(
                      Chart.defaults.scale,
                      this.defaults[type]
                    )
                  : {};
              },
              updateScaleDefaults: function (type, additions) {
                var defaults = this.defaults;
                if (defaults.hasOwnProperty(type)) {
                  defaults[type] = helpers.extend(defaults[type], additions);
                }
              },
              addScalesToLayout: function (chartInstance) {
                // Adds each scale to the chart.boxes array to be sized accordingly
                helpers.each(chartInstance.scales, function (scale) {
                  Chart.layoutService.addBox(chartInstance, scale);
                });
              },
            };
          };
        },
        {},
      ],
      32: [
        function (require, module, exports) {
          "use strict";

          module.exports = function (Chart) {
            var helpers = Chart.helpers;

            Chart.defaults.global.title = {
              display: false,
              position: "top",
              fullWidth: true, // marks that this box should take the full width of the canvas (pushing down other boxes)

              fontStyle: "bold",
              padding: 10,

              // actual title
              text: "",
            };

            var noop = helpers.noop;
            Chart.Title = Chart.Element.extend({
              initialize: function (config) {
                var me = this;
                helpers.extend(me, config);
                me.options = helpers.configMerge(
                  Chart.defaults.global.title,
                  config.options
                );

                // Contains hit boxes for each dataset (in dataset order)
                me.legendHitBoxes = [];
              },

              // These methods are ordered by lifecyle. Utilities then follow.

              beforeUpdate: function () {
                var chartOpts = this.chart.options;
                if (chartOpts && chartOpts.title) {
                  this.options = helpers.configMerge(
                    Chart.defaults.global.title,
                    chartOpts.title
                  );
                }
              },
              update: function (maxWidth, maxHeight, margins) {
                var me = this;

                // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
                me.beforeUpdate();

                // Absorb the master measurements
                me.maxWidth = maxWidth;
                me.maxHeight = maxHeight;
                me.margins = margins;

                // Dimensions
                me.beforeSetDimensions();
                me.setDimensions();
                me.afterSetDimensions();
                // Labels
                me.beforeBuildLabels();
                me.buildLabels();
                me.afterBuildLabels();

                // Fit
                me.beforeFit();
                me.fit();
                me.afterFit();
                //
                me.afterUpdate();

                return me.minSize;
              },
              afterUpdate: noop,

              //

              beforeSetDimensions: noop,
              setDimensions: function () {
                var me = this;
                // Set the unconstrained dimension before label rotation
                if (me.isHorizontal()) {
                  // Reset position before calculating rotation
                  me.width = me.maxWidth;
                  me.left = 0;
                  me.right = me.width;
                } else {
                  me.height = me.maxHeight;

                  // Reset position before calculating rotation
                  me.top = 0;
                  me.bottom = me.height;
                }

                // Reset padding
                me.paddingLeft = 0;
                me.paddingTop = 0;
                me.paddingRight = 0;
                me.paddingBottom = 0;

                // Reset minSize
                me.minSize = {
                  width: 0,
                  height: 0,
                };
              },
              afterSetDimensions: noop,

              //

              beforeBuildLabels: noop,
              buildLabels: noop,
              afterBuildLabels: noop,

              //

              beforeFit: noop,
              fit: function () {
                var me = this,
                  ctx = me.ctx,
                  valueOrDefault = helpers.getValueOrDefault,
                  opts = me.options,
                  globalDefaults = Chart.defaults.global,
                  display = opts.display,
                  fontSize = valueOrDefault(
                    opts.fontSize,
                    globalDefaults.defaultFontSize
                  ),
                  minSize = me.minSize;

                if (me.isHorizontal()) {
                  minSize.width = me.maxWidth; // fill all the width
                  minSize.height = display ? fontSize + opts.padding * 2 : 0;
                } else {
                  minSize.width = display ? fontSize + opts.padding * 2 : 0;
                  minSize.height = me.maxHeight; // fill all the height
                }

                me.width = minSize.width;
                me.height = minSize.height;
              },
              afterFit: noop,

              // Shared Methods
              isHorizontal: function () {
                var pos = this.options.position;
                return pos === "top" || pos === "bottom";
              },

              // Actualy draw the title block on the canvas
              draw: function () {
                var me = this,
                  ctx = me.ctx,
                  valueOrDefault = helpers.getValueOrDefault,
                  opts = me.options,
                  globalDefaults = Chart.defaults.global;

                if (opts.display) {
                  var fontSize = valueOrDefault(
                      opts.fontSize,
                      globalDefaults.defaultFontSize
                    ),
                    fontStyle = valueOrDefault(
                      opts.fontStyle,
                      globalDefaults.defaultFontStyle
                    ),
                    fontFamily = valueOrDefault(
                      opts.fontFamily,
                      globalDefaults.defaultFontFamily
                    ),
                    titleFont = helpers.fontString(
                      fontSize,
                      fontStyle,
                      fontFamily
                    ),
                    rotation = 0,
                    titleX,
                    titleY,
                    top = me.top,
                    left = me.left,
                    bottom = me.bottom,
                    right = me.right;

                  ctx.fillStyle = valueOrDefault(
                    opts.fontColor,
                    globalDefaults.defaultFontColor
                  ); // render in correct colour
                  ctx.font = titleFont;

                  // Horizontal
                  if (me.isHorizontal()) {
                    titleX = left + (right - left) / 2; // midpoint of the width
                    titleY = top + (bottom - top) / 2; // midpoint of the height
                  } else {
                    titleX =
                      opts.position === "left"
                        ? left + fontSize / 2
                        : right - fontSize / 2;
                    titleY = top + (bottom - top) / 2;
                    rotation =
                      Math.PI * (opts.position === "left" ? -0.5 : 0.5);
                  }

                  ctx.save();
                  ctx.translate(titleX, titleY);
                  ctx.rotate(rotation);
                  ctx.textAlign = "center";
                  ctx.textBaseline = "middle";
                  ctx.fillText(opts.text, 0, 0);
                  ctx.restore();
                }
              },
            });

            // Register the title plugin
            Chart.plugins.register({
              beforeInit: function (chartInstance) {
                var opts = chartInstance.options;
                var titleOpts = opts.title;

                if (titleOpts) {
                  chartInstance.titleBlock = new Chart.Title({
                    ctx: chartInstance.chart.ctx,
                    options: titleOpts,
                    chart: chartInstance,
                  });

                  Chart.layoutService.addBox(
                    chartInstance,
                    chartInstance.titleBlock
                  );
                }
              },
            });
          };
        },
        {},
      ],
      33: [
        function (require, module, exports) {
          "use strict";

          module.exports = function (Chart) {
            var helpers = Chart.helpers;

            Chart.defaults.global.tooltips = {
              enabled: true,
              custom: null,
              mode: "single",
              backgroundColor: "rgba(0,0,0,0.8)",
              titleFontStyle: "bold",
              titleSpacing: 2,
              titleMarginBottom: 6,
              titleFontColor: "#fff",
              titleAlign: "left",
              bodySpacing: 2,
              bodyFontColor: "#fff",
              bodyAlign: "left",
              footerFontStyle: "bold",
              footerSpacing: 2,
              footerMarginTop: 6,
              footerFontColor: "#fff",
              footerAlign: "left",
              yPadding: 6,
              xPadding: 6,
              yAlign: "center",
              xAlign: "center",
              caretSize: 5,
              cornerRadius: 6,
              multiKeyBackground: "#fff",
              callbacks: {
                // Args are: (tooltipItems, data)
                beforeTitle: helpers.noop,
                title: function (tooltipItems, data) {
                  // Pick first xLabel for now
                  var title = "";
                  var labels = data.labels;
                  var labelCount = labels ? labels.length : 0;

                  if (tooltipItems.length > 0) {
                    var item = tooltipItems[0];

                    if (item.xLabel) {
                      title = item.xLabel;
                    } else if (labelCount > 0 && item.index < labelCount) {
                      title = labels[item.index];
                    }
                  }

                  return title;
                },
                afterTitle: helpers.noop,

                // Args are: (tooltipItems, data)
                beforeBody: helpers.noop,

                // Args are: (tooltipItem, data)
                beforeLabel: helpers.noop,
                label: function (tooltipItem, data) {
                  var datasetLabel =
                    data.datasets[tooltipItem.datasetIndex].label || "";
                  return datasetLabel + ": " + tooltipItem.yLabel;
                },
                labelColor: function (tooltipItem, chartInstance) {
                  var meta = chartInstance.getDatasetMeta(
                    tooltipItem.datasetIndex
                  );
                  var activeElement = meta.data[tooltipItem.index];
                  var view = activeElement._view;
                  return {
                    borderColor: view.borderColor,
                    backgroundColor: view.backgroundColor,
                  };
                },
                afterLabel: helpers.noop,

                // Args are: (tooltipItems, data)
                afterBody: helpers.noop,

                // Args are: (tooltipItems, data)
                beforeFooter: helpers.noop,
                footer: helpers.noop,
                afterFooter: helpers.noop,
              },
            };

            // Helper to push or concat based on if the 2nd parameter is an array or not
            function pushOrConcat(base, toPush) {
              if (toPush) {
                if (helpers.isArray(toPush)) {
                  //base = base.concat(toPush);
                  Array.prototype.push.apply(base, toPush);
                } else {
                  base.push(toPush);
                }
              }

              return base;
            }

            function getAveragePosition(elements) {
              if (!elements.length) {
                return false;
              }

              var i, len;
              var xPositions = [];
              var yPositions = [];

              for (i = 0, len = elements.length; i < len; ++i) {
                var el = elements[i];
                if (el && el.hasValue()) {
                  var pos = el.tooltipPosition();
                  xPositions.push(pos.x);
                  yPositions.push(pos.y);
                }
              }

              var x = 0,
                y = 0;
              for (i = 0, len - xPositions.length; i < len; ++i) {
                x += xPositions[i];
                y += yPositions[i];
              }

              return {
                x: Math.round(x / xPositions.length),
                y: Math.round(y / xPositions.length),
              };
            }

            // Private helper to create a tooltip iteam model
            // @param element : the chart element (point, arc, bar) to create the tooltip item for
            // @return : new tooltip item
            function createTooltipItem(element) {
              var xScale = element._xScale;
              var yScale = element._yScale || element._scale; // handle radar || polarArea charts
              var index = element._index,
                datasetIndex = element._datasetIndex;

              return {
                xLabel: xScale
                  ? xScale.getLabelForIndex(index, datasetIndex)
                  : "",
                yLabel: yScale
                  ? yScale.getLabelForIndex(index, datasetIndex)
                  : "",
                index: index,
                datasetIndex: datasetIndex,
              };
            }

            Chart.Tooltip = Chart.Element.extend({
              initialize: function () {
                var me = this;
                var globalDefaults = Chart.defaults.global;
                var tooltipOpts = me._options;
                var getValueOrDefault = helpers.getValueOrDefault;

                helpers.extend(me, {
                  _model: {
                    // Positioning
                    xPadding: tooltipOpts.xPadding,
                    yPadding: tooltipOpts.yPadding,
                    xAlign: tooltipOpts.yAlign,
                    yAlign: tooltipOpts.xAlign,

                    // Body
                    bodyFontColor: tooltipOpts.bodyFontColor,
                    _bodyFontFamily: getValueOrDefault(
                      tooltipOpts.bodyFontFamily,
                      globalDefaults.defaultFontFamily
                    ),
                    _bodyFontStyle: getValueOrDefault(
                      tooltipOpts.bodyFontStyle,
                      globalDefaults.defaultFontStyle
                    ),
                    _bodyAlign: tooltipOpts.bodyAlign,
                    bodyFontSize: getValueOrDefault(
                      tooltipOpts.bodyFontSize,
                      globalDefaults.defaultFontSize
                    ),
                    bodySpacing: tooltipOpts.bodySpacing,

                    // Title
                    titleFontColor: tooltipOpts.titleFontColor,
                    _titleFontFamily: getValueOrDefault(
                      tooltipOpts.titleFontFamily,
                      globalDefaults.defaultFontFamily
                    ),
                    _titleFontStyle: getValueOrDefault(
                      tooltipOpts.titleFontStyle,
                      globalDefaults.defaultFontStyle
                    ),
                    titleFontSize: getValueOrDefault(
                      tooltipOpts.titleFontSize,
                      globalDefaults.defaultFontSize
                    ),
                    _titleAlign: tooltipOpts.titleAlign,
                    titleSpacing: tooltipOpts.titleSpacing,
                    titleMarginBottom: tooltipOpts.titleMarginBottom,

                    // Footer
                    footerFontColor: tooltipOpts.footerFontColor,
                    _footerFontFamily: getValueOrDefault(
                      tooltipOpts.footerFontFamily,
                      globalDefaults.defaultFontFamily
                    ),
                    _footerFontStyle: getValueOrDefault(
                      tooltipOpts.footerFontStyle,
                      globalDefaults.defaultFontStyle
                    ),
                    footerFontSize: getValueOrDefault(
                      tooltipOpts.footerFontSize,
                      globalDefaults.defaultFontSize
                    ),
                    _footerAlign: tooltipOpts.footerAlign,
                    footerSpacing: tooltipOpts.footerSpacing,
                    footerMarginTop: tooltipOpts.footerMarginTop,

                    // Appearance
                    caretSize: tooltipOpts.caretSize,
                    cornerRadius: tooltipOpts.cornerRadius,
                    backgroundColor: tooltipOpts.backgroundColor,
                    opacity: 0,
                    legendColorBackground: tooltipOpts.multiKeyBackground,
                  },
                });
              },

              // Get the title
              // Args are: (tooltipItem, data)
              getTitle: function () {
                var me = this;
                var opts = me._options;
                var callbacks = opts.callbacks;

                var beforeTitle = callbacks.beforeTitle.apply(me, arguments),
                  title = callbacks.title.apply(me, arguments),
                  afterTitle = callbacks.afterTitle.apply(me, arguments);

                var lines = [];
                lines = pushOrConcat(lines, beforeTitle);
                lines = pushOrConcat(lines, title);
                lines = pushOrConcat(lines, afterTitle);

                return lines;
              },

              // Args are: (tooltipItem, data)
              getBeforeBody: function () {
                var lines = this._options.callbacks.beforeBody.apply(
                  this,
                  arguments
                );
                return helpers.isArray(lines)
                  ? lines
                  : lines !== undefined
                  ? [lines]
                  : [];
              },

              // Args are: (tooltipItem, data)
              getBody: function (tooltipItems, data) {
                var me = this;
                var callbacks = me._options.callbacks;
                var bodyItems = [];

                helpers.each(tooltipItems, function (tooltipItem) {
                  var bodyItem = {
                    before: [],
                    lines: [],
                    after: [],
                  };
                  pushOrConcat(
                    bodyItem.before,
                    callbacks.beforeLabel.call(me, tooltipItem, data)
                  );
                  pushOrConcat(
                    bodyItem.lines,
                    callbacks.label.call(me, tooltipItem, data)
                  );
                  pushOrConcat(
                    bodyItem.after,
                    callbacks.afterLabel.call(me, tooltipItem, data)
                  );

                  bodyItems.push(bodyItem);
                });

                return bodyItems;
              },

              // Args are: (tooltipItem, data)
              getAfterBody: function () {
                var lines = this._options.callbacks.afterBody.apply(
                  this,
                  arguments
                );
                return helpers.isArray(lines)
                  ? lines
                  : lines !== undefined
                  ? [lines]
                  : [];
              },

              // Get the footer and beforeFooter and afterFooter lines
              // Args are: (tooltipItem, data)
              getFooter: function () {
                var me = this;
                var callbacks = me._options.callbacks;

                var beforeFooter = callbacks.beforeFooter.apply(me, arguments);
                var footer = callbacks.footer.apply(me, arguments);
                var afterFooter = callbacks.afterFooter.apply(me, arguments);

                var lines = [];
                lines = pushOrConcat(lines, beforeFooter);
                lines = pushOrConcat(lines, footer);
                lines = pushOrConcat(lines, afterFooter);

                return lines;
              },

              update: function (changed) {
                var me = this;
                var opts = me._options;
                var model = me._model;
                var active = me._active;

                var data = me._data;
                var chartInstance = me._chartInstance;

                var i, len;

                if (active.length) {
                  model.opacity = 1;

                  var labelColors = [],
                    tooltipPosition = getAveragePosition(active);

                  var tooltipItems = [];
                  for (i = 0, len = active.length; i < len; ++i) {
                    tooltipItems.push(createTooltipItem(active[i]));
                  }

                  // If the user provided a sorting function, use it to modify the tooltip items
                  if (opts.itemSort) {
                    tooltipItems = tooltipItems.sort(opts.itemSort);
                  }

                  // If there is more than one item, show color items
                  if (active.length > 1) {
                    helpers.each(tooltipItems, function (tooltipItem) {
                      labelColors.push(
                        opts.callbacks.labelColor.call(
                          me,
                          tooltipItem,
                          chartInstance
                        )
                      );
                    });
                  }

                  // Build the Text Lines
                  helpers.extend(model, {
                    title: me.getTitle(tooltipItems, data),
                    beforeBody: me.getBeforeBody(tooltipItems, data),
                    body: me.getBody(tooltipItems, data),
                    afterBody: me.getAfterBody(tooltipItems, data),
                    footer: me.getFooter(tooltipItems, data),
                    x: Math.round(tooltipPosition.x),
                    y: Math.round(tooltipPosition.y),
                    caretPadding: helpers.getValueOrDefault(
                      tooltipPosition.padding,
                      2
                    ),
                    labelColors: labelColors,
                  });

                  // We need to determine alignment of
                  var tooltipSize = me.getTooltipSize(model);
                  me.determineAlignment(tooltipSize); // Smart Tooltip placement to stay on the canvas

                  helpers.extend(
                    model,
                    me.getBackgroundPoint(model, tooltipSize)
                  );
                } else {
                  me._model.opacity = 0;
                }

                if (changed && opts.custom) {
                  opts.custom.call(me, model);
                }

                return me;
              },
              getTooltipSize: function getTooltipSize(vm) {
                var ctx = this._chart.ctx;

                var size = {
                  height: vm.yPadding * 2, // Tooltip Padding
                  width: 0,
                };

                // Count of all lines in the body
                var body = vm.body;
                var combinedBodyLength = body.reduce(function (
                  count,
                  bodyItem
                ) {
                  return (
                    count +
                    bodyItem.before.length +
                    bodyItem.lines.length +
                    bodyItem.after.length
                  );
                },
                0);
                combinedBodyLength +=
                  vm.beforeBody.length + vm.afterBody.length;

                var titleLineCount = vm.title.length;
                var footerLineCount = vm.footer.length;
                var titleFontSize = vm.titleFontSize,
                  bodyFontSize = vm.bodyFontSize,
                  footerFontSize = vm.footerFontSize;

                size.height += titleLineCount * titleFontSize; // Title Lines
                size.height += (titleLineCount - 1) * vm.titleSpacing; // Title Line Spacing
                size.height += titleLineCount ? vm.titleMarginBottom : 0; // Title's bottom Margin
                size.height += combinedBodyLength * bodyFontSize; // Body Lines
                size.height += combinedBodyLength
                  ? (combinedBodyLength - 1) * vm.bodySpacing
                  : 0; // Body Line Spacing
                size.height += footerLineCount ? vm.footerMarginTop : 0; // Footer Margin
                size.height += footerLineCount * footerFontSize; // Footer Lines
                size.height += footerLineCount
                  ? (footerLineCount - 1) * vm.footerSpacing
                  : 0; // Footer Line Spacing

                // Title width
                var widthPadding = 0;
                var maxLineWidth = function (line) {
                  size.width = Math.max(
                    size.width,
                    ctx.measureText(line).width + widthPadding
                  );
                };

                ctx.font = helpers.fontString(
                  titleFontSize,
                  vm._titleFontStyle,
                  vm._titleFontFamily
                );
                helpers.each(vm.title, maxLineWidth);

                // Body width
                ctx.font = helpers.fontString(
                  bodyFontSize,
                  vm._bodyFontStyle,
                  vm._bodyFontFamily
                );
                helpers.each(vm.beforeBody.concat(vm.afterBody), maxLineWidth);

                // Body lines may include some extra width due to the color box
                widthPadding = body.length > 1 ? bodyFontSize + 2 : 0;
                helpers.each(body, function (bodyItem) {
                  helpers.each(bodyItem.before, maxLineWidth);
                  helpers.each(bodyItem.lines, maxLineWidth);
                  helpers.each(bodyItem.after, maxLineWidth);
                });

                // Reset back to 0
                widthPadding = 0;

                // Footer width
                ctx.font = helpers.fontString(
                  footerFontSize,
                  vm._footerFontStyle,
                  vm._footerFontFamily
                );
                helpers.each(vm.footer, maxLineWidth);

                // Add padding
                size.width += 2 * vm.xPadding;

                return size;
              },
              determineAlignment: function determineAlignment(size) {
                var me = this;
                var model = me._model;
                var chart = me._chart;
                var chartArea = me._chartInstance.chartArea;

                if (model.y < size.height) {
                  model.yAlign = "top";
                } else if (model.y > chart.height - size.height) {
                  model.yAlign = "bottom";
                }

                var lf, rf; // functions to determine left, right alignment
                var olf, orf; // functions to determine if left/right alignment causes tooltip to go outside chart
                var yf; // function to get the y alignment if the tooltip goes outside of the left or right edges
                var midX = (chartArea.left + chartArea.right) / 2;
                var midY = (chartArea.top + chartArea.bottom) / 2;

                if (model.yAlign === "center") {
                  lf = function (x) {
                    return x <= midX;
                  };
                  rf = function (x) {
                    return x > midX;
                  };
                } else {
                  lf = function (x) {
                    return x <= size.width / 2;
                  };
                  rf = function (x) {
                    return x >= chart.width - size.width / 2;
                  };
                }

                olf = function (x) {
                  return x + size.width > chart.width;
                };
                orf = function (x) {
                  return x - size.width < 0;
                };
                yf = function (y) {
                  return y <= midY ? "top" : "bottom";
                };

                if (lf(model.x)) {
                  model.xAlign = "left";

                  // Is tooltip too wide and goes over the right side of the chart.?
                  if (olf(model.x)) {
                    model.xAlign = "center";
                    model.yAlign = yf(model.y);
                  }
                } else if (rf(model.x)) {
                  model.xAlign = "right";

                  // Is tooltip too wide and goes outside left edge of canvas?
                  if (orf(model.x)) {
                    model.xAlign = "center";
                    model.yAlign = yf(model.y);
                  }
                }
              },
              getBackgroundPoint: function getBackgroundPoint(vm, size) {
                // Background Position
                var pt = {
                  x: vm.x,
                  y: vm.y,
                };

                var caretSize = vm.caretSize,
                  caretPadding = vm.caretPadding,
                  cornerRadius = vm.cornerRadius,
                  xAlign = vm.xAlign,
                  yAlign = vm.yAlign,
                  paddingAndSize = caretSize + caretPadding,
                  radiusAndPadding = cornerRadius + caretPadding;

                if (xAlign === "right") {
                  pt.x -= size.width;
                } else if (xAlign === "center") {
                  pt.x -= size.width / 2;
                }

                if (yAlign === "top") {
                  pt.y += paddingAndSize;
                } else if (yAlign === "bottom") {
                  pt.y -= size.height + paddingAndSize;
                } else {
                  pt.y -= size.height / 2;
                }

                if (yAlign === "center") {
                  if (xAlign === "left") {
                    pt.x += paddingAndSize;
                  } else if (xAlign === "right") {
                    pt.x -= paddingAndSize;
                  }
                } else {
                  if (xAlign === "left") {
                    pt.x -= radiusAndPadding;
                  } else if (xAlign === "right") {
                    pt.x += radiusAndPadding;
                  }
                }

                return pt;
              },
              drawCaret: function drawCaret(
                tooltipPoint,
                size,
                opacity,
                caretPadding
              ) {
                var vm = this._view;
                var ctx = this._chart.ctx;
                var x1, x2, x3;
                var y1, y2, y3;
                var caretSize = vm.caretSize;
                var cornerRadius = vm.cornerRadius;
                var xAlign = vm.xAlign,
                  yAlign = vm.yAlign;
                var ptX = tooltipPoint.x,
                  ptY = tooltipPoint.y;
                var width = size.width,
                  height = size.height;

                if (yAlign === "center") {
                  // Left or right side
                  if (xAlign === "left") {
                    x1 = ptX;
                    x2 = x1 - caretSize;
                    x3 = x1;
                  } else {
                    x1 = ptX + width;
                    x2 = x1 + caretSize;
                    x3 = x1;
                  }

                  y2 = ptY + height / 2;
                  y1 = y2 - caretSize;
                  y3 = y2 + caretSize;
                } else {
                  if (xAlign === "left") {
                    x1 = ptX + cornerRadius;
                    x2 = x1 + caretSize;
                    x3 = x2 + caretSize;
                  } else if (xAlign === "right") {
                    x1 = ptX + width - cornerRadius;
                    x2 = x1 - caretSize;
                    x3 = x2 - caretSize;
                  } else {
                    x2 = ptX + width / 2;
                    x1 = x2 - caretSize;
                    x3 = x2 + caretSize;
                  }

                  if (yAlign === "top") {
                    y1 = ptY;
                    y2 = y1 - caretSize;
                    y3 = y1;
                  } else {
                    y1 = ptY + height;
                    y2 = y1 + caretSize;
                    y3 = y1;
                  }
                }

                var bgColor = helpers.color(vm.backgroundColor);
                ctx.fillStyle = bgColor
                  .alpha(opacity * bgColor.alpha())
                  .rgbString();
                ctx.beginPath();
                ctx.moveTo(x1, y1);
                ctx.lineTo(x2, y2);
                ctx.lineTo(x3, y3);
                ctx.closePath();
                ctx.fill();
              },
              drawTitle: function drawTitle(pt, vm, ctx, opacity) {
                var title = vm.title;

                if (title.length) {
                  ctx.textAlign = vm._titleAlign;
                  ctx.textBaseline = "top";

                  var titleFontSize = vm.titleFontSize,
                    titleSpacing = vm.titleSpacing;

                  var titleFontColor = helpers.color(vm.titleFontColor);
                  ctx.fillStyle = titleFontColor
                    .alpha(opacity * titleFontColor.alpha())
                    .rgbString();
                  ctx.font = helpers.fontString(
                    titleFontSize,
                    vm._titleFontStyle,
                    vm._titleFontFamily
                  );

                  var i, len;
                  for (i = 0, len = title.length; i < len; ++i) {
                    ctx.fillText(title[i], pt.x, pt.y);
                    pt.y += titleFontSize + titleSpacing; // Line Height and spacing

                    if (i + 1 === title.length) {
                      pt.y += vm.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing
                    }
                  }
                }
              },
              drawBody: function drawBody(pt, vm, ctx, opacity) {
                var bodyFontSize = vm.bodyFontSize;
                var bodySpacing = vm.bodySpacing;
                var body = vm.body;

                ctx.textAlign = vm._bodyAlign;
                ctx.textBaseline = "top";

                var bodyFontColor = helpers.color(vm.bodyFontColor);
                var textColor = bodyFontColor
                  .alpha(opacity * bodyFontColor.alpha())
                  .rgbString();
                ctx.fillStyle = textColor;
                ctx.font = helpers.fontString(
                  bodyFontSize,
                  vm._bodyFontStyle,
                  vm._bodyFontFamily
                );

                // Before Body
                var xLinePadding = 0;
                var fillLineOfText = function (line) {
                  ctx.fillText(line, pt.x + xLinePadding, pt.y);
                  pt.y += bodyFontSize + bodySpacing;
                };

                // Before body lines
                helpers.each(vm.beforeBody, fillLineOfText);

                var drawColorBoxes = body.length > 1;
                xLinePadding = drawColorBoxes ? bodyFontSize + 2 : 0;

                // Draw body lines now
                helpers.each(body, function (bodyItem, i) {
                  helpers.each(bodyItem.before, fillLineOfText);

                  helpers.each(bodyItem.lines, function (line) {
                    // Draw Legend-like boxes if needed
                    if (drawColorBoxes) {
                      // Fill a white rect so that colours merge nicely if the opacity is < 1
                      ctx.fillStyle = helpers
                        .color(vm.legendColorBackground)
                        .alpha(opacity)
                        .rgbaString();
                      ctx.fillRect(pt.x, pt.y, bodyFontSize, bodyFontSize);

                      // Border
                      ctx.strokeStyle = helpers
                        .color(vm.labelColors[i].borderColor)
                        .alpha(opacity)
                        .rgbaString();
                      ctx.strokeRect(pt.x, pt.y, bodyFontSize, bodyFontSize);

                      // Inner square
                      ctx.fillStyle = helpers
                        .color(vm.labelColors[i].backgroundColor)
                        .alpha(opacity)
                        .rgbaString();
                      ctx.fillRect(
                        pt.x + 1,
                        pt.y + 1,
                        bodyFontSize - 2,
                        bodyFontSize - 2
                      );

                      ctx.fillStyle = textColor;
                    }

                    fillLineOfText(line);
                  });

                  helpers.each(bodyItem.after, fillLineOfText);
                });

                // Reset back to 0 for after body
                xLinePadding = 0;

                // After body lines
                helpers.each(vm.afterBody, fillLineOfText);
                pt.y -= bodySpacing; // Remove last body spacing
              },
              drawFooter: function drawFooter(pt, vm, ctx, opacity) {
                var footer = vm.footer;

                if (footer.length) {
                  pt.y += vm.footerMarginTop;

                  ctx.textAlign = vm._footerAlign;
                  ctx.textBaseline = "top";

                  var footerFontColor = helpers.color(vm.footerFontColor);
                  ctx.fillStyle = footerFontColor
                    .alpha(opacity * footerFontColor.alpha())
                    .rgbString();
                  ctx.font = helpers.fontString(
                    vm.footerFontSize,
                    vm._footerFontStyle,
                    vm._footerFontFamily
                  );

                  helpers.each(footer, function (line) {
                    ctx.fillText(line, pt.x, pt.y);
                    pt.y += vm.footerFontSize + vm.footerSpacing;
                  });
                }
              },
              draw: function draw() {
                var ctx = this._chart.ctx;
                var vm = this._view;

                if (vm.opacity === 0) {
                  return;
                }

                var tooltipSize = this.getTooltipSize(vm);
                var pt = {
                  x: vm.x,
                  y: vm.y,
                };

                // IE11/Edge does not like very small opacities, so snap to 0
                var opacity = Math.abs(vm.opacity < 1e-3) ? 0 : vm.opacity;

                if (this._options.enabled) {
                  // Draw Background
                  var bgColor = helpers.color(vm.backgroundColor);
                  ctx.fillStyle = bgColor
                    .alpha(opacity * bgColor.alpha())
                    .rgbString();
                  helpers.drawRoundedRectangle(
                    ctx,
                    pt.x,
                    pt.y,
                    tooltipSize.width,
                    tooltipSize.height,
                    vm.cornerRadius
                  );
                  ctx.fill();

                  // Draw Caret
                  this.drawCaret(pt, tooltipSize, opacity, vm.caretPadding);

                  // Draw Title, Body, and Footer
                  pt.x += vm.xPadding;
                  pt.y += vm.yPadding;

                  // Titles
                  this.drawTitle(pt, vm, ctx, opacity);

                  // Body
                  this.drawBody(pt, vm, ctx, opacity);

                  // Footer
                  this.drawFooter(pt, vm, ctx, opacity);
                }
              },
            });
          };
        },
        {},
      ],
      34: [
        function (require, module, exports) {
          "use strict";

          module.exports = function (Chart, moment) {
            var helpers = Chart.helpers,
              globalOpts = Chart.defaults.global;

            globalOpts.elements.arc = {
              backgroundColor: globalOpts.defaultColor,
              borderColor: "#fff",
              borderWidth: 2,
            };

            Chart.elements.Arc = Chart.Element.extend({
              inLabelRange: function (mouseX) {
                var vm = this._view;

                if (vm) {
                  return (
                    Math.pow(mouseX - vm.x, 2) <
                    Math.pow(vm.radius + vm.hoverRadius, 2)
                  );
                } else {
                  return false;
                }
              },
              inRange: function (chartX, chartY) {
                var vm = this._view;

                if (vm) {
                  var pointRelativePosition = helpers.getAngleFromPoint(vm, {
                      x: chartX,
                      y: chartY,
                    }),
                    angle = pointRelativePosition.angle,
                    distance = pointRelativePosition.distance;

                  //Sanitise angle range
                  var startAngle = vm.startAngle;
                  var endAngle = vm.endAngle;
                  while (endAngle < startAngle) {
                    endAngle += 2.0 * Math.PI;
                  }
                  while (angle > endAngle) {
                    angle -= 2.0 * Math.PI;
                  }
                  while (angle < startAngle) {
                    angle += 2.0 * Math.PI;
                  }

                  //Check if within the range of the open/close angle
                  var betweenAngles = angle >= startAngle && angle <= endAngle,
                    withinRadius =
                      distance >= vm.innerRadius && distance <= vm.outerRadius;

                  return betweenAngles && withinRadius;
                } else {
                  return false;
                }
              },
              tooltipPosition: function () {
                var vm = this._view;

                var centreAngle =
                    vm.startAngle + (vm.endAngle - vm.startAngle) / 2,
                  rangeFromCentre =
                    (vm.outerRadius - vm.innerRadius) / 2 + vm.innerRadius;
                return {
                  x: vm.x + Math.cos(centreAngle) * rangeFromCentre,
                  y: vm.y + Math.sin(centreAngle) * rangeFromCentre,
                };
              },
              draw: function () {
                var ctx = this._chart.ctx,
                  vm = this._view,
                  sA = vm.startAngle,
                  eA = vm.endAngle;

                ctx.beginPath();

                ctx.arc(vm.x, vm.y, vm.outerRadius, sA, eA);
                ctx.arc(vm.x, vm.y, vm.innerRadius, eA, sA, true);

                ctx.closePath();
                ctx.strokeStyle = vm.borderColor;
                ctx.lineWidth = vm.borderWidth;

                ctx.fillStyle = vm.backgroundColor;

                ctx.fill();
                ctx.lineJoin = "bevel";

                if (vm.borderWidth) {
                  ctx.stroke();
                }
              },
            });
          };
        },
        {},
      ],
      35: [
        function (require, module, exports) {
          "use strict";

          module.exports = function (Chart) {
            var helpers = Chart.helpers;
            var globalDefaults = Chart.defaults.global;

            Chart.defaults.global.elements.line = {
              tension: 0.4,
              backgroundColor: globalDefaults.defaultColor,
              borderWidth: 3,
              borderColor: globalDefaults.defaultColor,
              borderCapStyle: "butt",
              borderDash: [],
              borderDashOffset: 0.0,
              borderJoinStyle: "miter",
              fill: true, // do we fill in the area between the line and its base axis
            };

            Chart.elements.Line = Chart.Element.extend({
              lineToNextPoint: function (
                previousPoint,
                point,
                nextPoint,
                skipHandler,
                previousSkipHandler
              ) {
                var me = this;
                var ctx = me._chart.ctx;
                var spanGaps = me._view ? me._view.spanGaps : false;

                if (point._view.skip && !spanGaps) {
                  skipHandler.call(me, previousPoint, point, nextPoint);
                } else if (previousPoint._view.skip && !spanGaps) {
                  previousSkipHandler.call(me, previousPoint, point, nextPoint);
                } else if (point._view.tension === 0) {
                  ctx.lineTo(point._view.x, point._view.y);
                } else {
                  // Line between points
                  ctx.bezierCurveTo(
                    previousPoint._view.controlPointNextX,
                    previousPoint._view.controlPointNextY,
                    point._view.controlPointPreviousX,
                    point._view.controlPointPreviousY,
                    point._view.x,
                    point._view.y
                  );
                }
              },

              draw: function () {
                var me = this;

                var vm = me._view;
                var ctx = me._chart.ctx;
                var first = me._children[0];
                var last = me._children[me._children.length - 1];

                function loopBackToStart(drawLineToCenter) {
                  if (!first._view.skip && !last._view.skip) {
                    // Draw a bezier line from last to first
                    ctx.bezierCurveTo(
                      last._view.controlPointNextX,
                      last._view.controlPointNextY,
                      first._view.controlPointPreviousX,
                      first._view.controlPointPreviousY,
                      first._view.x,
                      first._view.y
                    );
                  } else if (drawLineToCenter) {
                    // Go to center
                    ctx.lineTo(me._view.scaleZero.x, me._view.scaleZero.y);
                  }
                }

                ctx.save();

                // If we had points and want to fill this line, do so.
                if (me._children.length > 0 && vm.fill) {
                  // Draw the background first (so the border is always on top)
                  ctx.beginPath();

                  helpers.each(
                    me._children,
                    function (point, index) {
                      var previous = helpers.previousItem(me._children, index);
                      var next = helpers.nextItem(me._children, index);

                      // First point moves to it's starting position no matter what
                      if (index === 0) {
                        if (me._loop) {
                          ctx.moveTo(vm.scaleZero.x, vm.scaleZero.y);
                        } else {
                          ctx.moveTo(point._view.x, vm.scaleZero);
                        }

                        if (point._view.skip) {
                          if (!me._loop) {
                            ctx.moveTo(next._view.x, me._view.scaleZero);
                          }
                        } else {
                          ctx.lineTo(point._view.x, point._view.y);
                        }
                      } else {
                        me.lineToNextPoint(
                          previous,
                          point,
                          next,
                          function (previousPoint, point, nextPoint) {
                            if (me._loop) {
                              // Go to center
                              ctx.lineTo(
                                me._view.scaleZero.x,
                                me._view.scaleZero.y
                              );
                            } else {
                              ctx.lineTo(
                                previousPoint._view.x,
                                me._view.scaleZero
                              );
                              ctx.moveTo(nextPoint._view.x, me._view.scaleZero);
                            }
                          },
                          function (previousPoint, point) {
                            // If we skipped the last point, draw a line to ourselves so that the fill is nice
                            ctx.lineTo(point._view.x, point._view.y);
                          }
                        );
                      }
                    },
                    me
                  );

                  // For radial scales, loop back around to the first point
                  if (me._loop) {
                    loopBackToStart(true);
                  } else {
                    //Round off the line by going to the base of the chart, back to the start, then fill.
                    ctx.lineTo(
                      me._children[me._children.length - 1]._view.x,
                      vm.scaleZero
                    );
                    ctx.lineTo(me._children[0]._view.x, vm.scaleZero);
                  }

                  ctx.fillStyle =
                    vm.backgroundColor || globalDefaults.defaultColor;
                  ctx.closePath();
                  ctx.fill();
                }

                var globalOptionLineElements = globalDefaults.elements.line;
                // Now draw the line between all the points with any borders
                ctx.lineCap =
                  vm.borderCapStyle || globalOptionLineElements.borderCapStyle;

                // IE 9 and 10 do not support line dash
                if (ctx.setLineDash) {
                  ctx.setLineDash(
                    vm.borderDash || globalOptionLineElements.borderDash
                  );
                }

                ctx.lineDashOffset =
                  vm.borderDashOffset ||
                  globalOptionLineElements.borderDashOffset;
                ctx.lineJoin =
                  vm.borderJoinStyle ||
                  globalOptionLineElements.borderJoinStyle;
                ctx.lineWidth =
                  vm.borderWidth || globalOptionLineElements.borderWidth;
                ctx.strokeStyle = vm.borderColor || globalDefaults.defaultColor;
                ctx.beginPath();

                helpers.each(
                  me._children,
                  function (point, index) {
                    var previous = helpers.previousItem(me._children, index);
                    var next = helpers.nextItem(me._children, index);

                    if (index === 0) {
                      ctx.moveTo(point._view.x, point._view.y);
                    } else {
                      me.lineToNextPoint(
                        previous,
                        point,
                        next,
                        function (previousPoint, point, nextPoint) {
                          ctx.moveTo(nextPoint._view.x, nextPoint._view.y);
                        },
                        function (previousPoint, point) {
                          // If we skipped the last point, move up to our point preventing a line from being drawn
                          ctx.moveTo(point._view.x, point._view.y);
                        }
                      );
                    }
                  },
                  me
                );

                if (me._loop && me._children.length > 0) {
                  loopBackToStart();
                }

                ctx.stroke();
                ctx.restore();
              },
            });
          };
        },
        {},
      ],
      36: [
        function (require, module, exports) {
          "use strict";

          module.exports = function (Chart) {
            var helpers = Chart.helpers,
              globalOpts = Chart.defaults.global,
              defaultColor = globalOpts.defaultColor;

            globalOpts.elements.point = {
              radius: 3,
              pointStyle: "circle",
              backgroundColor: defaultColor,
              borderWidth: 1,
              borderColor: defaultColor,
              // Hover
              hitRadius: 1,
              hoverRadius: 4,
              hoverBorderWidth: 1,
            };

            Chart.elements.Point = Chart.Element.extend({
              inRange: function (mouseX, mouseY) {
                var vm = this._view;
                return vm
                  ? Math.pow(mouseX - vm.x, 2) + Math.pow(mouseY - vm.y, 2) <
                      Math.pow(vm.hitRadius + vm.radius, 2)
                  : false;
              },
              inLabelRange: function (mouseX) {
                var vm = this._view;
                return vm
                  ? Math.pow(mouseX - vm.x, 2) <
                      Math.pow(vm.radius + vm.hitRadius, 2)
                  : false;
              },
              tooltipPosition: function () {
                var vm = this._view;
                return {
                  x: vm.x,
                  y: vm.y,
                  padding: vm.radius + vm.borderWidth,
                };
              },
              draw: function () {
                var vm = this._view;
                var ctx = this._chart.ctx;
                var pointStyle = vm.pointStyle;
                var radius = vm.radius;
                var x = vm.x;
                var y = vm.y;
                var type, edgeLength, xOffset, yOffset, height, size;

                if (vm.skip) {
                  return;
                }

                if (typeof pointStyle === "object") {
                  type = pointStyle.toString();
                  if (
                    type === "[object HTMLImageElement]" ||
                    type === "[object HTMLCanvasElement]"
                  ) {
                    ctx.drawImage(
                      pointStyle,
                      x - pointStyle.width / 2,
                      y - pointStyle.height / 2
                    );
                    return;
                  }
                }

                if (isNaN(radius) || radius <= 0) {
                  return;
                }

                ctx.strokeStyle = vm.borderColor || defaultColor;
                ctx.lineWidth = helpers.getValueOrDefault(
                  vm.borderWidth,
                  globalOpts.elements.point.borderWidth
                );
                ctx.fillStyle = vm.backgroundColor || defaultColor;

                switch (pointStyle) {
                  // Default includes circle
                  default:
                    ctx.beginPath();
                    ctx.arc(x, y, radius, 0, Math.PI * 2);
                    ctx.closePath();
                    ctx.fill();
                    break;
                  case "triangle":
                    ctx.beginPath();
                    edgeLength = (3 * radius) / Math.sqrt(3);
                    height = (edgeLength * Math.sqrt(3)) / 2;
                    ctx.moveTo(x - edgeLength / 2, y + height / 3);
                    ctx.lineTo(x + edgeLength / 2, y + height / 3);
                    ctx.lineTo(x, y - (2 * height) / 3);
                    ctx.closePath();
                    ctx.fill();
                    break;
                  case "rect":
                    size = (1 / Math.SQRT2) * radius;
                    ctx.fillRect(x - size, y - size, 2 * size, 2 * size);
                    ctx.strokeRect(x - size, y - size, 2 * size, 2 * size);
                    break;
                  case "rectRot":
                    size = (1 / Math.SQRT2) * radius;
                    ctx.beginPath();
                    ctx.moveTo(x - size, y);
                    ctx.lineTo(x, y + size);
                    ctx.lineTo(x + size, y);
                    ctx.lineTo(x, y - size);
                    ctx.closePath();
                    ctx.fill();
                    break;
                  case "cross":
                    ctx.beginPath();
                    ctx.moveTo(x, y + radius);
                    ctx.lineTo(x, y - radius);
                    ctx.moveTo(x - radius, y);
                    ctx.lineTo(x + radius, y);
                    ctx.closePath();
                    break;
                  case "crossRot":
                    ctx.beginPath();
                    xOffset = Math.cos(Math.PI / 4) * radius;
                    yOffset = Math.sin(Math.PI / 4) * radius;
                    ctx.moveTo(x - xOffset, y - yOffset);
                    ctx.lineTo(x + xOffset, y + yOffset);
                    ctx.moveTo(x - xOffset, y + yOffset);
                    ctx.lineTo(x + xOffset, y - yOffset);
                    ctx.closePath();
                    break;
                  case "star":
                    ctx.beginPath();
                    ctx.moveTo(x, y + radius);
                    ctx.lineTo(x, y - radius);
                    ctx.moveTo(x - radius, y);
                    ctx.lineTo(x + radius, y);
                    xOffset = Math.cos(Math.PI / 4) * radius;
                    yOffset = Math.sin(Math.PI / 4) * radius;
                    ctx.moveTo(x - xOffset, y - yOffset);
                    ctx.lineTo(x + xOffset, y + yOffset);
                    ctx.moveTo(x - xOffset, y + yOffset);
                    ctx.lineTo(x + xOffset, y - yOffset);
                    ctx.closePath();
                    break;
                  case "line":
                    ctx.beginPath();
                    ctx.moveTo(x - radius, y);
                    ctx.lineTo(x + radius, y);
                    ctx.closePath();
                    break;
                  case "dash":
                    ctx.beginPath();
                    ctx.moveTo(x, y);
                    ctx.lineTo(x + radius, y);
                    ctx.closePath();
                    break;
                }

                ctx.stroke();
              },
            });
          };
        },
        {},
      ],
      37: [
        function (require, module, exports) {
          "use strict";

          module.exports = function (Chart) {
            var helpers = Chart.helpers,
              globalOpts = Chart.defaults.global;

            globalOpts.elements.rectangle = {
              backgroundColor: globalOpts.defaultColor,
              borderWidth: 0,
              borderColor: globalOpts.defaultColor,
              borderSkipped: "bottom",
            };

            Chart.elements.Rectangle = Chart.Element.extend({
              draw: function () {
                var ctx = this._chart.ctx;
                var vm = this._view;

                var halfWidth = vm.width / 2,
                  leftX = vm.x - halfWidth,
                  rightX = vm.x + halfWidth,
                  top = vm.base - (vm.base - vm.y),
                  halfStroke = vm.borderWidth / 2;

                // Canvas doesn't allow us to stroke inside the width so we can
                // adjust the sizes to fit if we're setting a stroke on the line
                if (vm.borderWidth) {
                  leftX += halfStroke;
                  rightX -= halfStroke;
                  top += halfStroke;
                }

                ctx.beginPath();
                ctx.fillStyle = vm.backgroundColor;
                ctx.strokeStyle = vm.borderColor;
                ctx.lineWidth = vm.borderWidth;

                // Corner points, from bottom-left to bottom-right clockwise
                // | 1 2 |
                // | 0 3 |
                var corners = [
                  [leftX, vm.base],
                  [leftX, top],
                  [rightX, top],
                  [rightX, vm.base],
                ];

                // Find first (starting) corner with fallback to 'bottom'
                var borders = ["bottom", "left", "top", "right"];
                var startCorner = borders.indexOf(vm.borderSkipped, 0);
                if (startCorner === -1) startCorner = 0;

                function cornerAt(index) {
                  return corners[(startCorner + index) % 4];
                }

                // Draw rectangle from 'startCorner'
                ctx.moveTo.apply(ctx, cornerAt(0));
                for (var i = 1; i < 4; i++) ctx.lineTo.apply(ctx, cornerAt(i));

                ctx.fill();
                if (vm.borderWidth) {
                  ctx.stroke();
                }
              },
              height: function () {
                var vm = this._view;
                return vm.base - vm.y;
              },
              inRange: function (mouseX, mouseY) {
                var vm = this._view;
                return vm
                  ? vm.y < vm.base
                    ? mouseX >= vm.x - vm.width / 2 &&
                      mouseX <= vm.x + vm.width / 2 &&
                      mouseY >= vm.y &&
                      mouseY <= vm.base
                    : mouseX >= vm.x - vm.width / 2 &&
                      mouseX <= vm.x + vm.width / 2 &&
                      mouseY >= vm.base &&
                      mouseY <= vm.y
                  : false;
              },
              inLabelRange: function (mouseX) {
                var vm = this._view;
                return vm
                  ? mouseX >= vm.x - vm.width / 2 &&
                      mouseX <= vm.x + vm.width / 2
                  : false;
              },
              tooltipPosition: function () {
                var vm = this._view;
                return {
                  x: vm.x,
                  y: vm.y,
                };
              },
            });
          };
        },
        {},
      ],
      38: [
        function (require, module, exports) {
          "use strict";

          module.exports = function (Chart) {
            var helpers = Chart.helpers;
            // Default config for a category scale
            var defaultConfig = {
              position: "bottom",
            };

            var DatasetScale = Chart.Scale.extend({
              // Implement this so that
              determineDataLimits: function () {
                var me = this;
                me.minIndex = 0;
                me.maxIndex = me.chart.data.labels.length - 1;
                var findIndex;

                if (me.options.ticks.min !== undefined) {
                  // user specified min value
                  findIndex = helpers.indexOf(
                    me.chart.data.labels,
                    me.options.ticks.min
                  );
                  me.minIndex = findIndex !== -1 ? findIndex : me.minIndex;
                }

                if (me.options.ticks.max !== undefined) {
                  // user specified max value
                  findIndex = helpers.indexOf(
                    me.chart.data.labels,
                    me.options.ticks.max
                  );
                  me.maxIndex = findIndex !== -1 ? findIndex : me.maxIndex;
                }

                me.min = me.chart.data.labels[me.minIndex];
                me.max = me.chart.data.labels[me.maxIndex];
              },

              buildTicks: function (index) {
                var me = this;
                // If we are viewing some subset of labels, slice the original array
                me.ticks =
                  me.minIndex === 0 &&
                  me.maxIndex === me.chart.data.labels.length - 1
                    ? me.chart.data.labels
                    : me.chart.data.labels.slice(me.minIndex, me.maxIndex + 1);
              },

              getLabelForIndex: function (index, datasetIndex) {
                return this.ticks[index];
              },

              // Used to get data value locations.  Value can either be an index or a numerical value
              getPixelForValue: function (
                value,
                index,
                datasetIndex,
                includeOffset
              ) {
                var me = this;
                // 1 is added because we need the length but we have the indexes
                var offsetAmt = Math.max(
                  me.maxIndex +
                    1 -
                    me.minIndex -
                    (me.options.gridLines.offsetGridLines ? 0 : 1),
                  1
                );

                if (me.isHorizontal()) {
                  var innerWidth =
                    me.width - (me.paddingLeft + me.paddingRight);
                  var valueWidth = innerWidth / offsetAmt;
                  var widthOffset =
                    valueWidth * (index - me.minIndex) + me.paddingLeft;

                  if (me.options.gridLines.offsetGridLines && includeOffset) {
                    widthOffset += valueWidth / 2;
                  }

                  return me.left + Math.round(widthOffset);
                } else {
                  var innerHeight =
                    me.height - (me.paddingTop + me.paddingBottom);
                  var valueHeight = innerHeight / offsetAmt;
                  var heightOffset =
                    valueHeight * (index - me.minIndex) + me.paddingTop;

                  if (me.options.gridLines.offsetGridLines && includeOffset) {
                    heightOffset += valueHeight / 2;
                  }

                  return me.top + Math.round(heightOffset);
                }
              },
              getPixelForTick: function (index, includeOffset) {
                return this.getPixelForValue(
                  this.ticks[index],
                  index + this.minIndex,
                  null,
                  includeOffset
                );
              },
              getValueForPixel: function (pixel) {
                var me = this;
                var value;
                var offsetAmt = Math.max(
                  me.ticks.length -
                    (me.options.gridLines.offsetGridLines ? 0 : 1),
                  1
                );
                var horz = me.isHorizontal();
                var innerDimension = horz
                  ? me.width - (me.paddingLeft + me.paddingRight)
                  : me.height - (me.paddingTop + me.paddingBottom);
                var valueDimension = innerDimension / offsetAmt;

                if (me.options.gridLines.offsetGridLines) {
                  pixel -= valueDimension / 2;
                }
                pixel -= horz ? me.paddingLeft : me.paddingTop;

                if (pixel <= 0) {
                  value = 0;
                } else {
                  value = Math.round(pixel / valueDimension);
                }

                return value;
              },
            });

            Chart.scaleService.registerScaleType(
              "category",
              DatasetScale,
              defaultConfig
            );
          };
        },
        {},
      ],
      39: [
        function (require, module, exports) {
          "use strict";

          module.exports = function (Chart) {
            var helpers = Chart.helpers;

            var defaultConfig = {
              position: "left",
              ticks: {
                callback: function (tickValue, index, ticks) {
                  // If we have lots of ticks, don't use the ones
                  var delta =
                    ticks.length > 3
                      ? ticks[2] - ticks[1]
                      : ticks[1] - ticks[0];

                  // If we have a number like 2.5 as the delta, figure out how many decimal places we need
                  if (Math.abs(delta) > 1) {
                    if (tickValue !== Math.floor(tickValue)) {
                      // not an integer
                      delta = tickValue - Math.floor(tickValue);
                    }
                  }

                  var logDelta = helpers.log10(Math.abs(delta));
                  var tickString = "";

                  if (tickValue !== 0) {
                    var numDecimal = -1 * Math.floor(logDelta);
                    numDecimal = Math.max(Math.min(numDecimal, 20), 0); // toFixed has a max of 20 decimal places
                    tickString = tickValue.toFixed(numDecimal);
                  } else {
                    tickString = "0"; // never show decimal places for 0
                  }

                  return tickString;
                },
              },
            };

            var LinearScale = Chart.LinearScaleBase.extend({
              determineDataLimits: function () {
                var me = this;
                var opts = me.options;
                var tickOpts = opts.ticks;
                var chart = me.chart;
                var data = chart.data;
                var datasets = data.datasets;
                var isHorizontal = me.isHorizontal();

                function IDMatches(meta) {
                  return isHorizontal
                    ? meta.xAxisID === me.id
                    : meta.yAxisID === me.id;
                }

                // First Calculate the range
                me.min = null;
                me.max = null;

                if (opts.stacked) {
                  var valuesPerType = {};
                  var hasPositiveValues = false;
                  var hasNegativeValues = false;

                  helpers.each(datasets, function (dataset, datasetIndex) {
                    var meta = chart.getDatasetMeta(datasetIndex);
                    if (valuesPerType[meta.type] === undefined) {
                      valuesPerType[meta.type] = {
                        positiveValues: [],
                        negativeValues: [],
                      };
                    }

                    // Store these per type
                    var positiveValues =
                      valuesPerType[meta.type].positiveValues;
                    var negativeValues =
                      valuesPerType[meta.type].negativeValues;

                    if (
                      chart.isDatasetVisible(datasetIndex) &&
                      IDMatches(meta)
                    ) {
                      helpers.each(dataset.data, function (rawValue, index) {
                        var value = +me.getRightValue(rawValue);
                        if (isNaN(value) || meta.data[index].hidden) {
                          return;
                        }

                        positiveValues[index] = positiveValues[index] || 0;
                        negativeValues[index] = negativeValues[index] || 0;

                        if (opts.relativePoints) {
                          positiveValues[index] = 100;
                        } else {
                          if (value < 0) {
                            hasNegativeValues = true;
                            negativeValues[index] += value;
                          } else {
                            hasPositiveValues = true;
                            positiveValues[index] += value;
                          }
                        }
                      });
                    }
                  });

                  helpers.each(valuesPerType, function (valuesForType) {
                    var values = valuesForType.positiveValues.concat(
                      valuesForType.negativeValues
                    );
                    var minVal = helpers.min(values);
                    var maxVal = helpers.max(values);
                    me.min =
                      me.min === null ? minVal : Math.min(me.min, minVal);
                    me.max =
                      me.max === null ? maxVal : Math.max(me.max, maxVal);
                  });
                } else {
                  helpers.each(datasets, function (dataset, datasetIndex) {
                    var meta = chart.getDatasetMeta(datasetIndex);
                    if (
                      chart.isDatasetVisible(datasetIndex) &&
                      IDMatches(meta)
                    ) {
                      helpers.each(dataset.data, function (rawValue, index) {
                        var value = +me.getRightValue(rawValue);
                        if (isNaN(value) || meta.data[index].hidden) {
                          return;
                        }

                        if (me.min === null) {
                          me.min = value;
                        } else if (value < me.min) {
                          me.min = value;
                        }

                        if (me.max === null) {
                          me.max = value;
                        } else if (value > me.max) {
                          me.max = value;
                        }
                      });
                    }
                  });
                }

                // Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero
                this.handleTickRangeOptions();
              },
              getTickLimit: function () {
                var maxTicks;
                var me = this;
                var tickOpts = me.options.ticks;

                if (me.isHorizontal()) {
                  maxTicks = Math.min(
                    tickOpts.maxTicksLimit ? tickOpts.maxTicksLimit : 11,
                    Math.ceil(me.width / 50)
                  );
                } else {
                  // The factor of 2 used to scale the font size has been experimentally determined.
                  var tickFontSize = helpers.getValueOrDefault(
                    tickOpts.fontSize,
                    Chart.defaults.global.defaultFontSize
                  );
                  maxTicks = Math.min(
                    tickOpts.maxTicksLimit ? tickOpts.maxTicksLimit : 11,
                    Math.ceil(me.height / (2 * tickFontSize))
                  );
                }

                return maxTicks;
              },
              // Called after the ticks are built. We need
              handleDirectionalChanges: function () {
                if (!this.isHorizontal()) {
                  // We are in a vertical orientation. The top value is the highest. So reverse the array
                  this.ticks.reverse();
                }
              },
              getLabelForIndex: function (index, datasetIndex) {
                return +this.getRightValue(
                  this.chart.data.datasets[datasetIndex].data[index]
                );
              },
              // Utils
              getPixelForValue: function (
                value,
                index,
                datasetIndex,
                includeOffset
              ) {
                // This must be called after fit has been run so that
                //      this.left, this.top, this.right, and this.bottom have been defined
                var me = this;
                var paddingLeft = me.paddingLeft;
                var paddingBottom = me.paddingBottom;
                var start = me.start;

                var rightValue = +me.getRightValue(value);
                var pixel;
                var innerDimension;
                var range = me.end - start;

                if (me.isHorizontal()) {
                  innerDimension = me.width - (paddingLeft + me.paddingRight);
                  pixel =
                    me.left + (innerDimension / range) * (rightValue - start);
                  return Math.round(pixel + paddingLeft);
                } else {
                  innerDimension = me.height - (me.paddingTop + paddingBottom);
                  pixel =
                    me.bottom -
                    paddingBottom -
                    (innerDimension / range) * (rightValue - start);
                  return Math.round(pixel);
                }
              },
              getValueForPixel: function (pixel) {
                var me = this;
                var isHorizontal = me.isHorizontal();
                var paddingLeft = me.paddingLeft;
                var paddingBottom = me.paddingBottom;
                var innerDimension = isHorizontal
                  ? me.width - (paddingLeft + me.paddingRight)
                  : me.height - (me.paddingTop + paddingBottom);
                var offset =
                  (isHorizontal
                    ? pixel - me.left - paddingLeft
                    : me.bottom - paddingBottom - pixel) / innerDimension;
                return me.start + (me.end - me.start) * offset;
              },
              getPixelForTick: function (index, includeOffset) {
                return this.getPixelForValue(
                  this.ticksAsNumbers[index],
                  null,
                  null,
                  includeOffset
                );
              },
            });
            Chart.scaleService.registerScaleType(
              "linear",
              LinearScale,
              defaultConfig
            );
          };
        },
        {},
      ],
      40: [
        function (require, module, exports) {
          "use strict";

          module.exports = function (Chart) {
            var helpers = Chart.helpers,
              noop = helpers.noop;

            Chart.LinearScaleBase = Chart.Scale.extend({
              handleTickRangeOptions: function () {
                var me = this;
                var opts = me.options;
                var tickOpts = opts.ticks;

                // If we are forcing it to begin at 0, but 0 will already be rendered on the chart,
                // do nothing since that would make the chart weird. If the user really wants a weird chart
                // axis, they can manually override it
                if (tickOpts.beginAtZero) {
                  var minSign = helpers.sign(me.min);
                  var maxSign = helpers.sign(me.max);

                  if (minSign < 0 && maxSign < 0) {
                    // move the top up to 0
                    me.max = 0;
                  } else if (minSign > 0 && maxSign > 0) {
                    // move the botttom down to 0
                    me.min = 0;
                  }
                }

                if (tickOpts.min !== undefined) {
                  me.min = tickOpts.min;
                } else if (tickOpts.suggestedMin !== undefined) {
                  me.min = Math.min(me.min, tickOpts.suggestedMin);
                }

                if (tickOpts.max !== undefined) {
                  me.max = tickOpts.max;
                } else if (tickOpts.suggestedMax !== undefined) {
                  me.max = Math.max(me.max, tickOpts.suggestedMax);
                }

                if (me.min === me.max) {
                  me.max++;

                  if (!tickOpts.beginAtZero) {
                    me.min--;
                  }
                }
              },
              getTickLimit: noop,
              handleDirectionalChanges: noop,

              buildTicks: function () {
                var me = this;
                var opts = me.options;
                var tickOpts = opts.ticks;
                var getValueOrDefault = helpers.getValueOrDefault;
                var isHorizontal = me.isHorizontal();

                var ticks = (me.ticks = []);

                // Figure out what the max number of ticks we can support it is based on the size of
                // the axis area. For now, we say that the minimum tick spacing in pixels must be 50
                // We also limit the maximum number of ticks to 11 which gives a nice 10 squares on
                // the graph

                var maxTicks = me.getTickLimit();

                // Make sure we always have at least 2 ticks
                maxTicks = Math.max(2, maxTicks);

                // To get a "nice" value for the tick spacing, we will use the appropriately named
                // "nice number" algorithm. See http://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks
                // for details.

                var spacing;
                var fixedStepSizeSet =
                  (tickOpts.fixedStepSize && tickOpts.fixedStepSize > 0) ||
                  (tickOpts.stepSize && tickOpts.stepSize > 0);
                if (fixedStepSizeSet) {
                  spacing = getValueOrDefault(
                    tickOpts.fixedStepSize,
                    tickOpts.stepSize
                  );
                } else {
                  var niceRange = helpers.niceNum(me.max - me.min, false);
                  spacing = helpers.niceNum(niceRange / (maxTicks - 1), true);
                }
                var niceMin = Math.floor(me.min / spacing) * spacing;
                var niceMax = Math.ceil(me.max / spacing) * spacing;
                var numSpaces = (niceMax - niceMin) / spacing;

                // If very close to our rounded value, use it.
                if (
                  helpers.almostEquals(
                    numSpaces,
                    Math.round(numSpaces),
                    spacing / 1000
                  )
                ) {
                  numSpaces = Math.round(numSpaces);
                } else {
                  numSpaces = Math.ceil(numSpaces);
                }

                // Put the values into the ticks array
                ticks.push(tickOpts.min !== undefined ? tickOpts.min : niceMin);
                for (var j = 1; j < numSpaces; ++j) {
                  ticks.push(niceMin + j * spacing);
                }
                ticks.push(tickOpts.max !== undefined ? tickOpts.max : niceMax);

                me.handleDirectionalChanges();

                // At this point, we need to update our max and min given the tick values since we have expanded the
                // range of the scale
                me.max = helpers.max(ticks);
                me.min = helpers.min(ticks);

                if (tickOpts.reverse) {
                  ticks.reverse();

                  me.start = me.max;
                  me.end = me.min;
                } else {
                  me.start = me.min;
                  me.end = me.max;
                }
              },
              convertTicksToLabels: function () {
                var me = this;
                me.ticksAsNumbers = me.ticks.slice();
                me.zeroLineIndex = me.ticks.indexOf(0);

                Chart.Scale.prototype.convertTicksToLabels.call(me);
              },
            });
          };
        },
        {},
      ],
      41: [
        function (require, module, exports) {
          "use strict";

          module.exports = function (Chart) {
            var helpers = Chart.helpers;

            var defaultConfig = {
              position: "left",

              // label settings
              ticks: {
                callback: function (value, index, arr) {
                  var remain =
                    value / Math.pow(10, Math.floor(helpers.log10(value)));

                  if (
                    remain === 1 ||
                    remain === 2 ||
                    remain === 5 ||
                    index === 0 ||
                    index === arr.length - 1
                  ) {
                    return value.toExponential();
                  } else {
                    return "";
                  }
                },
              },
            };

            var LogarithmicScale = Chart.Scale.extend({
              determineDataLimits: function () {
                var me = this;
                var opts = me.options;
                var tickOpts = opts.ticks;
                var chart = me.chart;
                var data = chart.data;
                var datasets = data.datasets;
                var getValueOrDefault = helpers.getValueOrDefault;
                var isHorizontal = me.isHorizontal();
                function IDMatches(meta) {
                  return isHorizontal
                    ? meta.xAxisID === me.id
                    : meta.yAxisID === me.id;
                }

                // Calculate Range
                me.min = null;
                me.max = null;

                if (opts.stacked) {
                  var valuesPerType = {};

                  helpers.each(datasets, function (dataset, datasetIndex) {
                    var meta = chart.getDatasetMeta(datasetIndex);
                    if (
                      chart.isDatasetVisible(datasetIndex) &&
                      IDMatches(meta)
                    ) {
                      if (valuesPerType[meta.type] === undefined) {
                        valuesPerType[meta.type] = [];
                      }

                      helpers.each(dataset.data, function (rawValue, index) {
                        var values = valuesPerType[meta.type];
                        var value = +me.getRightValue(rawValue);
                        if (isNaN(value) || meta.data[index].hidden) {
                          return;
                        }

                        values[index] = values[index] || 0;

                        if (opts.relativePoints) {
                          values[index] = 100;
                        } else {
                          // Don't need to split positive and negative since the log scale can't handle a 0 crossing
                          values[index] += value;
                        }
                      });
                    }
                  });

                  helpers.each(valuesPerType, function (valuesForType) {
                    var minVal = helpers.min(valuesForType);
                    var maxVal = helpers.max(valuesForType);
                    me.min =
                      me.min === null ? minVal : Math.min(me.min, minVal);
                    me.max =
                      me.max === null ? maxVal : Math.max(me.max, maxVal);
                  });
                } else {
                  helpers.each(datasets, function (dataset, datasetIndex) {
                    var meta = chart.getDatasetMeta(datasetIndex);
                    if (
                      chart.isDatasetVisible(datasetIndex) &&
                      IDMatches(meta)
                    ) {
                      helpers.each(dataset.data, function (rawValue, index) {
                        var value = +me.getRightValue(rawValue);
                        if (isNaN(value) || meta.data[index].hidden) {
                          return;
                        }

                        if (me.min === null) {
                          me.min = value;
                        } else if (value < me.min) {
                          me.min = value;
                        }

                        if (me.max === null) {
                          me.max = value;
                        } else if (value > me.max) {
                          me.max = value;
                        }
                      });
                    }
                  });
                }

                me.min = getValueOrDefault(tickOpts.min, me.min);
                me.max = getValueOrDefault(tickOpts.max, me.max);

                if (me.min === me.max) {
                  if (me.min !== 0 && me.min !== null) {
                    me.min = Math.pow(
                      10,
                      Math.floor(helpers.log10(me.min)) - 1
                    );
                    me.max = Math.pow(
                      10,
                      Math.floor(helpers.log10(me.max)) + 1
                    );
                  } else {
                    me.min = 1;
                    me.max = 10;
                  }
                }
              },
              buildTicks: function () {
                var me = this;
                var opts = me.options;
                var tickOpts = opts.ticks;
                var getValueOrDefault = helpers.getValueOrDefault;

                // Reset the ticks array. Later on, we will draw a grid line at these positions
                // The array simply contains the numerical value of the spots where ticks will be
                var ticks = (me.ticks = []);

                // Figure out what the max number of ticks we can support it is based on the size of
                // the axis area. For now, we say that the minimum tick spacing in pixels must be 50
                // We also limit the maximum number of ticks to 11 which gives a nice 10 squares on
                // the graph

                var tickVal = getValueOrDefault(
                  tickOpts.min,
                  Math.pow(10, Math.floor(helpers.log10(me.min)))
                );

                while (tickVal < me.max) {
                  ticks.push(tickVal);

                  var exp = Math.floor(helpers.log10(tickVal));
                  var significand = Math.floor(tickVal / Math.pow(10, exp)) + 1;

                  if (significand === 10) {
                    significand = 1;
                    ++exp;
                  }

                  tickVal = significand * Math.pow(10, exp);
                }

                var lastTick = getValueOrDefault(tickOpts.max, tickVal);
                ticks.push(lastTick);

                if (!me.isHorizontal()) {
                  // We are in a vertical orientation. The top value is the highest. So reverse the array
                  ticks.reverse();
                }

                // At this point, we need to update our max and min given the tick values since we have expanded the
                // range of the scale
                me.max = helpers.max(ticks);
                me.min = helpers.min(ticks);

                if (tickOpts.reverse) {
                  ticks.reverse();

                  me.start = me.max;
                  me.end = me.min;
                } else {
                  me.start = me.min;
                  me.end = me.max;
                }
              },
              convertTicksToLabels: function () {
                this.tickValues = this.ticks.slice();

                Chart.Scale.prototype.convertTicksToLabels.call(this);
              },
              // Get the correct tooltip label
              getLabelForIndex: function (index, datasetIndex) {
                return +this.getRightValue(
                  this.chart.data.datasets[datasetIndex].data[index]
                );
              },
              getPixelForTick: function (index, includeOffset) {
                return this.getPixelForValue(
                  this.tickValues[index],
                  null,
                  null,
                  includeOffset
                );
              },
              getPixelForValue: function (
                value,
                index,
                datasetIndex,
                includeOffset
              ) {
                var me = this;
                var innerDimension;
                var pixel;

                var start = me.start;
                var newVal = +me.getRightValue(value);
                var range = helpers.log10(me.end) - helpers.log10(start);
                var paddingTop = me.paddingTop;
                var paddingBottom = me.paddingBottom;
                var paddingLeft = me.paddingLeft;

                if (me.isHorizontal()) {
                  if (newVal === 0) {
                    pixel = me.left + paddingLeft;
                  } else {
                    innerDimension = me.width - (paddingLeft + me.paddingRight);
                    pixel =
                      me.left +
                      (innerDimension / range) *
                        (helpers.log10(newVal) - helpers.log10(start));
                    pixel += paddingLeft;
                  }
                } else {
                  // Bottom - top since pixels increase downard on a screen
                  if (newVal === 0) {
                    pixel = me.top + paddingTop;
                  } else {
                    innerDimension = me.height - (paddingTop + paddingBottom);
                    pixel =
                      me.bottom -
                      paddingBottom -
                      (innerDimension / range) *
                        (helpers.log10(newVal) - helpers.log10(start));
                  }
                }

                return pixel;
              },
              getValueForPixel: function (pixel) {
                var me = this;
                var offset;
                var range = helpers.log10(me.end) - helpers.log10(me.start);
                var value;
                var innerDimension;

                if (me.isHorizontal()) {
                  innerDimension =
                    me.width - (me.paddingLeft + me.paddingRight);
                  value =
                    me.start *
                    Math.pow(
                      10,
                      ((pixel - me.left - me.paddingLeft) * range) /
                        innerDimension
                    );
                } else {
                  innerDimension =
                    me.height - (me.paddingTop + me.paddingBottom);
                  value =
                    Math.pow(
                      10,
                      ((me.bottom - me.paddingBottom - pixel) * range) /
                        innerDimension
                    ) / me.start;
                }

                return value;
              },
            });
            Chart.scaleService.registerScaleType(
              "logarithmic",
              LogarithmicScale,
              defaultConfig
            );
          };
        },
        {},
      ],
      42: [
        function (require, module, exports) {
          "use strict";

          module.exports = function (Chart) {
            var helpers = Chart.helpers;
            var globalDefaults = Chart.defaults.global;

            var defaultConfig = {
              display: true,

              //Boolean - Whether to animate scaling the chart from the centre
              animate: true,
              lineArc: false,
              position: "chartArea",

              angleLines: {
                display: true,
                color: "rgba(0, 0, 0, 0.1)",
                lineWidth: 1,
              },

              // label settings
              ticks: {
                //Boolean - Show a backdrop to the scale label
                showLabelBackdrop: true,

                //String - The colour of the label backdrop
                backdropColor: "rgba(255,255,255,0.75)",

                //Number - The backdrop padding above & below the label in pixels
                backdropPaddingY: 2,

                //Number - The backdrop padding to the side of the label in pixels
                backdropPaddingX: 2,
              },

              pointLabels: {
                //Number - Point label font size in pixels
                fontSize: 10,

                //Function - Used to convert point labels
                callback: function (label) {
                  return label;
                },
              },
            };

            var LinearRadialScale = Chart.LinearScaleBase.extend({
              getValueCount: function () {
                return this.chart.data.labels.length;
              },
              setDimensions: function () {
                var me = this;
                var opts = me.options;
                var tickOpts = opts.ticks;
                // Set the unconstrained dimension before label rotation
                me.width = me.maxWidth;
                me.height = me.maxHeight;
                me.xCenter = Math.round(me.width / 2);
                me.yCenter = Math.round(me.height / 2);

                var minSize = helpers.min([me.height, me.width]);
                var tickFontSize = helpers.getValueOrDefault(
                  tickOpts.fontSize,
                  globalDefaults.defaultFontSize
                );
                me.drawingArea = opts.display
                  ? minSize / 2 - (tickFontSize / 2 + tickOpts.backdropPaddingY)
                  : minSize / 2;
              },
              determineDataLimits: function () {
                var me = this;
                var chart = me.chart;
                me.min = null;
                me.max = null;

                helpers.each(
                  chart.data.datasets,
                  function (dataset, datasetIndex) {
                    if (chart.isDatasetVisible(datasetIndex)) {
                      var meta = chart.getDatasetMeta(datasetIndex);

                      helpers.each(dataset.data, function (rawValue, index) {
                        var value = +me.getRightValue(rawValue);
                        if (isNaN(value) || meta.data[index].hidden) {
                          return;
                        }

                        if (me.min === null) {
                          me.min = value;
                        } else if (value < me.min) {
                          me.min = value;
                        }

                        if (me.max === null) {
                          me.max = value;
                        } else if (value > me.max) {
                          me.max = value;
                        }
                      });
                    }
                  }
                );

                // Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero
                me.handleTickRangeOptions();
              },
              getTickLimit: function () {
                var tickOpts = this.options.ticks;
                var tickFontSize = helpers.getValueOrDefault(
                  tickOpts.fontSize,
                  globalDefaults.defaultFontSize
                );
                return Math.min(
                  tickOpts.maxTicksLimit ? tickOpts.maxTicksLimit : 11,
                  Math.ceil(this.drawingArea / (1.5 * tickFontSize))
                );
              },
              convertTicksToLabels: function () {
                var me = this;
                Chart.LinearScaleBase.prototype.convertTicksToLabels.call(me);

                // Point labels
                me.pointLabels = me.chart.data.labels.map(
                  me.options.pointLabels.callback,
                  me
                );
              },
              getLabelForIndex: function (index, datasetIndex) {
                return +this.getRightValue(
                  this.chart.data.datasets[datasetIndex].data[index]
                );
              },
              fit: function () {
                /*
                 * Right, this is really confusing and there is a lot of maths going on here
                 * The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9
                 *
                 * Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif
                 *
                 * Solution:
                 *
                 * We assume the radius of the polygon is half the size of the canvas at first
                 * at each index we check if the text overlaps.
                 *
                 * Where it does, we store that angle and that index.
                 *
                 * After finding the largest index and angle we calculate how much we need to remove
                 * from the shape radius to move the point inwards by that x.
                 *
                 * We average the left and right distances to get the maximum shape radius that can fit in the box
                 * along with labels.
                 *
                 * Once we have that, we can find the centre point for the chart, by taking the x text protrusion
                 * on each side, removing that from the size, halving it and adding the left x protrusion width.
                 *
                 * This will mean we have a shape fitted to the canvas, as large as it can be with the labels
                 * and position it in the most space efficient manner
                 *
                 * https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif
                 */

                var pointLabels = this.options.pointLabels;
                var pointLabelFontSize = helpers.getValueOrDefault(
                  pointLabels.fontSize,
                  globalDefaults.defaultFontSize
                );
                var pointLabeFontStyle = helpers.getValueOrDefault(
                  pointLabels.fontStyle,
                  globalDefaults.defaultFontStyle
                );
                var pointLabeFontFamily = helpers.getValueOrDefault(
                  pointLabels.fontFamily,
                  globalDefaults.defaultFontFamily
                );
                var pointLabeFont = helpers.fontString(
                  pointLabelFontSize,
                  pointLabeFontStyle,
                  pointLabeFontFamily
                );

                // Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.
                // Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points
                var largestPossibleRadius = helpers.min([
                    this.height / 2 - pointLabelFontSize - 5,
                    this.width / 2,
                  ]),
                  pointPosition,
                  i,
                  textWidth,
                  halfTextWidth,
                  furthestRight = this.width,
                  furthestRightIndex,
                  furthestRightAngle,
                  furthestLeft = 0,
                  furthestLeftIndex,
                  furthestLeftAngle,
                  xProtrusionLeft,
                  xProtrusionRight,
                  radiusReductionRight,
                  radiusReductionLeft,
                  maxWidthRadius;
                this.ctx.font = pointLabeFont;

                for (i = 0; i < this.getValueCount(); i++) {
                  // 5px to space the text slightly out - similar to what we do in the draw function.
                  pointPosition = this.getPointPosition(
                    i,
                    largestPossibleRadius
                  );
                  textWidth =
                    this.ctx.measureText(
                      this.pointLabels[i] ? this.pointLabels[i] : ""
                    ).width + 5;
                  if (i === 0 || i === this.getValueCount() / 2) {
                    // If we're at index zero, or exactly the middle, we're at exactly the top/bottom
                    // of the radar chart, so text will be aligned centrally, so we'll half it and compare
                    // w/left and right text sizes
                    halfTextWidth = textWidth / 2;
                    if (pointPosition.x + halfTextWidth > furthestRight) {
                      furthestRight = pointPosition.x + halfTextWidth;
                      furthestRightIndex = i;
                    }
                    if (pointPosition.x - halfTextWidth < furthestLeft) {
                      furthestLeft = pointPosition.x - halfTextWidth;
                      furthestLeftIndex = i;
                    }
                  } else if (i < this.getValueCount() / 2) {
                    // Less than half the values means we'll left align the text
                    if (pointPosition.x + textWidth > furthestRight) {
                      furthestRight = pointPosition.x + textWidth;
                      furthestRightIndex = i;
                    }
                  } else if (i > this.getValueCount() / 2) {
                    // More than half the values means we'll right align the text
                    if (pointPosition.x - textWidth < furthestLeft) {
                      furthestLeft = pointPosition.x - textWidth;
                      furthestLeftIndex = i;
                    }
                  }
                }

                xProtrusionLeft = furthestLeft;
                xProtrusionRight = Math.ceil(furthestRight - this.width);

                furthestRightAngle = this.getIndexAngle(furthestRightIndex);
                furthestLeftAngle = this.getIndexAngle(furthestLeftIndex);

                radiusReductionRight =
                  xProtrusionRight / Math.sin(furthestRightAngle + Math.PI / 2);
                radiusReductionLeft =
                  xProtrusionLeft / Math.sin(furthestLeftAngle + Math.PI / 2);

                // Ensure we actually need to reduce the size of the chart
                radiusReductionRight = helpers.isNumber(radiusReductionRight)
                  ? radiusReductionRight
                  : 0;
                radiusReductionLeft = helpers.isNumber(radiusReductionLeft)
                  ? radiusReductionLeft
                  : 0;

                this.drawingArea = Math.round(
                  largestPossibleRadius -
                    (radiusReductionLeft + radiusReductionRight) / 2
                );
                this.setCenterPoint(radiusReductionLeft, radiusReductionRight);
              },
              setCenterPoint: function (leftMovement, rightMovement) {
                var me = this;
                var maxRight = me.width - rightMovement - me.drawingArea,
                  maxLeft = leftMovement + me.drawingArea;

                me.xCenter = Math.round((maxLeft + maxRight) / 2 + me.left);
                // Always vertically in the centre as the text height doesn't change
                me.yCenter = Math.round(me.height / 2 + me.top);
              },

              getIndexAngle: function (index) {
                var angleMultiplier = (Math.PI * 2) / this.getValueCount();
                // Start from the top instead of right, so remove a quarter of the circle

                return index * angleMultiplier - Math.PI / 2;
              },
              getDistanceFromCenterForValue: function (value) {
                var me = this;

                if (value === null) {
                  return 0; // null always in center
                }

                // Take into account half font size + the yPadding of the top value
                var scalingFactor = me.drawingArea / (me.max - me.min);
                if (me.options.reverse) {
                  return (me.max - value) * scalingFactor;
                } else {
                  return (value - me.min) * scalingFactor;
                }
              },
              getPointPosition: function (index, distanceFromCenter) {
                var me = this;
                var thisAngle = me.getIndexAngle(index);
                return {
                  x:
                    Math.round(Math.cos(thisAngle) * distanceFromCenter) +
                    me.xCenter,
                  y:
                    Math.round(Math.sin(thisAngle) * distanceFromCenter) +
                    me.yCenter,
                };
              },
              getPointPositionForValue: function (index, value) {
                return this.getPointPosition(
                  index,
                  this.getDistanceFromCenterForValue(value)
                );
              },

              getBasePosition: function () {
                var me = this;
                var min = me.min;
                var max = me.max;

                return me.getPointPositionForValue(
                  0,
                  me.beginAtZero
                    ? 0
                    : min < 0 && max < 0
                    ? max
                    : min > 0 && max > 0
                    ? min
                    : 0
                );
              },

              draw: function () {
                var me = this;
                var opts = me.options;
                var gridLineOpts = opts.gridLines;
                var tickOpts = opts.ticks;
                var angleLineOpts = opts.angleLines;
                var pointLabelOpts = opts.pointLabels;
                var getValueOrDefault = helpers.getValueOrDefault;

                if (opts.display) {
                  var ctx = me.ctx;

                  // Tick Font
                  var tickFontSize = getValueOrDefault(
                    tickOpts.fontSize,
                    globalDefaults.defaultFontSize
                  );
                  var tickFontStyle = getValueOrDefault(
                    tickOpts.fontStyle,
                    globalDefaults.defaultFontStyle
                  );
                  var tickFontFamily = getValueOrDefault(
                    tickOpts.fontFamily,
                    globalDefaults.defaultFontFamily
                  );
                  var tickLabelFont = helpers.fontString(
                    tickFontSize,
                    tickFontStyle,
                    tickFontFamily
                  );

                  helpers.each(me.ticks, function (label, index) {
                    // Don't draw a centre value (if it is minimum)
                    if (index > 0 || opts.reverse) {
                      var yCenterOffset = me.getDistanceFromCenterForValue(
                        me.ticksAsNumbers[index]
                      );
                      var yHeight = me.yCenter - yCenterOffset;

                      // Draw circular lines around the scale
                      if (gridLineOpts.display && index !== 0) {
                        ctx.strokeStyle = helpers.getValueAtIndexOrDefault(
                          gridLineOpts.color,
                          index - 1
                        );
                        ctx.lineWidth = helpers.getValueAtIndexOrDefault(
                          gridLineOpts.lineWidth,
                          index - 1
                        );

                        if (opts.lineArc) {
                          // Draw circular arcs between the points
                          ctx.beginPath();
                          ctx.arc(
                            me.xCenter,
                            me.yCenter,
                            yCenterOffset,
                            0,
                            Math.PI * 2
                          );
                          ctx.closePath();
                          ctx.stroke();
                        } else {
                          // Draw straight lines connecting each index
                          ctx.beginPath();
                          for (var i = 0; i < me.getValueCount(); i++) {
                            var pointPosition = me.getPointPosition(
                              i,
                              yCenterOffset
                            );
                            if (i === 0) {
                              ctx.moveTo(pointPosition.x, pointPosition.y);
                            } else {
                              ctx.lineTo(pointPosition.x, pointPosition.y);
                            }
                          }
                          ctx.closePath();
                          ctx.stroke();
                        }
                      }

                      if (tickOpts.display) {
                        var tickFontColor = getValueOrDefault(
                          tickOpts.fontColor,
                          globalDefaults.defaultFontColor
                        );
                        ctx.font = tickLabelFont;

                        if (tickOpts.showLabelBackdrop) {
                          var labelWidth = ctx.measureText(label).width;
                          ctx.fillStyle = tickOpts.backdropColor;
                          ctx.fillRect(
                            me.xCenter -
                              labelWidth / 2 -
                              tickOpts.backdropPaddingX,
                            yHeight -
                              tickFontSize / 2 -
                              tickOpts.backdropPaddingY,
                            labelWidth + tickOpts.backdropPaddingX * 2,
                            tickFontSize + tickOpts.backdropPaddingY * 2
                          );
                        }

                        ctx.textAlign = "center";
                        ctx.textBaseline = "middle";
                        ctx.fillStyle = tickFontColor;
                        ctx.fillText(label, me.xCenter, yHeight);
                      }
                    }
                  });

                  if (!opts.lineArc) {
                    ctx.lineWidth = angleLineOpts.lineWidth;
                    ctx.strokeStyle = angleLineOpts.color;

                    var outerDistance = me.getDistanceFromCenterForValue(
                      opts.reverse ? me.min : me.max
                    );

                    // Point Label Font
                    var pointLabelFontSize = getValueOrDefault(
                      pointLabelOpts.fontSize,
                      globalDefaults.defaultFontSize
                    );
                    var pointLabeFontStyle = getValueOrDefault(
                      pointLabelOpts.fontStyle,
                      globalDefaults.defaultFontStyle
                    );
                    var pointLabeFontFamily = getValueOrDefault(
                      pointLabelOpts.fontFamily,
                      globalDefaults.defaultFontFamily
                    );
                    var pointLabeFont = helpers.fontString(
                      pointLabelFontSize,
                      pointLabeFontStyle,
                      pointLabeFontFamily
                    );

                    for (var i = me.getValueCount() - 1; i >= 0; i--) {
                      if (angleLineOpts.display) {
                        var outerPosition = me.getPointPosition(
                          i,
                          outerDistance
                        );
                        ctx.beginPath();
                        ctx.moveTo(me.xCenter, me.yCenter);
                        ctx.lineTo(outerPosition.x, outerPosition.y);
                        ctx.stroke();
                        ctx.closePath();
                      }
                      // Extra 3px out for some label spacing
                      var pointLabelPosition = me.getPointPosition(
                        i,
                        outerDistance + 5
                      );

                      // Keep this in loop since we may support array properties here
                      var pointLabelFontColor = getValueOrDefault(
                        pointLabelOpts.fontColor,
                        globalDefaults.defaultFontColor
                      );
                      ctx.font = pointLabeFont;
                      ctx.fillStyle = pointLabelFontColor;

                      var pointLabels = me.pointLabels,
                        labelsCount = pointLabels.length,
                        halfLabelsCount = pointLabels.length / 2,
                        quarterLabelsCount = halfLabelsCount / 2,
                        upperHalf =
                          i < quarterLabelsCount ||
                          i > labelsCount - quarterLabelsCount,
                        exactQuarter =
                          i === quarterLabelsCount ||
                          i === labelsCount - quarterLabelsCount;
                      if (i === 0) {
                        ctx.textAlign = "center";
                      } else if (i === halfLabelsCount) {
                        ctx.textAlign = "center";
                      } else if (i < halfLabelsCount) {
                        ctx.textAlign = "left";
                      } else {
                        ctx.textAlign = "right";
                      }

                      // Set the correct text baseline based on outer positioning
                      if (exactQuarter) {
                        ctx.textBaseline = "middle";
                      } else if (upperHalf) {
                        ctx.textBaseline = "bottom";
                      } else {
                        ctx.textBaseline = "top";
                      }

                      ctx.fillText(
                        pointLabels[i] ? pointLabels[i] : "",
                        pointLabelPosition.x,
                        pointLabelPosition.y
                      );
                    }
                  }
                }
              },
            });
            Chart.scaleService.registerScaleType(
              "radialLinear",
              LinearRadialScale,
              defaultConfig
            );
          };
        },
        {},
      ],
      43: [
        function (require, module, exports) {
          /*global window: false */
          "use strict";

          var moment = require(1);
          moment = typeof moment === "function" ? moment : window.moment;

          module.exports = function (Chart) {
            var helpers = Chart.helpers;
            var time = {
              units: [
                {
                  name: "millisecond",
                  steps: [1, 2, 5, 10, 20, 50, 100, 250, 500],
                },
                {
                  name: "second",
                  steps: [1, 2, 5, 10, 30],
                },
                {
                  name: "minute",
                  steps: [1, 2, 5, 10, 30],
                },
                {
                  name: "hour",
                  steps: [1, 2, 3, 6, 12],
                },
                {
                  name: "day",
                  steps: [1, 2, 5],
                },
                {
                  name: "week",
                  maxStep: 4,
                },
                {
                  name: "month",
                  maxStep: 3,
                },
                {
                  name: "quarter",
                  maxStep: 4,
                },
                {
                  name: "year",
                  maxStep: false,
                },
              ],
            };

            var defaultConfig = {
              position: "bottom",

              time: {
                parser: false, // false == a pattern string from http://momentjs.com/docs/#/parsing/string-format/ or a custom callback that converts its argument to a moment
                format: false, // DEPRECATED false == date objects, moment object, callback or a pattern string from http://momentjs.com/docs/#/parsing/string-format/
                unit: false, // false == automatic or override with week, month, year, etc.
                round: false, // none, or override with week, month, year, etc.
                displayFormat: false, // DEPRECATED
                isoWeekday: false, // override week start day - see http://momentjs.com/docs/#/get-set/iso-weekday/

                // defaults to unit's corresponding unitFormat below or override using pattern string from http://momentjs.com/docs/#/displaying/format/
                displayFormats: {
                  millisecond: "h:mm:ss.SSS a", // 11:20:01.123 AM,
                  second: "h:mm:ss a", // 11:20:01 AM
                  minute: "h:mm:ss a", // 11:20:01 AM
                  hour: "MMM D, hA", // Sept 4, 5PM
                  day: "ll", // Sep 4 2015
                  week: "ll", // Week 46, or maybe "[W]WW - YYYY" ?
                  month: "MMM YYYY", // Sept 2015
                  quarter: "[Q]Q - YYYY", // Q3
                  year: "YYYY", // 2015
                },
              },
              ticks: {
                autoSkip: false,
              },
            };

            var TimeScale = Chart.Scale.extend({
              initialize: function () {
                if (!moment) {
                  throw new Error(
                    "Chart.js - Moment.js could not be found! You must include it before Chart.js to use the time scale. Download at https://momentjs.com"
                  );
                }

                Chart.Scale.prototype.initialize.call(this);
              },
              getLabelMoment: function (datasetIndex, index) {
                return this.labelMoments[datasetIndex][index];
              },
              getMomentStartOf: function (tick) {
                var me = this;
                if (
                  me.options.time.unit === "week" &&
                  me.options.time.isoWeekday !== false
                ) {
                  return tick
                    .clone()
                    .startOf("isoWeek")
                    .isoWeekday(me.options.time.isoWeekday);
                } else {
                  return tick.clone().startOf(me.tickUnit);
                }
              },
              determineDataLimits: function () {
                var me = this;
                me.labelMoments = [];

                // Only parse these once. If the dataset does not have data as x,y pairs, we will use
                // these
                var scaleLabelMoments = [];
                if (me.chart.data.labels && me.chart.data.labels.length > 0) {
                  helpers.each(
                    me.chart.data.labels,
                    function (label, index) {
                      var labelMoment = me.parseTime(label);

                      if (labelMoment.isValid()) {
                        if (me.options.time.round) {
                          labelMoment.startOf(me.options.time.round);
                        }
                        scaleLabelMoments.push(labelMoment);
                      }
                    },
                    me
                  );

                  me.firstTick = moment.min.call(me, scaleLabelMoments);
                  me.lastTick = moment.max.call(me, scaleLabelMoments);
                } else {
                  me.firstTick = null;
                  me.lastTick = null;
                }

                helpers.each(
                  me.chart.data.datasets,
                  function (dataset, datasetIndex) {
                    var momentsForDataset = [];
                    var datasetVisible =
                      me.chart.isDatasetVisible(datasetIndex);

                    if (
                      typeof dataset.data[0] === "object" &&
                      dataset.data[0] !== null
                    ) {
                      helpers.each(
                        dataset.data,
                        function (value, index) {
                          var labelMoment = me.parseTime(
                            me.getRightValue(value)
                          );

                          if (labelMoment.isValid()) {
                            if (me.options.time.round) {
                              labelMoment.startOf(me.options.time.round);
                            }
                            momentsForDataset.push(labelMoment);

                            if (datasetVisible) {
                              // May have gone outside the scale ranges, make sure we keep the first and last ticks updated
                              me.firstTick =
                                me.firstTick !== null
                                  ? moment.min(me.firstTick, labelMoment)
                                  : labelMoment;
                              me.lastTick =
                                me.lastTick !== null
                                  ? moment.max(me.lastTick, labelMoment)
                                  : labelMoment;
                            }
                          }
                        },
                        me
                      );
                    } else {
                      // We have no labels. Use the ones from the scale
                      momentsForDataset = scaleLabelMoments;
                    }

                    me.labelMoments.push(momentsForDataset);
                  },
                  me
                );

                // Set these after we've done all the data
                if (me.options.time.min) {
                  me.firstTick = me.parseTime(me.options.time.min);
                }

                if (me.options.time.max) {
                  me.lastTick = me.parseTime(me.options.time.max);
                }

                // We will modify these, so clone for later
                me.firstTick = (me.firstTick || moment()).clone();
                me.lastTick = (me.lastTick || moment()).clone();
              },
              buildTicks: function (index) {
                var me = this;

                me.ctx.save();
                var tickFontSize = helpers.getValueOrDefault(
                  me.options.ticks.fontSize,
                  Chart.defaults.global.defaultFontSize
                );
                var tickFontStyle = helpers.getValueOrDefault(
                  me.options.ticks.fontStyle,
                  Chart.defaults.global.defaultFontStyle
                );
                var tickFontFamily = helpers.getValueOrDefault(
                  me.options.ticks.fontFamily,
                  Chart.defaults.global.defaultFontFamily
                );
                var tickLabelFont = helpers.fontString(
                  tickFontSize,
                  tickFontStyle,
                  tickFontFamily
                );
                me.ctx.font = tickLabelFont;

                me.ticks = [];
                me.unitScale = 1; // How much we scale the unit by, ie 2 means 2x unit per step
                me.scaleSizeInUnits = 0; // How large the scale is in the base unit (seconds, minutes, etc)

                // Set unit override if applicable
                if (me.options.time.unit) {
                  me.tickUnit = me.options.time.unit || "day";
                  me.displayFormat =
                    me.options.time.displayFormats[me.tickUnit];
                  me.scaleSizeInUnits = me.lastTick.diff(
                    me.firstTick,
                    me.tickUnit,
                    true
                  );
                  me.unitScale = helpers.getValueOrDefault(
                    me.options.time.unitStepSize,
                    1
                  );
                } else {
                  // Determine the smallest needed unit of the time
                  var innerWidth = me.isHorizontal()
                    ? me.width - (me.paddingLeft + me.paddingRight)
                    : me.height - (me.paddingTop + me.paddingBottom);

                  // Crude approximation of what the label length might be
                  var tempFirstLabel = me.tickFormatFunction(
                    me.firstTick,
                    0,
                    []
                  );
                  var tickLabelWidth = me.ctx.measureText(tempFirstLabel).width;
                  var cosRotation = Math.cos(
                    helpers.toRadians(me.options.ticks.maxRotation)
                  );
                  var sinRotation = Math.sin(
                    helpers.toRadians(me.options.ticks.maxRotation)
                  );
                  tickLabelWidth =
                    tickLabelWidth * cosRotation + tickFontSize * sinRotation;
                  var labelCapacity = innerWidth / tickLabelWidth;

                  // Start as small as possible
                  me.tickUnit = "millisecond";
                  me.scaleSizeInUnits = me.lastTick.diff(
                    me.firstTick,
                    me.tickUnit,
                    true
                  );
                  me.displayFormat =
                    me.options.time.displayFormats[me.tickUnit];

                  var unitDefinitionIndex = 0;
                  var unitDefinition = time.units[unitDefinitionIndex];

                  // While we aren't ideal and we don't have units left
                  while (unitDefinitionIndex < time.units.length) {
                    // Can we scale this unit. If `false` we can scale infinitely
                    me.unitScale = 1;

                    if (
                      helpers.isArray(unitDefinition.steps) &&
                      Math.ceil(me.scaleSizeInUnits / labelCapacity) <
                        helpers.max(unitDefinition.steps)
                    ) {
                      // Use one of the prefedined steps
                      for (
                        var idx = 0;
                        idx < unitDefinition.steps.length;
                        ++idx
                      ) {
                        if (
                          unitDefinition.steps[idx] >=
                          Math.ceil(me.scaleSizeInUnits / labelCapacity)
                        ) {
                          me.unitScale = helpers.getValueOrDefault(
                            me.options.time.unitStepSize,
                            unitDefinition.steps[idx]
                          );
                          break;
                        }
                      }

                      break;
                    } else if (
                      unitDefinition.maxStep === false ||
                      Math.ceil(me.scaleSizeInUnits / labelCapacity) <
                        unitDefinition.maxStep
                    ) {
                      // We have a max step. Scale this unit
                      me.unitScale = helpers.getValueOrDefault(
                        me.options.time.unitStepSize,
                        Math.ceil(me.scaleSizeInUnits / labelCapacity)
                      );
                      break;
                    } else {
                      // Move to the next unit up
                      ++unitDefinitionIndex;
                      unitDefinition = time.units[unitDefinitionIndex];

                      me.tickUnit = unitDefinition.name;
                      var leadingUnitBuffer = me.firstTick.diff(
                        me.getMomentStartOf(me.firstTick),
                        me.tickUnit,
                        true
                      );
                      var trailingUnitBuffer = me
                        .getMomentStartOf(
                          me.lastTick.clone().add(1, me.tickUnit)
                        )
                        .diff(me.lastTick, me.tickUnit, true);
                      me.scaleSizeInUnits =
                        me.lastTick.diff(me.firstTick, me.tickUnit, true) +
                        leadingUnitBuffer +
                        trailingUnitBuffer;
                      me.displayFormat =
                        me.options.time.displayFormats[unitDefinition.name];
                    }
                  }
                }

                var roundedStart;

                // Only round the first tick if we have no hard minimum
                if (!me.options.time.min) {
                  me.firstTick = me.getMomentStartOf(me.firstTick);
                  roundedStart = me.firstTick;
                } else {
                  roundedStart = me.getMomentStartOf(me.firstTick);
                }

                // Only round the last tick if we have no hard maximum
                if (!me.options.time.max) {
                  var roundedEnd = me.getMomentStartOf(me.lastTick);
                  if (roundedEnd.diff(me.lastTick, me.tickUnit, true) !== 0) {
                    // Do not use end of because we need me to be in the next time unit
                    me.lastTick = me.getMomentStartOf(
                      me.lastTick.add(1, me.tickUnit)
                    );
                  }
                }

                me.smallestLabelSeparation = me.width;

                helpers.each(
                  me.chart.data.datasets,
                  function (dataset, datasetIndex) {
                    for (
                      var i = 1;
                      i < me.labelMoments[datasetIndex].length;
                      i++
                    ) {
                      me.smallestLabelSeparation = Math.min(
                        me.smallestLabelSeparation,
                        me.labelMoments[datasetIndex][i].diff(
                          me.labelMoments[datasetIndex][i - 1],
                          me.tickUnit,
                          true
                        )
                      );
                    }
                  },
                  me
                );

                // Tick displayFormat override
                if (me.options.time.displayFormat) {
                  me.displayFormat = me.options.time.displayFormat;
                }

                // first tick. will have been rounded correctly if options.time.min is not specified
                me.ticks.push(me.firstTick.clone());

                // For every unit in between the first and last moment, create a moment and add it to the ticks tick
                for (var i = 1; i <= me.scaleSizeInUnits; ++i) {
                  var newTick = roundedStart.clone().add(i, me.tickUnit);

                  // Are we greater than the max time
                  if (
                    me.options.time.max &&
                    newTick.diff(me.lastTick, me.tickUnit, true) >= 0
                  ) {
                    break;
                  }

                  if (i % me.unitScale === 0) {
                    me.ticks.push(newTick);
                  }
                }

                // Always show the right tick
                var diff = me.ticks[me.ticks.length - 1].diff(
                  me.lastTick,
                  me.tickUnit
                );
                if (diff !== 0 || me.scaleSizeInUnits === 0) {
                  // this is a weird case. If the <max> option is the same as the end option, we can't just diff the times because the tick was created from the roundedStart
                  // but the last tick was not rounded.
                  if (me.options.time.max) {
                    me.ticks.push(me.lastTick.clone());
                    me.scaleSizeInUnits = me.lastTick.diff(
                      me.ticks[0],
                      me.tickUnit,
                      true
                    );
                  } else {
                    me.ticks.push(me.lastTick.clone());
                    me.scaleSizeInUnits = me.lastTick.diff(
                      me.firstTick,
                      me.tickUnit,
                      true
                    );
                  }
                }

                me.ctx.restore();
              },
              // Get tooltip label
              getLabelForIndex: function (index, datasetIndex) {
                var me = this;
                var label =
                  me.chart.data.labels && index < me.chart.data.labels.length
                    ? me.chart.data.labels[index]
                    : "";

                if (
                  typeof me.chart.data.datasets[datasetIndex].data[0] ===
                  "object"
                ) {
                  label = me.getRightValue(
                    me.chart.data.datasets[datasetIndex].data[index]
                  );
                }

                // Format nicely
                if (me.options.time.tooltipFormat) {
                  label = me
                    .parseTime(label)
                    .format(me.options.time.tooltipFormat);
                }

                return label;
              },
              // Function to format an individual tick mark
              tickFormatFunction: function tickFormatFunction(
                tick,
                index,
                ticks
              ) {
                var formattedTick = tick.format(this.displayFormat);
                var tickOpts = this.options.ticks;
                var callback = helpers.getValueOrDefault(
                  tickOpts.callback,
                  tickOpts.userCallback
                );

                if (callback) {
                  return callback(formattedTick, index, ticks);
                } else {
                  return formattedTick;
                }
              },
              convertTicksToLabels: function () {
                var me = this;
                me.tickMoments = me.ticks;
                me.ticks = me.ticks.map(me.tickFormatFunction, me);
              },
              getPixelForValue: function (
                value,
                index,
                datasetIndex,
                includeOffset
              ) {
                var me = this;
                var labelMoment =
                  value && value.isValid && value.isValid()
                    ? value
                    : me.getLabelMoment(datasetIndex, index);

                if (labelMoment) {
                  var offset = labelMoment.diff(
                    me.firstTick,
                    me.tickUnit,
                    true
                  );

                  var decimal = offset / me.scaleSizeInUnits;

                  if (me.isHorizontal()) {
                    var innerWidth =
                      me.width - (me.paddingLeft + me.paddingRight);
                    var valueWidth =
                      innerWidth / Math.max(me.ticks.length - 1, 1);
                    var valueOffset = innerWidth * decimal + me.paddingLeft;

                    return me.left + Math.round(valueOffset);
                  } else {
                    var innerHeight =
                      me.height - (me.paddingTop + me.paddingBottom);
                    var valueHeight =
                      innerHeight / Math.max(me.ticks.length - 1, 1);
                    var heightOffset = innerHeight * decimal + me.paddingTop;

                    return me.top + Math.round(heightOffset);
                  }
                }
              },
              getPixelForTick: function (index, includeOffset) {
                return this.getPixelForValue(
                  this.tickMoments[index],
                  null,
                  null,
                  includeOffset
                );
              },
              getValueForPixel: function (pixel) {
                var me = this;
                var innerDimension = me.isHorizontal()
                  ? me.width - (me.paddingLeft + me.paddingRight)
                  : me.height - (me.paddingTop + me.paddingBottom);
                var offset =
                  (pixel -
                    (me.isHorizontal()
                      ? me.left + me.paddingLeft
                      : me.top + me.paddingTop)) /
                  innerDimension;
                offset *= me.scaleSizeInUnits;
                return me.firstTick
                  .clone()
                  .add(
                    moment.duration(offset, me.tickUnit).asSeconds(),
                    "seconds"
                  );
              },
              parseTime: function (label) {
                var me = this;
                if (typeof me.options.time.parser === "string") {
                  return moment(label, me.options.time.parser);
                }
                if (typeof me.options.time.parser === "function") {
                  return me.options.time.parser(label);
                }
                // Date objects
                if (
                  typeof label.getMonth === "function" ||
                  typeof label === "number"
                ) {
                  return moment(label);
                }
                // Moment support
                if (label.isValid && label.isValid()) {
                  return label;
                }
                // Custom parsing (return an instance of moment)
                if (
                  typeof me.options.time.format !== "string" &&
                  me.options.time.format.call
                ) {
                  console.warn(
                    "options.time.format is deprecated and replaced by options.time.parser. See http://nnnick.github.io/Chart.js/docs-v2/#scales-time-scale"
                  );
                  return me.options.time.format(label);
                }
                // Moment format parsing
                return moment(label, me.options.time.format);
              },
            });
            Chart.scaleService.registerScaleType(
              "time",
              TimeScale,
              defaultConfig
            );
          };
        },
        { 1: 1 },
      ],
    },
    {},
    [7]
  )(7);
});
/*
     _ _      _       _
 ___| (_) ___| | __  (_)___
/ __| | |/ __| |/ /  | / __|
\__ \ | | (__|   < _ | \__ \
|___/_|_|\___|_|\_(_)/ |___/
                   |__/

 Version: 1.6.0
  Author: Ken Wheeler
 Website: http://kenwheeler.github.io
    Docs: http://kenwheeler.github.io/slick
    Repo: http://github.com/kenwheeler/slick
  Issues: http://github.com/kenwheeler/slick/issues

 */
/* global window, document, define, jQuery, setInterval, clearInterval */
(function (factory) {
  "use strict";
  if (typeof define === "function" && define.amd) {
    define(["jquery"], factory);
  } else if (typeof exports !== "undefined") {
    module.exports = factory(require("jquery"));
  } else {
    factory(jQuery);
  }
})(function ($) {
  "use strict";
  var Slick = window.Slick || {};

  Slick = (function () {
    var instanceUid = 0;

    function Slick(element, settings) {
      var _ = this,
        dataSettings;

      _.defaults = {
        accessibility: true,
        adaptiveHeight: false,
        appendArrows: $(element),
        appendDots: $(element),
        arrows: true,
        asNavFor: null,
        prevArrow:
          '<button type="button" data-role="none" class="slick-prev" aria-label="Previous" tabindex="0" role="button">Previous</button>',
        nextArrow:
          '<button type="button" data-role="none" class="slick-next" aria-label="Next" tabindex="0" role="button">Next</button>',
        autoplay: false,
        autoplaySpeed: 3000,
        centerMode: false,
        centerPadding: "50px",
        cssEase: "ease",
        customPaging: function (slider, i) {
          return $(
            '<button type="button" data-role="none" role="button" tabindex="0" />'
          ).text(i + 1);
        },
        dots: false,
        dotsClass: "slick-dots",
        draggable: true,
        easing: "linear",
        edgeFriction: 0.35,
        fade: false,
        focusOnSelect: false,
        infinite: true,
        initialSlide: 0,
        lazyLoad: "ondemand",
        mobileFirst: false,
        pauseOnHover: true,
        pauseOnFocus: true,
        pauseOnDotsHover: false,
        respondTo: "window",
        responsive: null,
        rows: 1,
        rtl: false,
        slide: "",
        slidesPerRow: 1,
        slidesToShow: 1,
        slidesToScroll: 1,
        speed: 500,
        swipe: true,
        swipeToSlide: false,
        touchMove: true,
        touchThreshold: 5,
        useCSS: true,
        useTransform: true,
        variableWidth: false,
        vertical: false,
        verticalSwiping: false,
        waitForAnimate: true,
        zIndex: 1000,
      };

      _.initials = {
        animating: false,
        dragging: false,
        autoPlayTimer: null,
        currentDirection: 0,
        currentLeft: null,
        currentSlide: 0,
        direction: 1,
        $dots: null,
        listWidth: null,
        listHeight: null,
        loadIndex: 0,
        $nextArrow: null,
        $prevArrow: null,
        slideCount: null,
        slideWidth: null,
        $slideTrack: null,
        $slides: null,
        sliding: false,
        slideOffset: 0,
        swipeLeft: null,
        $list: null,
        touchObject: {},
        transformsEnabled: false,
        unslicked: false,
      };

      $.extend(_, _.initials);

      _.activeBreakpoint = null;
      _.animType = null;
      _.animProp = null;
      _.breakpoints = [];
      _.breakpointSettings = [];
      _.cssTransitions = false;
      _.focussed = false;
      _.interrupted = false;
      _.hidden = "hidden";
      _.paused = true;
      _.positionProp = null;
      _.respondTo = null;
      _.rowCount = 1;
      _.shouldClick = true;
      _.$slider = $(element);
      _.$slidesCache = null;
      _.transformType = null;
      _.transitionType = null;
      _.visibilityChange = "visibilitychange";
      _.windowWidth = 0;
      _.windowTimer = null;

      dataSettings = $(element).data("slick") || {};

      _.options = $.extend({}, _.defaults, settings, dataSettings);

      _.currentSlide = _.options.initialSlide;

      _.originalSettings = _.options;

      if (typeof document.mozHidden !== "undefined") {
        _.hidden = "mozHidden";
        _.visibilityChange = "mozvisibilitychange";
      } else if (typeof document.webkitHidden !== "undefined") {
        _.hidden = "webkitHidden";
        _.visibilityChange = "webkitvisibilitychange";
      }

      _.autoPlay = $.proxy(_.autoPlay, _);
      _.autoPlayClear = $.proxy(_.autoPlayClear, _);
      _.autoPlayIterator = $.proxy(_.autoPlayIterator, _);
      _.changeSlide = $.proxy(_.changeSlide, _);
      _.clickHandler = $.proxy(_.clickHandler, _);
      _.selectHandler = $.proxy(_.selectHandler, _);
      _.setPosition = $.proxy(_.setPosition, _);
      _.swipeHandler = $.proxy(_.swipeHandler, _);
      _.dragHandler = $.proxy(_.dragHandler, _);
      _.keyHandler = $.proxy(_.keyHandler, _);

      _.instanceUid = instanceUid++;

      // A simple way to check for HTML strings
      // Strict HTML recognition (must start with <)
      // Extracted from jQuery v1.11 source
      _.htmlExpr = /^(?:\s*(<[\w\W]+>)[^>]*)$/;

      _.registerBreakpoints();
      _.init(true);
    }

    return Slick;
  })();

  Slick.prototype.activateADA = function () {
    var _ = this;

    _.$slideTrack
      .find(".slick-active")
      .attr({
        "aria-hidden": "false",
      })
      .find("a, input, button, select")
      .attr({
        tabindex: "0",
      });
  };

  Slick.prototype.addSlide = Slick.prototype.slickAdd = function (
    markup,
    index,
    addBefore
  ) {
    var _ = this;

    if (typeof index === "boolean") {
      addBefore = index;
      index = null;
    } else if (index < 0 || index >= _.slideCount) {
      return false;
    }

    _.unload();

    if (typeof index === "number") {
      if (index === 0 && _.$slides.length === 0) {
        $(markup).appendTo(_.$slideTrack);
      } else if (addBefore) {
        $(markup).insertBefore(_.$slides.eq(index));
      } else {
        $(markup).insertAfter(_.$slides.eq(index));
      }
    } else {
      if (addBefore === true) {
        $(markup).prependTo(_.$slideTrack);
      } else {
        $(markup).appendTo(_.$slideTrack);
      }
    }

    _.$slides = _.$slideTrack.children(this.options.slide);

    _.$slideTrack.children(this.options.slide).detach();

    _.$slideTrack.append(_.$slides);

    _.$slides.each(function (index, element) {
      $(element).attr("data-slick-index", index);
    });

    _.$slidesCache = _.$slides;

    _.reinit();
  };

  Slick.prototype.animateHeight = function () {
    var _ = this;
    if (
      _.options.slidesToShow === 1 &&
      _.options.adaptiveHeight === true &&
      _.options.vertical === false
    ) {
      var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
      _.$list.animate(
        {
          height: targetHeight,
        },
        _.options.speed
      );
    }
  };

  Slick.prototype.animateSlide = function (targetLeft, callback) {
    var animProps = {},
      _ = this;

    _.animateHeight();

    if (_.options.rtl === true && _.options.vertical === false) {
      targetLeft = -targetLeft;
    }
    if (_.transformsEnabled === false) {
      if (_.options.vertical === false) {
        _.$slideTrack.animate(
          {
            left: targetLeft,
          },
          _.options.speed,
          _.options.easing,
          callback
        );
      } else {
        _.$slideTrack.animate(
          {
            top: targetLeft,
          },
          _.options.speed,
          _.options.easing,
          callback
        );
      }
    } else {
      if (_.cssTransitions === false) {
        if (_.options.rtl === true) {
          _.currentLeft = -_.currentLeft;
        }
        $({
          animStart: _.currentLeft,
        }).animate(
          {
            animStart: targetLeft,
          },
          {
            duration: _.options.speed,
            easing: _.options.easing,
            step: function (now) {
              now = Math.ceil(now);
              if (_.options.vertical === false) {
                animProps[_.animType] = "translate(" + now + "px, 0px)";
                _.$slideTrack.css(animProps);
              } else {
                animProps[_.animType] = "translate(0px," + now + "px)";
                _.$slideTrack.css(animProps);
              }
            },
            complete: function () {
              if (callback) {
                callback.call();
              }
            },
          }
        );
      } else {
        _.applyTransition();
        targetLeft = Math.ceil(targetLeft);

        if (_.options.vertical === false) {
          animProps[_.animType] = "translate3d(" + targetLeft + "px, 0px, 0px)";
        } else {
          animProps[_.animType] = "translate3d(0px," + targetLeft + "px, 0px)";
        }
        _.$slideTrack.css(animProps);

        if (callback) {
          setTimeout(function () {
            _.disableTransition();

            callback.call();
          }, _.options.speed);
        }
      }
    }
  };

  Slick.prototype.getNavTarget = function () {
    var _ = this,
      asNavFor = _.options.asNavFor;

    if (asNavFor && asNavFor !== null) {
      asNavFor = $(asNavFor).not(_.$slider);
    }

    return asNavFor;
  };

  Slick.prototype.asNavFor = function (index) {
    var _ = this,
      asNavFor = _.getNavTarget();

    if (asNavFor !== null && typeof asNavFor === "object") {
      asNavFor.each(function () {
        var target = $(this).slick("getSlick");
        if (!target.unslicked) {
          target.slideHandler(index, true);
        }
      });
    }
  };

  Slick.prototype.applyTransition = function (slide) {
    var _ = this,
      transition = {};

    if (_.options.fade === false) {
      transition[_.transitionType] =
        _.transformType + " " + _.options.speed + "ms " + _.options.cssEase;
    } else {
      transition[_.transitionType] =
        "opacity " + _.options.speed + "ms " + _.options.cssEase;
    }

    if (_.options.fade === false) {
      _.$slideTrack.css(transition);
    } else {
      _.$slides.eq(slide).css(transition);
    }
  };

  Slick.prototype.autoPlay = function () {
    var _ = this;

    _.autoPlayClear();

    if (_.slideCount > _.options.slidesToShow) {
      _.autoPlayTimer = setInterval(
        _.autoPlayIterator,
        _.options.autoplaySpeed
      );
    }
  };

  Slick.prototype.autoPlayClear = function () {
    var _ = this;

    if (_.autoPlayTimer) {
      clearInterval(_.autoPlayTimer);
    }
  };

  Slick.prototype.autoPlayIterator = function () {
    var _ = this,
      slideTo = _.currentSlide + _.options.slidesToScroll;

    if (!_.paused && !_.interrupted && !_.focussed) {
      if (_.options.infinite === false) {
        if (_.direction === 1 && _.currentSlide + 1 === _.slideCount - 1) {
          _.direction = 0;
        } else if (_.direction === 0) {
          slideTo = _.currentSlide - _.options.slidesToScroll;

          if (_.currentSlide - 1 === 0) {
            _.direction = 1;
          }
        }
      }

      _.slideHandler(slideTo);
    }
  };

  Slick.prototype.buildArrows = function () {
    var _ = this;

    if (_.options.arrows === true) {
      _.$prevArrow = $(_.options.prevArrow).addClass("slick-arrow");
      _.$nextArrow = $(_.options.nextArrow).addClass("slick-arrow");

      if (_.slideCount > _.options.slidesToShow) {
        _.$prevArrow
          .removeClass("slick-hidden")
          .removeAttr("aria-hidden tabindex");
        _.$nextArrow
          .removeClass("slick-hidden")
          .removeAttr("aria-hidden tabindex");

        if (_.htmlExpr.test(_.options.prevArrow)) {
          _.$prevArrow.prependTo(_.options.appendArrows);
        }

        if (_.htmlExpr.test(_.options.nextArrow)) {
          _.$nextArrow.appendTo(_.options.appendArrows);
        }

        if (_.options.infinite !== true) {
          _.$prevArrow.addClass("slick-disabled").attr("aria-disabled", "true");
        }
      } else {
        _.$prevArrow
          .add(_.$nextArrow)

          .addClass("slick-hidden")
          .attr({
            "aria-disabled": "true",
            tabindex: "-1",
          });
      }
    }
  };

  Slick.prototype.buildDots = function () {
    var _ = this,
      i,
      dot;

    if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
      _.$slider.addClass("slick-dotted");

      dot = $("<ul />").addClass(_.options.dotsClass);

      for (i = 0; i <= _.getDotCount(); i += 1) {
        dot.append($("<li />").append(_.options.customPaging.call(this, _, i)));
      }

      _.$dots = dot.appendTo(_.options.appendDots);

      _.$dots
        .find("li")
        .first()
        .addClass("slick-active")
        .attr("aria-hidden", "false");
    }
  };

  Slick.prototype.buildOut = function () {
    var _ = this;

    _.$slides = _.$slider
      .children(_.options.slide + ":not(.slick-cloned)")
      .addClass("slick-slide");

    _.slideCount = _.$slides.length;

    _.$slides.each(function (index, element) {
      $(element)
        .attr("data-slick-index", index)
        .data("originalStyling", $(element).attr("style") || "");
    });

    _.$slider.addClass("slick-slider");

    _.$slideTrack =
      _.slideCount === 0
        ? $('<div class="slick-track"/>').appendTo(_.$slider)
        : _.$slides.wrapAll('<div class="slick-track"/>').parent();

    _.$list = _.$slideTrack
      .wrap('<div aria-live="polite" class="slick-list"/>')
      .parent();
    _.$slideTrack.css("opacity", 0);

    if (_.options.centerMode === true || _.options.swipeToSlide === true) {
      _.options.slidesToScroll = 1;
    }

    $("img[data-lazy]", _.$slider).not("[src]").addClass("slick-loading");

    _.setupInfinite();

    _.buildArrows();

    _.buildDots();

    _.updateDots();

    _.setSlideClasses(typeof _.currentSlide === "number" ? _.currentSlide : 0);

    if (_.options.draggable === true) {
      _.$list.addClass("draggable");
    }
  };

  Slick.prototype.buildRows = function () {
    var _ = this,
      a,
      b,
      c,
      newSlides,
      numOfSlides,
      originalSlides,
      slidesPerSection;

    newSlides = document.createDocumentFragment();
    originalSlides = _.$slider.children();

    if (_.options.rows > 1) {
      slidesPerSection = _.options.slidesPerRow * _.options.rows;
      numOfSlides = Math.ceil(originalSlides.length / slidesPerSection);

      for (a = 0; a < numOfSlides; a++) {
        var slide = document.createElement("div");
        for (b = 0; b < _.options.rows; b++) {
          var row = document.createElement("div");
          for (c = 0; c < _.options.slidesPerRow; c++) {
            var target =
              a * slidesPerSection + (b * _.options.slidesPerRow + c);
            if (originalSlides.get(target)) {
              row.appendChild(originalSlides.get(target));
            }
          }
          slide.appendChild(row);
        }
        newSlides.appendChild(slide);
      }

      _.$slider.empty().append(newSlides);
      _.$slider
        .children()
        .children()
        .children()
        .css({
          width: 100 / _.options.slidesPerRow + "%",
          display: "inline-block",
        });
    }
  };

  Slick.prototype.checkResponsive = function (initial, forceUpdate) {
    var _ = this,
      breakpoint,
      targetBreakpoint,
      respondToWidth,
      triggerBreakpoint = false;
    var sliderWidth = _.$slider.width();
    var windowWidth = window.innerWidth || $(window).width();

    if (_.respondTo === "window") {
      respondToWidth = windowWidth;
    } else if (_.respondTo === "slider") {
      respondToWidth = sliderWidth;
    } else if (_.respondTo === "min") {
      respondToWidth = Math.min(windowWidth, sliderWidth);
    }

    if (
      _.options.responsive &&
      _.options.responsive.length &&
      _.options.responsive !== null
    ) {
      targetBreakpoint = null;

      for (breakpoint in _.breakpoints) {
        if (_.breakpoints.hasOwnProperty(breakpoint)) {
          if (_.originalSettings.mobileFirst === false) {
            if (respondToWidth < _.breakpoints[breakpoint]) {
              targetBreakpoint = _.breakpoints[breakpoint];
            }
          } else {
            if (respondToWidth > _.breakpoints[breakpoint]) {
              targetBreakpoint = _.breakpoints[breakpoint];
            }
          }
        }
      }

      if (targetBreakpoint !== null) {
        if (_.activeBreakpoint !== null) {
          if (targetBreakpoint !== _.activeBreakpoint || forceUpdate) {
            _.activeBreakpoint = targetBreakpoint;
            if (_.breakpointSettings[targetBreakpoint] === "unslick") {
              _.unslick(targetBreakpoint);
            } else {
              _.options = $.extend(
                {},
                _.originalSettings,
                _.breakpointSettings[targetBreakpoint]
              );
              if (initial === true) {
                _.currentSlide = _.options.initialSlide;
              }
              _.refresh(initial);
            }
            triggerBreakpoint = targetBreakpoint;
          }
        } else {
          _.activeBreakpoint = targetBreakpoint;
          if (_.breakpointSettings[targetBreakpoint] === "unslick") {
            _.unslick(targetBreakpoint);
          } else {
            _.options = $.extend(
              {},
              _.originalSettings,
              _.breakpointSettings[targetBreakpoint]
            );
            if (initial === true) {
              _.currentSlide = _.options.initialSlide;
            }
            _.refresh(initial);
          }
          triggerBreakpoint = targetBreakpoint;
        }
      } else {
        if (_.activeBreakpoint !== null) {
          _.activeBreakpoint = null;
          _.options = _.originalSettings;
          if (initial === true) {
            _.currentSlide = _.options.initialSlide;
          }
          _.refresh(initial);
          triggerBreakpoint = targetBreakpoint;
        }
      }

      // only trigger breakpoints during an actual break. not on initialize.
      if (!initial && triggerBreakpoint !== false) {
        _.$slider.trigger("breakpoint", [_, triggerBreakpoint]);
      }
    }
  };

  Slick.prototype.changeSlide = function (event, dontAnimate) {
    var _ = this,
      $target = $(event.currentTarget),
      indexOffset,
      slideOffset,
      unevenOffset;

    // If target is a link, prevent default action.
    if ($target.is("a")) {
      event.preventDefault();
    }

    // If target is not the <li> element (ie: a child), find the <li>.
    if (!$target.is("li")) {
      $target = $target.closest("li");
    }

    unevenOffset = _.slideCount % _.options.slidesToScroll !== 0;
    indexOffset = unevenOffset
      ? 0
      : (_.slideCount - _.currentSlide) % _.options.slidesToScroll;

    switch (event.data.message) {
      case "previous":
        slideOffset =
          indexOffset === 0
            ? _.options.slidesToScroll
            : _.options.slidesToShow - indexOffset;
        if (_.slideCount > _.options.slidesToShow) {
          _.slideHandler(_.currentSlide - slideOffset, false, dontAnimate);
        }
        break;

      case "next":
        slideOffset =
          indexOffset === 0 ? _.options.slidesToScroll : indexOffset;
        if (_.slideCount > _.options.slidesToShow) {
          _.slideHandler(_.currentSlide + slideOffset, false, dontAnimate);
        }
        break;

      case "index":
        var index =
          event.data.index === 0
            ? 0
            : event.data.index || $target.index() * _.options.slidesToScroll;

        _.slideHandler(_.checkNavigable(index), false, dontAnimate);
        $target.children().trigger("focus");
        break;

      default:
        return;
    }
  };

  Slick.prototype.checkNavigable = function (index) {
    var _ = this,
      navigables,
      prevNavigable;

    navigables = _.getNavigableIndexes();
    prevNavigable = 0;
    if (index > navigables[navigables.length - 1]) {
      index = navigables[navigables.length - 1];
    } else {
      for (var n in navigables) {
        if (index < navigables[n]) {
          index = prevNavigable;
          break;
        }
        prevNavigable = navigables[n];
      }
    }

    return index;
  };

  Slick.prototype.cleanUpEvents = function () {
    var _ = this;

    if (_.options.dots && _.$dots !== null) {
      $("li", _.$dots)
        .off("click.slick", _.changeSlide)
        .off("mouseenter.slick", $.proxy(_.interrupt, _, true))
        .off("mouseleave.slick", $.proxy(_.interrupt, _, false));
    }

    _.$slider.off("focus.slick blur.slick");

    if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
      _.$prevArrow && _.$prevArrow.off("click.slick", _.changeSlide);
      _.$nextArrow && _.$nextArrow.off("click.slick", _.changeSlide);
    }

    _.$list.off("touchstart.slick mousedown.slick", _.swipeHandler);
    _.$list.off("touchmove.slick mousemove.slick", _.swipeHandler);
    _.$list.off("touchend.slick mouseup.slick", _.swipeHandler);
    _.$list.off("touchcancel.slick mouseleave.slick", _.swipeHandler);

    _.$list.off("click.slick", _.clickHandler);

    $(document).off(_.visibilityChange, _.visibility);

    _.cleanUpSlideEvents();

    if (_.options.accessibility === true) {
      _.$list.off("keydown.slick", _.keyHandler);
    }

    if (_.options.focusOnSelect === true) {
      $(_.$slideTrack).children().off("click.slick", _.selectHandler);
    }

    $(window).off(
      "orientationchange.slick.slick-" + _.instanceUid,
      _.orientationChange
    );

    $(window).off("resize.slick.slick-" + _.instanceUid, _.resize);

    $("[draggable!=true]", _.$slideTrack).off("dragstart", _.preventDefault);

    $(window).off("load.slick.slick-" + _.instanceUid, _.setPosition);
    $(document).off("ready.slick.slick-" + _.instanceUid, _.setPosition);
  };

  Slick.prototype.cleanUpSlideEvents = function () {
    var _ = this;

    _.$list.off("mouseenter.slick", $.proxy(_.interrupt, _, true));
    _.$list.off("mouseleave.slick", $.proxy(_.interrupt, _, false));
  };

  Slick.prototype.cleanUpRows = function () {
    var _ = this,
      originalSlides;

    if (_.options.rows > 1) {
      originalSlides = _.$slides.children().children();
      originalSlides.removeAttr("style");
      _.$slider.empty().append(originalSlides);
    }
  };

  Slick.prototype.clickHandler = function (event) {
    var _ = this;

    if (_.shouldClick === false) {
      event.stopImmediatePropagation();
      event.stopPropagation();
      event.preventDefault();
    }
  };

  Slick.prototype.destroy = function (refresh) {
    var _ = this;

    _.autoPlayClear();

    _.touchObject = {};

    _.cleanUpEvents();

    $(".slick-cloned", _.$slider).detach();

    if (_.$dots) {
      _.$dots.remove();
    }

    if (_.$prevArrow && _.$prevArrow.length) {
      _.$prevArrow
        .removeClass("slick-disabled slick-arrow slick-hidden")
        .removeAttr("aria-hidden aria-disabled tabindex")
        .css("display", "");

      if (_.htmlExpr.test(_.options.prevArrow)) {
        _.$prevArrow.remove();
      }
    }

    if (_.$nextArrow && _.$nextArrow.length) {
      _.$nextArrow
        .removeClass("slick-disabled slick-arrow slick-hidden")
        .removeAttr("aria-hidden aria-disabled tabindex")
        .css("display", "");

      if (_.htmlExpr.test(_.options.nextArrow)) {
        _.$nextArrow.remove();
      }
    }

    if (_.$slides) {
      _.$slides
        .removeClass(
          "slick-slide slick-active slick-center slick-visible slick-current"
        )
        .removeAttr("aria-hidden")
        .removeAttr("data-slick-index")
        .each(function () {
          $(this).attr("style", $(this).data("originalStyling"));
        });

      _.$slideTrack.children(this.options.slide).detach();

      _.$slideTrack.detach();

      _.$list.detach();

      _.$slider.append(_.$slides);
    }

    _.cleanUpRows();

    _.$slider.removeClass("slick-slider");
    _.$slider.removeClass("slick-initialized");
    _.$slider.removeClass("slick-dotted");

    _.unslicked = true;

    if (!refresh) {
      _.$slider.trigger("destroy", [_]);
    }
  };

  Slick.prototype.disableTransition = function (slide) {
    var _ = this,
      transition = {};

    transition[_.transitionType] = "";

    if (_.options.fade === false) {
      _.$slideTrack.css(transition);
    } else {
      _.$slides.eq(slide).css(transition);
    }
  };

  Slick.prototype.fadeSlide = function (slideIndex, callback) {
    var _ = this;

    if (_.cssTransitions === false) {
      _.$slides.eq(slideIndex).css({
        zIndex: _.options.zIndex,
      });

      _.$slides.eq(slideIndex).animate(
        {
          opacity: 1,
        },
        _.options.speed,
        _.options.easing,
        callback
      );
    } else {
      _.applyTransition(slideIndex);

      _.$slides.eq(slideIndex).css({
        opacity: 1,
        zIndex: _.options.zIndex,
      });

      if (callback) {
        setTimeout(function () {
          _.disableTransition(slideIndex);

          callback.call();
        }, _.options.speed);
      }
    }
  };

  Slick.prototype.fadeSlideOut = function (slideIndex) {
    var _ = this;

    if (_.cssTransitions === false) {
      _.$slides.eq(slideIndex).animate(
        {
          opacity: 0,
          zIndex: _.options.zIndex - 2,
        },
        _.options.speed,
        _.options.easing
      );
    } else {
      _.applyTransition(slideIndex);

      _.$slides.eq(slideIndex).css({
        opacity: 0,
        zIndex: _.options.zIndex - 2,
      });
    }
  };

  Slick.prototype.filterSlides = Slick.prototype.slickFilter = function (
    filter
  ) {
    var _ = this;

    if (filter !== null) {
      _.$slidesCache = _.$slides;

      _.unload();

      _.$slideTrack.children(this.options.slide).detach();

      _.$slidesCache.filter(filter).appendTo(_.$slideTrack);

      _.reinit();
    }
  };

  Slick.prototype.focusHandler = function () {
    var _ = this;

    _.$slider
      .off("focus.slick blur.slick")
      .on("focus.slick blur.slick", "*:not(.slick-arrow)", function (event) {
        event.stopImmediatePropagation();
        var $sf = $(this);

        setTimeout(function () {
          if (_.options.pauseOnFocus) {
            _.focussed = $sf.is(":focus");
            _.autoPlay();
          }
        }, 0);
      });
  };

  Slick.prototype.getCurrent = Slick.prototype.slickCurrentSlide = function () {
    var _ = this;
    return _.currentSlide;
  };

  Slick.prototype.getDotCount = function () {
    var _ = this;

    var breakPoint = 0;
    var counter = 0;
    var pagerQty = 0;

    if (_.options.infinite === true) {
      while (breakPoint < _.slideCount) {
        ++pagerQty;
        breakPoint = counter + _.options.slidesToScroll;
        counter +=
          _.options.slidesToScroll <= _.options.slidesToShow
            ? _.options.slidesToScroll
            : _.options.slidesToShow;
      }
    } else if (_.options.centerMode === true) {
      pagerQty = _.slideCount;
    } else if (!_.options.asNavFor) {
      pagerQty =
        1 +
        Math.ceil(
          (_.slideCount - _.options.slidesToShow) / _.options.slidesToScroll
        );
    } else {
      while (breakPoint < _.slideCount) {
        ++pagerQty;
        breakPoint = counter + _.options.slidesToScroll;
        counter +=
          _.options.slidesToScroll <= _.options.slidesToShow
            ? _.options.slidesToScroll
            : _.options.slidesToShow;
      }
    }

    return pagerQty - 1;
  };

  Slick.prototype.getLeft = function (slideIndex) {
    var _ = this,
      targetLeft,
      verticalHeight,
      verticalOffset = 0,
      targetSlide;

    _.slideOffset = 0;
    verticalHeight = _.$slides.first().outerHeight(true);

    if (_.options.infinite === true) {
      if (_.slideCount > _.options.slidesToShow) {
        _.slideOffset = _.slideWidth * _.options.slidesToShow * -1;
        verticalOffset = verticalHeight * _.options.slidesToShow * -1;
      }
      if (_.slideCount % _.options.slidesToScroll !== 0) {
        if (
          slideIndex + _.options.slidesToScroll > _.slideCount &&
          _.slideCount > _.options.slidesToShow
        ) {
          if (slideIndex > _.slideCount) {
            _.slideOffset =
              (_.options.slidesToShow - (slideIndex - _.slideCount)) *
              _.slideWidth *
              -1;
            verticalOffset =
              (_.options.slidesToShow - (slideIndex - _.slideCount)) *
              verticalHeight *
              -1;
          } else {
            _.slideOffset =
              (_.slideCount % _.options.slidesToScroll) * _.slideWidth * -1;
            verticalOffset =
              (_.slideCount % _.options.slidesToScroll) * verticalHeight * -1;
          }
        }
      }
    } else {
      if (slideIndex + _.options.slidesToShow > _.slideCount) {
        _.slideOffset =
          (slideIndex + _.options.slidesToShow - _.slideCount) * _.slideWidth;
        verticalOffset =
          (slideIndex + _.options.slidesToShow - _.slideCount) * verticalHeight;
      }
    }

    if (_.slideCount <= _.options.slidesToShow) {
      _.slideOffset = 0;
      verticalOffset = 0;
    }

    if (_.options.centerMode === true && _.options.infinite === true) {
      _.slideOffset +=
        _.slideWidth * Math.floor(_.options.slidesToShow / 2) - _.slideWidth;
    } else if (_.options.centerMode === true) {
      _.slideOffset = 0;
      _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2);
    }

    if (_.options.vertical === false) {
      targetLeft = slideIndex * _.slideWidth * -1 + _.slideOffset;
    } else {
      targetLeft = slideIndex * verticalHeight * -1 + verticalOffset;
    }

    if (_.options.variableWidth === true) {
      if (
        _.slideCount <= _.options.slidesToShow ||
        _.options.infinite === false
      ) {
        targetSlide = _.$slideTrack.children(".slick-slide").eq(slideIndex);
      } else {
        targetSlide = _.$slideTrack
          .children(".slick-slide")
          .eq(slideIndex + _.options.slidesToShow);
      }

      if (_.options.rtl === true) {
        if (targetSlide[0]) {
          targetLeft =
            (_.$slideTrack.width() -
              targetSlide[0].offsetLeft -
              targetSlide.width()) *
            -1;
        } else {
          targetLeft = 0;
        }
      } else {
        targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
      }

      if (_.options.centerMode === true) {
        if (
          _.slideCount <= _.options.slidesToShow ||
          _.options.infinite === false
        ) {
          targetSlide = _.$slideTrack.children(".slick-slide").eq(slideIndex);
        } else {
          targetSlide = _.$slideTrack
            .children(".slick-slide")
            .eq(slideIndex + _.options.slidesToShow + 1);
        }

        if (_.options.rtl === true) {
          if (targetSlide[0]) {
            targetLeft =
              (_.$slideTrack.width() -
                targetSlide[0].offsetLeft -
                targetSlide.width()) *
              -1;
          } else {
            targetLeft = 0;
          }
        } else {
          targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
        }

        targetLeft += (_.$list.width() - targetSlide.outerWidth()) / 2;
      }
    }

    return targetLeft;
  };

  Slick.prototype.getOption = Slick.prototype.slickGetOption = function (
    option
  ) {
    var _ = this;

    return _.options[option];
  };

  Slick.prototype.getNavigableIndexes = function () {
    var _ = this,
      breakPoint = 0,
      counter = 0,
      indexes = [],
      max;

    if (_.options.infinite === false) {
      max = _.slideCount;
    } else {
      breakPoint = _.options.slidesToScroll * -1;
      counter = _.options.slidesToScroll * -1;
      max = _.slideCount * 2;
    }

    while (breakPoint < max) {
      indexes.push(breakPoint);
      breakPoint = counter + _.options.slidesToScroll;
      counter +=
        _.options.slidesToScroll <= _.options.slidesToShow
          ? _.options.slidesToScroll
          : _.options.slidesToShow;
    }

    return indexes;
  };

  Slick.prototype.getSlick = function () {
    return this;
  };

  Slick.prototype.getSlideCount = function () {
    var _ = this,
      slidesTraversed,
      swipedSlide,
      centerOffset;

    centerOffset =
      _.options.centerMode === true
        ? _.slideWidth * Math.floor(_.options.slidesToShow / 2)
        : 0;

    if (_.options.swipeToSlide === true) {
      _.$slideTrack.find(".slick-slide").each(function (index, slide) {
        if (
          slide.offsetLeft - centerOffset + $(slide).outerWidth() / 2 >
          _.swipeLeft * -1
        ) {
          swipedSlide = slide;
          return false;
        }
      });

      slidesTraversed =
        Math.abs($(swipedSlide).attr("data-slick-index") - _.currentSlide) || 1;

      return slidesTraversed;
    } else {
      return _.options.slidesToScroll;
    }
  };

  Slick.prototype.goTo = Slick.prototype.slickGoTo = function (
    slide,
    dontAnimate
  ) {
    var _ = this;

    _.changeSlide(
      {
        data: {
          message: "index",
          index: parseInt(slide),
        },
      },
      dontAnimate
    );
  };

  Slick.prototype.init = function (creation) {
    var _ = this;

    if (!$(_.$slider).hasClass("slick-initialized")) {
      $(_.$slider).addClass("slick-initialized");

      _.buildRows();
      _.buildOut();
      _.setProps();
      _.startLoad();
      _.loadSlider();
      _.initializeEvents();
      _.updateArrows();
      _.updateDots();
      _.checkResponsive(true);
      _.focusHandler();
    }

    if (creation) {
      _.$slider.trigger("init", [_]);
    }

    if (_.options.accessibility === true) {
      _.initADA();
    }

    if (_.options.autoplay) {
      _.paused = false;
      _.autoPlay();
    }
  };

  Slick.prototype.initADA = function () {
    var _ = this;
    _.$slides
      .add(_.$slideTrack.find(".slick-cloned"))
      .attr({
        "aria-hidden": "true",
        tabindex: "-1",
      })
      .find("a, input, button, select")
      .attr({
        tabindex: "-1",
      });

    _.$slideTrack.attr("role", "listbox");

    _.$slides.not(_.$slideTrack.find(".slick-cloned")).each(function (i) {
      $(this).attr({
        role: "option",
        "aria-describedby": "slick-slide" + _.instanceUid + i + "",
      });
    });

    if (_.$dots !== null) {
      _.$dots
        .attr("role", "tablist")
        .find("li")
        .each(function (i) {
          $(this).attr({
            role: "presentation",
            "aria-selected": "false",
            "aria-controls": "navigation" + _.instanceUid + i + "",
            id: "slick-slide" + _.instanceUid + i + "",
          });
        })
        .first()
        .attr("aria-selected", "true")
        .end()
        .find("button")
        .attr("role", "button")
        .end()
        .closest("div")
        .attr("role", "toolbar");
    }
    _.activateADA();
  };

  Slick.prototype.initArrowEvents = function () {
    var _ = this;

    if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
      _.$prevArrow.off("click.slick").on(
        "click.slick",
        {
          message: "previous",
        },
        _.changeSlide
      );
      _.$nextArrow.off("click.slick").on(
        "click.slick",
        {
          message: "next",
        },
        _.changeSlide
      );
    }
  };

  Slick.prototype.initDotEvents = function () {
    var _ = this;

    if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
      $("li", _.$dots).on(
        "click.slick",
        {
          message: "index",
        },
        _.changeSlide
      );
    }

    if (_.options.dots === true && _.options.pauseOnDotsHover === true) {
      $("li", _.$dots)
        .on("mouseenter.slick", $.proxy(_.interrupt, _, true))
        .on("mouseleave.slick", $.proxy(_.interrupt, _, false));
    }
  };

  Slick.prototype.initSlideEvents = function () {
    var _ = this;

    if (_.options.pauseOnHover) {
      _.$list.on("mouseenter.slick", $.proxy(_.interrupt, _, true));
      _.$list.on("mouseleave.slick", $.proxy(_.interrupt, _, false));
    }
  };

  Slick.prototype.initializeEvents = function () {
    var _ = this;

    _.initArrowEvents();

    _.initDotEvents();
    _.initSlideEvents();

    _.$list.on(
      "touchstart.slick mousedown.slick",
      {
        action: "start",
      },
      _.swipeHandler
    );
    _.$list.on(
      "touchmove.slick mousemove.slick",
      {
        action: "move",
      },
      _.swipeHandler
    );
    _.$list.on(
      "touchend.slick mouseup.slick",
      {
        action: "end",
      },
      _.swipeHandler
    );
    _.$list.on(
      "touchcancel.slick mouseleave.slick",
      {
        action: "end",
      },
      _.swipeHandler
    );

    _.$list.on("click.slick", _.clickHandler);

    $(document).on(_.visibilityChange, $.proxy(_.visibility, _));

    if (_.options.accessibility === true) {
      _.$list.on("keydown.slick", _.keyHandler);
    }

    if (_.options.focusOnSelect === true) {
      $(_.$slideTrack).children().on("click.slick", _.selectHandler);
    }

    $(window).on(
      "orientationchange.slick.slick-" + _.instanceUid,
      $.proxy(_.orientationChange, _)
    );

    $(window).on("resize.slick.slick-" + _.instanceUid, $.proxy(_.resize, _));

    $("[draggable!=true]", _.$slideTrack).on("dragstart", _.preventDefault);

    $(window).on("load.slick.slick-" + _.instanceUid, _.setPosition);
    $(document).on("ready.slick.slick-" + _.instanceUid, _.setPosition);
  };

  Slick.prototype.initUI = function () {
    var _ = this;

    if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
      _.$prevArrow.show();
      _.$nextArrow.show();
    }

    if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
      _.$dots.show();
    }
  };

  Slick.prototype.keyHandler = function (event) {
    var _ = this;
    //Dont slide if the cursor is inside the form fields and arrow keys are pressed
    if (!event.target.tagName.match("TEXTAREA|INPUT|SELECT")) {
      if (event.keyCode === 37 && _.options.accessibility === true) {
        _.changeSlide({
          data: {
            message: _.options.rtl === true ? "next" : "previous",
          },
        });
      } else if (event.keyCode === 39 && _.options.accessibility === true) {
        _.changeSlide({
          data: {
            message: _.options.rtl === true ? "previous" : "next",
          },
        });
      }
    }
  };

  Slick.prototype.lazyLoad = function () {
    var _ = this,
      loadRange,
      cloneRange,
      rangeStart,
      rangeEnd;

    function loadImages(imagesScope) {
      $("img[data-lazy]", imagesScope).each(function () {
        var image = $(this),
          imageSource = $(this).attr("data-lazy"),
          imageToLoad = document.createElement("img");

        imageToLoad.onload = function () {
          image.animate({ opacity: 0 }, 100, function () {
            image
              .attr("src", imageSource)
              .animate({ opacity: 1 }, 200, function () {
                image.removeAttr("data-lazy").removeClass("slick-loading");
              });
            _.$slider.trigger("lazyLoaded", [_, image, imageSource]);
          });
        };

        imageToLoad.onerror = function () {
          image
            .removeAttr("data-lazy")
            .removeClass("slick-loading")
            .addClass("slick-lazyload-error");

          _.$slider.trigger("lazyLoadError", [_, image, imageSource]);
        };

        imageToLoad.src = imageSource;
      });
    }

    if (_.options.centerMode === true) {
      if (_.options.infinite === true) {
        rangeStart = _.currentSlide + (_.options.slidesToShow / 2 + 1);
        rangeEnd = rangeStart + _.options.slidesToShow + 2;
      } else {
        rangeStart = Math.max(
          0,
          _.currentSlide - (_.options.slidesToShow / 2 + 1)
        );
        rangeEnd = 2 + (_.options.slidesToShow / 2 + 1) + _.currentSlide;
      }
    } else {
      rangeStart = _.options.infinite
        ? _.options.slidesToShow + _.currentSlide
        : _.currentSlide;
      rangeEnd = Math.ceil(rangeStart + _.options.slidesToShow);
      if (_.options.fade === true) {
        if (rangeStart > 0) rangeStart--;
        if (rangeEnd <= _.slideCount) rangeEnd++;
      }
    }

    loadRange = _.$slider.find(".slick-slide").slice(rangeStart, rangeEnd);
    loadImages(loadRange);

    if (_.slideCount <= _.options.slidesToShow) {
      cloneRange = _.$slider.find(".slick-slide");
      loadImages(cloneRange);
    } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow) {
      cloneRange = _.$slider
        .find(".slick-cloned")
        .slice(0, _.options.slidesToShow);
      loadImages(cloneRange);
    } else if (_.currentSlide === 0) {
      cloneRange = _.$slider
        .find(".slick-cloned")
        .slice(_.options.slidesToShow * -1);
      loadImages(cloneRange);
    }
  };

  Slick.prototype.loadSlider = function () {
    var _ = this;

    _.setPosition();

    _.$slideTrack.css({
      opacity: 1,
    });

    _.$slider.removeClass("slick-loading");

    _.initUI();

    if (_.options.lazyLoad === "progressive") {
      _.progressiveLazyLoad();
    }
  };

  Slick.prototype.next = Slick.prototype.slickNext = function () {
    var _ = this;

    _.changeSlide({
      data: {
        message: "next",
      },
    });
  };

  Slick.prototype.orientationChange = function () {
    var _ = this;

    _.checkResponsive();
    _.setPosition();
  };

  Slick.prototype.pause = Slick.prototype.slickPause = function () {
    var _ = this;

    _.autoPlayClear();
    _.paused = true;
  };

  Slick.prototype.play = Slick.prototype.slickPlay = function () {
    var _ = this;

    _.autoPlay();
    _.options.autoplay = true;
    _.paused = false;
    _.focussed = false;
    _.interrupted = false;
  };

  Slick.prototype.postSlide = function (index) {
    var _ = this;

    if (!_.unslicked) {
      _.$slider.trigger("afterChange", [_, index]);

      _.animating = false;

      _.setPosition();

      _.swipeLeft = null;

      if (_.options.autoplay) {
        _.autoPlay();
      }

      if (_.options.accessibility === true) {
        _.initADA();
      }
    }
  };

  Slick.prototype.prev = Slick.prototype.slickPrev = function () {
    var _ = this;

    _.changeSlide({
      data: {
        message: "previous",
      },
    });
  };

  Slick.prototype.preventDefault = function (event) {
    event.preventDefault();
  };

  Slick.prototype.progressiveLazyLoad = function (tryCount) {
    tryCount = tryCount || 1;

    var _ = this,
      $imgsToLoad = $("img[data-lazy]", _.$slider),
      image,
      imageSource,
      imageToLoad;

    if ($imgsToLoad.length) {
      image = $imgsToLoad.first();
      imageSource = image.attr("data-lazy");
      imageToLoad = document.createElement("img");

      imageToLoad.onload = function () {
        image
          .attr("src", imageSource)
          .removeAttr("data-lazy")
          .removeClass("slick-loading");

        if (_.options.adaptiveHeight === true) {
          _.setPosition();
        }

        _.$slider.trigger("lazyLoaded", [_, image, imageSource]);
        _.progressiveLazyLoad();
      };

      imageToLoad.onerror = function () {
        if (tryCount < 3) {
          /**
           * try to load the image 3 times,
           * leave a slight delay so we don't get
           * servers blocking the request.
           */
          setTimeout(function () {
            _.progressiveLazyLoad(tryCount + 1);
          }, 500);
        } else {
          image
            .removeAttr("data-lazy")
            .removeClass("slick-loading")
            .addClass("slick-lazyload-error");

          _.$slider.trigger("lazyLoadError", [_, image, imageSource]);

          _.progressiveLazyLoad();
        }
      };

      imageToLoad.src = imageSource;
    } else {
      _.$slider.trigger("allImagesLoaded", [_]);
    }
  };

  Slick.prototype.refresh = function (initializing) {
    var _ = this,
      currentSlide,
      lastVisibleIndex;

    lastVisibleIndex = _.slideCount - _.options.slidesToShow;

    // in non-infinite sliders, we don't want to go past the
    // last visible index.
    if (!_.options.infinite && _.currentSlide > lastVisibleIndex) {
      _.currentSlide = lastVisibleIndex;
    }

    // if less slides than to show, go to start.
    if (_.slideCount <= _.options.slidesToShow) {
      _.currentSlide = 0;
    }

    currentSlide = _.currentSlide;

    _.destroy(true);

    $.extend(_, _.initials, { currentSlide: currentSlide });

    _.init();

    if (!initializing) {
      _.changeSlide(
        {
          data: {
            message: "index",
            index: currentSlide,
          },
        },
        false
      );
    }
  };

  Slick.prototype.registerBreakpoints = function () {
    var _ = this,
      breakpoint,
      currentBreakpoint,
      l,
      responsiveSettings = _.options.responsive || null;

    if ($.type(responsiveSettings) === "array" && responsiveSettings.length) {
      _.respondTo = _.options.respondTo || "window";

      for (breakpoint in responsiveSettings) {
        l = _.breakpoints.length - 1;
        currentBreakpoint = responsiveSettings[breakpoint].breakpoint;

        if (responsiveSettings.hasOwnProperty(breakpoint)) {
          // loop through the breakpoints and cut out any existing
          // ones with the same breakpoint number, we don't want dupes.
          while (l >= 0) {
            if (_.breakpoints[l] && _.breakpoints[l] === currentBreakpoint) {
              _.breakpoints.splice(l, 1);
            }
            l--;
          }

          _.breakpoints.push(currentBreakpoint);
          _.breakpointSettings[currentBreakpoint] =
            responsiveSettings[breakpoint].settings;
        }
      }

      _.breakpoints.sort(function (a, b) {
        return _.options.mobileFirst ? a - b : b - a;
      });
    }
  };

  Slick.prototype.reinit = function () {
    var _ = this;

    _.$slides = _.$slideTrack.children(_.options.slide).addClass("slick-slide");

    _.slideCount = _.$slides.length;

    if (_.currentSlide >= _.slideCount && _.currentSlide !== 0) {
      _.currentSlide = _.currentSlide - _.options.slidesToScroll;
    }

    if (_.slideCount <= _.options.slidesToShow) {
      _.currentSlide = 0;
    }

    _.registerBreakpoints();

    _.setProps();
    _.setupInfinite();
    _.buildArrows();
    _.updateArrows();
    _.initArrowEvents();
    _.buildDots();
    _.updateDots();
    _.initDotEvents();
    _.cleanUpSlideEvents();
    _.initSlideEvents();

    _.checkResponsive(false, true);

    if (_.options.focusOnSelect === true) {
      $(_.$slideTrack).children().on("click.slick", _.selectHandler);
    }

    _.setSlideClasses(typeof _.currentSlide === "number" ? _.currentSlide : 0);

    _.setPosition();
    _.focusHandler();

    _.paused = !_.options.autoplay;
    _.autoPlay();

    _.$slider.trigger("reInit", [_]);
  };

  Slick.prototype.resize = function () {
    var _ = this;

    if ($(window).width() !== _.windowWidth) {
      clearTimeout(_.windowDelay);
      _.windowDelay = window.setTimeout(function () {
        _.windowWidth = $(window).width();
        _.checkResponsive();
        if (!_.unslicked) {
          _.setPosition();
        }
      }, 50);
    }
  };

  Slick.prototype.removeSlide = Slick.prototype.slickRemove = function (
    index,
    removeBefore,
    removeAll
  ) {
    var _ = this;

    if (typeof index === "boolean") {
      removeBefore = index;
      index = removeBefore === true ? 0 : _.slideCount - 1;
    } else {
      index = removeBefore === true ? --index : index;
    }

    if (_.slideCount < 1 || index < 0 || index > _.slideCount - 1) {
      return false;
    }

    _.unload();

    if (removeAll === true) {
      _.$slideTrack.children().remove();
    } else {
      _.$slideTrack.children(this.options.slide).eq(index).remove();
    }

    _.$slides = _.$slideTrack.children(this.options.slide);

    _.$slideTrack.children(this.options.slide).detach();

    _.$slideTrack.append(_.$slides);

    _.$slidesCache = _.$slides;

    _.reinit();
  };

  Slick.prototype.setCSS = function (position) {
    var _ = this,
      positionProps = {},
      x,
      y;

    if (_.options.rtl === true) {
      position = -position;
    }
    x = _.positionProp == "left" ? Math.ceil(position) + "px" : "0px";
    y = _.positionProp == "top" ? Math.ceil(position) + "px" : "0px";

    positionProps[_.positionProp] = position;

    if (_.transformsEnabled === false) {
      _.$slideTrack.css(positionProps);
    } else {
      positionProps = {};
      if (_.cssTransitions === false) {
        positionProps[_.animType] = "translate(" + x + ", " + y + ")";
        _.$slideTrack.css(positionProps);
      } else {
        positionProps[_.animType] = "translate3d(" + x + ", " + y + ", 0px)";
        _.$slideTrack.css(positionProps);
      }
    }
  };

  Slick.prototype.setDimensions = function () {
    var _ = this;

    if (_.options.vertical === false) {
      if (_.options.centerMode === true) {
        _.$list.css({
          padding: "0px " + _.options.centerPadding,
        });
      }
    } else {
      _.$list.height(
        _.$slides.first().outerHeight(true) * _.options.slidesToShow
      );
      if (_.options.centerMode === true) {
        _.$list.css({
          padding: _.options.centerPadding + " 0px",
        });
      }
    }

    _.listWidth = _.$list.width();
    _.listHeight = _.$list.height();

    if (_.options.vertical === false && _.options.variableWidth === false) {
      _.slideWidth = Math.ceil(_.listWidth / _.options.slidesToShow);
      _.$slideTrack.width(
        Math.ceil(_.slideWidth * _.$slideTrack.children(".slick-slide").length)
      );
    } else if (_.options.variableWidth === true) {
      _.$slideTrack.width(5000 * _.slideCount);
    } else {
      _.slideWidth = Math.ceil(_.listWidth);
      _.$slideTrack.height(
        Math.ceil(
          _.$slides.first().outerHeight(true) *
            _.$slideTrack.children(".slick-slide").length
        )
      );
    }

    var offset = _.$slides.first().outerWidth(true) - _.$slides.first().width();
    if (_.options.variableWidth === false)
      _.$slideTrack.children(".slick-slide").width(_.slideWidth - offset);
  };

  Slick.prototype.setFade = function () {
    var _ = this,
      targetLeft;

    _.$slides.each(function (index, element) {
      targetLeft = _.slideWidth * index * -1;
      if (_.options.rtl === true) {
        $(element).css({
          position: "relative",
          right: targetLeft,
          top: 0,
          zIndex: _.options.zIndex - 2,
          opacity: 0,
        });
      } else {
        $(element).css({
          position: "relative",
          left: targetLeft,
          top: 0,
          zIndex: _.options.zIndex - 2,
          opacity: 0,
        });
      }
    });

    _.$slides.eq(_.currentSlide).css({
      zIndex: _.options.zIndex - 1,
      opacity: 1,
    });
  };

  Slick.prototype.setHeight = function () {
    var _ = this;

    if (
      _.options.slidesToShow === 1 &&
      _.options.adaptiveHeight === true &&
      _.options.vertical === false
    ) {
      var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
      _.$list.css("height", targetHeight);
    }
  };

  Slick.prototype.setOption = Slick.prototype.slickSetOption = function () {
    /**
     * accepts arguments in format of:
     *
     *  - for changing a single option's value:
     *     .slick("setOption", option, value, refresh )
     *
     *  - for changing a set of responsive options:
     *     .slick("setOption", 'responsive', [{}, ...], refresh )
     *
     *  - for updating multiple values at once (not responsive)
     *     .slick("setOption", { 'option': value, ... }, refresh )
     */

    var _ = this,
      l,
      item,
      option,
      value,
      refresh = false,
      type;

    if ($.type(arguments[0]) === "object") {
      option = arguments[0];
      refresh = arguments[1];
      type = "multiple";
    } else if ($.type(arguments[0]) === "string") {
      option = arguments[0];
      value = arguments[1];
      refresh = arguments[2];

      if (arguments[0] === "responsive" && $.type(arguments[1]) === "array") {
        type = "responsive";
      } else if (typeof arguments[1] !== "undefined") {
        type = "single";
      }
    }

    if (type === "single") {
      _.options[option] = value;
    } else if (type === "multiple") {
      $.each(option, function (opt, val) {
        _.options[opt] = val;
      });
    } else if (type === "responsive") {
      for (item in value) {
        if ($.type(_.options.responsive) !== "array") {
          _.options.responsive = [value[item]];
        } else {
          l = _.options.responsive.length - 1;

          // loop through the responsive object and splice out duplicates.
          while (l >= 0) {
            if (_.options.responsive[l].breakpoint === value[item].breakpoint) {
              _.options.responsive.splice(l, 1);
            }

            l--;
          }

          _.options.responsive.push(value[item]);
        }
      }
    }

    if (refresh) {
      _.unload();
      _.reinit();
    }
  };

  Slick.prototype.setPosition = function () {
    var _ = this;

    _.setDimensions();

    _.setHeight();

    if (_.options.fade === false) {
      _.setCSS(_.getLeft(_.currentSlide));
    } else {
      _.setFade();
    }

    _.$slider.trigger("setPosition", [_]);
  };

  Slick.prototype.setProps = function () {
    var _ = this,
      bodyStyle = document.body.style;

    _.positionProp = _.options.vertical === true ? "top" : "left";

    if (_.positionProp === "top") {
      _.$slider.addClass("slick-vertical");
    } else {
      _.$slider.removeClass("slick-vertical");
    }

    if (
      bodyStyle.WebkitTransition !== undefined ||
      bodyStyle.MozTransition !== undefined ||
      bodyStyle.msTransition !== undefined
    ) {
      if (_.options.useCSS === true) {
        _.cssTransitions = true;
      }
    }

    if (_.options.fade) {
      if (typeof _.options.zIndex === "number") {
        if (_.options.zIndex < 3) {
          _.options.zIndex = 3;
        }
      } else {
        _.options.zIndex = _.defaults.zIndex;
      }
    }

    if (bodyStyle.OTransform !== undefined) {
      _.animType = "OTransform";
      _.transformType = "-o-transform";
      _.transitionType = "OTransition";
      if (
        bodyStyle.perspectiveProperty === undefined &&
        bodyStyle.webkitPerspective === undefined
      )
        _.animType = false;
    }
    if (bodyStyle.MozTransform !== undefined) {
      _.animType = "MozTransform";
      _.transformType = "-moz-transform";
      _.transitionType = "MozTransition";
      if (
        bodyStyle.perspectiveProperty === undefined &&
        bodyStyle.MozPerspective === undefined
      )
        _.animType = false;
    }
    if (bodyStyle.webkitTransform !== undefined) {
      _.animType = "webkitTransform";
      _.transformType = "-webkit-transform";
      _.transitionType = "webkitTransition";
      if (
        bodyStyle.perspectiveProperty === undefined &&
        bodyStyle.webkitPerspective === undefined
      )
        _.animType = false;
    }
    if (bodyStyle.msTransform !== undefined) {
      _.animType = "msTransform";
      _.transformType = "-ms-transform";
      _.transitionType = "msTransition";
      if (bodyStyle.msTransform === undefined) _.animType = false;
    }
    if (bodyStyle.transform !== undefined && _.animType !== false) {
      _.animType = "transform";
      _.transformType = "transform";
      _.transitionType = "transition";
    }
    _.transformsEnabled =
      _.options.useTransform && _.animType !== null && _.animType !== false;
  };

  Slick.prototype.setSlideClasses = function (index) {
    var _ = this,
      centerOffset,
      allSlides,
      indexOffset,
      remainder;

    allSlides = _.$slider
      .find(".slick-slide")
      .removeClass("slick-active slick-center slick-current")
      .attr("aria-hidden", "true");

    _.$slides.eq(index).addClass("slick-current");

    if (_.options.centerMode === true) {
      centerOffset = Math.floor(_.options.slidesToShow / 2);

      if (_.options.infinite === true) {
        if (index >= centerOffset && index <= _.slideCount - 1 - centerOffset) {
          _.$slides
            .slice(index - centerOffset, index + centerOffset + 1)
            .addClass("slick-active")
            .attr("aria-hidden", "false");
        } else {
          indexOffset = _.options.slidesToShow + index;
          allSlides
            .slice(
              indexOffset - centerOffset + 1,
              indexOffset + centerOffset + 2
            )
            .addClass("slick-active")
            .attr("aria-hidden", "false");
        }

        if (index === 0) {
          allSlides
            .eq(allSlides.length - 1 - _.options.slidesToShow)
            .addClass("slick-center");
        } else if (index === _.slideCount - 1) {
          allSlides.eq(_.options.slidesToShow).addClass("slick-center");
        }
      }

      _.$slides.eq(index).addClass("slick-center");
    } else {
      if (index >= 0 && index <= _.slideCount - _.options.slidesToShow) {
        _.$slides
          .slice(index, index + _.options.slidesToShow)
          .addClass("slick-active")
          .attr("aria-hidden", "false");
      } else if (allSlides.length <= _.options.slidesToShow) {
        allSlides.addClass("slick-active").attr("aria-hidden", "false");
      } else {
        remainder = _.slideCount % _.options.slidesToShow;
        indexOffset =
          _.options.infinite === true ? _.options.slidesToShow + index : index;

        if (
          _.options.slidesToShow == _.options.slidesToScroll &&
          _.slideCount - index < _.options.slidesToShow
        ) {
          allSlides
            .slice(
              indexOffset - (_.options.slidesToShow - remainder),
              indexOffset + remainder
            )
            .addClass("slick-active")
            .attr("aria-hidden", "false");
        } else {
          allSlides
            .slice(indexOffset, indexOffset + _.options.slidesToShow)
            .addClass("slick-active")
            .attr("aria-hidden", "false");
        }
      }
    }

    if (_.options.lazyLoad === "ondemand") {
      _.lazyLoad();
    }
  };

  Slick.prototype.setupInfinite = function () {
    var _ = this,
      i,
      slideIndex,
      infiniteCount;

    if (_.options.fade === true) {
      _.options.centerMode = false;
    }

    if (_.options.infinite === true && _.options.fade === false) {
      slideIndex = null;

      if (_.slideCount > _.options.slidesToShow) {
        if (_.options.centerMode === true) {
          infiniteCount = _.options.slidesToShow + 1;
        } else {
          infiniteCount = _.options.slidesToShow;
        }

        for (i = _.slideCount; i > _.slideCount - infiniteCount; i -= 1) {
          slideIndex = i - 1;
          $(_.$slides[slideIndex])
            .clone(true)
            .attr("id", "")
            .attr("data-slick-index", slideIndex - _.slideCount)
            .prependTo(_.$slideTrack)
            .addClass("slick-cloned");
        }
        for (i = 0; i < infiniteCount; i += 1) {
          slideIndex = i;
          $(_.$slides[slideIndex])
            .clone(true)
            .attr("id", "")
            .attr("data-slick-index", slideIndex + _.slideCount)
            .appendTo(_.$slideTrack)
            .addClass("slick-cloned");
        }
        _.$slideTrack
          .find(".slick-cloned")
          .find("[id]")
          .each(function () {
            $(this).attr("id", "");
          });
      }
    }
  };

  Slick.prototype.interrupt = function (toggle) {
    var _ = this;

    if (!toggle) {
      _.autoPlay();
    }
    _.interrupted = toggle;
  };

  Slick.prototype.selectHandler = function (event) {
    var _ = this;

    var targetElement = $(event.target).is(".slick-slide")
      ? $(event.target)
      : $(event.target).parents(".slick-slide");

    var index = parseInt(targetElement.attr("data-slick-index"));

    if (!index) index = 0;

    if (_.slideCount <= _.options.slidesToShow) {
      _.setSlideClasses(index);
      _.asNavFor(index);
      return;
    }

    _.slideHandler(index);
  };

  Slick.prototype.slideHandler = function (index, sync, dontAnimate) {
    var targetSlide,
      animSlide,
      oldSlide,
      slideLeft,
      targetLeft = null,
      _ = this,
      navTarget;

    sync = sync || false;

    if (_.animating === true && _.options.waitForAnimate === true) {
      return;
    }

    if (_.options.fade === true && _.currentSlide === index) {
      return;
    }

    if (_.slideCount <= _.options.slidesToShow) {
      return;
    }

    if (sync === false) {
      _.asNavFor(index);
    }

    targetSlide = index;
    targetLeft = _.getLeft(targetSlide);
    slideLeft = _.getLeft(_.currentSlide);

    _.currentLeft = _.swipeLeft === null ? slideLeft : _.swipeLeft;

    if (
      _.options.infinite === false &&
      _.options.centerMode === false &&
      (index < 0 || index > _.getDotCount() * _.options.slidesToScroll)
    ) {
      if (_.options.fade === false) {
        targetSlide = _.currentSlide;
        if (dontAnimate !== true) {
          _.animateSlide(slideLeft, function () {
            _.postSlide(targetSlide);
          });
        } else {
          _.postSlide(targetSlide);
        }
      }
      return;
    } else if (
      _.options.infinite === false &&
      _.options.centerMode === true &&
      (index < 0 || index > _.slideCount - _.options.slidesToScroll)
    ) {
      if (_.options.fade === false) {
        targetSlide = _.currentSlide;
        if (dontAnimate !== true) {
          _.animateSlide(slideLeft, function () {
            _.postSlide(targetSlide);
          });
        } else {
          _.postSlide(targetSlide);
        }
      }
      return;
    }

    if (_.options.autoplay) {
      clearInterval(_.autoPlayTimer);
    }

    if (targetSlide < 0) {
      if (_.slideCount % _.options.slidesToScroll !== 0) {
        animSlide = _.slideCount - (_.slideCount % _.options.slidesToScroll);
      } else {
        animSlide = _.slideCount + targetSlide;
      }
    } else if (targetSlide >= _.slideCount) {
      if (_.slideCount % _.options.slidesToScroll !== 0) {
        animSlide = 0;
      } else {
        animSlide = targetSlide - _.slideCount;
      }
    } else {
      animSlide = targetSlide;
    }

    _.animating = true;

    _.$slider.trigger("beforeChange", [_, _.currentSlide, animSlide]);

    oldSlide = _.currentSlide;
    _.currentSlide = animSlide;

    _.setSlideClasses(_.currentSlide);

    if (_.options.asNavFor) {
      navTarget = _.getNavTarget();
      navTarget = navTarget.slick("getSlick");

      if (navTarget.slideCount <= navTarget.options.slidesToShow) {
        navTarget.setSlideClasses(_.currentSlide);
      }
    }

    _.updateDots();
    _.updateArrows();

    if (_.options.fade === true) {
      if (dontAnimate !== true) {
        _.fadeSlideOut(oldSlide);

        _.fadeSlide(animSlide, function () {
          _.postSlide(animSlide);
        });
      } else {
        _.postSlide(animSlide);
      }
      _.animateHeight();
      return;
    }

    if (dontAnimate !== true) {
      _.animateSlide(targetLeft, function () {
        _.postSlide(animSlide);
      });
    } else {
      _.postSlide(animSlide);
    }
  };

  Slick.prototype.startLoad = function () {
    var _ = this;

    if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
      _.$prevArrow.hide();
      _.$nextArrow.hide();
    }

    if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
      _.$dots.hide();
    }

    _.$slider.addClass("slick-loading");
  };

  Slick.prototype.swipeDirection = function () {
    var xDist,
      yDist,
      r,
      swipeAngle,
      _ = this;

    xDist = _.touchObject.startX - _.touchObject.curX;
    yDist = _.touchObject.startY - _.touchObject.curY;
    r = Math.atan2(yDist, xDist);

    swipeAngle = Math.round((r * 180) / Math.PI);
    if (swipeAngle < 0) {
      swipeAngle = 360 - Math.abs(swipeAngle);
    }

    if (swipeAngle <= 45 && swipeAngle >= 0) {
      return _.options.rtl === false ? "left" : "right";
    }
    if (swipeAngle <= 360 && swipeAngle >= 315) {
      return _.options.rtl === false ? "left" : "right";
    }
    if (swipeAngle >= 135 && swipeAngle <= 225) {
      return _.options.rtl === false ? "right" : "left";
    }
    if (_.options.verticalSwiping === true) {
      if (swipeAngle >= 35 && swipeAngle <= 135) {
        return "down";
      } else {
        return "up";
      }
    }

    return "vertical";
  };

  Slick.prototype.swipeEnd = function (event) {
    var _ = this,
      slideCount,
      direction;

    _.dragging = false;
    _.interrupted = false;
    _.shouldClick = _.touchObject.swipeLength > 10 ? false : true;

    if (_.touchObject.curX === undefined) {
      return false;
    }

    if (_.touchObject.edgeHit === true) {
      _.$slider.trigger("edge", [_, _.swipeDirection()]);
    }

    if (_.touchObject.swipeLength >= _.touchObject.minSwipe) {
      direction = _.swipeDirection();

      switch (direction) {
        case "left":
        case "down":
          slideCount = _.options.swipeToSlide
            ? _.checkNavigable(_.currentSlide + _.getSlideCount())
            : _.currentSlide + _.getSlideCount();

          _.currentDirection = 0;

          break;

        case "right":
        case "up":
          slideCount = _.options.swipeToSlide
            ? _.checkNavigable(_.currentSlide - _.getSlideCount())
            : _.currentSlide - _.getSlideCount();

          _.currentDirection = 1;

          break;

        default:
      }

      if (direction != "vertical") {
        _.slideHandler(slideCount);
        _.touchObject = {};
        _.$slider.trigger("swipe", [_, direction]);
      }
    } else {
      if (_.touchObject.startX !== _.touchObject.curX) {
        _.slideHandler(_.currentSlide);
        _.touchObject = {};
      }
    }
  };

  Slick.prototype.swipeHandler = function (event) {
    var _ = this;

    if (
      _.options.swipe === false ||
      ("ontouchend" in document && _.options.swipe === false)
    ) {
      return;
    } else if (
      _.options.draggable === false &&
      event.type.indexOf("mouse") !== -1
    ) {
      return;
    }

    _.touchObject.fingerCount =
      event.originalEvent && event.originalEvent.touches !== undefined
        ? event.originalEvent.touches.length
        : 1;

    _.touchObject.minSwipe = _.listWidth / _.options.touchThreshold;

    if (_.options.verticalSwiping === true) {
      _.touchObject.minSwipe = _.listHeight / _.options.touchThreshold;
    }

    switch (event.data.action) {
      case "start":
        _.swipeStart(event);
        break;

      case "move":
        _.swipeMove(event);
        break;

      case "end":
        _.swipeEnd(event);
        break;
    }
  };

  Slick.prototype.swipeMove = function (event) {
    var _ = this,
      edgeWasHit = false,
      curLeft,
      swipeDirection,
      swipeLength,
      positionOffset,
      touches;

    touches =
      event.originalEvent !== undefined ? event.originalEvent.touches : null;

    if (!_.dragging || (touches && touches.length !== 1)) {
      return false;
    }

    curLeft = _.getLeft(_.currentSlide);

    _.touchObject.curX =
      touches !== undefined ? touches[0].pageX : event.clientX;
    _.touchObject.curY =
      touches !== undefined ? touches[0].pageY : event.clientY;

    _.touchObject.swipeLength = Math.round(
      Math.sqrt(Math.pow(_.touchObject.curX - _.touchObject.startX, 2))
    );

    if (_.options.verticalSwiping === true) {
      _.touchObject.swipeLength = Math.round(
        Math.sqrt(Math.pow(_.touchObject.curY - _.touchObject.startY, 2))
      );
    }

    swipeDirection = _.swipeDirection();

    if (swipeDirection === "vertical") {
      return;
    }

    if (event.originalEvent !== undefined && _.touchObject.swipeLength > 4) {
      event.preventDefault();
    }

    positionOffset =
      (_.options.rtl === false ? 1 : -1) *
      (_.touchObject.curX > _.touchObject.startX ? 1 : -1);
    if (_.options.verticalSwiping === true) {
      positionOffset = _.touchObject.curY > _.touchObject.startY ? 1 : -1;
    }

    swipeLength = _.touchObject.swipeLength;

    _.touchObject.edgeHit = false;

    if (_.options.infinite === false) {
      if (
        (_.currentSlide === 0 && swipeDirection === "right") ||
        (_.currentSlide >= _.getDotCount() && swipeDirection === "left")
      ) {
        swipeLength = _.touchObject.swipeLength * _.options.edgeFriction;
        _.touchObject.edgeHit = true;
      }
    }

    if (_.options.vertical === false) {
      _.swipeLeft = curLeft + swipeLength * positionOffset;
    } else {
      _.swipeLeft =
        curLeft +
        swipeLength * (_.$list.height() / _.listWidth) * positionOffset;
    }
    if (_.options.verticalSwiping === true) {
      _.swipeLeft = curLeft + swipeLength * positionOffset;
    }

    if (_.options.fade === true || _.options.touchMove === false) {
      return false;
    }

    if (_.animating === true) {
      _.swipeLeft = null;
      return false;
    }

    _.setCSS(_.swipeLeft);
  };

  Slick.prototype.swipeStart = function (event) {
    var _ = this,
      touches;

    _.interrupted = true;

    if (
      _.touchObject.fingerCount !== 1 ||
      _.slideCount <= _.options.slidesToShow
    ) {
      _.touchObject = {};
      return false;
    }

    if (
      event.originalEvent !== undefined &&
      event.originalEvent.touches !== undefined
    ) {
      touches = event.originalEvent.touches[0];
    }

    _.touchObject.startX = _.touchObject.curX =
      touches !== undefined ? touches.pageX : event.clientX;
    _.touchObject.startY = _.touchObject.curY =
      touches !== undefined ? touches.pageY : event.clientY;

    _.dragging = true;
  };

  Slick.prototype.unfilterSlides = Slick.prototype.slickUnfilter = function () {
    var _ = this;

    if (_.$slidesCache !== null) {
      _.unload();

      _.$slideTrack.children(this.options.slide).detach();

      _.$slidesCache.appendTo(_.$slideTrack);

      _.reinit();
    }
  };

  Slick.prototype.unload = function () {
    var _ = this;

    $(".slick-cloned", _.$slider).remove();

    if (_.$dots) {
      _.$dots.remove();
    }

    if (_.$prevArrow && _.htmlExpr.test(_.options.prevArrow)) {
      _.$prevArrow.remove();
    }

    if (_.$nextArrow && _.htmlExpr.test(_.options.nextArrow)) {
      _.$nextArrow.remove();
    }

    _.$slides
      .removeClass("slick-slide slick-active slick-visible slick-current")
      .attr("aria-hidden", "true")
      .css("width", "");
  };

  Slick.prototype.unslick = function (fromBreakpoint) {
    var _ = this;
    _.$slider.trigger("unslick", [_, fromBreakpoint]);
    _.destroy();
  };

  Slick.prototype.updateArrows = function () {
    var _ = this,
      centerOffset;

    centerOffset = Math.floor(_.options.slidesToShow / 2);

    if (
      _.options.arrows === true &&
      _.slideCount > _.options.slidesToShow &&
      !_.options.infinite
    ) {
      _.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false");
      _.$nextArrow.removeClass("slick-disabled").attr("aria-disabled", "false");

      if (_.currentSlide === 0) {
        _.$prevArrow.addClass("slick-disabled").attr("aria-disabled", "true");
        _.$nextArrow
          .removeClass("slick-disabled")
          .attr("aria-disabled", "false");
      } else if (
        _.currentSlide >= _.slideCount - _.options.slidesToShow &&
        _.options.centerMode === false
      ) {
        _.$nextArrow.addClass("slick-disabled").attr("aria-disabled", "true");
        _.$prevArrow
          .removeClass("slick-disabled")
          .attr("aria-disabled", "false");
      } else if (
        _.currentSlide >= _.slideCount - 1 &&
        _.options.centerMode === true
      ) {
        _.$nextArrow.addClass("slick-disabled").attr("aria-disabled", "true");
        _.$prevArrow
          .removeClass("slick-disabled")
          .attr("aria-disabled", "false");
      }
    }
  };

  Slick.prototype.updateDots = function () {
    var _ = this;

    if (_.$dots !== null) {
      _.$dots
        .find("li")
        .removeClass("slick-active")
        .attr("aria-hidden", "true");

      _.$dots
        .find("li")
        .eq(Math.floor(_.currentSlide / _.options.slidesToScroll))
        .addClass("slick-active")
        .attr("aria-hidden", "false");
    }
  };

  Slick.prototype.visibility = function () {
    var _ = this;

    if (_.options.autoplay) {
      if (document[_.hidden]) {
        _.interrupted = true;
      } else {
        _.interrupted = false;
      }
    }
  };

  $.fn.slick = function () {
    var _ = this,
      opt = arguments[0],
      args = Array.prototype.slice.call(arguments, 1),
      l = _.length,
      i,
      ret;
    for (i = 0; i < l; i++) {
      if (typeof opt == "object" || typeof opt == "undefined")
        _[i].slick = new Slick(_[i], opt);
      else ret = _[i].slick[opt].apply(_[i].slick, args);
      if (typeof ret != "undefined") return ret;
    }
    return _;
  };
});

/**
 * jquery-match-height 0.7.0 by @liabru
 * http://brm.io/jquery-match-height/
 * License: MIT
 */

(function (factory) {
  // eslint-disable-line no-extra-semi
  "use strict";
  if (typeof define === "function" && define.amd) {
    // AMD
    define(["jquery"], factory);
  } else if (typeof module !== "undefined" && module.exports) {
    // CommonJS
    module.exports = factory(require("jquery"));
  } else {
    // Global
    factory(jQuery);
  }
})(function ($) {
  /*
   *  internal
   */

  var _previousResizeWidth = -1,
    _updateTimeout = -1;

  /*
   *  _parse
   *  value parse utility function
   */

  var _parse = function (value) {
    // parse value and convert NaN to 0
    return parseFloat(value) || 0;
  };

  /*
   *  _rows
   *  utility function returns array of jQuery selections representing each row
   *  (as displayed after float wrapping applied by browser)
   */

  var _rows = function (elements) {
    var tolerance = 1,
      $elements = $(elements),
      lastTop = null,
      rows = [];

    // group elements by their top position
    $elements.each(function () {
      var $that = $(this),
        top = $that.offset().top - _parse($that.css("margin-top")),
        lastRow = rows.length > 0 ? rows[rows.length - 1] : null;

      if (lastRow === null) {
        // first item on the row, so just push it
        rows.push($that);
      } else {
        // if the row top is the same, add to the row group
        if (Math.floor(Math.abs(lastTop - top)) <= tolerance) {
          rows[rows.length - 1] = lastRow.add($that);
        } else {
          // otherwise start a new row group
          rows.push($that);
        }
      }

      // keep track of the last row top
      lastTop = top;
    });

    return rows;
  };

  /*
   *  _parseOptions
   *  handle plugin options
   */

  var _parseOptions = function (options) {
    var opts = {
      byRow: true,
      property: "height",
      target: null,
      remove: false,
    };

    if (typeof options === "object") {
      return $.extend(opts, options);
    }

    if (typeof options === "boolean") {
      opts.byRow = options;
    } else if (options === "remove") {
      opts.remove = true;
    }

    return opts;
  };

  /*
   *  matchHeight
   *  plugin definition
   */

  var matchHeight = ($.fn.matchHeight = function (options) {
    var opts = _parseOptions(options);

    // handle remove
    if (opts.remove) {
      var that = this;

      // remove fixed height from all selected elements
      this.css(opts.property, "");

      // remove selected elements from all groups
      $.each(matchHeight._groups, function (key, group) {
        group.elements = group.elements.not(that);
      });

      // TODO: cleanup empty groups

      return this;
    }

    if (this.length <= 1 && !opts.target) {
      return this;
    }

    // keep track of this group so we can re-apply later on load and resize events
    matchHeight._groups.push({
      elements: this,
      options: opts,
    });

    // match each element's height to the tallest element in the selection
    matchHeight._apply(this, opts);

    return this;
  });

  /*
   *  plugin global options
   */

  matchHeight.version = "0.7.0";
  matchHeight._groups = [];
  matchHeight._throttle = 80;
  matchHeight._maintainScroll = false;
  matchHeight._beforeUpdate = null;
  matchHeight._afterUpdate = null;
  matchHeight._rows = _rows;
  matchHeight._parse = _parse;
  matchHeight._parseOptions = _parseOptions;

  /*
   *  matchHeight._apply
   *  apply matchHeight to given elements
   */

  matchHeight._apply = function (elements, options) {
    var opts = _parseOptions(options),
      $elements = $(elements),
      rows = [$elements];

    // take note of scroll position
    var scrollTop = $(window).scrollTop(),
      htmlHeight = $("html").outerHeight(true);

    // get hidden parents
    var $hiddenParents = $elements.parents().filter(":hidden");

    // cache the original inline style
    $hiddenParents.each(function () {
      var $that = $(this);
      $that.data("style-cache", $that.attr("style"));
    });

    // temporarily must force hidden parents visible
    $hiddenParents.css("display", "block");

    // get rows if using byRow, otherwise assume one row
    if (opts.byRow && !opts.target) {
      // must first force an arbitrary equal height so floating elements break evenly
      $elements.each(function () {
        var $that = $(this),
          display = $that.css("display");

        // temporarily force a usable display value
        if (
          display !== "inline-block" &&
          display !== "flex" &&
          display !== "inline-flex"
        ) {
          display = "block";
        }

        // cache the original inline style
        $that.data("style-cache", $that.attr("style"));

        $that.css({
          display: display,
          "padding-top": "0",
          "padding-bottom": "0",
          "margin-top": "0",
          "margin-bottom": "0",
          "border-top-width": "0",
          "border-bottom-width": "0",
          height: "100px",
          overflow: "hidden",
        });
      });

      // get the array of rows (based on element top position)
      rows = _rows($elements);

      // revert original inline styles
      $elements.each(function () {
        var $that = $(this);
        $that.attr("style", $that.data("style-cache") || "");
      });
    }

    $.each(rows, function (key, row) {
      var $row = $(row),
        targetHeight = 0;

      if (!opts.target) {
        // skip apply to rows with only one item
        if (opts.byRow && $row.length <= 1) {
          $row.css(opts.property, "");
          return;
        }

        // iterate the row and find the max height
        $row.each(function () {
          var $that = $(this),
            style = $that.attr("style"),
            display = $that.css("display");

          // temporarily force a usable display value
          if (
            display !== "inline-block" &&
            display !== "flex" &&
            display !== "inline-flex"
          ) {
            display = "block";
          }

          // ensure we get the correct actual height (and not a previously set height value)
          var css = { display: display };
          css[opts.property] = "";
          $that.css(css);

          // find the max height (including padding, but not margin)
          if ($that.outerHeight(false) > targetHeight) {
            targetHeight = $that.outerHeight(false);
          }

          // revert styles
          if (style) {
            $that.attr("style", style);
          } else {
            $that.css("display", "");
          }
        });
      } else {
        // if target set, use the height of the target element
        targetHeight = opts.target.outerHeight(false);
      }

      // iterate the row and apply the height to all elements
      $row.each(function () {
        var $that = $(this),
          verticalPadding = 0;

        // don't apply to a target
        if (opts.target && $that.is(opts.target)) {
          return;
        }

        // handle padding and border correctly (required when not using border-box)
        if ($that.css("box-sizing") !== "border-box") {
          verticalPadding +=
            _parse($that.css("border-top-width")) +
            _parse($that.css("border-bottom-width"));
          verticalPadding +=
            _parse($that.css("padding-top")) +
            _parse($that.css("padding-bottom"));
        }

        // set the height (accounting for padding and border)
        $that.css(opts.property, targetHeight - verticalPadding + "px");
      });
    });

    // revert hidden parents
    $hiddenParents.each(function () {
      var $that = $(this);
      $that.attr("style", $that.data("style-cache") || null);
    });

    // restore scroll position if enabled
    if (matchHeight._maintainScroll) {
      $(window).scrollTop(
        (scrollTop / htmlHeight) * $("html").outerHeight(true)
      );
    }

    return this;
  };

  /*
   *  matchHeight._applyDataApi
   *  applies matchHeight to all elements with a data-match-height attribute
   */

  matchHeight._applyDataApi = function () {
    var groups = {};

    // generate groups by their groupId set by elements using data-match-height
    $("[data-match-height], [data-mh]").each(function () {
      var $this = $(this),
        groupId = $this.attr("data-mh") || $this.attr("data-match-height");

      if (groupId in groups) {
        groups[groupId] = groups[groupId].add($this);
      } else {
        groups[groupId] = $this;
      }
    });

    // apply matchHeight to each group
    $.each(groups, function () {
      this.matchHeight(true);
    });
  };

  /*
   *  matchHeight._update
   *  updates matchHeight on all current groups with their correct options
   */

  var _update = function (event) {
    if (matchHeight._beforeUpdate) {
      matchHeight._beforeUpdate(event, matchHeight._groups);
    }

    $.each(matchHeight._groups, function () {
      matchHeight._apply(this.elements, this.options);
    });

    if (matchHeight._afterUpdate) {
      matchHeight._afterUpdate(event, matchHeight._groups);
    }
  };

  matchHeight._update = function (throttle, event) {
    // prevent update if fired from a resize event
    // where the viewport width hasn't actually changed
    // fixes an event looping bug in IE8
    if (event && event.type === "resize") {
      var windowWidth = $(window).width();
      if (windowWidth === _previousResizeWidth) {
        return;
      }
      _previousResizeWidth = windowWidth;
    }

    // throttle updates
    if (!throttle) {
      _update(event);
    } else if (_updateTimeout === -1) {
      _updateTimeout = setTimeout(function () {
        _update(event);
        _updateTimeout = -1;
      }, matchHeight._throttle);
    }
  };

  /*
   *  bind events
   */

  // apply on DOM ready event
  $(matchHeight._applyDataApi);

  // update heights on load and resize events
  $(window).bind("load", function (event) {
    matchHeight._update(false, event);
  });

  // throttled update heights on resize events
  $(window).bind("resize orientationchange", function (event) {
    matchHeight._update(true, event);
  });
});

/*!

 handlebars v4.0.5

Copyright (C) 2011-2015 by Yehuda Katz

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

@license
*/
(function webpackUniversalModuleDefinition(root, factory) {
  if (typeof exports === "object" && typeof module === "object")
    module.exports = factory();
  else if (typeof define === "function" && define.amd) define([], factory);
  else if (typeof exports === "object") exports["Handlebars"] = factory();
  else root["Handlebars"] = factory();
})(this, function () {
  return /******/ (function (modules) {
    // webpackBootstrap
    /******/ // The module cache
    /******/ var installedModules = {};

    /******/ // The require function
    /******/ function __webpack_require__(moduleId) {
      /******/ // Check if module is in cache
      /******/ if (installedModules[moduleId])
        /******/ return installedModules[moduleId].exports;

      /******/ // Create a new module (and put it into the cache)
      /******/ var module = (installedModules[moduleId] = {
        /******/ exports: {},
        /******/ id: moduleId,
        /******/ loaded: false,
        /******/
      });

      /******/ // Execute the module function
      /******/ modules[moduleId].call(
        module.exports,
        module,
        module.exports,
        __webpack_require__
      );

      /******/ // Flag the module as loaded
      /******/ module.loaded = true;

      /******/ // Return the exports of the module
      /******/ return module.exports;
      /******/
    }

    /******/ // expose the modules object (__webpack_modules__)
    /******/ __webpack_require__.m = modules;

    /******/ // expose the module cache
    /******/ __webpack_require__.c = installedModules;

    /******/ // __webpack_public_path__
    /******/ __webpack_require__.p = "";

    /******/ // Load entry module and return exports
    /******/ return __webpack_require__(0);
    /******/
  })(
    /************************************************************************/
    /******/ [
      /* 0 */
      /***/ function (module, exports, __webpack_require__) {
        "use strict";

        var _interopRequireDefault = __webpack_require__(1)["default"];

        exports.__esModule = true;

        var _handlebarsRuntime = __webpack_require__(2);

        var _handlebarsRuntime2 = _interopRequireDefault(_handlebarsRuntime);

        // Compiler imports

        var _handlebarsCompilerAst = __webpack_require__(21);

        var _handlebarsCompilerAst2 = _interopRequireDefault(
          _handlebarsCompilerAst
        );

        var _handlebarsCompilerBase = __webpack_require__(22);

        var _handlebarsCompilerCompiler = __webpack_require__(27);

        var _handlebarsCompilerJavascriptCompiler = __webpack_require__(28);

        var _handlebarsCompilerJavascriptCompiler2 = _interopRequireDefault(
          _handlebarsCompilerJavascriptCompiler
        );

        var _handlebarsCompilerVisitor = __webpack_require__(25);

        var _handlebarsCompilerVisitor2 = _interopRequireDefault(
          _handlebarsCompilerVisitor
        );

        var _handlebarsNoConflict = __webpack_require__(20);

        var _handlebarsNoConflict2 = _interopRequireDefault(
          _handlebarsNoConflict
        );

        var _create = _handlebarsRuntime2["default"].create;
        function create() {
          var hb = _create();

          hb.compile = function (input, options) {
            return _handlebarsCompilerCompiler.compile(input, options, hb);
          };
          hb.precompile = function (input, options) {
            return _handlebarsCompilerCompiler.precompile(input, options, hb);
          };

          hb.AST = _handlebarsCompilerAst2["default"];
          hb.Compiler = _handlebarsCompilerCompiler.Compiler;
          hb.JavaScriptCompiler =
            _handlebarsCompilerJavascriptCompiler2["default"];
          hb.Parser = _handlebarsCompilerBase.parser;
          hb.parse = _handlebarsCompilerBase.parse;

          return hb;
        }

        var inst = create();
        inst.create = create;

        _handlebarsNoConflict2["default"](inst);

        inst.Visitor = _handlebarsCompilerVisitor2["default"];

        inst["default"] = inst;

        exports["default"] = inst;
        module.exports = exports["default"];

        /***/
      },
      /* 1 */
      /***/ function (module, exports) {
        "use strict";

        exports["default"] = function (obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj,
              };
        };

        exports.__esModule = true;

        /***/
      },
      /* 2 */
      /***/ function (module, exports, __webpack_require__) {
        "use strict";

        var _interopRequireWildcard = __webpack_require__(3)["default"];

        var _interopRequireDefault = __webpack_require__(1)["default"];

        exports.__esModule = true;

        var _handlebarsBase = __webpack_require__(4);

        var base = _interopRequireWildcard(_handlebarsBase);

        // Each of these augment the Handlebars object. No need to setup here.
        // (This is done to easily share code between commonjs and browse envs)

        var _handlebarsSafeString = __webpack_require__(18);

        var _handlebarsSafeString2 = _interopRequireDefault(
          _handlebarsSafeString
        );

        var _handlebarsException = __webpack_require__(6);

        var _handlebarsException2 =
          _interopRequireDefault(_handlebarsException);

        var _handlebarsUtils = __webpack_require__(5);

        var Utils = _interopRequireWildcard(_handlebarsUtils);

        var _handlebarsRuntime = __webpack_require__(19);

        var runtime = _interopRequireWildcard(_handlebarsRuntime);

        var _handlebarsNoConflict = __webpack_require__(20);

        var _handlebarsNoConflict2 = _interopRequireDefault(
          _handlebarsNoConflict
        );

        // For compatibility and usage outside of module systems, make the Handlebars object a namespace
        function create() {
          var hb = new base.HandlebarsEnvironment();

          Utils.extend(hb, base);
          hb.SafeString = _handlebarsSafeString2["default"];
          hb.Exception = _handlebarsException2["default"];
          hb.Utils = Utils;
          hb.escapeExpression = Utils.escapeExpression;

          hb.VM = runtime;
          hb.template = function (spec) {
            return runtime.template(spec, hb);
          };

          return hb;
        }

        var inst = create();
        inst.create = create;

        _handlebarsNoConflict2["default"](inst);

        inst["default"] = inst;

        exports["default"] = inst;
        module.exports = exports["default"];

        /***/
      },
      /* 3 */
      /***/ function (module, exports) {
        "use strict";

        exports["default"] = function (obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key))
                  newObj[key] = obj[key];
              }
            }

            newObj["default"] = obj;
            return newObj;
          }
        };

        exports.__esModule = true;

        /***/
      },
      /* 4 */
      /***/ function (module, exports, __webpack_require__) {
        "use strict";

        var _interopRequireDefault = __webpack_require__(1)["default"];

        exports.__esModule = true;
        exports.HandlebarsEnvironment = HandlebarsEnvironment;

        var _utils = __webpack_require__(5);

        var _exception = __webpack_require__(6);

        var _exception2 = _interopRequireDefault(_exception);

        var _helpers = __webpack_require__(7);

        var _decorators = __webpack_require__(15);

        var _logger = __webpack_require__(17);

        var _logger2 = _interopRequireDefault(_logger);

        var VERSION = "4.0.5";
        exports.VERSION = VERSION;
        var COMPILER_REVISION = 7;

        exports.COMPILER_REVISION = COMPILER_REVISION;
        var REVISION_CHANGES = {
          1: "<= 1.0.rc.2", // 1.0.rc.2 is actually rev2 but doesn't report it
          2: "== 1.0.0-rc.3",
          3: "== 1.0.0-rc.4",
          4: "== 1.x.x",
          5: "== 2.0.0-alpha.x",
          6: ">= 2.0.0-beta.1",
          7: ">= 4.0.0",
        };

        exports.REVISION_CHANGES = REVISION_CHANGES;
        var objectType = "[object Object]";

        function HandlebarsEnvironment(helpers, partials, decorators) {
          this.helpers = helpers || {};
          this.partials = partials || {};
          this.decorators = decorators || {};

          _helpers.registerDefaultHelpers(this);
          _decorators.registerDefaultDecorators(this);
        }

        HandlebarsEnvironment.prototype = {
          constructor: HandlebarsEnvironment,

          logger: _logger2["default"],
          log: _logger2["default"].log,

          registerHelper: function registerHelper(name, fn) {
            if (_utils.toString.call(name) === objectType) {
              if (fn) {
                throw new _exception2["default"](
                  "Arg not supported with multiple helpers"
                );
              }
              _utils.extend(this.helpers, name);
            } else {
              this.helpers[name] = fn;
            }
          },
          unregisterHelper: function unregisterHelper(name) {
            delete this.helpers[name];
          },

          registerPartial: function registerPartial(name, partial) {
            if (_utils.toString.call(name) === objectType) {
              _utils.extend(this.partials, name);
            } else {
              if (typeof partial === "undefined") {
                throw new _exception2["default"](
                  'Attempting to register a partial called "' +
                    name +
                    '" as undefined'
                );
              }
              this.partials[name] = partial;
            }
          },
          unregisterPartial: function unregisterPartial(name) {
            delete this.partials[name];
          },

          registerDecorator: function registerDecorator(name, fn) {
            if (_utils.toString.call(name) === objectType) {
              if (fn) {
                throw new _exception2["default"](
                  "Arg not supported with multiple decorators"
                );
              }
              _utils.extend(this.decorators, name);
            } else {
              this.decorators[name] = fn;
            }
          },
          unregisterDecorator: function unregisterDecorator(name) {
            delete this.decorators[name];
          },
        };

        var log = _logger2["default"].log;

        exports.log = log;
        exports.createFrame = _utils.createFrame;
        exports.logger = _logger2["default"];

        /***/
      },
      /* 5 */
      /***/ function (module, exports) {
        "use strict";

        exports.__esModule = true;
        exports.extend = extend;
        exports.indexOf = indexOf;
        exports.escapeExpression = escapeExpression;
        exports.isEmpty = isEmpty;
        exports.createFrame = createFrame;
        exports.blockParams = blockParams;
        exports.appendContextPath = appendContextPath;
        var escape = {
          "&": "&amp;",
          "<": "&lt;",
          ">": "&gt;",
          '"': "&quot;",
          "'": "&#x27;",
          "`": "&#x60;",
          "=": "&#x3D;",
        };

        var badChars = /[&<>"'`=]/g,
          possible = /[&<>"'`=]/;

        function escapeChar(chr) {
          return escape[chr];
        }

        function extend(obj /* , ...source */) {
          for (var i = 1; i < arguments.length; i++) {
            for (var key in arguments[i]) {
              if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
                obj[key] = arguments[i][key];
              }
            }
          }

          return obj;
        }

        var toString = Object.prototype.toString;

        exports.toString = toString;
        // Sourced from lodash
        // https://github.com/bestiejs/lodash/blob/master/LICENSE.txt
        /* eslint-disable func-style */
        var isFunction = function isFunction(value) {
          return typeof value === "function";
        };
        // fallback for older versions of Chrome and Safari
        /* istanbul ignore next */
        if (isFunction(/x/)) {
          exports.isFunction = isFunction = function (value) {
            return (
              typeof value === "function" &&
              toString.call(value) === "[object Function]"
            );
          };
        }
        exports.isFunction = isFunction;

        /* eslint-enable func-style */

        /* istanbul ignore next */
        var isArray =
          Array.isArray ||
          function (value) {
            return value && typeof value === "object"
              ? toString.call(value) === "[object Array]"
              : false;
          };

        exports.isArray = isArray;
        // Older IE versions do not directly support indexOf so we must implement our own, sadly.

        function indexOf(array, value) {
          for (var i = 0, len = array.length; i < len; i++) {
            if (array[i] === value) {
              return i;
            }
          }
          return -1;
        }

        function escapeExpression(string) {
          if (typeof string !== "string") {
            // don't escape SafeStrings, since they're already safe
            if (string && string.toHTML) {
              return string.toHTML();
            } else if (string == null) {
              return "";
            } else if (!string) {
              return string + "";
            }

            // Force a string conversion as this will be done by the append regardless and
            // the regex test will do this transparently behind the scenes, causing issues if
            // an object's to string has escaped characters in it.
            string = "" + string;
          }

          if (!possible.test(string)) {
            return string;
          }
          return string.replace(badChars, escapeChar);
        }

        function isEmpty(value) {
          if (!value && value !== 0) {
            return true;
          } else if (isArray(value) && value.length === 0) {
            return true;
          } else {
            return false;
          }
        }

        function createFrame(object) {
          var frame = extend({}, object);
          frame._parent = object;
          return frame;
        }

        function blockParams(params, ids) {
          params.path = ids;
          return params;
        }

        function appendContextPath(contextPath, id) {
          return (contextPath ? contextPath + "." : "") + id;
        }

        /***/
      },
      /* 6 */
      /***/ function (module, exports) {
        "use strict";

        exports.__esModule = true;

        var errorProps = [
          "description",
          "fileName",
          "lineNumber",
          "message",
          "name",
          "number",
          "stack",
        ];

        function Exception(message, node) {
          var loc = node && node.loc,
            line = undefined,
            column = undefined;
          if (loc) {
            line = loc.start.line;
            column = loc.start.column;

            message += " - " + line + ":" + column;
          }

          var tmp = Error.prototype.constructor.call(this, message);

          // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
          for (var idx = 0; idx < errorProps.length; idx++) {
            this[errorProps[idx]] = tmp[errorProps[idx]];
          }

          /* istanbul ignore else */
          if (Error.captureStackTrace) {
            Error.captureStackTrace(this, Exception);
          }

          if (loc) {
            this.lineNumber = line;
            this.column = column;
          }
        }

        Exception.prototype = new Error();

        exports["default"] = Exception;
        module.exports = exports["default"];

        /***/
      },
      /* 7 */
      /***/ function (module, exports, __webpack_require__) {
        "use strict";

        var _interopRequireDefault = __webpack_require__(1)["default"];

        exports.__esModule = true;
        exports.registerDefaultHelpers = registerDefaultHelpers;

        var _helpersBlockHelperMissing = __webpack_require__(8);

        var _helpersBlockHelperMissing2 = _interopRequireDefault(
          _helpersBlockHelperMissing
        );

        var _helpersEach = __webpack_require__(9);

        var _helpersEach2 = _interopRequireDefault(_helpersEach);

        var _helpersHelperMissing = __webpack_require__(10);

        var _helpersHelperMissing2 = _interopRequireDefault(
          _helpersHelperMissing
        );

        var _helpersIf = __webpack_require__(11);

        var _helpersIf2 = _interopRequireDefault(_helpersIf);

        var _helpersLog = __webpack_require__(12);

        var _helpersLog2 = _interopRequireDefault(_helpersLog);

        var _helpersLookup = __webpack_require__(13);

        var _helpersLookup2 = _interopRequireDefault(_helpersLookup);

        var _helpersWith = __webpack_require__(14);

        var _helpersWith2 = _interopRequireDefault(_helpersWith);

        function registerDefaultHelpers(instance) {
          _helpersBlockHelperMissing2["default"](instance);
          _helpersEach2["default"](instance);
          _helpersHelperMissing2["default"](instance);
          _helpersIf2["default"](instance);
          _helpersLog2["default"](instance);
          _helpersLookup2["default"](instance);
          _helpersWith2["default"](instance);
        }

        /***/
      },
      /* 8 */
      /***/ function (module, exports, __webpack_require__) {
        "use strict";

        exports.__esModule = true;

        var _utils = __webpack_require__(5);

        exports["default"] = function (instance) {
          instance.registerHelper(
            "blockHelperMissing",
            function (context, options) {
              var inverse = options.inverse,
                fn = options.fn;

              if (context === true) {
                return fn(this);
              } else if (context === false || context == null) {
                return inverse(this);
              } else if (_utils.isArray(context)) {
                if (context.length > 0) {
                  if (options.ids) {
                    options.ids = [options.name];
                  }

                  return instance.helpers.each(context, options);
                } else {
                  return inverse(this);
                }
              } else {
                if (options.data && options.ids) {
                  var data = _utils.createFrame(options.data);
                  data.contextPath = _utils.appendContextPath(
                    options.data.contextPath,
                    options.name
                  );
                  options = { data: data };
                }

                return fn(context, options);
              }
            }
          );
        };

        module.exports = exports["default"];

        /***/
      },
      /* 9 */
      /***/ function (module, exports, __webpack_require__) {
        "use strict";

        var _interopRequireDefault = __webpack_require__(1)["default"];

        exports.__esModule = true;

        var _utils = __webpack_require__(5);

        var _exception = __webpack_require__(6);

        var _exception2 = _interopRequireDefault(_exception);

        exports["default"] = function (instance) {
          instance.registerHelper("each", function (context, options) {
            if (!options) {
              throw new _exception2["default"]("Must pass iterator to #each");
            }

            var fn = options.fn,
              inverse = options.inverse,
              i = 0,
              ret = "",
              data = undefined,
              contextPath = undefined;

            if (options.data && options.ids) {
              contextPath =
                _utils.appendContextPath(
                  options.data.contextPath,
                  options.ids[0]
                ) + ".";
            }

            if (_utils.isFunction(context)) {
              context = context.call(this);
            }

            if (options.data) {
              data = _utils.createFrame(options.data);
            }

            function execIteration(field, index, last) {
              if (data) {
                data.key = field;
                data.index = index;
                data.first = index === 0;
                data.last = !!last;

                if (contextPath) {
                  data.contextPath = contextPath + field;
                }
              }

              ret =
                ret +
                fn(context[field], {
                  data: data,
                  blockParams: _utils.blockParams(
                    [context[field], field],
                    [contextPath + field, null]
                  ),
                });
            }

            if (context && typeof context === "object") {
              if (_utils.isArray(context)) {
                for (var j = context.length; i < j; i++) {
                  if (i in context) {
                    execIteration(i, i, i === context.length - 1);
                  }
                }
              } else {
                var priorKey = undefined;

                for (var key in context) {
                  if (context.hasOwnProperty(key)) {
                    // We're running the iterations one step out of sync so we can detect
                    // the last iteration without have to scan the object twice and create
                    // an itermediate keys array.
                    if (priorKey !== undefined) {
                      execIteration(priorKey, i - 1);
                    }
                    priorKey = key;
                    i++;
                  }
                }
                if (priorKey !== undefined) {
                  execIteration(priorKey, i - 1, true);
                }
              }
            }

            if (i === 0) {
              ret = inverse(this);
            }

            return ret;
          });
        };

        module.exports = exports["default"];

        /***/
      },
      /* 10 */
      /***/ function (module, exports, __webpack_require__) {
        "use strict";

        var _interopRequireDefault = __webpack_require__(1)["default"];

        exports.__esModule = true;

        var _exception = __webpack_require__(6);

        var _exception2 = _interopRequireDefault(_exception);

        exports["default"] = function (instance) {
          instance.registerHelper(
            "helperMissing",
            function () /* [args, ]options */ {
              if (arguments.length === 1) {
                // A missing field in a {{foo}} construct.
                return undefined;
              } else {
                // Someone is actually trying to call something, blow up.
                throw new _exception2["default"](
                  'Missing helper: "' +
                    arguments[arguments.length - 1].name +
                    '"'
                );
              }
            }
          );
        };

        module.exports = exports["default"];

        /***/
      },
      /* 11 */
      /***/ function (module, exports, __webpack_require__) {
        "use strict";

        exports.__esModule = true;

        var _utils = __webpack_require__(5);

        exports["default"] = function (instance) {
          instance.registerHelper("if", function (conditional, options) {
            if (_utils.isFunction(conditional)) {
              conditional = conditional.call(this);
            }

            // Default behavior is to render the positive path if the value is truthy and not empty.
            // The `includeZero` option may be set to treat the condtional as purely not empty based on the
            // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.
            if (
              (!options.hash.includeZero && !conditional) ||
              _utils.isEmpty(conditional)
            ) {
              return options.inverse(this);
            } else {
              return options.fn(this);
            }
          });

          instance.registerHelper("unless", function (conditional, options) {
            return instance.helpers["if"].call(this, conditional, {
              fn: options.inverse,
              inverse: options.fn,
              hash: options.hash,
            });
          });
        };

        module.exports = exports["default"];

        /***/
      },
      /* 12 */
      /***/ function (module, exports) {
        "use strict";

        exports.__esModule = true;

        exports["default"] = function (instance) {
          instance.registerHelper("log", function () /* message, options */ {
            var args = [undefined],
              options = arguments[arguments.length - 1];
            for (var i = 0; i < arguments.length - 1; i++) {
              args.push(arguments[i]);
            }

            var level = 1;
            if (options.hash.level != null) {
              level = options.hash.level;
            } else if (options.data && options.data.level != null) {
              level = options.data.level;
            }
            args[0] = level;

            instance.log.apply(instance, args);
          });
        };

        module.exports = exports["default"];

        /***/
      },
      /* 13 */
      /***/ function (module, exports) {
        "use strict";

        exports.__esModule = true;

        exports["default"] = function (instance) {
          instance.registerHelper("lookup", function (obj, field) {
            return obj && obj[field];
          });
        };

        module.exports = exports["default"];

        /***/
      },
      /* 14 */
      /***/ function (module, exports, __webpack_require__) {
        "use strict";

        exports.__esModule = true;

        var _utils = __webpack_require__(5);

        exports["default"] = function (instance) {
          instance.registerHelper("with", function (context, options) {
            if (_utils.isFunction(context)) {
              context = context.call(this);
            }

            var fn = options.fn;

            if (!_utils.isEmpty(context)) {
              var data = options.data;
              if (options.data && options.ids) {
                data = _utils.createFrame(options.data);
                data.contextPath = _utils.appendContextPath(
                  options.data.contextPath,
                  options.ids[0]
                );
              }

              return fn(context, {
                data: data,
                blockParams: _utils.blockParams(
                  [context],
                  [data && data.contextPath]
                ),
              });
            } else {
              return options.inverse(this);
            }
          });
        };

        module.exports = exports["default"];

        /***/
      },
      /* 15 */
      /***/ function (module, exports, __webpack_require__) {
        "use strict";

        var _interopRequireDefault = __webpack_require__(1)["default"];

        exports.__esModule = true;
        exports.registerDefaultDecorators = registerDefaultDecorators;

        var _decoratorsInline = __webpack_require__(16);

        var _decoratorsInline2 = _interopRequireDefault(_decoratorsInline);

        function registerDefaultDecorators(instance) {
          _decoratorsInline2["default"](instance);
        }

        /***/
      },
      /* 16 */
      /***/ function (module, exports, __webpack_require__) {
        "use strict";

        exports.__esModule = true;

        var _utils = __webpack_require__(5);

        exports["default"] = function (instance) {
          instance.registerDecorator(
            "inline",
            function (fn, props, container, options) {
              var ret = fn;
              if (!props.partials) {
                props.partials = {};
                ret = function (context, options) {
                  // Create a new partials stack frame prior to exec.
                  var original = container.partials;
                  container.partials = _utils.extend(
                    {},
                    original,
                    props.partials
                  );
                  var ret = fn(context, options);
                  container.partials = original;
                  return ret;
                };
              }

              props.partials[options.args[0]] = options.fn;

              return ret;
            }
          );
        };

        module.exports = exports["default"];

        /***/
      },
      /* 17 */
      /***/ function (module, exports, __webpack_require__) {
        "use strict";

        exports.__esModule = true;

        var _utils = __webpack_require__(5);

        var logger = {
          methodMap: ["debug", "info", "warn", "error"],
          level: "info",

          // Maps a given level value to the `methodMap` indexes above.
          lookupLevel: function lookupLevel(level) {
            if (typeof level === "string") {
              var levelMap = _utils.indexOf(
                logger.methodMap,
                level.toLowerCase()
              );
              if (levelMap >= 0) {
                level = levelMap;
              } else {
                level = parseInt(level, 10);
              }
            }

            return level;
          },

          // Can be overridden in the host environment
          log: function log(level) {
            level = logger.lookupLevel(level);

            if (
              typeof console !== "undefined" &&
              logger.lookupLevel(logger.level) <= level
            ) {
              var method = logger.methodMap[level];
              if (!console[method]) {
                // eslint-disable-line no-console
                method = "log";
              }

              for (
                var _len = arguments.length,
                  message = Array(_len > 1 ? _len - 1 : 0),
                  _key = 1;
                _key < _len;
                _key++
              ) {
                message[_key - 1] = arguments[_key];
              }

              console[method].apply(console, message); // eslint-disable-line no-console
            }
          },
        };

        exports["default"] = logger;
        module.exports = exports["default"];

        /***/
      },
      /* 18 */
      /***/ function (module, exports) {
        // Build out our basic SafeString type
        "use strict";

        exports.__esModule = true;
        function SafeString(string) {
          this.string = string;
        }

        SafeString.prototype.toString = SafeString.prototype.toHTML =
          function () {
            return "" + this.string;
          };

        exports["default"] = SafeString;
        module.exports = exports["default"];

        /***/
      },
      /* 19 */
      /***/ function (module, exports, __webpack_require__) {
        "use strict";

        var _interopRequireWildcard = __webpack_require__(3)["default"];

        var _interopRequireDefault = __webpack_require__(1)["default"];

        exports.__esModule = true;
        exports.checkRevision = checkRevision;
        exports.template = template;
        exports.wrapProgram = wrapProgram;
        exports.resolvePartial = resolvePartial;
        exports.invokePartial = invokePartial;
        exports.noop = noop;

        var _utils = __webpack_require__(5);

        var Utils = _interopRequireWildcard(_utils);

        var _exception = __webpack_require__(6);

        var _exception2 = _interopRequireDefault(_exception);

        var _base = __webpack_require__(4);

        function checkRevision(compilerInfo) {
          var compilerRevision = (compilerInfo && compilerInfo[0]) || 1,
            currentRevision = _base.COMPILER_REVISION;

          if (compilerRevision !== currentRevision) {
            if (compilerRevision < currentRevision) {
              var runtimeVersions = _base.REVISION_CHANGES[currentRevision],
                compilerVersions = _base.REVISION_CHANGES[compilerRevision];
              throw new _exception2["default"](
                "Template was precompiled with an older version of Handlebars than the current runtime. " +
                  "Please update your precompiler to a newer version (" +
                  runtimeVersions +
                  ") or downgrade your runtime to an older version (" +
                  compilerVersions +
                  ")."
              );
            } else {
              // Use the embedded version info since the runtime doesn't know about this revision yet
              throw new _exception2["default"](
                "Template was precompiled with a newer version of Handlebars than the current runtime. " +
                  "Please update your runtime to a newer version (" +
                  compilerInfo[1] +
                  ")."
              );
            }
          }
        }

        function template(templateSpec, env) {
          /* istanbul ignore next */
          if (!env) {
            throw new _exception2["default"](
              "No environment passed to template"
            );
          }
          if (!templateSpec || !templateSpec.main) {
            throw new _exception2["default"](
              "Unknown template object: " + typeof templateSpec
            );
          }

          templateSpec.main.decorator = templateSpec.main_d;

          // Note: Using env.VM references rather than local var references throughout this section to allow
          // for external users to override these as psuedo-supported APIs.
          env.VM.checkRevision(templateSpec.compiler);

          function invokePartialWrapper(partial, context, options) {
            if (options.hash) {
              context = Utils.extend({}, context, options.hash);
              if (options.ids) {
                options.ids[0] = true;
              }
            }

            partial = env.VM.resolvePartial.call(
              this,
              partial,
              context,
              options
            );
            var result = env.VM.invokePartial.call(
              this,
              partial,
              context,
              options
            );

            if (result == null && env.compile) {
              options.partials[options.name] = env.compile(
                partial,
                templateSpec.compilerOptions,
                env
              );
              result = options.partials[options.name](context, options);
            }
            if (result != null) {
              if (options.indent) {
                var lines = result.split("\n");
                for (var i = 0, l = lines.length; i < l; i++) {
                  if (!lines[i] && i + 1 === l) {
                    break;
                  }

                  lines[i] = options.indent + lines[i];
                }
                result = lines.join("\n");
              }
              return result;
            } else {
              throw new _exception2["default"](
                "The partial " +
                  options.name +
                  " could not be compiled when running in runtime-only mode"
              );
            }
          }

          // Just add water
          var container = {
            strict: function strict(obj, name) {
              if (!(name in obj)) {
                throw new _exception2["default"](
                  '"' + name + '" not defined in ' + obj
                );
              }
              return obj[name];
            },
            lookup: function lookup(depths, name) {
              var len = depths.length;
              for (var i = 0; i < len; i++) {
                if (depths[i] && depths[i][name] != null) {
                  return depths[i][name];
                }
              }
            },
            lambda: function lambda(current, context) {
              return typeof current === "function"
                ? current.call(context)
                : current;
            },

            escapeExpression: Utils.escapeExpression,
            invokePartial: invokePartialWrapper,

            fn: function fn(i) {
              var ret = templateSpec[i];
              ret.decorator = templateSpec[i + "_d"];
              return ret;
            },

            programs: [],
            program: function program(
              i,
              data,
              declaredBlockParams,
              blockParams,
              depths
            ) {
              var programWrapper = this.programs[i],
                fn = this.fn(i);
              if (data || depths || blockParams || declaredBlockParams) {
                programWrapper = wrapProgram(
                  this,
                  i,
                  fn,
                  data,
                  declaredBlockParams,
                  blockParams,
                  depths
                );
              } else if (!programWrapper) {
                programWrapper = this.programs[i] = wrapProgram(this, i, fn);
              }
              return programWrapper;
            },

            data: function data(value, depth) {
              while (value && depth--) {
                value = value._parent;
              }
              return value;
            },
            merge: function merge(param, common) {
              var obj = param || common;

              if (param && common && param !== common) {
                obj = Utils.extend({}, common, param);
              }

              return obj;
            },

            noop: env.VM.noop,
            compilerInfo: templateSpec.compiler,
          };

          function ret(context) {
            var options =
              arguments.length <= 1 || arguments[1] === undefined
                ? {}
                : arguments[1];

            var data = options.data;

            ret._setup(options);
            if (!options.partial && templateSpec.useData) {
              data = initData(context, data);
            }
            var depths = undefined,
              blockParams = templateSpec.useBlockParams ? [] : undefined;
            if (templateSpec.useDepths) {
              if (options.depths) {
                depths =
                  context !== options.depths[0]
                    ? [context].concat(options.depths)
                    : options.depths;
              } else {
                depths = [context];
              }
            }

            function main(context /*, options*/) {
              return (
                "" +
                templateSpec.main(
                  container,
                  context,
                  container.helpers,
                  container.partials,
                  data,
                  blockParams,
                  depths
                )
              );
            }
            main = executeDecorators(
              templateSpec.main,
              main,
              container,
              options.depths || [],
              data,
              blockParams
            );
            return main(context, options);
          }
          ret.isTop = true;

          ret._setup = function (options) {
            if (!options.partial) {
              container.helpers = container.merge(options.helpers, env.helpers);

              if (templateSpec.usePartial) {
                container.partials = container.merge(
                  options.partials,
                  env.partials
                );
              }
              if (templateSpec.usePartial || templateSpec.useDecorators) {
                container.decorators = container.merge(
                  options.decorators,
                  env.decorators
                );
              }
            } else {
              container.helpers = options.helpers;
              container.partials = options.partials;
              container.decorators = options.decorators;
            }
          };

          ret._child = function (i, data, blockParams, depths) {
            if (templateSpec.useBlockParams && !blockParams) {
              throw new _exception2["default"]("must pass block params");
            }
            if (templateSpec.useDepths && !depths) {
              throw new _exception2["default"]("must pass parent depths");
            }

            return wrapProgram(
              container,
              i,
              templateSpec[i],
              data,
              0,
              blockParams,
              depths
            );
          };
          return ret;
        }

        function wrapProgram(
          container,
          i,
          fn,
          data,
          declaredBlockParams,
          blockParams,
          depths
        ) {
          function prog(context) {
            var options =
              arguments.length <= 1 || arguments[1] === undefined
                ? {}
                : arguments[1];

            var currentDepths = depths;
            if (depths && context !== depths[0]) {
              currentDepths = [context].concat(depths);
            }

            return fn(
              container,
              context,
              container.helpers,
              container.partials,
              options.data || data,
              blockParams && [options.blockParams].concat(blockParams),
              currentDepths
            );
          }

          prog = executeDecorators(
            fn,
            prog,
            container,
            depths,
            data,
            blockParams
          );

          prog.program = i;
          prog.depth = depths ? depths.length : 0;
          prog.blockParams = declaredBlockParams || 0;
          return prog;
        }

        function resolvePartial(partial, context, options) {
          if (!partial) {
            if (options.name === "@partial-block") {
              partial = options.data["partial-block"];
            } else {
              partial = options.partials[options.name];
            }
          } else if (!partial.call && !options.name) {
            // This is a dynamic partial that returned a string
            options.name = partial;
            partial = options.partials[partial];
          }
          return partial;
        }

        function invokePartial(partial, context, options) {
          options.partial = true;
          if (options.ids) {
            options.data.contextPath =
              options.ids[0] || options.data.contextPath;
          }

          var partialBlock = undefined;
          if (options.fn && options.fn !== noop) {
            options.data = _base.createFrame(options.data);
            partialBlock = options.data["partial-block"] = options.fn;

            if (partialBlock.partials) {
              options.partials = Utils.extend(
                {},
                options.partials,
                partialBlock.partials
              );
            }
          }

          if (partial === undefined && partialBlock) {
            partial = partialBlock;
          }

          if (partial === undefined) {
            throw new _exception2["default"](
              "The partial " + options.name + " could not be found"
            );
          } else if (partial instanceof Function) {
            return partial(context, options);
          }
        }

        function noop() {
          return "";
        }

        function initData(context, data) {
          if (!data || !("root" in data)) {
            data = data ? _base.createFrame(data) : {};
            data.root = context;
          }
          return data;
        }

        function executeDecorators(
          fn,
          prog,
          container,
          depths,
          data,
          blockParams
        ) {
          if (fn.decorator) {
            var props = {};
            prog = fn.decorator(
              prog,
              props,
              container,
              depths && depths[0],
              data,
              blockParams,
              depths
            );
            Utils.extend(prog, props);
          }
          return prog;
        }

        /***/
      },
      /* 20 */
      /***/ function (module, exports) {
        /* WEBPACK VAR INJECTION */ (function (global) {
          /* global window */
          "use strict";

          exports.__esModule = true;

          exports["default"] = function (Handlebars) {
            /* istanbul ignore next */
            var root = typeof global !== "undefined" ? global : window,
              $Handlebars = root.Handlebars;
            /* istanbul ignore next */
            Handlebars.noConflict = function () {
              if (root.Handlebars === Handlebars) {
                root.Handlebars = $Handlebars;
              }
              return Handlebars;
            };
          };

          module.exports = exports["default"];
          /* WEBPACK VAR INJECTION */
        }).call(
          exports,
          (function () {
            return this;
          })()
        );

        /***/
      },
      /* 21 */
      /***/ function (module, exports) {
        "use strict";

        exports.__esModule = true;
        var AST = {
          // Public API used to evaluate derived attributes regarding AST nodes
          helpers: {
            // a mustache is definitely a helper if:
            // * it is an eligible helper, and
            // * it has at least one parameter or hash segment
            helperExpression: function helperExpression(node) {
              return (
                node.type === "SubExpression" ||
                ((node.type === "MustacheStatement" ||
                  node.type === "BlockStatement") &&
                  !!((node.params && node.params.length) || node.hash))
              );
            },

            scopedId: function scopedId(path) {
              return /^\.|this\b/.test(path.original);
            },

            // an ID is simple if it only has one part, and that part is not
            // `..` or `this`.
            simpleId: function simpleId(path) {
              return (
                path.parts.length === 1 &&
                !AST.helpers.scopedId(path) &&
                !path.depth
              );
            },
          },
        };

        // Must be exported as an object rather than the root of the module as the jison lexer
        // must modify the object to operate properly.
        exports["default"] = AST;
        module.exports = exports["default"];

        /***/
      },
      /* 22 */
      /***/ function (module, exports, __webpack_require__) {
        "use strict";

        var _interopRequireDefault = __webpack_require__(1)["default"];

        var _interopRequireWildcard = __webpack_require__(3)["default"];

        exports.__esModule = true;
        exports.parse = parse;

        var _parser = __webpack_require__(23);

        var _parser2 = _interopRequireDefault(_parser);

        var _whitespaceControl = __webpack_require__(24);

        var _whitespaceControl2 = _interopRequireDefault(_whitespaceControl);

        var _helpers = __webpack_require__(26);

        var Helpers = _interopRequireWildcard(_helpers);

        var _utils = __webpack_require__(5);

        exports.parser = _parser2["default"];

        var yy = {};
        _utils.extend(yy, Helpers);

        function parse(input, options) {
          // Just return if an already-compiled AST was passed in.
          if (input.type === "Program") {
            return input;
          }

          _parser2["default"].yy = yy;

          // Altering the shared object here, but this is ok as parser is a sync operation
          yy.locInfo = function (locInfo) {
            return new yy.SourceLocation(options && options.srcName, locInfo);
          };

          var strip = new _whitespaceControl2["default"](options);
          return strip.accept(_parser2["default"].parse(input));
        }

        /***/
      },
      /* 23 */
      /***/ function (module, exports) {
        /* istanbul ignore next */
        /* Jison generated parser */
        "use strict";

        var handlebars = (function () {
          var parser = {
            trace: function trace() {},
            yy: {},
            symbols_: {
              error: 2,
              root: 3,
              program: 4,
              EOF: 5,
              program_repetition0: 6,
              statement: 7,
              mustache: 8,
              block: 9,
              rawBlock: 10,
              partial: 11,
              partialBlock: 12,
              content: 13,
              COMMENT: 14,
              CONTENT: 15,
              openRawBlock: 16,
              rawBlock_repetition_plus0: 17,
              END_RAW_BLOCK: 18,
              OPEN_RAW_BLOCK: 19,
              helperName: 20,
              openRawBlock_repetition0: 21,
              openRawBlock_option0: 22,
              CLOSE_RAW_BLOCK: 23,
              openBlock: 24,
              block_option0: 25,
              closeBlock: 26,
              openInverse: 27,
              block_option1: 28,
              OPEN_BLOCK: 29,
              openBlock_repetition0: 30,
              openBlock_option0: 31,
              openBlock_option1: 32,
              CLOSE: 33,
              OPEN_INVERSE: 34,
              openInverse_repetition0: 35,
              openInverse_option0: 36,
              openInverse_option1: 37,
              openInverseChain: 38,
              OPEN_INVERSE_CHAIN: 39,
              openInverseChain_repetition0: 40,
              openInverseChain_option0: 41,
              openInverseChain_option1: 42,
              inverseAndProgram: 43,
              INVERSE: 44,
              inverseChain: 45,
              inverseChain_option0: 46,
              OPEN_ENDBLOCK: 47,
              OPEN: 48,
              mustache_repetition0: 49,
              mustache_option0: 50,
              OPEN_UNESCAPED: 51,
              mustache_repetition1: 52,
              mustache_option1: 53,
              CLOSE_UNESCAPED: 54,
              OPEN_PARTIAL: 55,
              partialName: 56,
              partial_repetition0: 57,
              partial_option0: 58,
              openPartialBlock: 59,
              OPEN_PARTIAL_BLOCK: 60,
              openPartialBlock_repetition0: 61,
              openPartialBlock_option0: 62,
              param: 63,
              sexpr: 64,
              OPEN_SEXPR: 65,
              sexpr_repetition0: 66,
              sexpr_option0: 67,
              CLOSE_SEXPR: 68,
              hash: 69,
              hash_repetition_plus0: 70,
              hashSegment: 71,
              ID: 72,
              EQUALS: 73,
              blockParams: 74,
              OPEN_BLOCK_PARAMS: 75,
              blockParams_repetition_plus0: 76,
              CLOSE_BLOCK_PARAMS: 77,
              path: 78,
              dataName: 79,
              STRING: 80,
              NUMBER: 81,
              BOOLEAN: 82,
              UNDEFINED: 83,
              NULL: 84,
              DATA: 85,
              pathSegments: 86,
              SEP: 87,
              $accept: 0,
              $end: 1,
            },
            terminals_: {
              2: "error",
              5: "EOF",
              14: "COMMENT",
              15: "CONTENT",
              18: "END_RAW_BLOCK",
              19: "OPEN_RAW_BLOCK",
              23: "CLOSE_RAW_BLOCK",
              29: "OPEN_BLOCK",
              33: "CLOSE",
              34: "OPEN_INVERSE",
              39: "OPEN_INVERSE_CHAIN",
              44: "INVERSE",
              47: "OPEN_ENDBLOCK",
              48: "OPEN",
              51: "OPEN_UNESCAPED",
              54: "CLOSE_UNESCAPED",
              55: "OPEN_PARTIAL",
              60: "OPEN_PARTIAL_BLOCK",
              65: "OPEN_SEXPR",
              68: "CLOSE_SEXPR",
              72: "ID",
              73: "EQUALS",
              75: "OPEN_BLOCK_PARAMS",
              77: "CLOSE_BLOCK_PARAMS",
              80: "STRING",
              81: "NUMBER",
              82: "BOOLEAN",
              83: "UNDEFINED",
              84: "NULL",
              85: "DATA",
              87: "SEP",
            },
            productions_: [
              0,
              [3, 2],
              [4, 1],
              [7, 1],
              [7, 1],
              [7, 1],
              [7, 1],
              [7, 1],
              [7, 1],
              [7, 1],
              [13, 1],
              [10, 3],
              [16, 5],
              [9, 4],
              [9, 4],
              [24, 6],
              [27, 6],
              [38, 6],
              [43, 2],
              [45, 3],
              [45, 1],
              [26, 3],
              [8, 5],
              [8, 5],
              [11, 5],
              [12, 3],
              [59, 5],
              [63, 1],
              [63, 1],
              [64, 5],
              [69, 1],
              [71, 3],
              [74, 3],
              [20, 1],
              [20, 1],
              [20, 1],
              [20, 1],
              [20, 1],
              [20, 1],
              [20, 1],
              [56, 1],
              [56, 1],
              [79, 2],
              [78, 1],
              [86, 3],
              [86, 1],
              [6, 0],
              [6, 2],
              [17, 1],
              [17, 2],
              [21, 0],
              [21, 2],
              [22, 0],
              [22, 1],
              [25, 0],
              [25, 1],
              [28, 0],
              [28, 1],
              [30, 0],
              [30, 2],
              [31, 0],
              [31, 1],
              [32, 0],
              [32, 1],
              [35, 0],
              [35, 2],
              [36, 0],
              [36, 1],
              [37, 0],
              [37, 1],
              [40, 0],
              [40, 2],
              [41, 0],
              [41, 1],
              [42, 0],
              [42, 1],
              [46, 0],
              [46, 1],
              [49, 0],
              [49, 2],
              [50, 0],
              [50, 1],
              [52, 0],
              [52, 2],
              [53, 0],
              [53, 1],
              [57, 0],
              [57, 2],
              [58, 0],
              [58, 1],
              [61, 0],
              [61, 2],
              [62, 0],
              [62, 1],
              [66, 0],
              [66, 2],
              [67, 0],
              [67, 1],
              [70, 1],
              [70, 2],
              [76, 1],
              [76, 2],
            ],
            performAction: function anonymous(
              yytext,
              yyleng,
              yylineno,
              yy,
              yystate,
              $$,
              _$
              /**/
            ) {
              var $0 = $$.length - 1;
              switch (yystate) {
                case 1:
                  return $$[$0 - 1];
                  break;
                case 2:
                  this.$ = yy.prepareProgram($$[$0]);
                  break;
                case 3:
                  this.$ = $$[$0];
                  break;
                case 4:
                  this.$ = $$[$0];
                  break;
                case 5:
                  this.$ = $$[$0];
                  break;
                case 6:
                  this.$ = $$[$0];
                  break;
                case 7:
                  this.$ = $$[$0];
                  break;
                case 8:
                  this.$ = $$[$0];
                  break;
                case 9:
                  this.$ = {
                    type: "CommentStatement",
                    value: yy.stripComment($$[$0]),
                    strip: yy.stripFlags($$[$0], $$[$0]),
                    loc: yy.locInfo(this._$),
                  };

                  break;
                case 10:
                  this.$ = {
                    type: "ContentStatement",
                    original: $$[$0],
                    value: $$[$0],
                    loc: yy.locInfo(this._$),
                  };

                  break;
                case 11:
                  this.$ = yy.prepareRawBlock(
                    $$[$0 - 2],
                    $$[$0 - 1],
                    $$[$0],
                    this._$
                  );
                  break;
                case 12:
                  this.$ = {
                    path: $$[$0 - 3],
                    params: $$[$0 - 2],
                    hash: $$[$0 - 1],
                  };
                  break;
                case 13:
                  this.$ = yy.prepareBlock(
                    $$[$0 - 3],
                    $$[$0 - 2],
                    $$[$0 - 1],
                    $$[$0],
                    false,
                    this._$
                  );
                  break;
                case 14:
                  this.$ = yy.prepareBlock(
                    $$[$0 - 3],
                    $$[$0 - 2],
                    $$[$0 - 1],
                    $$[$0],
                    true,
                    this._$
                  );
                  break;
                case 15:
                  this.$ = {
                    open: $$[$0 - 5],
                    path: $$[$0 - 4],
                    params: $$[$0 - 3],
                    hash: $$[$0 - 2],
                    blockParams: $$[$0 - 1],
                    strip: yy.stripFlags($$[$0 - 5], $$[$0]),
                  };
                  break;
                case 16:
                  this.$ = {
                    path: $$[$0 - 4],
                    params: $$[$0 - 3],
                    hash: $$[$0 - 2],
                    blockParams: $$[$0 - 1],
                    strip: yy.stripFlags($$[$0 - 5], $$[$0]),
                  };
                  break;
                case 17:
                  this.$ = {
                    path: $$[$0 - 4],
                    params: $$[$0 - 3],
                    hash: $$[$0 - 2],
                    blockParams: $$[$0 - 1],
                    strip: yy.stripFlags($$[$0 - 5], $$[$0]),
                  };
                  break;
                case 18:
                  this.$ = {
                    strip: yy.stripFlags($$[$0 - 1], $$[$0 - 1]),
                    program: $$[$0],
                  };
                  break;
                case 19:
                  var inverse = yy.prepareBlock(
                      $$[$0 - 2],
                      $$[$0 - 1],
                      $$[$0],
                      $$[$0],
                      false,
                      this._$
                    ),
                    program = yy.prepareProgram([inverse], $$[$0 - 1].loc);
                  program.chained = true;

                  this.$ = {
                    strip: $$[$0 - 2].strip,
                    program: program,
                    chain: true,
                  };

                  break;
                case 20:
                  this.$ = $$[$0];
                  break;
                case 21:
                  this.$ = {
                    path: $$[$0 - 1],
                    strip: yy.stripFlags($$[$0 - 2], $$[$0]),
                  };
                  break;
                case 22:
                  this.$ = yy.prepareMustache(
                    $$[$0 - 3],
                    $$[$0 - 2],
                    $$[$0 - 1],
                    $$[$0 - 4],
                    yy.stripFlags($$[$0 - 4], $$[$0]),
                    this._$
                  );
                  break;
                case 23:
                  this.$ = yy.prepareMustache(
                    $$[$0 - 3],
                    $$[$0 - 2],
                    $$[$0 - 1],
                    $$[$0 - 4],
                    yy.stripFlags($$[$0 - 4], $$[$0]),
                    this._$
                  );
                  break;
                case 24:
                  this.$ = {
                    type: "PartialStatement",
                    name: $$[$0 - 3],
                    params: $$[$0 - 2],
                    hash: $$[$0 - 1],
                    indent: "",
                    strip: yy.stripFlags($$[$0 - 4], $$[$0]),
                    loc: yy.locInfo(this._$),
                  };

                  break;
                case 25:
                  this.$ = yy.preparePartialBlock(
                    $$[$0 - 2],
                    $$[$0 - 1],
                    $$[$0],
                    this._$
                  );
                  break;
                case 26:
                  this.$ = {
                    path: $$[$0 - 3],
                    params: $$[$0 - 2],
                    hash: $$[$0 - 1],
                    strip: yy.stripFlags($$[$0 - 4], $$[$0]),
                  };
                  break;
                case 27:
                  this.$ = $$[$0];
                  break;
                case 28:
                  this.$ = $$[$0];
                  break;
                case 29:
                  this.$ = {
                    type: "SubExpression",
                    path: $$[$0 - 3],
                    params: $$[$0 - 2],
                    hash: $$[$0 - 1],
                    loc: yy.locInfo(this._$),
                  };

                  break;
                case 30:
                  this.$ = {
                    type: "Hash",
                    pairs: $$[$0],
                    loc: yy.locInfo(this._$),
                  };
                  break;
                case 31:
                  this.$ = {
                    type: "HashPair",
                    key: yy.id($$[$0 - 2]),
                    value: $$[$0],
                    loc: yy.locInfo(this._$),
                  };
                  break;
                case 32:
                  this.$ = yy.id($$[$0 - 1]);
                  break;
                case 33:
                  this.$ = $$[$0];
                  break;
                case 34:
                  this.$ = $$[$0];
                  break;
                case 35:
                  this.$ = {
                    type: "StringLiteral",
                    value: $$[$0],
                    original: $$[$0],
                    loc: yy.locInfo(this._$),
                  };
                  break;
                case 36:
                  this.$ = {
                    type: "NumberLiteral",
                    value: Number($$[$0]),
                    original: Number($$[$0]),
                    loc: yy.locInfo(this._$),
                  };
                  break;
                case 37:
                  this.$ = {
                    type: "BooleanLiteral",
                    value: $$[$0] === "true",
                    original: $$[$0] === "true",
                    loc: yy.locInfo(this._$),
                  };
                  break;
                case 38:
                  this.$ = {
                    type: "UndefinedLiteral",
                    original: undefined,
                    value: undefined,
                    loc: yy.locInfo(this._$),
                  };
                  break;
                case 39:
                  this.$ = {
                    type: "NullLiteral",
                    original: null,
                    value: null,
                    loc: yy.locInfo(this._$),
                  };
                  break;
                case 40:
                  this.$ = $$[$0];
                  break;
                case 41:
                  this.$ = $$[$0];
                  break;
                case 42:
                  this.$ = yy.preparePath(true, $$[$0], this._$);
                  break;
                case 43:
                  this.$ = yy.preparePath(false, $$[$0], this._$);
                  break;
                case 44:
                  $$[$0 - 2].push({
                    part: yy.id($$[$0]),
                    original: $$[$0],
                    separator: $$[$0 - 1],
                  });
                  this.$ = $$[$0 - 2];
                  break;
                case 45:
                  this.$ = [{ part: yy.id($$[$0]), original: $$[$0] }];
                  break;
                case 46:
                  this.$ = [];
                  break;
                case 47:
                  $$[$0 - 1].push($$[$0]);
                  break;
                case 48:
                  this.$ = [$$[$0]];
                  break;
                case 49:
                  $$[$0 - 1].push($$[$0]);
                  break;
                case 50:
                  this.$ = [];
                  break;
                case 51:
                  $$[$0 - 1].push($$[$0]);
                  break;
                case 58:
                  this.$ = [];
                  break;
                case 59:
                  $$[$0 - 1].push($$[$0]);
                  break;
                case 64:
                  this.$ = [];
                  break;
                case 65:
                  $$[$0 - 1].push($$[$0]);
                  break;
                case 70:
                  this.$ = [];
                  break;
                case 71:
                  $$[$0 - 1].push($$[$0]);
                  break;
                case 78:
                  this.$ = [];
                  break;
                case 79:
                  $$[$0 - 1].push($$[$0]);
                  break;
                case 82:
                  this.$ = [];
                  break;
                case 83:
                  $$[$0 - 1].push($$[$0]);
                  break;
                case 86:
                  this.$ = [];
                  break;
                case 87:
                  $$[$0 - 1].push($$[$0]);
                  break;
                case 90:
                  this.$ = [];
                  break;
                case 91:
                  $$[$0 - 1].push($$[$0]);
                  break;
                case 94:
                  this.$ = [];
                  break;
                case 95:
                  $$[$0 - 1].push($$[$0]);
                  break;
                case 98:
                  this.$ = [$$[$0]];
                  break;
                case 99:
                  $$[$0 - 1].push($$[$0]);
                  break;
                case 100:
                  this.$ = [$$[$0]];
                  break;
                case 101:
                  $$[$0 - 1].push($$[$0]);
                  break;
              }
            },
            table: [
              {
                3: 1,
                4: 2,
                5: [2, 46],
                6: 3,
                14: [2, 46],
                15: [2, 46],
                19: [2, 46],
                29: [2, 46],
                34: [2, 46],
                48: [2, 46],
                51: [2, 46],
                55: [2, 46],
                60: [2, 46],
              },
              { 1: [3] },
              { 5: [1, 4] },
              {
                5: [2, 2],
                7: 5,
                8: 6,
                9: 7,
                10: 8,
                11: 9,
                12: 10,
                13: 11,
                14: [1, 12],
                15: [1, 20],
                16: 17,
                19: [1, 23],
                24: 15,
                27: 16,
                29: [1, 21],
                34: [1, 22],
                39: [2, 2],
                44: [2, 2],
                47: [2, 2],
                48: [1, 13],
                51: [1, 14],
                55: [1, 18],
                59: 19,
                60: [1, 24],
              },
              { 1: [2, 1] },
              {
                5: [2, 47],
                14: [2, 47],
                15: [2, 47],
                19: [2, 47],
                29: [2, 47],
                34: [2, 47],
                39: [2, 47],
                44: [2, 47],
                47: [2, 47],
                48: [2, 47],
                51: [2, 47],
                55: [2, 47],
                60: [2, 47],
              },
              {
                5: [2, 3],
                14: [2, 3],
                15: [2, 3],
                19: [2, 3],
                29: [2, 3],
                34: [2, 3],
                39: [2, 3],
                44: [2, 3],
                47: [2, 3],
                48: [2, 3],
                51: [2, 3],
                55: [2, 3],
                60: [2, 3],
              },
              {
                5: [2, 4],
                14: [2, 4],
                15: [2, 4],
                19: [2, 4],
                29: [2, 4],
                34: [2, 4],
                39: [2, 4],
                44: [2, 4],
                47: [2, 4],
                48: [2, 4],
                51: [2, 4],
                55: [2, 4],
                60: [2, 4],
              },
              {
                5: [2, 5],
                14: [2, 5],
                15: [2, 5],
                19: [2, 5],
                29: [2, 5],
                34: [2, 5],
                39: [2, 5],
                44: [2, 5],
                47: [2, 5],
                48: [2, 5],
                51: [2, 5],
                55: [2, 5],
                60: [2, 5],
              },
              {
                5: [2, 6],
                14: [2, 6],
                15: [2, 6],
                19: [2, 6],
                29: [2, 6],
                34: [2, 6],
                39: [2, 6],
                44: [2, 6],
                47: [2, 6],
                48: [2, 6],
                51: [2, 6],
                55: [2, 6],
                60: [2, 6],
              },
              {
                5: [2, 7],
                14: [2, 7],
                15: [2, 7],
                19: [2, 7],
                29: [2, 7],
                34: [2, 7],
                39: [2, 7],
                44: [2, 7],
                47: [2, 7],
                48: [2, 7],
                51: [2, 7],
                55: [2, 7],
                60: [2, 7],
              },
              {
                5: [2, 8],
                14: [2, 8],
                15: [2, 8],
                19: [2, 8],
                29: [2, 8],
                34: [2, 8],
                39: [2, 8],
                44: [2, 8],
                47: [2, 8],
                48: [2, 8],
                51: [2, 8],
                55: [2, 8],
                60: [2, 8],
              },
              {
                5: [2, 9],
                14: [2, 9],
                15: [2, 9],
                19: [2, 9],
                29: [2, 9],
                34: [2, 9],
                39: [2, 9],
                44: [2, 9],
                47: [2, 9],
                48: [2, 9],
                51: [2, 9],
                55: [2, 9],
                60: [2, 9],
              },
              {
                20: 25,
                72: [1, 35],
                78: 26,
                79: 27,
                80: [1, 28],
                81: [1, 29],
                82: [1, 30],
                83: [1, 31],
                84: [1, 32],
                85: [1, 34],
                86: 33,
              },
              {
                20: 36,
                72: [1, 35],
                78: 26,
                79: 27,
                80: [1, 28],
                81: [1, 29],
                82: [1, 30],
                83: [1, 31],
                84: [1, 32],
                85: [1, 34],
                86: 33,
              },
              {
                4: 37,
                6: 3,
                14: [2, 46],
                15: [2, 46],
                19: [2, 46],
                29: [2, 46],
                34: [2, 46],
                39: [2, 46],
                44: [2, 46],
                47: [2, 46],
                48: [2, 46],
                51: [2, 46],
                55: [2, 46],
                60: [2, 46],
              },
              {
                4: 38,
                6: 3,
                14: [2, 46],
                15: [2, 46],
                19: [2, 46],
                29: [2, 46],
                34: [2, 46],
                44: [2, 46],
                47: [2, 46],
                48: [2, 46],
                51: [2, 46],
                55: [2, 46],
                60: [2, 46],
              },
              { 13: 40, 15: [1, 20], 17: 39 },
              {
                20: 42,
                56: 41,
                64: 43,
                65: [1, 44],
                72: [1, 35],
                78: 26,
                79: 27,
                80: [1, 28],
                81: [1, 29],
                82: [1, 30],
                83: [1, 31],
                84: [1, 32],
                85: [1, 34],
                86: 33,
              },
              {
                4: 45,
                6: 3,
                14: [2, 46],
                15: [2, 46],
                19: [2, 46],
                29: [2, 46],
                34: [2, 46],
                47: [2, 46],
                48: [2, 46],
                51: [2, 46],
                55: [2, 46],
                60: [2, 46],
              },
              {
                5: [2, 10],
                14: [2, 10],
                15: [2, 10],
                18: [2, 10],
                19: [2, 10],
                29: [2, 10],
                34: [2, 10],
                39: [2, 10],
                44: [2, 10],
                47: [2, 10],
                48: [2, 10],
                51: [2, 10],
                55: [2, 10],
                60: [2, 10],
              },
              {
                20: 46,
                72: [1, 35],
                78: 26,
                79: 27,
                80: [1, 28],
                81: [1, 29],
                82: [1, 30],
                83: [1, 31],
                84: [1, 32],
                85: [1, 34],
                86: 33,
              },
              {
                20: 47,
                72: [1, 35],
                78: 26,
                79: 27,
                80: [1, 28],
                81: [1, 29],
                82: [1, 30],
                83: [1, 31],
                84: [1, 32],
                85: [1, 34],
                86: 33,
              },
              {
                20: 48,
                72: [1, 35],
                78: 26,
                79: 27,
                80: [1, 28],
                81: [1, 29],
                82: [1, 30],
                83: [1, 31],
                84: [1, 32],
                85: [1, 34],
                86: 33,
              },
              {
                20: 42,
                56: 49,
                64: 43,
                65: [1, 44],
                72: [1, 35],
                78: 26,
                79: 27,
                80: [1, 28],
                81: [1, 29],
                82: [1, 30],
                83: [1, 31],
                84: [1, 32],
                85: [1, 34],
                86: 33,
              },
              {
                33: [2, 78],
                49: 50,
                65: [2, 78],
                72: [2, 78],
                80: [2, 78],
                81: [2, 78],
                82: [2, 78],
                83: [2, 78],
                84: [2, 78],
                85: [2, 78],
              },
              {
                23: [2, 33],
                33: [2, 33],
                54: [2, 33],
                65: [2, 33],
                68: [2, 33],
                72: [2, 33],
                75: [2, 33],
                80: [2, 33],
                81: [2, 33],
                82: [2, 33],
                83: [2, 33],
                84: [2, 33],
                85: [2, 33],
              },
              {
                23: [2, 34],
                33: [2, 34],
                54: [2, 34],
                65: [2, 34],
                68: [2, 34],
                72: [2, 34],
                75: [2, 34],
                80: [2, 34],
                81: [2, 34],
                82: [2, 34],
                83: [2, 34],
                84: [2, 34],
                85: [2, 34],
              },
              {
                23: [2, 35],
                33: [2, 35],
                54: [2, 35],
                65: [2, 35],
                68: [2, 35],
                72: [2, 35],
                75: [2, 35],
                80: [2, 35],
                81: [2, 35],
                82: [2, 35],
                83: [2, 35],
                84: [2, 35],
                85: [2, 35],
              },
              {
                23: [2, 36],
                33: [2, 36],
                54: [2, 36],
                65: [2, 36],
                68: [2, 36],
                72: [2, 36],
                75: [2, 36],
                80: [2, 36],
                81: [2, 36],
                82: [2, 36],
                83: [2, 36],
                84: [2, 36],
                85: [2, 36],
              },
              {
                23: [2, 37],
                33: [2, 37],
                54: [2, 37],
                65: [2, 37],
                68: [2, 37],
                72: [2, 37],
                75: [2, 37],
                80: [2, 37],
                81: [2, 37],
                82: [2, 37],
                83: [2, 37],
                84: [2, 37],
                85: [2, 37],
              },
              {
                23: [2, 38],
                33: [2, 38],
                54: [2, 38],
                65: [2, 38],
                68: [2, 38],
                72: [2, 38],
                75: [2, 38],
                80: [2, 38],
                81: [2, 38],
                82: [2, 38],
                83: [2, 38],
                84: [2, 38],
                85: [2, 38],
              },
              {
                23: [2, 39],
                33: [2, 39],
                54: [2, 39],
                65: [2, 39],
                68: [2, 39],
                72: [2, 39],
                75: [2, 39],
                80: [2, 39],
                81: [2, 39],
                82: [2, 39],
                83: [2, 39],
                84: [2, 39],
                85: [2, 39],
              },
              {
                23: [2, 43],
                33: [2, 43],
                54: [2, 43],
                65: [2, 43],
                68: [2, 43],
                72: [2, 43],
                75: [2, 43],
                80: [2, 43],
                81: [2, 43],
                82: [2, 43],
                83: [2, 43],
                84: [2, 43],
                85: [2, 43],
                87: [1, 51],
              },
              { 72: [1, 35], 86: 52 },
              {
                23: [2, 45],
                33: [2, 45],
                54: [2, 45],
                65: [2, 45],
                68: [2, 45],
                72: [2, 45],
                75: [2, 45],
                80: [2, 45],
                81: [2, 45],
                82: [2, 45],
                83: [2, 45],
                84: [2, 45],
                85: [2, 45],
                87: [2, 45],
              },
              {
                52: 53,
                54: [2, 82],
                65: [2, 82],
                72: [2, 82],
                80: [2, 82],
                81: [2, 82],
                82: [2, 82],
                83: [2, 82],
                84: [2, 82],
                85: [2, 82],
              },
              {
                25: 54,
                38: 56,
                39: [1, 58],
                43: 57,
                44: [1, 59],
                45: 55,
                47: [2, 54],
              },
              { 28: 60, 43: 61, 44: [1, 59], 47: [2, 56] },
              { 13: 63, 15: [1, 20], 18: [1, 62] },
              { 15: [2, 48], 18: [2, 48] },
              {
                33: [2, 86],
                57: 64,
                65: [2, 86],
                72: [2, 86],
                80: [2, 86],
                81: [2, 86],
                82: [2, 86],
                83: [2, 86],
                84: [2, 86],
                85: [2, 86],
              },
              {
                33: [2, 40],
                65: [2, 40],
                72: [2, 40],
                80: [2, 40],
                81: [2, 40],
                82: [2, 40],
                83: [2, 40],
                84: [2, 40],
                85: [2, 40],
              },
              {
                33: [2, 41],
                65: [2, 41],
                72: [2, 41],
                80: [2, 41],
                81: [2, 41],
                82: [2, 41],
                83: [2, 41],
                84: [2, 41],
                85: [2, 41],
              },
              {
                20: 65,
                72: [1, 35],
                78: 26,
                79: 27,
                80: [1, 28],
                81: [1, 29],
                82: [1, 30],
                83: [1, 31],
                84: [1, 32],
                85: [1, 34],
                86: 33,
              },
              { 26: 66, 47: [1, 67] },
              {
                30: 68,
                33: [2, 58],
                65: [2, 58],
                72: [2, 58],
                75: [2, 58],
                80: [2, 58],
                81: [2, 58],
                82: [2, 58],
                83: [2, 58],
                84: [2, 58],
                85: [2, 58],
              },
              {
                33: [2, 64],
                35: 69,
                65: [2, 64],
                72: [2, 64],
                75: [2, 64],
                80: [2, 64],
                81: [2, 64],
                82: [2, 64],
                83: [2, 64],
                84: [2, 64],
                85: [2, 64],
              },
              {
                21: 70,
                23: [2, 50],
                65: [2, 50],
                72: [2, 50],
                80: [2, 50],
                81: [2, 50],
                82: [2, 50],
                83: [2, 50],
                84: [2, 50],
                85: [2, 50],
              },
              {
                33: [2, 90],
                61: 71,
                65: [2, 90],
                72: [2, 90],
                80: [2, 90],
                81: [2, 90],
                82: [2, 90],
                83: [2, 90],
                84: [2, 90],
                85: [2, 90],
              },
              {
                20: 75,
                33: [2, 80],
                50: 72,
                63: 73,
                64: 76,
                65: [1, 44],
                69: 74,
                70: 77,
                71: 78,
                72: [1, 79],
                78: 26,
                79: 27,
                80: [1, 28],
                81: [1, 29],
                82: [1, 30],
                83: [1, 31],
                84: [1, 32],
                85: [1, 34],
                86: 33,
              },
              { 72: [1, 80] },
              {
                23: [2, 42],
                33: [2, 42],
                54: [2, 42],
                65: [2, 42],
                68: [2, 42],
                72: [2, 42],
                75: [2, 42],
                80: [2, 42],
                81: [2, 42],
                82: [2, 42],
                83: [2, 42],
                84: [2, 42],
                85: [2, 42],
                87: [1, 51],
              },
              {
                20: 75,
                53: 81,
                54: [2, 84],
                63: 82,
                64: 76,
                65: [1, 44],
                69: 83,
                70: 77,
                71: 78,
                72: [1, 79],
                78: 26,
                79: 27,
                80: [1, 28],
                81: [1, 29],
                82: [1, 30],
                83: [1, 31],
                84: [1, 32],
                85: [1, 34],
                86: 33,
              },
              { 26: 84, 47: [1, 67] },
              { 47: [2, 55] },
              {
                4: 85,
                6: 3,
                14: [2, 46],
                15: [2, 46],
                19: [2, 46],
                29: [2, 46],
                34: [2, 46],
                39: [2, 46],
                44: [2, 46],
                47: [2, 46],
                48: [2, 46],
                51: [2, 46],
                55: [2, 46],
                60: [2, 46],
              },
              { 47: [2, 20] },
              {
                20: 86,
                72: [1, 35],
                78: 26,
                79: 27,
                80: [1, 28],
                81: [1, 29],
                82: [1, 30],
                83: [1, 31],
                84: [1, 32],
                85: [1, 34],
                86: 33,
              },
              {
                4: 87,
                6: 3,
                14: [2, 46],
                15: [2, 46],
                19: [2, 46],
                29: [2, 46],
                34: [2, 46],
                47: [2, 46],
                48: [2, 46],
                51: [2, 46],
                55: [2, 46],
                60: [2, 46],
              },
              { 26: 88, 47: [1, 67] },
              { 47: [2, 57] },
              {
                5: [2, 11],
                14: [2, 11],
                15: [2, 11],
                19: [2, 11],
                29: [2, 11],
                34: [2, 11],
                39: [2, 11],
                44: [2, 11],
                47: [2, 11],
                48: [2, 11],
                51: [2, 11],
                55: [2, 11],
                60: [2, 11],
              },
              { 15: [2, 49], 18: [2, 49] },
              {
                20: 75,
                33: [2, 88],
                58: 89,
                63: 90,
                64: 76,
                65: [1, 44],
                69: 91,
                70: 77,
                71: 78,
                72: [1, 79],
                78: 26,
                79: 27,
                80: [1, 28],
                81: [1, 29],
                82: [1, 30],
                83: [1, 31],
                84: [1, 32],
                85: [1, 34],
                86: 33,
              },
              {
                65: [2, 94],
                66: 92,
                68: [2, 94],
                72: [2, 94],
                80: [2, 94],
                81: [2, 94],
                82: [2, 94],
                83: [2, 94],
                84: [2, 94],
                85: [2, 94],
              },
              {
                5: [2, 25],
                14: [2, 25],
                15: [2, 25],
                19: [2, 25],
                29: [2, 25],
                34: [2, 25],
                39: [2, 25],
                44: [2, 25],
                47: [2, 25],
                48: [2, 25],
                51: [2, 25],
                55: [2, 25],
                60: [2, 25],
              },
              {
                20: 93,
                72: [1, 35],
                78: 26,
                79: 27,
                80: [1, 28],
                81: [1, 29],
                82: [1, 30],
                83: [1, 31],
                84: [1, 32],
                85: [1, 34],
                86: 33,
              },
              {
                20: 75,
                31: 94,
                33: [2, 60],
                63: 95,
                64: 76,
                65: [1, 44],
                69: 96,
                70: 77,
                71: 78,
                72: [1, 79],
                75: [2, 60],
                78: 26,
                79: 27,
                80: [1, 28],
                81: [1, 29],
                82: [1, 30],
                83: [1, 31],
                84: [1, 32],
                85: [1, 34],
                86: 33,
              },
              {
                20: 75,
                33: [2, 66],
                36: 97,
                63: 98,
                64: 76,
                65: [1, 44],
                69: 99,
                70: 77,
                71: 78,
                72: [1, 79],
                75: [2, 66],
                78: 26,
                79: 27,
                80: [1, 28],
                81: [1, 29],
                82: [1, 30],
                83: [1, 31],
                84: [1, 32],
                85: [1, 34],
                86: 33,
              },
              {
                20: 75,
                22: 100,
                23: [2, 52],
                63: 101,
                64: 76,
                65: [1, 44],
                69: 102,
                70: 77,
                71: 78,
                72: [1, 79],
                78: 26,
                79: 27,
                80: [1, 28],
                81: [1, 29],
                82: [1, 30],
                83: [1, 31],
                84: [1, 32],
                85: [1, 34],
                86: 33,
              },
              {
                20: 75,
                33: [2, 92],
                62: 103,
                63: 104,
                64: 76,
                65: [1, 44],
                69: 105,
                70: 77,
                71: 78,
                72: [1, 79],
                78: 26,
                79: 27,
                80: [1, 28],
                81: [1, 29],
                82: [1, 30],
                83: [1, 31],
                84: [1, 32],
                85: [1, 34],
                86: 33,
              },
              { 33: [1, 106] },
              {
                33: [2, 79],
                65: [2, 79],
                72: [2, 79],
                80: [2, 79],
                81: [2, 79],
                82: [2, 79],
                83: [2, 79],
                84: [2, 79],
                85: [2, 79],
              },
              { 33: [2, 81] },
              {
                23: [2, 27],
                33: [2, 27],
                54: [2, 27],
                65: [2, 27],
                68: [2, 27],
                72: [2, 27],
                75: [2, 27],
                80: [2, 27],
                81: [2, 27],
                82: [2, 27],
                83: [2, 27],
                84: [2, 27],
                85: [2, 27],
              },
              {
                23: [2, 28],
                33: [2, 28],
                54: [2, 28],
                65: [2, 28],
                68: [2, 28],
                72: [2, 28],
                75: [2, 28],
                80: [2, 28],
                81: [2, 28],
                82: [2, 28],
                83: [2, 28],
                84: [2, 28],
                85: [2, 28],
              },
              {
                23: [2, 30],
                33: [2, 30],
                54: [2, 30],
                68: [2, 30],
                71: 107,
                72: [1, 108],
                75: [2, 30],
              },
              {
                23: [2, 98],
                33: [2, 98],
                54: [2, 98],
                68: [2, 98],
                72: [2, 98],
                75: [2, 98],
              },
              {
                23: [2, 45],
                33: [2, 45],
                54: [2, 45],
                65: [2, 45],
                68: [2, 45],
                72: [2, 45],
                73: [1, 109],
                75: [2, 45],
                80: [2, 45],
                81: [2, 45],
                82: [2, 45],
                83: [2, 45],
                84: [2, 45],
                85: [2, 45],
                87: [2, 45],
              },
              {
                23: [2, 44],
                33: [2, 44],
                54: [2, 44],
                65: [2, 44],
                68: [2, 44],
                72: [2, 44],
                75: [2, 44],
                80: [2, 44],
                81: [2, 44],
                82: [2, 44],
                83: [2, 44],
                84: [2, 44],
                85: [2, 44],
                87: [2, 44],
              },
              { 54: [1, 110] },
              {
                54: [2, 83],
                65: [2, 83],
                72: [2, 83],
                80: [2, 83],
                81: [2, 83],
                82: [2, 83],
                83: [2, 83],
                84: [2, 83],
                85: [2, 83],
              },
              { 54: [2, 85] },
              {
                5: [2, 13],
                14: [2, 13],
                15: [2, 13],
                19: [2, 13],
                29: [2, 13],
                34: [2, 13],
                39: [2, 13],
                44: [2, 13],
                47: [2, 13],
                48: [2, 13],
                51: [2, 13],
                55: [2, 13],
                60: [2, 13],
              },
              {
                38: 56,
                39: [1, 58],
                43: 57,
                44: [1, 59],
                45: 112,
                46: 111,
                47: [2, 76],
              },
              {
                33: [2, 70],
                40: 113,
                65: [2, 70],
                72: [2, 70],
                75: [2, 70],
                80: [2, 70],
                81: [2, 70],
                82: [2, 70],
                83: [2, 70],
                84: [2, 70],
                85: [2, 70],
              },
              { 47: [2, 18] },
              {
                5: [2, 14],
                14: [2, 14],
                15: [2, 14],
                19: [2, 14],
                29: [2, 14],
                34: [2, 14],
                39: [2, 14],
                44: [2, 14],
                47: [2, 14],
                48: [2, 14],
                51: [2, 14],
                55: [2, 14],
                60: [2, 14],
              },
              { 33: [1, 114] },
              {
                33: [2, 87],
                65: [2, 87],
                72: [2, 87],
                80: [2, 87],
                81: [2, 87],
                82: [2, 87],
                83: [2, 87],
                84: [2, 87],
                85: [2, 87],
              },
              { 33: [2, 89] },
              {
                20: 75,
                63: 116,
                64: 76,
                65: [1, 44],
                67: 115,
                68: [2, 96],
                69: 117,
                70: 77,
                71: 78,
                72: [1, 79],
                78: 26,
                79: 27,
                80: [1, 28],
                81: [1, 29],
                82: [1, 30],
                83: [1, 31],
                84: [1, 32],
                85: [1, 34],
                86: 33,
              },
              { 33: [1, 118] },
              { 32: 119, 33: [2, 62], 74: 120, 75: [1, 121] },
              {
                33: [2, 59],
                65: [2, 59],
                72: [2, 59],
                75: [2, 59],
                80: [2, 59],
                81: [2, 59],
                82: [2, 59],
                83: [2, 59],
                84: [2, 59],
                85: [2, 59],
              },
              { 33: [2, 61], 75: [2, 61] },
              { 33: [2, 68], 37: 122, 74: 123, 75: [1, 121] },
              {
                33: [2, 65],
                65: [2, 65],
                72: [2, 65],
                75: [2, 65],
                80: [2, 65],
                81: [2, 65],
                82: [2, 65],
                83: [2, 65],
                84: [2, 65],
                85: [2, 65],
              },
              { 33: [2, 67], 75: [2, 67] },
              { 23: [1, 124] },
              {
                23: [2, 51],
                65: [2, 51],
                72: [2, 51],
                80: [2, 51],
                81: [2, 51],
                82: [2, 51],
                83: [2, 51],
                84: [2, 51],
                85: [2, 51],
              },
              { 23: [2, 53] },
              { 33: [1, 125] },
              {
                33: [2, 91],
                65: [2, 91],
                72: [2, 91],
                80: [2, 91],
                81: [2, 91],
                82: [2, 91],
                83: [2, 91],
                84: [2, 91],
                85: [2, 91],
              },
              { 33: [2, 93] },
              {
                5: [2, 22],
                14: [2, 22],
                15: [2, 22],
                19: [2, 22],
                29: [2, 22],
                34: [2, 22],
                39: [2, 22],
                44: [2, 22],
                47: [2, 22],
                48: [2, 22],
                51: [2, 22],
                55: [2, 22],
                60: [2, 22],
              },
              {
                23: [2, 99],
                33: [2, 99],
                54: [2, 99],
                68: [2, 99],
                72: [2, 99],
                75: [2, 99],
              },
              { 73: [1, 109] },
              {
                20: 75,
                63: 126,
                64: 76,
                65: [1, 44],
                72: [1, 35],
                78: 26,
                79: 27,
                80: [1, 28],
                81: [1, 29],
                82: [1, 30],
                83: [1, 31],
                84: [1, 32],
                85: [1, 34],
                86: 33,
              },
              {
                5: [2, 23],
                14: [2, 23],
                15: [2, 23],
                19: [2, 23],
                29: [2, 23],
                34: [2, 23],
                39: [2, 23],
                44: [2, 23],
                47: [2, 23],
                48: [2, 23],
                51: [2, 23],
                55: [2, 23],
                60: [2, 23],
              },
              { 47: [2, 19] },
              { 47: [2, 77] },
              {
                20: 75,
                33: [2, 72],
                41: 127,
                63: 128,
                64: 76,
                65: [1, 44],
                69: 129,
                70: 77,
                71: 78,
                72: [1, 79],
                75: [2, 72],
                78: 26,
                79: 27,
                80: [1, 28],
                81: [1, 29],
                82: [1, 30],
                83: [1, 31],
                84: [1, 32],
                85: [1, 34],
                86: 33,
              },
              {
                5: [2, 24],
                14: [2, 24],
                15: [2, 24],
                19: [2, 24],
                29: [2, 24],
                34: [2, 24],
                39: [2, 24],
                44: [2, 24],
                47: [2, 24],
                48: [2, 24],
                51: [2, 24],
                55: [2, 24],
                60: [2, 24],
              },
              { 68: [1, 130] },
              {
                65: [2, 95],
                68: [2, 95],
                72: [2, 95],
                80: [2, 95],
                81: [2, 95],
                82: [2, 95],
                83: [2, 95],
                84: [2, 95],
                85: [2, 95],
              },
              { 68: [2, 97] },
              {
                5: [2, 21],
                14: [2, 21],
                15: [2, 21],
                19: [2, 21],
                29: [2, 21],
                34: [2, 21],
                39: [2, 21],
                44: [2, 21],
                47: [2, 21],
                48: [2, 21],
                51: [2, 21],
                55: [2, 21],
                60: [2, 21],
              },
              { 33: [1, 131] },
              { 33: [2, 63] },
              { 72: [1, 133], 76: 132 },
              { 33: [1, 134] },
              { 33: [2, 69] },
              { 15: [2, 12] },
              {
                14: [2, 26],
                15: [2, 26],
                19: [2, 26],
                29: [2, 26],
                34: [2, 26],
                47: [2, 26],
                48: [2, 26],
                51: [2, 26],
                55: [2, 26],
                60: [2, 26],
              },
              {
                23: [2, 31],
                33: [2, 31],
                54: [2, 31],
                68: [2, 31],
                72: [2, 31],
                75: [2, 31],
              },
              { 33: [2, 74], 42: 135, 74: 136, 75: [1, 121] },
              {
                33: [2, 71],
                65: [2, 71],
                72: [2, 71],
                75: [2, 71],
                80: [2, 71],
                81: [2, 71],
                82: [2, 71],
                83: [2, 71],
                84: [2, 71],
                85: [2, 71],
              },
              { 33: [2, 73], 75: [2, 73] },
              {
                23: [2, 29],
                33: [2, 29],
                54: [2, 29],
                65: [2, 29],
                68: [2, 29],
                72: [2, 29],
                75: [2, 29],
                80: [2, 29],
                81: [2, 29],
                82: [2, 29],
                83: [2, 29],
                84: [2, 29],
                85: [2, 29],
              },
              {
                14: [2, 15],
                15: [2, 15],
                19: [2, 15],
                29: [2, 15],
                34: [2, 15],
                39: [2, 15],
                44: [2, 15],
                47: [2, 15],
                48: [2, 15],
                51: [2, 15],
                55: [2, 15],
                60: [2, 15],
              },
              { 72: [1, 138], 77: [1, 137] },
              { 72: [2, 100], 77: [2, 100] },
              {
                14: [2, 16],
                15: [2, 16],
                19: [2, 16],
                29: [2, 16],
                34: [2, 16],
                44: [2, 16],
                47: [2, 16],
                48: [2, 16],
                51: [2, 16],
                55: [2, 16],
                60: [2, 16],
              },
              { 33: [1, 139] },
              { 33: [2, 75] },
              { 33: [2, 32] },
              { 72: [2, 101], 77: [2, 101] },
              {
                14: [2, 17],
                15: [2, 17],
                19: [2, 17],
                29: [2, 17],
                34: [2, 17],
                39: [2, 17],
                44: [2, 17],
                47: [2, 17],
                48: [2, 17],
                51: [2, 17],
                55: [2, 17],
                60: [2, 17],
              },
            ],
            defaultActions: {
              4: [2, 1],
              55: [2, 55],
              57: [2, 20],
              61: [2, 57],
              74: [2, 81],
              83: [2, 85],
              87: [2, 18],
              91: [2, 89],
              102: [2, 53],
              105: [2, 93],
              111: [2, 19],
              112: [2, 77],
              117: [2, 97],
              120: [2, 63],
              123: [2, 69],
              124: [2, 12],
              136: [2, 75],
              137: [2, 32],
            },
            parseError: function parseError(str, hash) {
              throw new Error(str);
            },
            parse: function parse(input) {
              var self = this,
                stack = [0],
                vstack = [null],
                lstack = [],
                table = this.table,
                yytext = "",
                yylineno = 0,
                yyleng = 0,
                recovering = 0,
                TERROR = 2,
                EOF = 1;
              this.lexer.setInput(input);
              this.lexer.yy = this.yy;
              this.yy.lexer = this.lexer;
              this.yy.parser = this;
              if (typeof this.lexer.yylloc == "undefined")
                this.lexer.yylloc = {};
              var yyloc = this.lexer.yylloc;
              lstack.push(yyloc);
              var ranges = this.lexer.options && this.lexer.options.ranges;
              if (typeof this.yy.parseError === "function")
                this.parseError = this.yy.parseError;
              function popStack(n) {
                stack.length = stack.length - 2 * n;
                vstack.length = vstack.length - n;
                lstack.length = lstack.length - n;
              }
              function lex() {
                var token;
                token = self.lexer.lex() || 1;
                if (typeof token !== "number") {
                  token = self.symbols_[token] || token;
                }
                return token;
              }
              var symbol,
                preErrorSymbol,
                state,
                action,
                a,
                r,
                yyval = {},
                p,
                len,
                newState,
                expected;
              while (true) {
                state = stack[stack.length - 1];
                if (this.defaultActions[state]) {
                  action = this.defaultActions[state];
                } else {
                  if (symbol === null || typeof symbol == "undefined") {
                    symbol = lex();
                  }
                  action = table[state] && table[state][symbol];
                }
                if (
                  typeof action === "undefined" ||
                  !action.length ||
                  !action[0]
                ) {
                  var errStr = "";
                  if (!recovering) {
                    expected = [];
                    for (p in table[state])
                      if (this.terminals_[p] && p > 2) {
                        expected.push("'" + this.terminals_[p] + "'");
                      }
                    if (this.lexer.showPosition) {
                      errStr =
                        "Parse error on line " +
                        (yylineno + 1) +
                        ":\n" +
                        this.lexer.showPosition() +
                        "\nExpecting " +
                        expected.join(", ") +
                        ", got '" +
                        (this.terminals_[symbol] || symbol) +
                        "'";
                    } else {
                      errStr =
                        "Parse error on line " +
                        (yylineno + 1) +
                        ": Unexpected " +
                        (symbol == 1
                          ? "end of input"
                          : "'" + (this.terminals_[symbol] || symbol) + "'");
                    }
                    this.parseError(errStr, {
                      text: this.lexer.match,
                      token: this.terminals_[symbol] || symbol,
                      line: this.lexer.yylineno,
                      loc: yyloc,
                      expected: expected,
                    });
                  }
                }
                if (action[0] instanceof Array && action.length > 1) {
                  throw new Error(
                    "Parse Error: multiple actions possible at state: " +
                      state +
                      ", token: " +
                      symbol
                  );
                }
                switch (action[0]) {
                  case 1:
                    stack.push(symbol);
                    vstack.push(this.lexer.yytext);
                    lstack.push(this.lexer.yylloc);
                    stack.push(action[1]);
                    symbol = null;
                    if (!preErrorSymbol) {
                      yyleng = this.lexer.yyleng;
                      yytext = this.lexer.yytext;
                      yylineno = this.lexer.yylineno;
                      yyloc = this.lexer.yylloc;
                      if (recovering > 0) recovering--;
                    } else {
                      symbol = preErrorSymbol;
                      preErrorSymbol = null;
                    }
                    break;
                  case 2:
                    len = this.productions_[action[1]][1];
                    yyval.$ = vstack[vstack.length - len];
                    yyval._$ = {
                      first_line: lstack[lstack.length - (len || 1)].first_line,
                      last_line: lstack[lstack.length - 1].last_line,
                      first_column:
                        lstack[lstack.length - (len || 1)].first_column,
                      last_column: lstack[lstack.length - 1].last_column,
                    };
                    if (ranges) {
                      yyval._$.range = [
                        lstack[lstack.length - (len || 1)].range[0],
                        lstack[lstack.length - 1].range[1],
                      ];
                    }
                    r = this.performAction.call(
                      yyval,
                      yytext,
                      yyleng,
                      yylineno,
                      this.yy,
                      action[1],
                      vstack,
                      lstack
                    );
                    if (typeof r !== "undefined") {
                      return r;
                    }
                    if (len) {
                      stack = stack.slice(0, -1 * len * 2);
                      vstack = vstack.slice(0, -1 * len);
                      lstack = lstack.slice(0, -1 * len);
                    }
                    stack.push(this.productions_[action[1]][0]);
                    vstack.push(yyval.$);
                    lstack.push(yyval._$);
                    newState =
                      table[stack[stack.length - 2]][stack[stack.length - 1]];
                    stack.push(newState);
                    break;
                  case 3:
                    return true;
                }
              }
              return true;
            },
          };
          /* Jison generated lexer */
          var lexer = (function () {
            var lexer = {
              EOF: 1,
              parseError: function parseError(str, hash) {
                if (this.yy.parser) {
                  this.yy.parser.parseError(str, hash);
                } else {
                  throw new Error(str);
                }
              },
              setInput: function setInput(input) {
                this._input = input;
                this._more = this._less = this.done = false;
                this.yylineno = this.yyleng = 0;
                this.yytext = this.matched = this.match = "";
                this.conditionStack = ["INITIAL"];
                this.yylloc = {
                  first_line: 1,
                  first_column: 0,
                  last_line: 1,
                  last_column: 0,
                };
                if (this.options.ranges) this.yylloc.range = [0, 0];
                this.offset = 0;
                return this;
              },
              input: function input() {
                var ch = this._input[0];
                this.yytext += ch;
                this.yyleng++;
                this.offset++;
                this.match += ch;
                this.matched += ch;
                var lines = ch.match(/(?:\r\n?|\n).*/g);
                if (lines) {
                  this.yylineno++;
                  this.yylloc.last_line++;
                } else {
                  this.yylloc.last_column++;
                }
                if (this.options.ranges) this.yylloc.range[1]++;

                this._input = this._input.slice(1);
                return ch;
              },
              unput: function unput(ch) {
                var len = ch.length;
                var lines = ch.split(/(?:\r\n?|\n)/g);

                this._input = ch + this._input;
                this.yytext = this.yytext.substr(
                  0,
                  this.yytext.length - len - 1
                );
                //this.yyleng -= len;
                this.offset -= len;
                var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                this.match = this.match.substr(0, this.match.length - 1);
                this.matched = this.matched.substr(0, this.matched.length - 1);

                if (lines.length - 1) this.yylineno -= lines.length - 1;
                var r = this.yylloc.range;

                this.yylloc = {
                  first_line: this.yylloc.first_line,
                  last_line: this.yylineno + 1,
                  first_column: this.yylloc.first_column,
                  last_column: lines
                    ? (lines.length === oldLines.length
                        ? this.yylloc.first_column
                        : 0) +
                      oldLines[oldLines.length - lines.length].length -
                      lines[0].length
                    : this.yylloc.first_column - len,
                };

                if (this.options.ranges) {
                  this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                }
                return this;
              },
              more: function more() {
                this._more = true;
                return this;
              },
              less: function less(n) {
                this.unput(this.match.slice(n));
              },
              pastInput: function pastInput() {
                var past = this.matched.substr(
                  0,
                  this.matched.length - this.match.length
                );
                return (
                  (past.length > 20 ? "..." : "") +
                  past.substr(-20).replace(/\n/g, "")
                );
              },
              upcomingInput: function upcomingInput() {
                var next = this.match;
                if (next.length < 20) {
                  next += this._input.substr(0, 20 - next.length);
                }
                return (
                  next.substr(0, 20) + (next.length > 20 ? "..." : "")
                ).replace(/\n/g, "");
              },
              showPosition: function showPosition() {
                var pre = this.pastInput();
                var c = new Array(pre.length + 1).join("-");
                return pre + this.upcomingInput() + "\n" + c + "^";
              },
              next: function next() {
                if (this.done) {
                  return this.EOF;
                }
                if (!this._input) this.done = true;

                var token, match, tempMatch, index, col, lines;
                if (!this._more) {
                  this.yytext = "";
                  this.match = "";
                }
                var rules = this._currentRules();
                for (var i = 0; i < rules.length; i++) {
                  tempMatch = this._input.match(this.rules[rules[i]]);
                  if (
                    tempMatch &&
                    (!match || tempMatch[0].length > match[0].length)
                  ) {
                    match = tempMatch;
                    index = i;
                    if (!this.options.flex) break;
                  }
                }
                if (match) {
                  lines = match[0].match(/(?:\r\n?|\n).*/g);
                  if (lines) this.yylineno += lines.length;
                  this.yylloc = {
                    first_line: this.yylloc.last_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.last_column,
                    last_column: lines
                      ? lines[lines.length - 1].length -
                        lines[lines.length - 1].match(/\r?\n?/)[0].length
                      : this.yylloc.last_column + match[0].length,
                  };
                  this.yytext += match[0];
                  this.match += match[0];
                  this.matches = match;
                  this.yyleng = this.yytext.length;
                  if (this.options.ranges) {
                    this.yylloc.range = [
                      this.offset,
                      (this.offset += this.yyleng),
                    ];
                  }
                  this._more = false;
                  this._input = this._input.slice(match[0].length);
                  this.matched += match[0];
                  token = this.performAction.call(
                    this,
                    this.yy,
                    this,
                    rules[index],
                    this.conditionStack[this.conditionStack.length - 1]
                  );
                  if (this.done && this._input) this.done = false;
                  if (token) return token;
                  else return;
                }
                if (this._input === "") {
                  return this.EOF;
                } else {
                  return this.parseError(
                    "Lexical error on line " +
                      (this.yylineno + 1) +
                      ". Unrecognized text.\n" +
                      this.showPosition(),
                    { text: "", token: null, line: this.yylineno }
                  );
                }
              },
              lex: function lex() {
                var r = this.next();
                if (typeof r !== "undefined") {
                  return r;
                } else {
                  return this.lex();
                }
              },
              begin: function begin(condition) {
                this.conditionStack.push(condition);
              },
              popState: function popState() {
                return this.conditionStack.pop();
              },
              _currentRules: function _currentRules() {
                return this.conditions[
                  this.conditionStack[this.conditionStack.length - 1]
                ].rules;
              },
              topState: function topState() {
                return this.conditionStack[this.conditionStack.length - 2];
              },
              pushState: function begin(condition) {
                this.begin(condition);
              },
            };
            lexer.options = {};
            lexer.performAction = function anonymous(
              yy,
              yy_,
              $avoiding_name_collisions,
              YY_START
              /**/
            ) {
              function strip(start, end) {
                return (yy_.yytext = yy_.yytext.substr(
                  start,
                  yy_.yyleng - end
                ));
              }

              var YYSTATE = YY_START;
              switch ($avoiding_name_collisions) {
                case 0:
                  if (yy_.yytext.slice(-2) === "\\\\") {
                    strip(0, 1);
                    this.begin("mu");
                  } else if (yy_.yytext.slice(-1) === "\\") {
                    strip(0, 1);
                    this.begin("emu");
                  } else {
                    this.begin("mu");
                  }
                  if (yy_.yytext) return 15;

                  break;
                case 1:
                  return 15;
                  break;
                case 2:
                  this.popState();
                  return 15;

                  break;
                case 3:
                  this.begin("raw");
                  return 15;
                  break;
                case 4:
                  this.popState();
                  // Should be using `this.topState()` below, but it currently
                  // returns the second top instead of the first top. Opened an
                  // issue about it at https://github.com/zaach/jison/issues/291
                  if (
                    this.conditionStack[this.conditionStack.length - 1] ===
                    "raw"
                  ) {
                    return 15;
                  } else {
                    yy_.yytext = yy_.yytext.substr(5, yy_.yyleng - 9);
                    return "END_RAW_BLOCK";
                  }

                  break;
                case 5:
                  return 15;
                  break;
                case 6:
                  this.popState();
                  return 14;

                  break;
                case 7:
                  return 65;
                  break;
                case 8:
                  return 68;
                  break;
                case 9:
                  return 19;
                  break;
                case 10:
                  this.popState();
                  this.begin("raw");
                  return 23;

                  break;
                case 11:
                  return 55;
                  break;
                case 12:
                  return 60;
                  break;
                case 13:
                  return 29;
                  break;
                case 14:
                  return 47;
                  break;
                case 15:
                  this.popState();
                  return 44;
                  break;
                case 16:
                  this.popState();
                  return 44;
                  break;
                case 17:
                  return 34;
                  break;
                case 18:
                  return 39;
                  break;
                case 19:
                  return 51;
                  break;
                case 20:
                  return 48;
                  break;
                case 21:
                  this.unput(yy_.yytext);
                  this.popState();
                  this.begin("com");

                  break;
                case 22:
                  this.popState();
                  return 14;

                  break;
                case 23:
                  return 48;
                  break;
                case 24:
                  return 73;
                  break;
                case 25:
                  return 72;
                  break;
                case 26:
                  return 72;
                  break;
                case 27:
                  return 87;
                  break;
                case 28:
                  // ignore whitespace
                  break;
                case 29:
                  this.popState();
                  return 54;
                  break;
                case 30:
                  this.popState();
                  return 33;
                  break;
                case 31:
                  yy_.yytext = strip(1, 2).replace(/\\"/g, '"');
                  return 80;
                  break;
                case 32:
                  yy_.yytext = strip(1, 2).replace(/\\'/g, "'");
                  return 80;
                  break;
                case 33:
                  return 85;
                  break;
                case 34:
                  return 82;
                  break;
                case 35:
                  return 82;
                  break;
                case 36:
                  return 83;
                  break;
                case 37:
                  return 84;
                  break;
                case 38:
                  return 81;
                  break;
                case 39:
                  return 75;
                  break;
                case 40:
                  return 77;
                  break;
                case 41:
                  return 72;
                  break;
                case 42:
                  yy_.yytext = yy_.yytext.replace(/\\([\\\]])/g, "$1");
                  return 72;
                  break;
                case 43:
                  return "INVALID";
                  break;
                case 44:
                  return 5;
                  break;
              }
            };
            lexer.rules = [
              /^(?:[^\x00]*?(?=(\{\{)))/,
              /^(?:[^\x00]+)/,
              /^(?:[^\x00]{2,}?(?=(\{\{|\\\{\{|\\\\\{\{|$)))/,
              /^(?:\{\{\{\{(?=[^\/]))/,
              /^(?:\{\{\{\{\/[^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=[=}\s\/.])\}\}\}\})/,
              /^(?:[^\x00]*?(?=(\{\{\{\{)))/,
              /^(?:[\s\S]*?--(~)?\}\})/,
              /^(?:\()/,
              /^(?:\))/,
              /^(?:\{\{\{\{)/,
              /^(?:\}\}\}\})/,
              /^(?:\{\{(~)?>)/,
              /^(?:\{\{(~)?#>)/,
              /^(?:\{\{(~)?#\*?)/,
              /^(?:\{\{(~)?\/)/,
              /^(?:\{\{(~)?\^\s*(~)?\}\})/,
              /^(?:\{\{(~)?\s*else\s*(~)?\}\})/,
              /^(?:\{\{(~)?\^)/,
              /^(?:\{\{(~)?\s*else\b)/,
              /^(?:\{\{(~)?\{)/,
              /^(?:\{\{(~)?&)/,
              /^(?:\{\{(~)?!--)/,
              /^(?:\{\{(~)?![\s\S]*?\}\})/,
              /^(?:\{\{(~)?\*?)/,
              /^(?:=)/,
              /^(?:\.\.)/,
              /^(?:\.(?=([=~}\s\/.)|])))/,
              /^(?:[\/.])/,
              /^(?:\s+)/,
              /^(?:\}(~)?\}\})/,
              /^(?:(~)?\}\})/,
              /^(?:"(\\["]|[^"])*")/,
              /^(?:'(\\[']|[^'])*')/,
              /^(?:@)/,
              /^(?:true(?=([~}\s)])))/,
              /^(?:false(?=([~}\s)])))/,
              /^(?:undefined(?=([~}\s)])))/,
              /^(?:null(?=([~}\s)])))/,
              /^(?:-?[0-9]+(?:\.[0-9]+)?(?=([~}\s)])))/,
              /^(?:as\s+\|)/,
              /^(?:\|)/,
              /^(?:([^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=([=~}\s\/.)|]))))/,
              /^(?:\[(\\\]|[^\]])*\])/,
              /^(?:.)/,
              /^(?:$)/,
            ];
            lexer.conditions = {
              mu: {
                rules: [
                  7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
                  23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
                  38, 39, 40, 41, 42, 43, 44,
                ],
                inclusive: false,
              },
              emu: { rules: [2], inclusive: false },
              com: { rules: [6], inclusive: false },
              raw: { rules: [3, 4, 5], inclusive: false },
              INITIAL: { rules: [0, 1, 44], inclusive: true },
            };
            return lexer;
          })();
          parser.lexer = lexer;
          function Parser() {
            this.yy = {};
          }
          Parser.prototype = parser;
          parser.Parser = Parser;
          return new Parser();
        })();
        exports.__esModule = true;
        exports["default"] = handlebars;

        /***/
      },
      /* 24 */
      /***/ function (module, exports, __webpack_require__) {
        "use strict";

        var _interopRequireDefault = __webpack_require__(1)["default"];

        exports.__esModule = true;

        var _visitor = __webpack_require__(25);

        var _visitor2 = _interopRequireDefault(_visitor);

        function WhitespaceControl() {
          var options =
            arguments.length <= 0 || arguments[0] === undefined
              ? {}
              : arguments[0];

          this.options = options;
        }
        WhitespaceControl.prototype = new _visitor2["default"]();

        WhitespaceControl.prototype.Program = function (program) {
          var doStandalone = !this.options.ignoreStandalone;

          var isRoot = !this.isRootSeen;
          this.isRootSeen = true;

          var body = program.body;
          for (var i = 0, l = body.length; i < l; i++) {
            var current = body[i],
              strip = this.accept(current);

            if (!strip) {
              continue;
            }

            var _isPrevWhitespace = isPrevWhitespace(body, i, isRoot),
              _isNextWhitespace = isNextWhitespace(body, i, isRoot),
              openStandalone = strip.openStandalone && _isPrevWhitespace,
              closeStandalone = strip.closeStandalone && _isNextWhitespace,
              inlineStandalone =
                strip.inlineStandalone &&
                _isPrevWhitespace &&
                _isNextWhitespace;

            if (strip.close) {
              omitRight(body, i, true);
            }
            if (strip.open) {
              omitLeft(body, i, true);
            }

            if (doStandalone && inlineStandalone) {
              omitRight(body, i);

              if (omitLeft(body, i)) {
                // If we are on a standalone node, save the indent info for partials
                if (current.type === "PartialStatement") {
                  // Pull out the whitespace from the final line
                  current.indent = /([ \t]+$)/.exec(body[i - 1].original)[1];
                }
              }
            }
            if (doStandalone && openStandalone) {
              omitRight((current.program || current.inverse).body);

              // Strip out the previous content node if it's whitespace only
              omitLeft(body, i);
            }
            if (doStandalone && closeStandalone) {
              // Always strip the next node
              omitRight(body, i);

              omitLeft((current.inverse || current.program).body);
            }
          }

          return program;
        };

        WhitespaceControl.prototype.BlockStatement =
          WhitespaceControl.prototype.DecoratorBlock =
          WhitespaceControl.prototype.PartialBlockStatement =
            function (block) {
              this.accept(block.program);
              this.accept(block.inverse);

              // Find the inverse program that is involed with whitespace stripping.
              var program = block.program || block.inverse,
                inverse = block.program && block.inverse,
                firstInverse = inverse,
                lastInverse = inverse;

              if (inverse && inverse.chained) {
                firstInverse = inverse.body[0].program;

                // Walk the inverse chain to find the last inverse that is actually in the chain.
                while (lastInverse.chained) {
                  lastInverse =
                    lastInverse.body[lastInverse.body.length - 1].program;
                }
              }

              var strip = {
                open: block.openStrip.open,
                close: block.closeStrip.close,

                // Determine the standalone candiacy. Basically flag our content as being possibly standalone
                // so our parent can determine if we actually are standalone
                openStandalone: isNextWhitespace(program.body),
                closeStandalone: isPrevWhitespace(
                  (firstInverse || program).body
                ),
              };

              if (block.openStrip.close) {
                omitRight(program.body, null, true);
              }

              if (inverse) {
                var inverseStrip = block.inverseStrip;

                if (inverseStrip.open) {
                  omitLeft(program.body, null, true);
                }

                if (inverseStrip.close) {
                  omitRight(firstInverse.body, null, true);
                }
                if (block.closeStrip.open) {
                  omitLeft(lastInverse.body, null, true);
                }

                // Find standalone else statments
                if (
                  !this.options.ignoreStandalone &&
                  isPrevWhitespace(program.body) &&
                  isNextWhitespace(firstInverse.body)
                ) {
                  omitLeft(program.body);
                  omitRight(firstInverse.body);
                }
              } else if (block.closeStrip.open) {
                omitLeft(program.body, null, true);
              }

              return strip;
            };

        WhitespaceControl.prototype.Decorator =
          WhitespaceControl.prototype.MustacheStatement = function (mustache) {
            return mustache.strip;
          };

        WhitespaceControl.prototype.PartialStatement =
          WhitespaceControl.prototype.CommentStatement = function (node) {
            /* istanbul ignore next */
            var strip = node.strip || {};
            return {
              inlineStandalone: true,
              open: strip.open,
              close: strip.close,
            };
          };

        function isPrevWhitespace(body, i, isRoot) {
          if (i === undefined) {
            i = body.length;
          }

          // Nodes that end with newlines are considered whitespace (but are special
          // cased for strip operations)
          var prev = body[i - 1],
            sibling = body[i - 2];
          if (!prev) {
            return isRoot;
          }

          if (prev.type === "ContentStatement") {
            return (sibling || !isRoot ? /\r?\n\s*?$/ : /(^|\r?\n)\s*?$/).test(
              prev.original
            );
          }
        }
        function isNextWhitespace(body, i, isRoot) {
          if (i === undefined) {
            i = -1;
          }

          var next = body[i + 1],
            sibling = body[i + 2];
          if (!next) {
            return isRoot;
          }

          if (next.type === "ContentStatement") {
            return (sibling || !isRoot ? /^\s*?\r?\n/ : /^\s*?(\r?\n|$)/).test(
              next.original
            );
          }
        }

        // Marks the node to the right of the position as omitted.
        // I.e. {{foo}}' ' will mark the ' ' node as omitted.
        //
        // If i is undefined, then the first child will be marked as such.
        //
        // If mulitple is truthy then all whitespace will be stripped out until non-whitespace
        // content is met.
        function omitRight(body, i, multiple) {
          var current = body[i == null ? 0 : i + 1];
          if (
            !current ||
            current.type !== "ContentStatement" ||
            (!multiple && current.rightStripped)
          ) {
            return;
          }

          var original = current.value;
          current.value = current.value.replace(
            multiple ? /^\s+/ : /^[ \t]*\r?\n?/,
            ""
          );
          current.rightStripped = current.value !== original;
        }

        // Marks the node to the left of the position as omitted.
        // I.e. ' '{{foo}} will mark the ' ' node as omitted.
        //
        // If i is undefined then the last child will be marked as such.
        //
        // If mulitple is truthy then all whitespace will be stripped out until non-whitespace
        // content is met.
        function omitLeft(body, i, multiple) {
          var current = body[i == null ? body.length - 1 : i - 1];
          if (
            !current ||
            current.type !== "ContentStatement" ||
            (!multiple && current.leftStripped)
          ) {
            return;
          }

          // We omit the last node if it's whitespace only and not preceeded by a non-content node.
          var original = current.value;
          current.value = current.value.replace(
            multiple ? /\s+$/ : /[ \t]+$/,
            ""
          );
          current.leftStripped = current.value !== original;
          return current.leftStripped;
        }

        exports["default"] = WhitespaceControl;
        module.exports = exports["default"];

        /***/
      },
      /* 25 */
      /***/ function (module, exports, __webpack_require__) {
        "use strict";

        var _interopRequireDefault = __webpack_require__(1)["default"];

        exports.__esModule = true;

        var _exception = __webpack_require__(6);

        var _exception2 = _interopRequireDefault(_exception);

        function Visitor() {
          this.parents = [];
        }

        Visitor.prototype = {
          constructor: Visitor,
          mutating: false,

          // Visits a given value. If mutating, will replace the value if necessary.
          acceptKey: function acceptKey(node, name) {
            var value = this.accept(node[name]);
            if (this.mutating) {
              // Hacky sanity check: This may have a few false positives for type for the helper
              // methods but will generally do the right thing without a lot of overhead.
              if (value && !Visitor.prototype[value.type]) {
                throw new _exception2["default"](
                  'Unexpected node type "' +
                    value.type +
                    '" found when accepting ' +
                    name +
                    " on " +
                    node.type
                );
              }
              node[name] = value;
            }
          },

          // Performs an accept operation with added sanity check to ensure
          // required keys are not removed.
          acceptRequired: function acceptRequired(node, name) {
            this.acceptKey(node, name);

            if (!node[name]) {
              throw new _exception2["default"](node.type + " requires " + name);
            }
          },

          // Traverses a given array. If mutating, empty respnses will be removed
          // for child elements.
          acceptArray: function acceptArray(array) {
            for (var i = 0, l = array.length; i < l; i++) {
              this.acceptKey(array, i);

              if (!array[i]) {
                array.splice(i, 1);
                i--;
                l--;
              }
            }
          },

          accept: function accept(object) {
            if (!object) {
              return;
            }

            /* istanbul ignore next: Sanity code */
            if (!this[object.type]) {
              throw new _exception2["default"](
                "Unknown type: " + object.type,
                object
              );
            }

            if (this.current) {
              this.parents.unshift(this.current);
            }
            this.current = object;

            var ret = this[object.type](object);

            this.current = this.parents.shift();

            if (!this.mutating || ret) {
              return ret;
            } else if (ret !== false) {
              return object;
            }
          },

          Program: function Program(program) {
            this.acceptArray(program.body);
          },

          MustacheStatement: visitSubExpression,
          Decorator: visitSubExpression,

          BlockStatement: visitBlock,
          DecoratorBlock: visitBlock,

          PartialStatement: visitPartial,
          PartialBlockStatement: function PartialBlockStatement(partial) {
            visitPartial.call(this, partial);

            this.acceptKey(partial, "program");
          },

          ContentStatement: function ContentStatement() /* content */ {},
          CommentStatement: function CommentStatement() /* comment */ {},

          SubExpression: visitSubExpression,

          PathExpression: function PathExpression() /* path */ {},

          StringLiteral: function StringLiteral() /* string */ {},
          NumberLiteral: function NumberLiteral() /* number */ {},
          BooleanLiteral: function BooleanLiteral() /* bool */ {},
          UndefinedLiteral: function UndefinedLiteral() /* literal */ {},
          NullLiteral: function NullLiteral() /* literal */ {},

          Hash: function Hash(hash) {
            this.acceptArray(hash.pairs);
          },
          HashPair: function HashPair(pair) {
            this.acceptRequired(pair, "value");
          },
        };

        function visitSubExpression(mustache) {
          this.acceptRequired(mustache, "path");
          this.acceptArray(mustache.params);
          this.acceptKey(mustache, "hash");
        }
        function visitBlock(block) {
          visitSubExpression.call(this, block);

          this.acceptKey(block, "program");
          this.acceptKey(block, "inverse");
        }
        function visitPartial(partial) {
          this.acceptRequired(partial, "name");
          this.acceptArray(partial.params);
          this.acceptKey(partial, "hash");
        }

        exports["default"] = Visitor;
        module.exports = exports["default"];

        /***/
      },
      /* 26 */
      /***/ function (module, exports, __webpack_require__) {
        "use strict";

        var _interopRequireDefault = __webpack_require__(1)["default"];

        exports.__esModule = true;
        exports.SourceLocation = SourceLocation;
        exports.id = id;
        exports.stripFlags = stripFlags;
        exports.stripComment = stripComment;
        exports.preparePath = preparePath;
        exports.prepareMustache = prepareMustache;
        exports.prepareRawBlock = prepareRawBlock;
        exports.prepareBlock = prepareBlock;
        exports.prepareProgram = prepareProgram;
        exports.preparePartialBlock = preparePartialBlock;

        var _exception = __webpack_require__(6);

        var _exception2 = _interopRequireDefault(_exception);

        function validateClose(open, close) {
          close = close.path ? close.path.original : close;

          if (open.path.original !== close) {
            var errorNode = { loc: open.path.loc };

            throw new _exception2["default"](
              open.path.original + " doesn't match " + close,
              errorNode
            );
          }
        }

        function SourceLocation(source, locInfo) {
          this.source = source;
          this.start = {
            line: locInfo.first_line,
            column: locInfo.first_column,
          };
          this.end = {
            line: locInfo.last_line,
            column: locInfo.last_column,
          };
        }

        function id(token) {
          if (/^\[.*\]$/.test(token)) {
            return token.substr(1, token.length - 2);
          } else {
            return token;
          }
        }

        function stripFlags(open, close) {
          return {
            open: open.charAt(2) === "~",
            close: close.charAt(close.length - 3) === "~",
          };
        }

        function stripComment(comment) {
          return comment
            .replace(/^\{\{~?\!-?-?/, "")
            .replace(/-?-?~?\}\}$/, "");
        }

        function preparePath(data, parts, loc) {
          loc = this.locInfo(loc);

          var original = data ? "@" : "",
            dig = [],
            depth = 0,
            depthString = "";

          for (var i = 0, l = parts.length; i < l; i++) {
            var part = parts[i].part,
              // If we have [] syntax then we do not treat path references as operators,
              // i.e. foo.[this] resolves to approximately context.foo['this']
              isLiteral = parts[i].original !== part;
            original += (parts[i].separator || "") + part;

            if (
              !isLiteral &&
              (part === ".." || part === "." || part === "this")
            ) {
              if (dig.length > 0) {
                throw new _exception2["default"]("Invalid path: " + original, {
                  loc: loc,
                });
              } else if (part === "..") {
                depth++;
                depthString += "../";
              }
            } else {
              dig.push(part);
            }
          }

          return {
            type: "PathExpression",
            data: data,
            depth: depth,
            parts: dig,
            original: original,
            loc: loc,
          };
        }

        function prepareMustache(path, params, hash, open, strip, locInfo) {
          // Must use charAt to support IE pre-10
          var escapeFlag = open.charAt(3) || open.charAt(2),
            escaped = escapeFlag !== "{" && escapeFlag !== "&";

          var decorator = /\*/.test(open);
          return {
            type: decorator ? "Decorator" : "MustacheStatement",
            path: path,
            params: params,
            hash: hash,
            escaped: escaped,
            strip: strip,
            loc: this.locInfo(locInfo),
          };
        }

        function prepareRawBlock(openRawBlock, contents, close, locInfo) {
          validateClose(openRawBlock, close);

          locInfo = this.locInfo(locInfo);
          var program = {
            type: "Program",
            body: contents,
            strip: {},
            loc: locInfo,
          };

          return {
            type: "BlockStatement",
            path: openRawBlock.path,
            params: openRawBlock.params,
            hash: openRawBlock.hash,
            program: program,
            openStrip: {},
            inverseStrip: {},
            closeStrip: {},
            loc: locInfo,
          };
        }

        function prepareBlock(
          openBlock,
          program,
          inverseAndProgram,
          close,
          inverted,
          locInfo
        ) {
          if (close && close.path) {
            validateClose(openBlock, close);
          }

          var decorator = /\*/.test(openBlock.open);

          program.blockParams = openBlock.blockParams;

          var inverse = undefined,
            inverseStrip = undefined;

          if (inverseAndProgram) {
            if (decorator) {
              throw new _exception2["default"](
                "Unexpected inverse block on decorator",
                inverseAndProgram
              );
            }

            if (inverseAndProgram.chain) {
              inverseAndProgram.program.body[0].closeStrip = close.strip;
            }

            inverseStrip = inverseAndProgram.strip;
            inverse = inverseAndProgram.program;
          }

          if (inverted) {
            inverted = inverse;
            inverse = program;
            program = inverted;
          }

          return {
            type: decorator ? "DecoratorBlock" : "BlockStatement",
            path: openBlock.path,
            params: openBlock.params,
            hash: openBlock.hash,
            program: program,
            inverse: inverse,
            openStrip: openBlock.strip,
            inverseStrip: inverseStrip,
            closeStrip: close && close.strip,
            loc: this.locInfo(locInfo),
          };
        }

        function prepareProgram(statements, loc) {
          if (!loc && statements.length) {
            var firstLoc = statements[0].loc,
              lastLoc = statements[statements.length - 1].loc;

            /* istanbul ignore else */
            if (firstLoc && lastLoc) {
              loc = {
                source: firstLoc.source,
                start: {
                  line: firstLoc.start.line,
                  column: firstLoc.start.column,
                },
                end: {
                  line: lastLoc.end.line,
                  column: lastLoc.end.column,
                },
              };
            }
          }

          return {
            type: "Program",
            body: statements,
            strip: {},
            loc: loc,
          };
        }

        function preparePartialBlock(open, program, close, locInfo) {
          validateClose(open, close);

          return {
            type: "PartialBlockStatement",
            name: open.path,
            params: open.params,
            hash: open.hash,
            program: program,
            openStrip: open.strip,
            closeStrip: close && close.strip,
            loc: this.locInfo(locInfo),
          };
        }

        /***/
      },
      /* 27 */
      /***/ function (module, exports, __webpack_require__) {
        /* eslint-disable new-cap */

        "use strict";

        var _interopRequireDefault = __webpack_require__(1)["default"];

        exports.__esModule = true;
        exports.Compiler = Compiler;
        exports.precompile = precompile;
        exports.compile = compile;

        var _exception = __webpack_require__(6);

        var _exception2 = _interopRequireDefault(_exception);

        var _utils = __webpack_require__(5);

        var _ast = __webpack_require__(21);

        var _ast2 = _interopRequireDefault(_ast);

        var slice = [].slice;

        function Compiler() {}

        // the foundHelper register will disambiguate helper lookup from finding a
        // function in a context. This is necessary for mustache compatibility, which
        // requires that context functions in blocks are evaluated by blockHelperMissing,
        // and then proceed as if the resulting value was provided to blockHelperMissing.

        Compiler.prototype = {
          compiler: Compiler,

          equals: function equals(other) {
            var len = this.opcodes.length;
            if (other.opcodes.length !== len) {
              return false;
            }

            for (var i = 0; i < len; i++) {
              var opcode = this.opcodes[i],
                otherOpcode = other.opcodes[i];
              if (
                opcode.opcode !== otherOpcode.opcode ||
                !argEquals(opcode.args, otherOpcode.args)
              ) {
                return false;
              }
            }

            // We know that length is the same between the two arrays because they are directly tied
            // to the opcode behavior above.
            len = this.children.length;
            for (var i = 0; i < len; i++) {
              if (!this.children[i].equals(other.children[i])) {
                return false;
              }
            }

            return true;
          },

          guid: 0,

          compile: function compile(program, options) {
            this.sourceNode = [];
            this.opcodes = [];
            this.children = [];
            this.options = options;
            this.stringParams = options.stringParams;
            this.trackIds = options.trackIds;

            options.blockParams = options.blockParams || [];

            // These changes will propagate to the other compiler components
            var knownHelpers = options.knownHelpers;
            options.knownHelpers = {
              helperMissing: true,
              blockHelperMissing: true,
              each: true,
              if: true,
              unless: true,
              with: true,
              log: true,
              lookup: true,
            };
            if (knownHelpers) {
              for (var _name in knownHelpers) {
                /* istanbul ignore else */
                if (_name in knownHelpers) {
                  options.knownHelpers[_name] = knownHelpers[_name];
                }
              }
            }

            return this.accept(program);
          },

          compileProgram: function compileProgram(program) {
            var childCompiler = new this.compiler(),
              // eslint-disable-line new-cap
              result = childCompiler.compile(program, this.options),
              guid = this.guid++;

            this.usePartial = this.usePartial || result.usePartial;

            this.children[guid] = result;
            this.useDepths = this.useDepths || result.useDepths;

            return guid;
          },

          accept: function accept(node) {
            /* istanbul ignore next: Sanity code */
            if (!this[node.type]) {
              throw new _exception2["default"](
                "Unknown type: " + node.type,
                node
              );
            }

            this.sourceNode.unshift(node);
            var ret = this[node.type](node);
            this.sourceNode.shift();
            return ret;
          },

          Program: function Program(program) {
            this.options.blockParams.unshift(program.blockParams);

            var body = program.body,
              bodyLength = body.length;
            for (var i = 0; i < bodyLength; i++) {
              this.accept(body[i]);
            }

            this.options.blockParams.shift();

            this.isSimple = bodyLength === 1;
            this.blockParams = program.blockParams
              ? program.blockParams.length
              : 0;

            return this;
          },

          BlockStatement: function BlockStatement(block) {
            transformLiteralToPath(block);

            var program = block.program,
              inverse = block.inverse;

            program = program && this.compileProgram(program);
            inverse = inverse && this.compileProgram(inverse);

            var type = this.classifySexpr(block);

            if (type === "helper") {
              this.helperSexpr(block, program, inverse);
            } else if (type === "simple") {
              this.simpleSexpr(block);

              // now that the simple mustache is resolved, we need to
              // evaluate it by executing `blockHelperMissing`
              this.opcode("pushProgram", program);
              this.opcode("pushProgram", inverse);
              this.opcode("emptyHash");
              this.opcode("blockValue", block.path.original);
            } else {
              this.ambiguousSexpr(block, program, inverse);

              // now that the simple mustache is resolved, we need to
              // evaluate it by executing `blockHelperMissing`
              this.opcode("pushProgram", program);
              this.opcode("pushProgram", inverse);
              this.opcode("emptyHash");
              this.opcode("ambiguousBlockValue");
            }

            this.opcode("append");
          },

          DecoratorBlock: function DecoratorBlock(decorator) {
            var program =
              decorator.program && this.compileProgram(decorator.program);
            var params = this.setupFullMustacheParams(
                decorator,
                program,
                undefined
              ),
              path = decorator.path;

            this.useDecorators = true;
            this.opcode("registerDecorator", params.length, path.original);
          },

          PartialStatement: function PartialStatement(partial) {
            this.usePartial = true;

            var program = partial.program;
            if (program) {
              program = this.compileProgram(partial.program);
            }

            var params = partial.params;
            if (params.length > 1) {
              throw new _exception2["default"](
                "Unsupported number of partial arguments: " + params.length,
                partial
              );
            } else if (!params.length) {
              if (this.options.explicitPartialContext) {
                this.opcode("pushLiteral", "undefined");
              } else {
                params.push({ type: "PathExpression", parts: [], depth: 0 });
              }
            }

            var partialName = partial.name.original,
              isDynamic = partial.name.type === "SubExpression";
            if (isDynamic) {
              this.accept(partial.name);
            }

            this.setupFullMustacheParams(partial, program, undefined, true);

            var indent = partial.indent || "";
            if (this.options.preventIndent && indent) {
              this.opcode("appendContent", indent);
              indent = "";
            }

            this.opcode("invokePartial", isDynamic, partialName, indent);
            this.opcode("append");
          },
          PartialBlockStatement: function PartialBlockStatement(partialBlock) {
            this.PartialStatement(partialBlock);
          },

          MustacheStatement: function MustacheStatement(mustache) {
            this.SubExpression(mustache);

            if (mustache.escaped && !this.options.noEscape) {
              this.opcode("appendEscaped");
            } else {
              this.opcode("append");
            }
          },
          Decorator: function Decorator(decorator) {
            this.DecoratorBlock(decorator);
          },

          ContentStatement: function ContentStatement(content) {
            if (content.value) {
              this.opcode("appendContent", content.value);
            }
          },

          CommentStatement: function CommentStatement() {},

          SubExpression: function SubExpression(sexpr) {
            transformLiteralToPath(sexpr);
            var type = this.classifySexpr(sexpr);

            if (type === "simple") {
              this.simpleSexpr(sexpr);
            } else if (type === "helper") {
              this.helperSexpr(sexpr);
            } else {
              this.ambiguousSexpr(sexpr);
            }
          },
          ambiguousSexpr: function ambiguousSexpr(sexpr, program, inverse) {
            var path = sexpr.path,
              name = path.parts[0],
              isBlock = program != null || inverse != null;

            this.opcode("getContext", path.depth);

            this.opcode("pushProgram", program);
            this.opcode("pushProgram", inverse);

            path.strict = true;
            this.accept(path);

            this.opcode("invokeAmbiguous", name, isBlock);
          },

          simpleSexpr: function simpleSexpr(sexpr) {
            var path = sexpr.path;
            path.strict = true;
            this.accept(path);
            this.opcode("resolvePossibleLambda");
          },

          helperSexpr: function helperSexpr(sexpr, program, inverse) {
            var params = this.setupFullMustacheParams(sexpr, program, inverse),
              path = sexpr.path,
              name = path.parts[0];

            if (this.options.knownHelpers[name]) {
              this.opcode("invokeKnownHelper", params.length, name);
            } else if (this.options.knownHelpersOnly) {
              throw new _exception2["default"](
                "You specified knownHelpersOnly, but used the unknown helper " +
                  name,
                sexpr
              );
            } else {
              path.strict = true;
              path.falsy = true;

              this.accept(path);
              this.opcode(
                "invokeHelper",
                params.length,
                path.original,
                _ast2["default"].helpers.simpleId(path)
              );
            }
          },

          PathExpression: function PathExpression(path) {
            this.addDepth(path.depth);
            this.opcode("getContext", path.depth);

            var name = path.parts[0],
              scoped = _ast2["default"].helpers.scopedId(path),
              blockParamId =
                !path.depth && !scoped && this.blockParamIndex(name);

            if (blockParamId) {
              this.opcode("lookupBlockParam", blockParamId, path.parts);
            } else if (!name) {
              // Context reference, i.e. `{{foo .}}` or `{{foo ..}}`
              this.opcode("pushContext");
            } else if (path.data) {
              this.options.data = true;
              this.opcode("lookupData", path.depth, path.parts, path.strict);
            } else {
              this.opcode(
                "lookupOnContext",
                path.parts,
                path.falsy,
                path.strict,
                scoped
              );
            }
          },

          StringLiteral: function StringLiteral(string) {
            this.opcode("pushString", string.value);
          },

          NumberLiteral: function NumberLiteral(number) {
            this.opcode("pushLiteral", number.value);
          },

          BooleanLiteral: function BooleanLiteral(bool) {
            this.opcode("pushLiteral", bool.value);
          },

          UndefinedLiteral: function UndefinedLiteral() {
            this.opcode("pushLiteral", "undefined");
          },

          NullLiteral: function NullLiteral() {
            this.opcode("pushLiteral", "null");
          },

          Hash: function Hash(hash) {
            var pairs = hash.pairs,
              i = 0,
              l = pairs.length;

            this.opcode("pushHash");

            for (; i < l; i++) {
              this.pushParam(pairs[i].value);
            }
            while (i--) {
              this.opcode("assignToHash", pairs[i].key);
            }
            this.opcode("popHash");
          },

          // HELPERS
          opcode: function opcode(name) {
            this.opcodes.push({
              opcode: name,
              args: slice.call(arguments, 1),
              loc: this.sourceNode[0].loc,
            });
          },

          addDepth: function addDepth(depth) {
            if (!depth) {
              return;
            }

            this.useDepths = true;
          },

          classifySexpr: function classifySexpr(sexpr) {
            var isSimple = _ast2["default"].helpers.simpleId(sexpr.path);

            var isBlockParam =
              isSimple && !!this.blockParamIndex(sexpr.path.parts[0]);

            // a mustache is an eligible helper if:
            // * its id is simple (a single part, not `this` or `..`)
            var isHelper =
              !isBlockParam && _ast2["default"].helpers.helperExpression(sexpr);

            // if a mustache is an eligible helper but not a definite
            // helper, it is ambiguous, and will be resolved in a later
            // pass or at runtime.
            var isEligible = !isBlockParam && (isHelper || isSimple);

            // if ambiguous, we can possibly resolve the ambiguity now
            // An eligible helper is one that does not have a complex path, i.e. `this.foo`, `../foo` etc.
            if (isEligible && !isHelper) {
              var _name2 = sexpr.path.parts[0],
                options = this.options;

              if (options.knownHelpers[_name2]) {
                isHelper = true;
              } else if (options.knownHelpersOnly) {
                isEligible = false;
              }
            }

            if (isHelper) {
              return "helper";
            } else if (isEligible) {
              return "ambiguous";
            } else {
              return "simple";
            }
          },

          pushParams: function pushParams(params) {
            for (var i = 0, l = params.length; i < l; i++) {
              this.pushParam(params[i]);
            }
          },

          pushParam: function pushParam(val) {
            var value = val.value != null ? val.value : val.original || "";

            if (this.stringParams) {
              if (value.replace) {
                value = value.replace(/^(\.?\.\/)*/g, "").replace(/\//g, ".");
              }

              if (val.depth) {
                this.addDepth(val.depth);
              }
              this.opcode("getContext", val.depth || 0);
              this.opcode("pushStringParam", value, val.type);

              if (val.type === "SubExpression") {
                // SubExpressions get evaluated and passed in
                // in string params mode.
                this.accept(val);
              }
            } else {
              if (this.trackIds) {
                var blockParamIndex = undefined;
                if (
                  val.parts &&
                  !_ast2["default"].helpers.scopedId(val) &&
                  !val.depth
                ) {
                  blockParamIndex = this.blockParamIndex(val.parts[0]);
                }
                if (blockParamIndex) {
                  var blockParamChild = val.parts.slice(1).join(".");
                  this.opcode(
                    "pushId",
                    "BlockParam",
                    blockParamIndex,
                    blockParamChild
                  );
                } else {
                  value = val.original || value;
                  if (value.replace) {
                    value = value
                      .replace(/^this(?:\.|$)/, "")
                      .replace(/^\.\//, "")
                      .replace(/^\.$/, "");
                  }

                  this.opcode("pushId", val.type, value);
                }
              }
              this.accept(val);
            }
          },

          setupFullMustacheParams: function setupFullMustacheParams(
            sexpr,
            program,
            inverse,
            omitEmpty
          ) {
            var params = sexpr.params;
            this.pushParams(params);

            this.opcode("pushProgram", program);
            this.opcode("pushProgram", inverse);

            if (sexpr.hash) {
              this.accept(sexpr.hash);
            } else {
              this.opcode("emptyHash", omitEmpty);
            }

            return params;
          },

          blockParamIndex: function blockParamIndex(name) {
            for (
              var depth = 0, len = this.options.blockParams.length;
              depth < len;
              depth++
            ) {
              var blockParams = this.options.blockParams[depth],
                param = blockParams && _utils.indexOf(blockParams, name);
              if (blockParams && param >= 0) {
                return [depth, param];
              }
            }
          },
        };

        function precompile(input, options, env) {
          if (
            input == null ||
            (typeof input !== "string" && input.type !== "Program")
          ) {
            throw new _exception2["default"](
              "You must pass a string or Handlebars AST to Handlebars.precompile. You passed " +
                input
            );
          }

          options = options || {};
          if (!("data" in options)) {
            options.data = true;
          }
          if (options.compat) {
            options.useDepths = true;
          }

          var ast = env.parse(input, options),
            environment = new env.Compiler().compile(ast, options);
          return new env.JavaScriptCompiler().compile(environment, options);
        }

        function compile(input, options, env) {
          if (options === undefined) options = {};

          if (
            input == null ||
            (typeof input !== "string" && input.type !== "Program")
          ) {
            throw new _exception2["default"](
              "You must pass a string or Handlebars AST to Handlebars.compile. You passed " +
                input
            );
          }

          if (!("data" in options)) {
            options.data = true;
          }
          if (options.compat) {
            options.useDepths = true;
          }

          var compiled = undefined;

          function compileInput() {
            var ast = env.parse(input, options),
              environment = new env.Compiler().compile(ast, options),
              templateSpec = new env.JavaScriptCompiler().compile(
                environment,
                options,
                undefined,
                true
              );
            return env.template(templateSpec);
          }

          // Template is only compiled on first use and cached after that point.
          function ret(context, execOptions) {
            if (!compiled) {
              compiled = compileInput();
            }
            return compiled.call(this, context, execOptions);
          }
          ret._setup = function (setupOptions) {
            if (!compiled) {
              compiled = compileInput();
            }
            return compiled._setup(setupOptions);
          };
          ret._child = function (i, data, blockParams, depths) {
            if (!compiled) {
              compiled = compileInput();
            }
            return compiled._child(i, data, blockParams, depths);
          };
          return ret;
        }

        function argEquals(a, b) {
          if (a === b) {
            return true;
          }

          if (_utils.isArray(a) && _utils.isArray(b) && a.length === b.length) {
            for (var i = 0; i < a.length; i++) {
              if (!argEquals(a[i], b[i])) {
                return false;
              }
            }
            return true;
          }
        }

        function transformLiteralToPath(sexpr) {
          if (!sexpr.path.parts) {
            var literal = sexpr.path;
            // Casting to string here to make false and 0 literal values play nicely with the rest
            // of the system.
            sexpr.path = {
              type: "PathExpression",
              data: false,
              depth: 0,
              parts: [literal.original + ""],
              original: literal.original + "",
              loc: literal.loc,
            };
          }
        }

        /***/
      },
      /* 28 */
      /***/ function (module, exports, __webpack_require__) {
        "use strict";

        var _interopRequireDefault = __webpack_require__(1)["default"];

        exports.__esModule = true;

        var _base = __webpack_require__(4);

        var _exception = __webpack_require__(6);

        var _exception2 = _interopRequireDefault(_exception);

        var _utils = __webpack_require__(5);

        var _codeGen = __webpack_require__(29);

        var _codeGen2 = _interopRequireDefault(_codeGen);

        function Literal(value) {
          this.value = value;
        }

        function JavaScriptCompiler() {}

        JavaScriptCompiler.prototype = {
          // PUBLIC API: You can override these methods in a subclass to provide
          // alternative compiled forms for name lookup and buffering semantics
          nameLookup: function nameLookup(parent, name /* , type*/) {
            if (JavaScriptCompiler.isValidJavaScriptVariableName(name)) {
              return [parent, ".", name];
            } else {
              return [parent, "[", JSON.stringify(name), "]"];
            }
          },
          depthedLookup: function depthedLookup(name) {
            return [
              this.aliasable("container.lookup"),
              '(depths, "',
              name,
              '")',
            ];
          },

          compilerInfo: function compilerInfo() {
            var revision = _base.COMPILER_REVISION,
              versions = _base.REVISION_CHANGES[revision];
            return [revision, versions];
          },

          appendToBuffer: function appendToBuffer(source, location, explicit) {
            // Force a source as this simplifies the merge logic.
            if (!_utils.isArray(source)) {
              source = [source];
            }
            source = this.source.wrap(source, location);

            if (this.environment.isSimple) {
              return ["return ", source, ";"];
            } else if (explicit) {
              // This is a case where the buffer operation occurs as a child of another
              // construct, generally braces. We have to explicitly output these buffer
              // operations to ensure that the emitted code goes in the correct location.
              return ["buffer += ", source, ";"];
            } else {
              source.appendToBuffer = true;
              return source;
            }
          },

          initializeBuffer: function initializeBuffer() {
            return this.quotedString("");
          },
          // END PUBLIC API

          compile: function compile(environment, options, context, asObject) {
            this.environment = environment;
            this.options = options;
            this.stringParams = this.options.stringParams;
            this.trackIds = this.options.trackIds;
            this.precompile = !asObject;

            this.name = this.environment.name;
            this.isChild = !!context;
            this.context = context || {
              decorators: [],
              programs: [],
              environments: [],
            };

            this.preamble();

            this.stackSlot = 0;
            this.stackVars = [];
            this.aliases = {};
            this.registers = { list: [] };
            this.hashes = [];
            this.compileStack = [];
            this.inlineStack = [];
            this.blockParams = [];

            this.compileChildren(environment, options);

            this.useDepths =
              this.useDepths ||
              environment.useDepths ||
              environment.useDecorators ||
              this.options.compat;
            this.useBlockParams =
              this.useBlockParams || environment.useBlockParams;

            var opcodes = environment.opcodes,
              opcode = undefined,
              firstLoc = undefined,
              i = undefined,
              l = undefined;

            for (i = 0, l = opcodes.length; i < l; i++) {
              opcode = opcodes[i];

              this.source.currentLocation = opcode.loc;
              firstLoc = firstLoc || opcode.loc;
              this[opcode.opcode].apply(this, opcode.args);
            }

            // Flush any trailing content that might be pending.
            this.source.currentLocation = firstLoc;
            this.pushSource("");

            /* istanbul ignore next */
            if (
              this.stackSlot ||
              this.inlineStack.length ||
              this.compileStack.length
            ) {
              throw new _exception2["default"](
                "Compile completed with content left on stack"
              );
            }

            if (!this.decorators.isEmpty()) {
              this.useDecorators = true;

              this.decorators.prepend(
                "var decorators = container.decorators;\n"
              );
              this.decorators.push("return fn;");

              if (asObject) {
                this.decorators = Function.apply(this, [
                  "fn",
                  "props",
                  "container",
                  "depth0",
                  "data",
                  "blockParams",
                  "depths",
                  this.decorators.merge(),
                ]);
              } else {
                this.decorators.prepend(
                  "function(fn, props, container, depth0, data, blockParams, depths) {\n"
                );
                this.decorators.push("}\n");
                this.decorators = this.decorators.merge();
              }
            } else {
              this.decorators = undefined;
            }

            var fn = this.createFunctionContext(asObject);
            if (!this.isChild) {
              var ret = {
                compiler: this.compilerInfo(),
                main: fn,
              };

              if (this.decorators) {
                ret.main_d = this.decorators; // eslint-disable-line camelcase
                ret.useDecorators = true;
              }

              var _context = this.context;
              var programs = _context.programs;
              var decorators = _context.decorators;

              for (i = 0, l = programs.length; i < l; i++) {
                if (programs[i]) {
                  ret[i] = programs[i];
                  if (decorators[i]) {
                    ret[i + "_d"] = decorators[i];
                    ret.useDecorators = true;
                  }
                }
              }

              if (this.environment.usePartial) {
                ret.usePartial = true;
              }
              if (this.options.data) {
                ret.useData = true;
              }
              if (this.useDepths) {
                ret.useDepths = true;
              }
              if (this.useBlockParams) {
                ret.useBlockParams = true;
              }
              if (this.options.compat) {
                ret.compat = true;
              }

              if (!asObject) {
                ret.compiler = JSON.stringify(ret.compiler);

                this.source.currentLocation = { start: { line: 1, column: 0 } };
                ret = this.objectLiteral(ret);

                if (options.srcName) {
                  ret = ret.toStringWithSourceMap({ file: options.destName });
                  ret.map = ret.map && ret.map.toString();
                } else {
                  ret = ret.toString();
                }
              } else {
                ret.compilerOptions = this.options;
              }

              return ret;
            } else {
              return fn;
            }
          },

          preamble: function preamble() {
            // track the last context pushed into place to allow skipping the
            // getContext opcode when it would be a noop
            this.lastContext = 0;
            this.source = new _codeGen2["default"](this.options.srcName);
            this.decorators = new _codeGen2["default"](this.options.srcName);
          },

          createFunctionContext: function createFunctionContext(asObject) {
            var varDeclarations = "";

            var locals = this.stackVars.concat(this.registers.list);
            if (locals.length > 0) {
              varDeclarations += ", " + locals.join(", ");
            }

            // Generate minimizer alias mappings
            //
            // When using true SourceNodes, this will update all references to the given alias
            // as the source nodes are reused in situ. For the non-source node compilation mode,
            // aliases will not be used, but this case is already being run on the client and
            // we aren't concern about minimizing the template size.
            var aliasCount = 0;
            for (var alias in this.aliases) {
              // eslint-disable-line guard-for-in
              var node = this.aliases[alias];

              if (
                this.aliases.hasOwnProperty(alias) &&
                node.children &&
                node.referenceCount > 1
              ) {
                varDeclarations += ", alias" + ++aliasCount + "=" + alias;
                node.children[0] = "alias" + aliasCount;
              }
            }

            var params = ["container", "depth0", "helpers", "partials", "data"];

            if (this.useBlockParams || this.useDepths) {
              params.push("blockParams");
            }
            if (this.useDepths) {
              params.push("depths");
            }

            // Perform a second pass over the output to merge content when possible
            var source = this.mergeSource(varDeclarations);

            if (asObject) {
              params.push(source);

              return Function.apply(this, params);
            } else {
              return this.source.wrap([
                "function(",
                params.join(","),
                ") {\n  ",
                source,
                "}",
              ]);
            }
          },
          mergeSource: function mergeSource(varDeclarations) {
            var isSimple = this.environment.isSimple,
              appendOnly = !this.forceBuffer,
              appendFirst = undefined,
              sourceSeen = undefined,
              bufferStart = undefined,
              bufferEnd = undefined;
            this.source.each(function (line) {
              if (line.appendToBuffer) {
                if (bufferStart) {
                  line.prepend("  + ");
                } else {
                  bufferStart = line;
                }
                bufferEnd = line;
              } else {
                if (bufferStart) {
                  if (!sourceSeen) {
                    appendFirst = true;
                  } else {
                    bufferStart.prepend("buffer += ");
                  }
                  bufferEnd.add(";");
                  bufferStart = bufferEnd = undefined;
                }

                sourceSeen = true;
                if (!isSimple) {
                  appendOnly = false;
                }
              }
            });

            if (appendOnly) {
              if (bufferStart) {
                bufferStart.prepend("return ");
                bufferEnd.add(";");
              } else if (!sourceSeen) {
                this.source.push('return "";');
              }
            } else {
              varDeclarations +=
                ", buffer = " + (appendFirst ? "" : this.initializeBuffer());

              if (bufferStart) {
                bufferStart.prepend("return buffer + ");
                bufferEnd.add(";");
              } else {
                this.source.push("return buffer;");
              }
            }

            if (varDeclarations) {
              this.source.prepend(
                "var " +
                  varDeclarations.substring(2) +
                  (appendFirst ? "" : ";\n")
              );
            }

            return this.source.merge();
          },

          // [blockValue]
          //
          // On stack, before: hash, inverse, program, value
          // On stack, after: return value of blockHelperMissing
          //
          // The purpose of this opcode is to take a block of the form
          // `{{#this.foo}}...{{/this.foo}}`, resolve the value of `foo`, and
          // replace it on the stack with the result of properly
          // invoking blockHelperMissing.
          blockValue: function blockValue(name) {
            var blockHelperMissing = this.aliasable(
                "helpers.blockHelperMissing"
              ),
              params = [this.contextName(0)];
            this.setupHelperArgs(name, 0, params);

            var blockName = this.popStack();
            params.splice(1, 0, blockName);

            this.push(
              this.source.functionCall(blockHelperMissing, "call", params)
            );
          },

          // [ambiguousBlockValue]
          //
          // On stack, before: hash, inverse, program, value
          // Compiler value, before: lastHelper=value of last found helper, if any
          // On stack, after, if no lastHelper: same as [blockValue]
          // On stack, after, if lastHelper: value
          ambiguousBlockValue: function ambiguousBlockValue() {
            // We're being a bit cheeky and reusing the options value from the prior exec
            var blockHelperMissing = this.aliasable(
                "helpers.blockHelperMissing"
              ),
              params = [this.contextName(0)];
            this.setupHelperArgs("", 0, params, true);

            this.flushInline();

            var current = this.topStack();
            params.splice(1, 0, current);

            this.pushSource([
              "if (!",
              this.lastHelper,
              ") { ",
              current,
              " = ",
              this.source.functionCall(blockHelperMissing, "call", params),
              "}",
            ]);
          },

          // [appendContent]
          //
          // On stack, before: ...
          // On stack, after: ...
          //
          // Appends the string value of `content` to the current buffer
          appendContent: function appendContent(content) {
            if (this.pendingContent) {
              content = this.pendingContent + content;
            } else {
              this.pendingLocation = this.source.currentLocation;
            }

            this.pendingContent = content;
          },

          // [append]
          //
          // On stack, before: value, ...
          // On stack, after: ...
          //
          // Coerces `value` to a String and appends it to the current buffer.
          //
          // If `value` is truthy, or 0, it is coerced into a string and appended
          // Otherwise, the empty string is appended
          append: function append() {
            if (this.isInline()) {
              this.replaceStack(function (current) {
                return [" != null ? ", current, ' : ""'];
              });

              this.pushSource(this.appendToBuffer(this.popStack()));
            } else {
              var local = this.popStack();
              this.pushSource([
                "if (",
                local,
                " != null) { ",
                this.appendToBuffer(local, undefined, true),
                " }",
              ]);
              if (this.environment.isSimple) {
                this.pushSource([
                  "else { ",
                  this.appendToBuffer("''", undefined, true),
                  " }",
                ]);
              }
            }
          },

          // [appendEscaped]
          //
          // On stack, before: value, ...
          // On stack, after: ...
          //
          // Escape `value` and append it to the buffer
          appendEscaped: function appendEscaped() {
            this.pushSource(
              this.appendToBuffer([
                this.aliasable("container.escapeExpression"),
                "(",
                this.popStack(),
                ")",
              ])
            );
          },

          // [getContext]
          //
          // On stack, before: ...
          // On stack, after: ...
          // Compiler value, after: lastContext=depth
          //
          // Set the value of the `lastContext` compiler value to the depth
          getContext: function getContext(depth) {
            this.lastContext = depth;
          },

          // [pushContext]
          //
          // On stack, before: ...
          // On stack, after: currentContext, ...
          //
          // Pushes the value of the current context onto the stack.
          pushContext: function pushContext() {
            this.pushStackLiteral(this.contextName(this.lastContext));
          },

          // [lookupOnContext]
          //
          // On stack, before: ...
          // On stack, after: currentContext[name], ...
          //
          // Looks up the value of `name` on the current context and pushes
          // it onto the stack.
          lookupOnContext: function lookupOnContext(
            parts,
            falsy,
            strict,
            scoped
          ) {
            var i = 0;

            if (!scoped && this.options.compat && !this.lastContext) {
              // The depthed query is expected to handle the undefined logic for the root level that
              // is implemented below, so we evaluate that directly in compat mode
              this.push(this.depthedLookup(parts[i++]));
            } else {
              this.pushContext();
            }

            this.resolvePath("context", parts, i, falsy, strict);
          },

          // [lookupBlockParam]
          //
          // On stack, before: ...
          // On stack, after: blockParam[name], ...
          //
          // Looks up the value of `parts` on the given block param and pushes
          // it onto the stack.
          lookupBlockParam: function lookupBlockParam(blockParamId, parts) {
            this.useBlockParams = true;

            this.push([
              "blockParams[",
              blockParamId[0],
              "][",
              blockParamId[1],
              "]",
            ]);
            this.resolvePath("context", parts, 1);
          },

          // [lookupData]
          //
          // On stack, before: ...
          // On stack, after: data, ...
          //
          // Push the data lookup operator
          lookupData: function lookupData(depth, parts, strict) {
            if (!depth) {
              this.pushStackLiteral("data");
            } else {
              this.pushStackLiteral("container.data(data, " + depth + ")");
            }

            this.resolvePath("data", parts, 0, true, strict);
          },

          resolvePath: function resolvePath(type, parts, i, falsy, strict) {
            // istanbul ignore next

            var _this = this;

            if (this.options.strict || this.options.assumeObjects) {
              this.push(
                strictLookup(this.options.strict && strict, this, parts, type)
              );
              return;
            }

            var len = parts.length;
            for (; i < len; i++) {
              /* eslint-disable no-loop-func */
              this.replaceStack(function (current) {
                var lookup = _this.nameLookup(current, parts[i], type);
                // We want to ensure that zero and false are handled properly if the context (falsy flag)
                // needs to have the special handling for these values.
                if (!falsy) {
                  return [" != null ? ", lookup, " : ", current];
                } else {
                  // Otherwise we can use generic falsy handling
                  return [" && ", lookup];
                }
              });
              /* eslint-enable no-loop-func */
            }
          },

          // [resolvePossibleLambda]
          //
          // On stack, before: value, ...
          // On stack, after: resolved value, ...
          //
          // If the `value` is a lambda, replace it on the stack by
          // the return value of the lambda
          resolvePossibleLambda: function resolvePossibleLambda() {
            this.push([
              this.aliasable("container.lambda"),
              "(",
              this.popStack(),
              ", ",
              this.contextName(0),
              ")",
            ]);
          },

          // [pushStringParam]
          //
          // On stack, before: ...
          // On stack, after: string, currentContext, ...
          //
          // This opcode is designed for use in string mode, which
          // provides the string value of a parameter along with its
          // depth rather than resolving it immediately.
          pushStringParam: function pushStringParam(string, type) {
            this.pushContext();
            this.pushString(type);

            // If it's a subexpression, the string result
            // will be pushed after this opcode.
            if (type !== "SubExpression") {
              if (typeof string === "string") {
                this.pushString(string);
              } else {
                this.pushStackLiteral(string);
              }
            }
          },

          emptyHash: function emptyHash(omitEmpty) {
            if (this.trackIds) {
              this.push("{}"); // hashIds
            }
            if (this.stringParams) {
              this.push("{}"); // hashContexts
              this.push("{}"); // hashTypes
            }
            this.pushStackLiteral(omitEmpty ? "undefined" : "{}");
          },
          pushHash: function pushHash() {
            if (this.hash) {
              this.hashes.push(this.hash);
            }
            this.hash = { values: [], types: [], contexts: [], ids: [] };
          },
          popHash: function popHash() {
            var hash = this.hash;
            this.hash = this.hashes.pop();

            if (this.trackIds) {
              this.push(this.objectLiteral(hash.ids));
            }
            if (this.stringParams) {
              this.push(this.objectLiteral(hash.contexts));
              this.push(this.objectLiteral(hash.types));
            }

            this.push(this.objectLiteral(hash.values));
          },

          // [pushString]
          //
          // On stack, before: ...
          // On stack, after: quotedString(string), ...
          //
          // Push a quoted version of `string` onto the stack
          pushString: function pushString(string) {
            this.pushStackLiteral(this.quotedString(string));
          },

          // [pushLiteral]
          //
          // On stack, before: ...
          // On stack, after: value, ...
          //
          // Pushes a value onto the stack. This operation prevents
          // the compiler from creating a temporary variable to hold
          // it.
          pushLiteral: function pushLiteral(value) {
            this.pushStackLiteral(value);
          },

          // [pushProgram]
          //
          // On stack, before: ...
          // On stack, after: program(guid), ...
          //
          // Push a program expression onto the stack. This takes
          // a compile-time guid and converts it into a runtime-accessible
          // expression.
          pushProgram: function pushProgram(guid) {
            if (guid != null) {
              this.pushStackLiteral(this.programExpression(guid));
            } else {
              this.pushStackLiteral(null);
            }
          },

          // [registerDecorator]
          //
          // On stack, before: hash, program, params..., ...
          // On stack, after: ...
          //
          // Pops off the decorator's parameters, invokes the decorator,
          // and inserts the decorator into the decorators list.
          registerDecorator: function registerDecorator(paramSize, name) {
            var foundDecorator = this.nameLookup(
                "decorators",
                name,
                "decorator"
              ),
              options = this.setupHelperArgs(name, paramSize);

            this.decorators.push([
              "fn = ",
              this.decorators.functionCall(foundDecorator, "", [
                "fn",
                "props",
                "container",
                options,
              ]),
              " || fn;",
            ]);
          },

          // [invokeHelper]
          //
          // On stack, before: hash, inverse, program, params..., ...
          // On stack, after: result of helper invocation
          //
          // Pops off the helper's parameters, invokes the helper,
          // and pushes the helper's return value onto the stack.
          //
          // If the helper is not found, `helperMissing` is called.
          invokeHelper: function invokeHelper(paramSize, name, isSimple) {
            var nonHelper = this.popStack(),
              helper = this.setupHelper(paramSize, name),
              simple = isSimple ? [helper.name, " || "] : "";

            var lookup = ["("].concat(simple, nonHelper);
            if (!this.options.strict) {
              lookup.push(" || ", this.aliasable("helpers.helperMissing"));
            }
            lookup.push(")");

            this.push(
              this.source.functionCall(lookup, "call", helper.callParams)
            );
          },

          // [invokeKnownHelper]
          //
          // On stack, before: hash, inverse, program, params..., ...
          // On stack, after: result of helper invocation
          //
          // This operation is used when the helper is known to exist,
          // so a `helperMissing` fallback is not required.
          invokeKnownHelper: function invokeKnownHelper(paramSize, name) {
            var helper = this.setupHelper(paramSize, name);
            this.push(
              this.source.functionCall(helper.name, "call", helper.callParams)
            );
          },

          // [invokeAmbiguous]
          //
          // On stack, before: hash, inverse, program, params..., ...
          // On stack, after: result of disambiguation
          //
          // This operation is used when an expression like `{{foo}}`
          // is provided, but we don't know at compile-time whether it
          // is a helper or a path.
          //
          // This operation emits more code than the other options,
          // and can be avoided by passing the `knownHelpers` and
          // `knownHelpersOnly` flags at compile-time.
          invokeAmbiguous: function invokeAmbiguous(name, helperCall) {
            this.useRegister("helper");

            var nonHelper = this.popStack();

            this.emptyHash();
            var helper = this.setupHelper(0, name, helperCall);

            var helperName = (this.lastHelper = this.nameLookup(
              "helpers",
              name,
              "helper"
            ));

            var lookup = [
              "(",
              "(helper = ",
              helperName,
              " || ",
              nonHelper,
              ")",
            ];
            if (!this.options.strict) {
              lookup[0] = "(helper = ";
              lookup.push(
                " != null ? helper : ",
                this.aliasable("helpers.helperMissing")
              );
            }

            this.push([
              "(",
              lookup,
              helper.paramsInit ? ["),(", helper.paramsInit] : [],
              "),",
              "(typeof helper === ",
              this.aliasable('"function"'),
              " ? ",
              this.source.functionCall("helper", "call", helper.callParams),
              " : helper))",
            ]);
          },

          // [invokePartial]
          //
          // On stack, before: context, ...
          // On stack after: result of partial invocation
          //
          // This operation pops off a context, invokes a partial with that context,
          // and pushes the result of the invocation back.
          invokePartial: function invokePartial(isDynamic, name, indent) {
            var params = [],
              options = this.setupParams(name, 1, params);

            if (isDynamic) {
              name = this.popStack();
              delete options.name;
            }

            if (indent) {
              options.indent = JSON.stringify(indent);
            }
            options.helpers = "helpers";
            options.partials = "partials";
            options.decorators = "container.decorators";

            if (!isDynamic) {
              params.unshift(this.nameLookup("partials", name, "partial"));
            } else {
              params.unshift(name);
            }

            if (this.options.compat) {
              options.depths = "depths";
            }
            options = this.objectLiteral(options);
            params.push(options);

            this.push(
              this.source.functionCall("container.invokePartial", "", params)
            );
          },

          // [assignToHash]
          //
          // On stack, before: value, ..., hash, ...
          // On stack, after: ..., hash, ...
          //
          // Pops a value off the stack and assigns it to the current hash
          assignToHash: function assignToHash(key) {
            var value = this.popStack(),
              context = undefined,
              type = undefined,
              id = undefined;

            if (this.trackIds) {
              id = this.popStack();
            }
            if (this.stringParams) {
              type = this.popStack();
              context = this.popStack();
            }

            var hash = this.hash;
            if (context) {
              hash.contexts[key] = context;
            }
            if (type) {
              hash.types[key] = type;
            }
            if (id) {
              hash.ids[key] = id;
            }
            hash.values[key] = value;
          },

          pushId: function pushId(type, name, child) {
            if (type === "BlockParam") {
              this.pushStackLiteral(
                "blockParams[" +
                  name[0] +
                  "].path[" +
                  name[1] +
                  "]" +
                  (child ? " + " + JSON.stringify("." + child) : "")
              );
            } else if (type === "PathExpression") {
              this.pushString(name);
            } else if (type === "SubExpression") {
              this.pushStackLiteral("true");
            } else {
              this.pushStackLiteral("null");
            }
          },

          // HELPERS

          compiler: JavaScriptCompiler,

          compileChildren: function compileChildren(environment, options) {
            var children = environment.children,
              child = undefined,
              compiler = undefined;

            for (var i = 0, l = children.length; i < l; i++) {
              child = children[i];
              compiler = new this.compiler(); // eslint-disable-line new-cap

              var index = this.matchExistingProgram(child);

              if (index == null) {
                this.context.programs.push(""); // Placeholder to prevent name conflicts for nested children
                index = this.context.programs.length;
                child.index = index;
                child.name = "program" + index;
                this.context.programs[index] = compiler.compile(
                  child,
                  options,
                  this.context,
                  !this.precompile
                );
                this.context.decorators[index] = compiler.decorators;
                this.context.environments[index] = child;

                this.useDepths = this.useDepths || compiler.useDepths;
                this.useBlockParams =
                  this.useBlockParams || compiler.useBlockParams;
              } else {
                child.index = index;
                child.name = "program" + index;

                this.useDepths = this.useDepths || child.useDepths;
                this.useBlockParams =
                  this.useBlockParams || child.useBlockParams;
              }
            }
          },
          matchExistingProgram: function matchExistingProgram(child) {
            for (
              var i = 0, len = this.context.environments.length;
              i < len;
              i++
            ) {
              var environment = this.context.environments[i];
              if (environment && environment.equals(child)) {
                return i;
              }
            }
          },

          programExpression: function programExpression(guid) {
            var child = this.environment.children[guid],
              programParams = [child.index, "data", child.blockParams];

            if (this.useBlockParams || this.useDepths) {
              programParams.push("blockParams");
            }
            if (this.useDepths) {
              programParams.push("depths");
            }

            return "container.program(" + programParams.join(", ") + ")";
          },

          useRegister: function useRegister(name) {
            if (!this.registers[name]) {
              this.registers[name] = true;
              this.registers.list.push(name);
            }
          },

          push: function push(expr) {
            if (!(expr instanceof Literal)) {
              expr = this.source.wrap(expr);
            }

            this.inlineStack.push(expr);
            return expr;
          },

          pushStackLiteral: function pushStackLiteral(item) {
            this.push(new Literal(item));
          },

          pushSource: function pushSource(source) {
            if (this.pendingContent) {
              this.source.push(
                this.appendToBuffer(
                  this.source.quotedString(this.pendingContent),
                  this.pendingLocation
                )
              );
              this.pendingContent = undefined;
            }

            if (source) {
              this.source.push(source);
            }
          },

          replaceStack: function replaceStack(callback) {
            var prefix = ["("],
              stack = undefined,
              createdStack = undefined,
              usedLiteral = undefined;

            /* istanbul ignore next */
            if (!this.isInline()) {
              throw new _exception2["default"]("replaceStack on non-inline");
            }

            // We want to merge the inline statement into the replacement statement via ','
            var top = this.popStack(true);

            if (top instanceof Literal) {
              // Literals do not need to be inlined
              stack = [top.value];
              prefix = ["(", stack];
              usedLiteral = true;
            } else {
              // Get or create the current stack name for use by the inline
              createdStack = true;
              var _name = this.incrStack();

              prefix = ["((", this.push(_name), " = ", top, ")"];
              stack = this.topStack();
            }

            var item = callback.call(this, stack);

            if (!usedLiteral) {
              this.popStack();
            }
            if (createdStack) {
              this.stackSlot--;
            }
            this.push(prefix.concat(item, ")"));
          },

          incrStack: function incrStack() {
            this.stackSlot++;
            if (this.stackSlot > this.stackVars.length) {
              this.stackVars.push("stack" + this.stackSlot);
            }
            return this.topStackName();
          },
          topStackName: function topStackName() {
            return "stack" + this.stackSlot;
          },
          flushInline: function flushInline() {
            var inlineStack = this.inlineStack;
            this.inlineStack = [];
            for (var i = 0, len = inlineStack.length; i < len; i++) {
              var entry = inlineStack[i];
              /* istanbul ignore if */
              if (entry instanceof Literal) {
                this.compileStack.push(entry);
              } else {
                var stack = this.incrStack();
                this.pushSource([stack, " = ", entry, ";"]);
                this.compileStack.push(stack);
              }
            }
          },
          isInline: function isInline() {
            return this.inlineStack.length;
          },

          popStack: function popStack(wrapped) {
            var inline = this.isInline(),
              item = (inline ? this.inlineStack : this.compileStack).pop();

            if (!wrapped && item instanceof Literal) {
              return item.value;
            } else {
              if (!inline) {
                /* istanbul ignore next */
                if (!this.stackSlot) {
                  throw new _exception2["default"]("Invalid stack pop");
                }
                this.stackSlot--;
              }
              return item;
            }
          },

          topStack: function topStack() {
            var stack = this.isInline() ? this.inlineStack : this.compileStack,
              item = stack[stack.length - 1];

            /* istanbul ignore if */
            if (item instanceof Literal) {
              return item.value;
            } else {
              return item;
            }
          },

          contextName: function contextName(context) {
            if (this.useDepths && context) {
              return "depths[" + context + "]";
            } else {
              return "depth" + context;
            }
          },

          quotedString: function quotedString(str) {
            return this.source.quotedString(str);
          },

          objectLiteral: function objectLiteral(obj) {
            return this.source.objectLiteral(obj);
          },

          aliasable: function aliasable(name) {
            var ret = this.aliases[name];
            if (ret) {
              ret.referenceCount++;
              return ret;
            }

            ret = this.aliases[name] = this.source.wrap(name);
            ret.aliasable = true;
            ret.referenceCount = 1;

            return ret;
          },

          setupHelper: function setupHelper(paramSize, name, blockHelper) {
            var params = [],
              paramsInit = this.setupHelperArgs(
                name,
                paramSize,
                params,
                blockHelper
              );
            var foundHelper = this.nameLookup("helpers", name, "helper"),
              callContext = this.aliasable(
                this.contextName(0) +
                  " != null ? " +
                  this.contextName(0) +
                  " : {}"
              );

            return {
              params: params,
              paramsInit: paramsInit,
              name: foundHelper,
              callParams: [callContext].concat(params),
            };
          },

          setupParams: function setupParams(helper, paramSize, params) {
            var options = {},
              contexts = [],
              types = [],
              ids = [],
              objectArgs = !params,
              param = undefined;

            if (objectArgs) {
              params = [];
            }

            options.name = this.quotedString(helper);
            options.hash = this.popStack();

            if (this.trackIds) {
              options.hashIds = this.popStack();
            }
            if (this.stringParams) {
              options.hashTypes = this.popStack();
              options.hashContexts = this.popStack();
            }

            var inverse = this.popStack(),
              program = this.popStack();

            // Avoid setting fn and inverse if neither are set. This allows
            // helpers to do a check for `if (options.fn)`
            if (program || inverse) {
              options.fn = program || "container.noop";
              options.inverse = inverse || "container.noop";
            }

            // The parameters go on to the stack in order (making sure that they are evaluated in order)
            // so we need to pop them off the stack in reverse order
            var i = paramSize;
            while (i--) {
              param = this.popStack();
              params[i] = param;

              if (this.trackIds) {
                ids[i] = this.popStack();
              }
              if (this.stringParams) {
                types[i] = this.popStack();
                contexts[i] = this.popStack();
              }
            }

            if (objectArgs) {
              options.args = this.source.generateArray(params);
            }

            if (this.trackIds) {
              options.ids = this.source.generateArray(ids);
            }
            if (this.stringParams) {
              options.types = this.source.generateArray(types);
              options.contexts = this.source.generateArray(contexts);
            }

            if (this.options.data) {
              options.data = "data";
            }
            if (this.useBlockParams) {
              options.blockParams = "blockParams";
            }
            return options;
          },

          setupHelperArgs: function setupHelperArgs(
            helper,
            paramSize,
            params,
            useRegister
          ) {
            var options = this.setupParams(helper, paramSize, params);
            options = this.objectLiteral(options);
            if (useRegister) {
              this.useRegister("options");
              params.push("options");
              return ["options=", options];
            } else if (params) {
              params.push(options);
              return "";
            } else {
              return options;
            }
          },
        };

        (function () {
          var reservedWords = (
            "break else new var" +
            " case finally return void" +
            " catch for switch while" +
            " continue function this with" +
            " default if throw" +
            " delete in try" +
            " do instanceof typeof" +
            " abstract enum int short" +
            " boolean export interface static" +
            " byte extends long super" +
            " char final native synchronized" +
            " class float package throws" +
            " const goto private transient" +
            " debugger implements protected volatile" +
            " double import public let yield await" +
            " null true false"
          ).split(" ");

          var compilerWords = (JavaScriptCompiler.RESERVED_WORDS = {});

          for (var i = 0, l = reservedWords.length; i < l; i++) {
            compilerWords[reservedWords[i]] = true;
          }
        })();

        JavaScriptCompiler.isValidJavaScriptVariableName = function (name) {
          return (
            !JavaScriptCompiler.RESERVED_WORDS[name] &&
            /^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(name)
          );
        };

        function strictLookup(requireTerminal, compiler, parts, type) {
          var stack = compiler.popStack(),
            i = 0,
            len = parts.length;
          if (requireTerminal) {
            len--;
          }

          for (; i < len; i++) {
            stack = compiler.nameLookup(stack, parts[i], type);
          }

          if (requireTerminal) {
            return [
              compiler.aliasable("container.strict"),
              "(",
              stack,
              ", ",
              compiler.quotedString(parts[i]),
              ")",
            ];
          } else {
            return stack;
          }
        }

        exports["default"] = JavaScriptCompiler;
        module.exports = exports["default"];

        /***/
      },
      /* 29 */
      /***/ function (module, exports, __webpack_require__) {
        /* global define */
        "use strict";

        exports.__esModule = true;

        var _utils = __webpack_require__(5);

        var SourceNode = undefined;

        try {
          /* istanbul ignore next */
          if (false) {
            // We don't support this in AMD environments. For these environments, we asusme that
            // they are running on the browser and thus have no need for the source-map library.
            var SourceMap = require("source-map");
            SourceNode = SourceMap.SourceNode;
          }
        } catch (err) {}
        /* NOP */

        /* istanbul ignore if: tested but not covered in istanbul due to dist build  */
        if (!SourceNode) {
          SourceNode = function (line, column, srcFile, chunks) {
            this.src = "";
            if (chunks) {
              this.add(chunks);
            }
          };
          /* istanbul ignore next */
          SourceNode.prototype = {
            add: function add(chunks) {
              if (_utils.isArray(chunks)) {
                chunks = chunks.join("");
              }
              this.src += chunks;
            },
            prepend: function prepend(chunks) {
              if (_utils.isArray(chunks)) {
                chunks = chunks.join("");
              }
              this.src = chunks + this.src;
            },
            toStringWithSourceMap: function toStringWithSourceMap() {
              return { code: this.toString() };
            },
            toString: function toString() {
              return this.src;
            },
          };
        }

        function castChunk(chunk, codeGen, loc) {
          if (_utils.isArray(chunk)) {
            var ret = [];

            for (var i = 0, len = chunk.length; i < len; i++) {
              ret.push(codeGen.wrap(chunk[i], loc));
            }
            return ret;
          } else if (typeof chunk === "boolean" || typeof chunk === "number") {
            // Handle primitives that the SourceNode will throw up on
            return chunk + "";
          }
          return chunk;
        }

        function CodeGen(srcFile) {
          this.srcFile = srcFile;
          this.source = [];
        }

        CodeGen.prototype = {
          isEmpty: function isEmpty() {
            return !this.source.length;
          },
          prepend: function prepend(source, loc) {
            this.source.unshift(this.wrap(source, loc));
          },
          push: function push(source, loc) {
            this.source.push(this.wrap(source, loc));
          },

          merge: function merge() {
            var source = this.empty();
            this.each(function (line) {
              source.add(["  ", line, "\n"]);
            });
            return source;
          },

          each: function each(iter) {
            for (var i = 0, len = this.source.length; i < len; i++) {
              iter(this.source[i]);
            }
          },

          empty: function empty() {
            var loc = this.currentLocation || { start: {} };
            return new SourceNode(
              loc.start.line,
              loc.start.column,
              this.srcFile
            );
          },
          wrap: function wrap(chunk) {
            var loc =
              arguments.length <= 1 || arguments[1] === undefined
                ? this.currentLocation || { start: {} }
                : arguments[1];

            if (chunk instanceof SourceNode) {
              return chunk;
            }

            chunk = castChunk(chunk, this, loc);

            return new SourceNode(
              loc.start.line,
              loc.start.column,
              this.srcFile,
              chunk
            );
          },

          functionCall: function functionCall(fn, type, params) {
            params = this.generateList(params);
            return this.wrap([fn, type ? "." + type + "(" : "(", params, ")"]);
          },

          quotedString: function quotedString(str) {
            return (
              '"' +
              (str + "")
                .replace(/\\/g, "\\\\")
                .replace(/"/g, '\\"')
                .replace(/\n/g, "\\n")
                .replace(/\r/g, "\\r")
                .replace(/\u2028/g, "\\u2028") // Per Ecma-262 7.3 + 7.8.4
                .replace(/\u2029/g, "\\u2029") +
              '"'
            );
          },

          objectLiteral: function objectLiteral(obj) {
            var pairs = [];

            for (var key in obj) {
              if (obj.hasOwnProperty(key)) {
                var value = castChunk(obj[key], this);
                if (value !== "undefined") {
                  pairs.push([this.quotedString(key), ":", value]);
                }
              }
            }

            var ret = this.generateList(pairs);
            ret.prepend("{");
            ret.add("}");
            return ret;
          },

          generateList: function generateList(entries) {
            var ret = this.empty();

            for (var i = 0, len = entries.length; i < len; i++) {
              if (i) {
                ret.add(",");
              }

              ret.add(castChunk(entries[i], this));
            }

            return ret;
          },

          generateArray: function generateArray(entries) {
            var ret = this.generateList(entries);
            ret.prepend("[");
            ret.add("]");

            return ret;
          },
        };

        exports["default"] = CodeGen;
        module.exports = exports["default"];

        /***/
      },
      /******/
    ]
  );
});
(function ($, window, undefined) {
  $.fn.prepareTransition = function () {
    return this.each(function () {
      var el = $(this),
        props = [
          "transition-duration",
          "-moz-transition-duration",
          "-webkit-transition-duration",
          "-o-transition-duration",
        ],
        duration = 0;
      // Check the various CSS properties to see if a duration has been set
      for (var i = 0, l = props.length; i < l; i++) {
        var prop = props[i],
          value = el.css(prop);
        if (value) {
          duration = 1000 * parseFloat(value);
          break;
        }
      }

      // If there is a duration, add the class and setup a timer to remove it
      if (duration != 0) {
        var timer = el.data("transition-timer"),
          timeoutAt = el.data("transition-timeout-at"),
          finishAt = +new Date() + duration;
        // Add the class
        el.addClass("is-transitioning");
        el[0].offsetWidth; // check offsetWidth to force style rendering

        // Create a new timer to remove the class if necessary
        if (timer === undefined || finishAt > timeoutAt) {
          clearTimeout(timer);
          el.data(
            "transition-timer",
            setTimeout(function () {
              el.removeClass("is-transitioning");
            }, duration)
          );
          el.data("transition-timeout-at", finishAt);
        }
      }
    });
  };
})(jQuery, this);

/*!
 * hoverIntent v1.10.2 // 2020.04.28 // jQuery v1.7.0+
 * http://briancherne.github.io/jquery-hoverIntent/
 *
 * You may use hoverIntent under the terms of the MIT license. Basically that
 * means you are free to use hoverIntent as long as this header is left intact.
 * Copyright 2007-2019 Brian Cherne
 */

/**
 * hoverIntent is similar to jQuery's built-in "hover" method except that
 * instead of firing the handlerIn function immediately, hoverIntent checks
 * to see if the user's mouse has slowed down (beneath the sensitivity
 * threshold) before firing the event. The handlerOut function is only
 * called after a matching handlerIn.
 *
 * // basic usage ... just like .hover()
 * .hoverIntent( handlerIn, handlerOut )
 * .hoverIntent( handlerInOut )
 *
 * // basic usage ... with event delegation!
 * .hoverIntent( handlerIn, handlerOut, selector )
 * .hoverIntent( handlerInOut, selector )
 *
 * // using a basic configuration object
 * .hoverIntent( config )
 *
 * @param  handlerIn   function OR configuration object
 * @param  handlerOut  function OR selector for delegation OR undefined
 * @param  selector    selector OR undefined
 * @author Brian Cherne <brian(at)cherne(dot)net>
 */

(function (factory) {
  "use strict";
  if (typeof define === "function" && define.amd) {
    define(["jquery"], factory);
  } else if (typeof module === "object" && module.exports) {
    module.exports = factory(require("jquery"));
  } else if (jQuery && !jQuery.fn.hoverIntent) {
    factory(jQuery);
  }
})(function ($) {
  "use strict";

  // default configuration values
  var _cfg = {
    interval: 100,
    sensitivity: 6,
    timeout: 0,
  };

  // counter used to generate an ID for each instance
  var INSTANCE_COUNT = 0;

  // current X and Y position of mouse, updated during mousemove tracking (shared across instances)
  var cX, cY;

  // saves the current pointer position coordinates based on the given mousemove event
  var track = function (ev) {
    cX = ev.pageX;
    cY = ev.pageY;
  };

  // compares current and previous mouse positions
  var compare = function (ev, $el, s, cfg) {
    // compare mouse positions to see if pointer has slowed enough to trigger `over` function
    if (
      Math.sqrt((s.pX - cX) * (s.pX - cX) + (s.pY - cY) * (s.pY - cY)) <
      cfg.sensitivity
    ) {
      $el.off(s.event, track);
      delete s.timeoutId;
      // set hoverIntent state as active for this element (permits `out` handler to trigger)
      s.isActive = true;
      // overwrite old mouseenter event coordinates with most recent pointer position
      ev.pageX = cX;
      ev.pageY = cY;
      // clear coordinate data from state object
      delete s.pX;
      delete s.pY;
      return cfg.over.apply($el[0], [ev]);
    } else {
      // set previous coordinates for next comparison
      s.pX = cX;
      s.pY = cY;
      // use self-calling timeout, guarantees intervals are spaced out properly (avoids JavaScript timer bugs)
      s.timeoutId = setTimeout(function () {
        compare(ev, $el, s, cfg);
      }, cfg.interval);
    }
  };

  // triggers given `out` function at configured `timeout` after a mouseleave and clears state
  var delay = function (ev, $el, s, out) {
    var data = $el.data("hoverIntent");
    if (data) {
      delete data[s.id];
    }
    return out.apply($el[0], [ev]);
  };

  // checks if `value` is a function
  var isFunction = function (value) {
    return typeof value === "function";
  };

  $.fn.hoverIntent = function (handlerIn, handlerOut, selector) {
    // instance ID, used as a key to store and retrieve state information on an element
    var instanceId = INSTANCE_COUNT++;

    // extend the default configuration and parse parameters
    var cfg = $.extend({}, _cfg);
    if ($.isPlainObject(handlerIn)) {
      cfg = $.extend(cfg, handlerIn);
      if (!isFunction(cfg.out)) {
        cfg.out = cfg.over;
      }
    } else if (isFunction(handlerOut)) {
      cfg = $.extend(cfg, {
        over: handlerIn,
        out: handlerOut,
        selector: selector,
      });
    } else {
      cfg = $.extend(cfg, {
        over: handlerIn,
        out: handlerIn,
        selector: handlerOut,
      });
    }

    // A private function for handling mouse 'hovering'
    var handleHover = function (e) {
      // cloned event to pass to handlers (copy required for event object to be passed in IE)
      var ev = $.extend({}, e);

      // the current target of the mouse event, wrapped in a jQuery object
      var $el = $(this);

      // read hoverIntent data from element (or initialize if not present)
      var hoverIntentData = $el.data("hoverIntent");
      if (!hoverIntentData) {
        $el.data("hoverIntent", (hoverIntentData = {}));
      }

      // read per-instance state from element (or initialize if not present)
      var state = hoverIntentData[instanceId];
      if (!state) {
        hoverIntentData[instanceId] = state = { id: instanceId };
      }

      // state properties:
      // id = instance ID, used to clean up data
      // timeoutId = timeout ID, reused for tracking mouse position and delaying "out" handler
      // isActive = plugin state, true after `over` is called just until `out` is called
      // pX, pY = previously-measured pointer coordinates, updated at each polling interval
      // event = string representing the namespaced event used for mouse tracking

      // clear any existing timeout
      if (state.timeoutId) {
        state.timeoutId = clearTimeout(state.timeoutId);
      }

      // namespaced event used to register and unregister mousemove tracking
      var mousemove = (state.event =
        "mousemove.hoverIntent.hoverIntent" + instanceId);

      // handle the event, based on its type
      if (e.type === "mouseenter") {
        // do nothing if already active
        if (state.isActive) {
          return;
        }
        // set "previous" X and Y position based on initial entry point
        state.pX = ev.pageX;
        state.pY = ev.pageY;
        // update "current" X and Y position based on mousemove
        $el.off(mousemove, track).on(mousemove, track);
        // start polling interval (self-calling timeout) to compare mouse coordinates over time
        state.timeoutId = setTimeout(function () {
          compare(ev, $el, state, cfg);
        }, cfg.interval);
      } else {
        // "mouseleave"
        // do nothing if not already active
        if (!state.isActive) {
          return;
        }
        // unbind expensive mousemove event
        $el.off(mousemove, track);
        // if hoverIntent state is true, then call the mouseOut function after the specified delay
        state.timeoutId = setTimeout(function () {
          delay(ev, $el, state, cfg.out);
        }, cfg.timeout);
      }
    };

    // listen for mouseenter and mouseleave
    return this.on(
      {
        "mouseenter.hoverIntent": handleHover,
        "mouseleave.hoverIntent": handleHover,
      },
      cfg.selector
    );
  };
});

/*
 * jQuery selectBox - A cosmetic, styleable replacement for SELECT elements
 *
 * Licensed under the MIT license: http://opensource.org/licenses/MIT
 *
 * v1.2.0
 *
 * https://github.com/marcj/jquery-selectBox
 */
(function ($) {
  /**
   * SelectBox class.
   *
   * @param {HTMLElement|jQuery} select If it's a jQuery object, we use the first element.
   * @param {Object}             options
   * @constructor
   */
  var SelectBox = (this.SelectBox = function (select, options) {
    if (select instanceof jQuery) {
      if (select.length > 0) {
        select = select[0];
      } else {
        return;
      }
    }

    this.typeTimer = null;
    this.typeSearch = "";
    this.isMac = navigator.platform.match(/mac/i);
    options = "object" === typeof options ? options : {};
    this.selectElement = select;

    // Disable for iOS devices (their native controls are more suitable for a touch device)
    if (
      !options.mobile &&
      navigator.userAgent.match(/iPad|iPhone|Android|IEMobile|BlackBerry/i)
    ) {
      return false;
    }

    // Element must be a select control
    if ("select" !== select.tagName.toLowerCase()) {
      return false;
    }

    this.init(options);
  });

  /**
   * @type {String}
   */
  SelectBox.prototype.version = "1.2.0";

  /**
   * @param {Object} options
   *
   * @returns {Boolean}
   */
  SelectBox.prototype.init = function (options) {
    var select = $(this.selectElement);
    if (select.data("selectBox-control")) {
      return false;
    }

    var control = $('<a class="selectBox" />'),
      inline = select.attr("multiple") || parseInt(select.attr("size")) > 1,
      settings = options || {},
      tabIndex = parseInt(select.prop("tabindex")) || 0,
      self = this;

    control
      .width(select.outerWidth())
      .addClass(select.attr("class"))
      .attr("title", select.attr("title") || "")
      .attr("tabindex", tabIndex)
      .css("display", "inline-block")
      .bind("focus.selectBox", function () {
        if (
          this !== document.activeElement &&
          document.body !== document.activeElement
        ) {
          $(document.activeElement).blur();
        }
        if (control.hasClass("selectBox-active")) {
          return;
        }
        control.addClass("selectBox-active");
        select.trigger("focus");
      })
      .bind("blur.selectBox", function () {
        if (!control.hasClass("selectBox-active")) {
          return;
        }
        control.removeClass("selectBox-active");
        select.trigger("blur");
      });

    if (!$(window).data("selectBox-bindings")) {
      $(window)
        .data("selectBox-bindings", true)
        .bind("scroll.selectBox", this.hideMenus)
        .bind("resize.selectBox", this.hideMenus);
    }

    if (select.attr("disabled")) {
      control.addClass("selectBox-disabled");
    }

    // Focus on control when label is clicked
    select.bind("click.selectBox", function (event) {
      control.focus();
      event.preventDefault();
    });

    // Generate control
    if (inline) {
      // Inline controls
      options = this.getOptions("inline");

      control
        .append(options)
        .data("selectBox-options", options)
        .addClass("selectBox-inline selectBox-menuShowing")
        .bind("keydown.selectBox", function (event) {
          self.handleKeyDown(event);
        })
        .bind("keypress.selectBox", function (event) {
          self.handleKeyPress(event);
        })
        .bind("mousedown.selectBox", function (event) {
          if (1 !== event.which) {
            return;
          }
          if ($(event.target).is("A.selectBox-inline")) {
            event.preventDefault();
          }
          if (!control.hasClass("selectBox-focus")) {
            control.focus();
          }
        })
        .insertAfter(select);

      // Auto-height based on size attribute
      if (!select[0].style.height) {
        var size = select.attr("size") ? parseInt(select.attr("size")) : 5;
        // Draw a dummy control off-screen, measure, and remove it
        var tmp = control
          .clone()
          .removeAttr("id")
          .css({
            position: "absolute",
            top: "-9999em",
          })
          .show()
          .appendTo("body");
        tmp.find(".selectBox-options").html("<li><a>\u00A0</a></li>");
        var optionHeight = parseInt(
          tmp.find(".selectBox-options A:first").html("&nbsp;").outerHeight()
        );
        tmp.remove();
        control.height(optionHeight * size);
      }
      this.disableSelection(control);
    } else {
      // Dropdown controls
      var label = $('<span class="selectBox-label" />'),
        arrow = $('<span class="selectBox-arrow" />');

      // Update label
      label.attr("class", this.getLabelClass()).text(this.getLabelText());
      options = this.getOptions("dropdown");
      options.appendTo("BODY");

      control
        .data("selectBox-options", options)
        .addClass("selectBox-dropdown")
        .append(label)
        .append(arrow)
        .bind("mousedown.selectBox", function (event) {
          if (1 === event.which) {
            if (control.hasClass("selectBox-menuShowing")) {
              self.hideMenus();
            } else {
              event.stopPropagation();
              // Webkit fix to prevent premature selection of options
              options
                .data("selectBox-down-at-x", event.screenX)
                .data("selectBox-down-at-y", event.screenY);
              self.showMenu();
            }
          }
        })
        .bind("keydown.selectBox", function (event) {
          self.handleKeyDown(event);
        })
        .bind("keypress.selectBox", function (event) {
          self.handleKeyPress(event);
        })
        .bind("open.selectBox", function (event, triggerData) {
          if (triggerData && triggerData._selectBox === true) {
            return;
          }
          self.showMenu();
        })
        .bind("close.selectBox", function (event, triggerData) {
          if (triggerData && triggerData._selectBox === true) {
            return;
          }
          self.hideMenus();
        })
        .insertAfter(select);

      // Set label width
      var labelWidth =
        control.width() -
          arrow.outerWidth() -
          parseInt(label.css("paddingLeft")) ||
        0 - parseInt(label.css("paddingRight")) ||
        0;

      label.width(labelWidth);
      this.disableSelection(control);
    }
    // Store data for later use and show the control
    select
      .addClass("selectBox")
      .data("selectBox-control", control)
      .data("selectBox-settings", settings)
      .hide();
  };

  /**
   * @param {String} type 'inline'|'dropdown'
   * @returns {jQuery}
   */
  SelectBox.prototype.getOptions = function (type) {
    var options;
    var select = $(this.selectElement);
    var self = this;
    // Private function to handle recursion in the getOptions function.
    var _getOptions = function (select, options) {
      // Loop through the set in order of element children.
      select.children("OPTION, OPTGROUP").each(function () {
        // If the element is an option, add it to the list.
        if ($(this).is("OPTION")) {
          // Check for a value in the option found.
          if ($(this).length > 0) {
            // Create an option form the found element.
            self.generateOptions($(this), options);
          } else {
            // No option information found, so add an empty.
            options.append("<li>\u00A0</li>");
          }
        } else {
          // If the element is an option group, add the group and call this function on it.
          var optgroup = $('<li class="selectBox-optgroup" />');
          optgroup.text($(this).attr("label"));
          options.append(optgroup);
          options = _getOptions($(this), options);
        }
      });
      // Return the built strin
      return options;
    };

    switch (type) {
      case "inline":
        options = $('<ul class="selectBox-options" />');
        options = _getOptions(select, options);
        options
          .find("A")
          .bind("mouseover.selectBox", function (event) {
            self.addHover($(this).parent());
          })
          .bind("mouseout.selectBox", function (event) {
            self.removeHover($(this).parent());
          })
          .bind("mousedown.selectBox", function (event) {
            if (1 !== event.which) {
              return;
            }
            event.preventDefault(); // Prevent options from being "dragged"
            if (!select.selectBox("control").hasClass("selectBox-active")) {
              select.selectBox("control").focus();
            }
          })
          .bind("mouseup.selectBox", function (event) {
            if (1 !== event.which) {
              return;
            }
            self.hideMenus();
            self.selectOption($(this).parent(), event);
          });

        this.disableSelection(options);
        return options;
      case "dropdown":
        options = $('<ul class="selectBox-dropdown-menu selectBox-options" />');
        options = _getOptions(select, options);

        options
          .data("selectBox-select", select)
          .css("display", "none")
          .appendTo("BODY")
          .find("A")
          .bind("mousedown.selectBox", function (event) {
            if (event.which === 1) {
              event.preventDefault(); // Prevent options from being "dragged"
              if (
                event.screenX === options.data("selectBox-down-at-x") &&
                event.screenY === options.data("selectBox-down-at-y")
              ) {
                options
                  .removeData("selectBox-down-at-x")
                  .removeData("selectBox-down-at-y");
                self.hideMenus();
              }
            }
          })
          .bind("mouseup.selectBox", function (event) {
            if (1 !== event.which) {
              return;
            }
            if (
              event.screenX === options.data("selectBox-down-at-x") &&
              event.screenY === options.data("selectBox-down-at-y")
            ) {
              return;
            } else {
              options
                .removeData("selectBox-down-at-x")
                .removeData("selectBox-down-at-y");
            }
            self.selectOption($(this).parent());
            self.hideMenus();
          })
          .bind("mouseover.selectBox", function (event) {
            self.addHover($(this).parent());
          })
          .bind("mouseout.selectBox", function (event) {
            self.removeHover($(this).parent());
          });

        // Inherit classes for dropdown menu
        var classes = select.attr("class") || "";
        if ("" !== classes) {
          classes = classes.split(" ");
          for (var i in classes) {
            options.addClass(classes[i] + "-selectBox-dropdown-menu");
          }
        }
        this.disableSelection(options);
        return options;
    }
  };

  /**
   * Returns the current class of the selected option.
   *
   * @returns {String}
   */
  SelectBox.prototype.getLabelClass = function () {
    var selected = $(this.selectElement).find("OPTION:selected");
    return ("selectBox-label " + (selected.attr("class") || "")).replace(
      /\s+$/,
      ""
    );
  };

  /**
   * Returns the current label of the selected option.
   *
   * @returns {String}
   */
  SelectBox.prototype.getLabelText = function () {
    var selected = $(this.selectElement).find("OPTION:selected");
    return selected.text() || "\u00A0";
  };

  /**
   * Sets the label.
   * This method uses the getLabelClass() and getLabelText() methods.
   */
  SelectBox.prototype.setLabel = function () {
    var select = $(this.selectElement);
    var control = select.data("selectBox-control");
    if (!control) {
      return;
    }

    control
      .find(".selectBox-label")
      .attr("class", this.getLabelClass())
      .text(this.getLabelText());
  };

  /**
   * Destroys the SelectBox instance and shows the origin select element.
   *
   */
  SelectBox.prototype.destroy = function () {
    var select = $(this.selectElement);
    var control = select.data("selectBox-control");
    if (!control) {
      return;
    }

    var options = control.data("selectBox-options");
    options.remove();
    control.remove();
    select
      .removeClass("selectBox")
      .removeData("selectBox-control")
      .data("selectBox-control", null)
      .removeData("selectBox-settings")
      .data("selectBox-settings", null)
      .show();
  };

  /**
   * Refreshes the option elements.
   */
  SelectBox.prototype.refresh = function () {
    var select = $(this.selectElement),
      control = select.data("selectBox-control"),
      dropdown = control.hasClass("selectBox-dropdown"),
      menuOpened = control.hasClass("selectBox-menuShowing");
    select.selectBox("options", select.html());
    // Restore opened dropdown state (original menu was trashed)
    if (dropdown && menuOpened) {
      this.showMenu();
    }
  };

  /**
   * Shows the dropdown menu.
   */
  SelectBox.prototype.showMenu = function () {
    var self = this,
      select = $(this.selectElement),
      control = select.data("selectBox-control"),
      settings = select.data("selectBox-settings"),
      options = control.data("selectBox-options");

    if (control.hasClass("selectBox-disabled")) {
      return false;
    }

    this.hideMenus();
    var borderBottomWidth = parseInt(control.css("borderBottomWidth")) || 0;

    // Menu position
    options.width(control.innerWidth()).css({
      top: control.offset().top + control.outerHeight() - borderBottomWidth,
      left: control.offset().left,
    });

    if (select.triggerHandler("beforeopen")) {
      return false;
    }

    var dispatchOpenEvent = function () {
      select.triggerHandler("open", {
        _selectBox: true,
      });
    };

    // Show menu
    switch (settings.menuTransition) {
      case "fade":
        options.fadeIn(settings.menuSpeed, dispatchOpenEvent);
        break;
      case "slide":
        options.slideDown(settings.menuSpeed, dispatchOpenEvent);
        break;
      default:
        options.show(settings.menuSpeed, dispatchOpenEvent);
        break;
    }

    if (!settings.menuSpeed) {
      dispatchOpenEvent();
    }

    // Center on selected option
    var li = options.find(".selectBox-selected:first");
    this.keepOptionInView(li, true);
    this.addHover(li);
    control.addClass("selectBox-menuShowing");

    $(document).bind("mousedown.selectBox", function (event) {
      if (1 === event.which) {
        if ($(event.target).parents().andSelf().hasClass("selectBox-options")) {
          return;
        }
        self.hideMenus();
      }
    });
  };

  /**
   * Hides the menu of all instances.
   */
  SelectBox.prototype.hideMenus = function () {
    if ($(".selectBox-dropdown-menu:visible").length === 0) {
      return;
    }

    $(document).unbind("mousedown.selectBox");
    $(".selectBox-dropdown-menu").each(function () {
      var options = $(this),
        select = options.data("selectBox-select"),
        control = select.data("selectBox-control"),
        settings = select.data("selectBox-settings");

      if (select.triggerHandler("beforeclose")) {
        return false;
      }

      var dispatchCloseEvent = function () {
        select.triggerHandler("close", {
          _selectBox: true,
        });
      };

      if (settings) {
        switch (settings.menuTransition) {
          case "fade":
            options.fadeOut(settings.menuSpeed, dispatchCloseEvent);
            break;
          case "slide":
            options.slideUp(settings.menuSpeed, dispatchCloseEvent);
            break;
          default:
            options.hide(settings.menuSpeed, dispatchCloseEvent);
            break;
        }
        if (!settings.menuSpeed) {
          dispatchCloseEvent();
        }
        control.removeClass("selectBox-menuShowing");
      } else {
        $(this).hide();
        $(this).triggerHandler("close", {
          _selectBox: true,
        });
        $(this).removeClass("selectBox-menuShowing");
      }
    });
  };

  /**
   * Selects an option.
   *
   * @param {HTMLElement} li
   * @param {DOMEvent}    event
   * @returns {Boolean}
   */
  SelectBox.prototype.selectOption = function (li, event) {
    var select = $(this.selectElement);
    li = $(li);

    var control = select.data("selectBox-control"),
      settings = select.data("selectBox-settings");

    if (control.hasClass("selectBox-disabled")) {
      return false;
    }

    if (0 === li.length || li.hasClass("selectBox-disabled")) {
      return false;
    }

    if (select.attr("multiple")) {
      // If event.shiftKey is true, this will select all options between li and the last li selected
      if (event.shiftKey && control.data("selectBox-last-selected")) {
        li.toggleClass("selectBox-selected");
        var affectedOptions;
        if (li.index() > control.data("selectBox-last-selected").index()) {
          affectedOptions = li
            .siblings()
            .slice(control.data("selectBox-last-selected").index(), li.index());
        } else {
          affectedOptions = li
            .siblings()
            .slice(li.index(), control.data("selectBox-last-selected").index());
        }
        affectedOptions = affectedOptions.not(
          ".selectBox-optgroup, .selectBox-disabled"
        );
        if (li.hasClass("selectBox-selected")) {
          affectedOptions.addClass("selectBox-selected");
        } else {
          affectedOptions.removeClass("selectBox-selected");
        }
      } else if (
        (this.isMac && event.metaKey) ||
        (!this.isMac && event.ctrlKey)
      ) {
        li.toggleClass("selectBox-selected");
      } else {
        li.siblings().removeClass("selectBox-selected");
        li.addClass("selectBox-selected");
      }
    } else {
      li.siblings().removeClass("selectBox-selected");
      li.addClass("selectBox-selected");
    }

    if (control.hasClass("selectBox-dropdown")) {
      control.find(".selectBox-label").text(li.text());
    }

    // Update original control's value
    var i = 0,
      selection = [];
    if (select.attr("multiple")) {
      control.find(".selectBox-selected A").each(function () {
        selection[i++] = $(this).attr("rel");
      });
    } else {
      selection = li.find("A").attr("rel");
    }

    // Remember most recently selected item
    control.data("selectBox-last-selected", li);

    // Change callback
    if (select.val() !== selection) {
      select.val(selection);
      this.setLabel();
      select.trigger("change");
    }

    return true;
  };

  /**
   * Adds the hover class.
   *
   * @param {HTMLElement} li
   */
  SelectBox.prototype.addHover = function (li) {
    li = $(li);
    var select = $(this.selectElement),
      control = select.data("selectBox-control"),
      options = control.data("selectBox-options");

    options.find(".selectBox-hover").removeClass("selectBox-hover");
    li.addClass("selectBox-hover");
  };

  /**
   * Returns the original HTML select element.
   *
   * @returns {HTMLElement}
   */
  SelectBox.prototype.getSelectElement = function () {
    return this.selectElement;
  };

  /**
   * Remove the hover class.
   *
   * @param {HTMLElement} li
   */
  SelectBox.prototype.removeHover = function (li) {
    li = $(li);
    var select = $(this.selectElement),
      control = select.data("selectBox-control"),
      options = control.data("selectBox-options");

    options.find(".selectBox-hover").removeClass("selectBox-hover");
  };

  /**
   * Checks if the widget is in the view.
   *
   * @param {jQuery}      li
   * @param {Boolean}     center
   */
  SelectBox.prototype.keepOptionInView = function (li, center) {
    if (!li || li.length === 0) {
      return;
    }

    var select = $(this.selectElement),
      control = select.data("selectBox-control"),
      options = control.data("selectBox-options"),
      scrollBox = control.hasClass("selectBox-dropdown")
        ? options
        : options.parent(),
      top = parseInt(li.offset().top - scrollBox.position().top),
      bottom = parseInt(top + li.outerHeight());

    if (center) {
      scrollBox.scrollTop(
        li.offset().top -
          scrollBox.offset().top +
          scrollBox.scrollTop() -
          scrollBox.height() / 2
      );
    } else {
      if (top < 0) {
        scrollBox.scrollTop(
          li.offset().top - scrollBox.offset().top + scrollBox.scrollTop()
        );
      }
      if (bottom > scrollBox.height()) {
        scrollBox.scrollTop(
          li.offset().top +
            li.outerHeight() -
            scrollBox.offset().top +
            scrollBox.scrollTop() -
            scrollBox.height()
        );
      }
    }
  };

  /**
   * Handles the keyDown event.
   * Handles open/close and arrow key functionality
   *
   * @param {DOMEvent}    event
   */
  SelectBox.prototype.handleKeyDown = function (event) {
    var select = $(this.selectElement),
      control = select.data("selectBox-control"),
      options = control.data("selectBox-options"),
      settings = select.data("selectBox-settings"),
      totalOptions = 0,
      i = 0;

    if (control.hasClass("selectBox-disabled")) {
      return;
    }

    switch (event.keyCode) {
      case 8:
        // backspace
        event.preventDefault();
        this.typeSearch = "";
        break;
      case 9:
      // tab
      case 27:
        // esc
        this.hideMenus();
        this.removeHover();
        break;
      case 13:
        // enter
        if (control.hasClass("selectBox-menuShowing")) {
          this.selectOption(options.find("LI.selectBox-hover:first"), event);
          if (control.hasClass("selectBox-dropdown")) {
            this.hideMenus();
          }
        } else {
          this.showMenu();
        }
        break;
      case 38:
      // up
      case 37:
        // left
        event.preventDefault();
        if (control.hasClass("selectBox-menuShowing")) {
          var prev = options.find(".selectBox-hover").prev("LI");
          totalOptions = options.find("LI:not(.selectBox-optgroup)").length;
          i = 0;
          while (
            prev.length === 0 ||
            prev.hasClass("selectBox-disabled") ||
            prev.hasClass("selectBox-optgroup")
          ) {
            prev = prev.prev("LI");
            if (prev.length === 0) {
              if (settings.loopOptions) {
                prev = options.find("LI:last");
              } else {
                prev = options.find("LI:first");
              }
            }
            if (++i >= totalOptions) {
              break;
            }
          }
          this.addHover(prev);
          this.selectOption(prev, event);
          this.keepOptionInView(prev);
        } else {
          this.showMenu();
        }
        break;
      case 40:
      // down
      case 39:
        // right
        event.preventDefault();
        if (control.hasClass("selectBox-menuShowing")) {
          var next = options.find(".selectBox-hover").next("LI");
          totalOptions = options.find("LI:not(.selectBox-optgroup)").length;
          i = 0;
          while (
            0 === next.length ||
            next.hasClass("selectBox-disabled") ||
            next.hasClass("selectBox-optgroup")
          ) {
            next = next.next("LI");
            if (next.length === 0) {
              if (settings.loopOptions) {
                next = options.find("LI:first");
              } else {
                next = options.find("LI:last");
              }
            }
            if (++i >= totalOptions) {
              break;
            }
          }
          this.addHover(next);
          this.selectOption(next, event);
          this.keepOptionInView(next);
        } else {
          this.showMenu();
        }
        break;
    }
  };

  /**
   * Handles the keyPress event.
   * Handles type-to-find functionality
   *
   * @param {DOMEvent}    event
   */
  SelectBox.prototype.handleKeyPress = function (event) {
    var select = $(this.selectElement),
      control = select.data("selectBox-control"),
      options = control.data("selectBox-options");

    if (control.hasClass("selectBox-disabled")) {
      return;
    }

    switch (event.keyCode) {
      case 9:
      // tab
      case 27:
      // esc
      case 13:
      // enter
      case 38:
      // up
      case 37:
      // left
      case 40:
      // down
      case 39:
        // right
        // Don't interfere with the keydown event!
        break;
      default:
        // Type to find
        if (!control.hasClass("selectBox-menuShowing")) {
          this.showMenu();
        }
        event.preventDefault();
        clearTimeout(this.typeTimer);
        this.typeSearch += String.fromCharCode(event.charCode || event.keyCode);
        options.find("A").each(function () {
          if (
            $(this).text().substr(0, this.typeSearch.length).toLowerCase() ===
            this.typeSearch.toLowerCase()
          ) {
            this.addHover($(this).parent());
            this.selectOption($(this).parent(), event);
            this.keepOptionInView($(this).parent());
            return false;
          }
        });
        // Clear after a brief pause
        this.typeTimer = setTimeout(function () {
          this.typeSearch = "";
        }, 1000);
        break;
    }
  };

  /**
   * Enables the selectBox.
   */
  SelectBox.prototype.enable = function () {
    var select = $(this.selectElement);
    select.prop("disabled", false);
    var control = select.data("selectBox-control");
    if (!control) {
      return;
    }
    control.removeClass("selectBox-disabled");
  };

  /**
   * Disables the selectBox.
   */
  SelectBox.prototype.disable = function () {
    var select = $(this.selectElement);
    select.prop("disabled", true);
    var control = select.data("selectBox-control");
    if (!control) {
      return;
    }
    control.addClass("selectBox-disabled");
  };

  /**
   * Sets the current value.
   *
   * @param {String}      value
   */
  SelectBox.prototype.setValue = function (value) {
    var select = $(this.selectElement);
    select.val(value);
    value = select.val(); // IE9's select would be null if it was set with a non-exist options value

    if (null === value) {
      // So check it here and set it with the first option's value if possible
      value = select.children().first().val();
      select.val(value);
    }

    var control = select.data("selectBox-control");
    if (!control) {
      return;
    }

    var settings = select.data("selectBox-settings"),
      options = control.data("selectBox-options");

    // Update label
    this.setLabel();

    // Update control values
    options.find(".selectBox-selected").removeClass("selectBox-selected");
    options.find("A").each(function () {
      if (typeof value === "object") {
        for (var i = 0; i < value.length; i++) {
          if ($(this).attr("rel") == value[i]) {
            $(this).parent().addClass("selectBox-selected");
          }
        }
      } else {
        if ($(this).attr("rel") == value) {
          $(this).parent().addClass("selectBox-selected");
        }
      }
    });

    if (settings.change) {
      settings.change.call(select);
    }
  };

  /**
   * Sets the option elements.
   *
   * @param {String|Object} options
   */
  SelectBox.prototype.setOptions = function (options) {
    var select = $(this.selectElement),
      control = select.data("selectBox-control"),
      settings = select.data("selectBox-settings"),
      type;

    switch (typeof options) {
      case "string":
        select.html(options);
        break;
      case "object":
        select.html("");
        for (var i in options) {
          if (options[i] === null) {
            continue;
          }
          if (typeof options[i] === "object") {
            var optgroup = $('<optgroup label="' + i + '" />');
            for (var j in options[i]) {
              optgroup.append(
                '<option value="' + j + '">' + options[i][j] + "</option>"
              );
            }
            select.append(optgroup);
          } else {
            var option = $(
              '<option value="' + i + '">' + options[i] + "</option>"
            );
            select.append(option);
          }
        }
        break;
    }

    if (!control) {
      return;
    }

    // Remove old options
    control.data("selectBox-options").remove();

    // Generate new options
    type = control.hasClass("selectBox-dropdown") ? "dropdown" : "inline";
    options = this.getOptions(type);
    control.data("selectBox-options", options);

    switch (type) {
      case "inline":
        control.append(options);
        break;
      case "dropdown":
        // Update label
        this.setLabel();
        $("BODY").append(options);
        break;
    }
  };

  /**
   * Disables the selection.
   *
   * @param {*} selector
   */
  SelectBox.prototype.disableSelection = function (selector) {
    $(selector)
      .css("MozUserSelect", "none")
      .bind("selectstart", function (event) {
        event.preventDefault();
      });
  };

  /**
   * Generates the options.
   *
   * @param {jQuery} self
   * @param {jQuery} options
   */
  SelectBox.prototype.generateOptions = function (self, options) {
    var li = $("<li />"),
      a = $("<a />");
    li.addClass(self.attr("class"));
    li.data(self.data());
    a.attr("rel", self.val()).text(self.text());
    li.append(a);
    if (self.attr("disabled")) {
      li.addClass("selectBox-disabled");
    }
    if (self.attr("selected")) {
      li.addClass("selectBox-selected");
    }
    options.append(li);
  };

  /**
   * Extends the jQuery.fn object.
   */
  $.extend($.fn, {
    selectBox: function (method, options) {
      var selectBox;

      switch (method) {
        case "control":
          return $(this).data("selectBox-control");
        case "settings":
          if (!options) {
            return $(this).data("selectBox-settings");
          }
          $(this).each(function () {
            $(this).data(
              "selectBox-settings",
              $.extend(true, $(this).data("selectBox-settings"), options)
            );
          });
          break;
        case "options":
          // Getter
          if (undefined === options) {
            return $(this).data("selectBox-control").data("selectBox-options");
          }
          // Setter
          $(this).each(function () {
            if ((selectBox = $(this).data("selectBox"))) {
              selectBox.setOptions(options);
            }
          });
          break;
        case "value":
          // Empty string is a valid value
          if (undefined === options) {
            return $(this).val();
          }
          $(this).each(function () {
            if ((selectBox = $(this).data("selectBox"))) {
              selectBox.setValue(options);
            }
          });
          break;
        case "refresh":
          $(this).each(function () {
            if ((selectBox = $(this).data("selectBox"))) {
              selectBox.refresh();
            }
          });
          break;
        case "enable":
          $(this).each(function () {
            if ((selectBox = $(this).data("selectBox"))) {
              selectBox.enable(this);
            }
          });
          break;
        case "disable":
          $(this).each(function () {
            if ((selectBox = $(this).data("selectBox"))) {
              selectBox.disable();
            }
          });
          break;
        case "destroy":
          $(this).each(function () {
            if ((selectBox = $(this).data("selectBox"))) {
              selectBox.destroy();
              $(this).data("selectBox", null);
            }
          });
          break;
        case "instance":
          return $(this).data("selectBox");
        default:
          $(this).each(function (idx, select) {
            if (!$(select).data("selectBox")) {
              $(select).data("selectBox", new SelectBox(select, method));
            }
          });
          break;
      }
      return $(this);
    },
  });
})(jQuery);
/*! tether 1.3.0 */

(function (root, factory) {
  if (typeof define === "function" && define.amd) {
    define(factory);
  } else if (typeof exports === "object") {
    module.exports = factory(require, exports, module);
  } else {
    root.Tether = factory();
  }
})(this, function (require, exports, module) {
  "use strict";

  var _createClass = (function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  })();

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var TetherBase = undefined;
  if (typeof TetherBase === "undefined") {
    TetherBase = { modules: [] };
  }

  var zeroElement = null;

  function getScrollParents(el) {
    // In firefox if the el is inside an iframe with display: none; window.getComputedStyle() will return null;
    // https://bugzilla.mozilla.org/show_bug.cgi?id=548397
    var computedStyle = getComputedStyle(el) || {};
    var position = computedStyle.position;
    var parents = [];

    if (position === "fixed") {
      return [el];
    }

    var parent = el;
    while ((parent = parent.parentNode) && parent && parent.nodeType === 1) {
      var style = undefined;
      try {
        style = getComputedStyle(parent);
      } catch (err) {}

      if (typeof style === "undefined" || style === null) {
        parents.push(parent);
        return parents;
      }

      var _style = style;
      var overflow = _style.overflow;
      var overflowX = _style.overflowX;
      var overflowY = _style.overflowY;

      if (/(auto|scroll)/.test(overflow + overflowY + overflowX)) {
        if (
          position !== "absolute" ||
          ["relative", "absolute", "fixed"].indexOf(style.position) >= 0
        ) {
          parents.push(parent);
        }
      }
    }

    parents.push(document.body);
    return parents;
  }

  var uniqueId = (function () {
    var id = 0;
    return function () {
      return ++id;
    };
  })();

  var zeroPosCache = {};
  var getOrigin = function getOrigin() {
    // getBoundingClientRect is unfortunately too accurate.  It introduces a pixel or two of
    // jitter as the user scrolls that messes with our ability to detect if two positions
    // are equivilant or not.  We place an element at the top left of the page that will
    // get the same jitter, so we can cancel the two out.
    var node = zeroElement;
    if (!node) {
      node = document.createElement("div");
      node.setAttribute("data-tether-id", uniqueId());
      extend(node.style, {
        top: 0,
        left: 0,
        position: "absolute",
      });

      document.body.appendChild(node);

      zeroElement = node;
    }

    var id = node.getAttribute("data-tether-id");
    if (typeof zeroPosCache[id] === "undefined") {
      zeroPosCache[id] = {};

      var rect = node.getBoundingClientRect();
      for (var k in rect) {
        // Can't use extend, as on IE9, elements don't resolve to be hasOwnProperty
        zeroPosCache[id][k] = rect[k];
      }

      // Clear the cache when this position call is done
      defer(function () {
        delete zeroPosCache[id];
      });
    }

    return zeroPosCache[id];
  };

  function removeUtilElements() {
    document.body.removeChild(zeroElement);
    zeroElement = undefined;
  }

  function getBounds(el) {
    var doc = undefined;
    if (el === document) {
      doc = document;
      el = document.documentElement;
    } else {
      doc = el.ownerDocument;
    }

    var docEl = doc.documentElement;

    var box = {};
    // The original object returned by getBoundingClientRect is immutable, so we clone it
    // We can't use extend because the properties are not considered part of the object by hasOwnProperty in IE9
    var rect = el.getBoundingClientRect();
    for (var k in rect) {
      box[k] = rect[k];
    }

    var origin = getOrigin();

    box.top -= origin.top;
    box.left -= origin.left;

    if (typeof box.width === "undefined") {
      box.width = document.body.scrollWidth - box.left - box.right;
    }
    if (typeof box.height === "undefined") {
      box.height = document.body.scrollHeight - box.top - box.bottom;
    }

    box.top = box.top - docEl.clientTop;
    box.left = box.left - docEl.clientLeft;
    box.right = doc.body.clientWidth - box.width - box.left;
    box.bottom = doc.body.clientHeight - box.height - box.top;

    return box;
  }

  function getOffsetParent(el) {
    return el.offsetParent || document.documentElement;
  }

  function getScrollBarSize() {
    var inner = document.createElement("div");
    inner.style.width = "100%";
    inner.style.height = "200px";

    var outer = document.createElement("div");
    extend(outer.style, {
      position: "absolute",
      top: 0,
      left: 0,
      pointerEvents: "none",
      visibility: "hidden",
      width: "200px",
      height: "150px",
      overflow: "hidden",
    });

    outer.appendChild(inner);

    document.body.appendChild(outer);

    var widthContained = inner.offsetWidth;
    outer.style.overflow = "scroll";
    var widthScroll = inner.offsetWidth;

    if (widthContained === widthScroll) {
      widthScroll = outer.clientWidth;
    }

    document.body.removeChild(outer);

    var width = widthContained - widthScroll;

    return { width: width, height: width };
  }

  function extend() {
    var out =
      arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    var args = [];

    Array.prototype.push.apply(args, arguments);

    args.slice(1).forEach(function (obj) {
      if (obj) {
        for (var key in obj) {
          if ({}.hasOwnProperty.call(obj, key)) {
            out[key] = obj[key];
          }
        }
      }
    });

    return out;
  }

  function removeClass(el, name) {
    if (typeof el.classList !== "undefined") {
      name.split(" ").forEach(function (cls) {
        if (cls.trim()) {
          el.classList.remove(cls);
        }
      });
    } else {
      var regex = new RegExp(
        "(^| )" + name.split(" ").join("|") + "( |$)",
        "gi"
      );
      var className = getClassName(el).replace(regex, " ");
      setClassName(el, className);
    }
  }

  function addClass(el, name) {
    if (typeof el.classList !== "undefined") {
      name.split(" ").forEach(function (cls) {
        if (cls.trim()) {
          el.classList.add(cls);
        }
      });
    } else {
      removeClass(el, name);
      var cls = getClassName(el) + (" " + name);
      setClassName(el, cls);
    }
  }

  function hasClass(el, name) {
    if (typeof el.classList !== "undefined") {
      return el.classList.contains(name);
    }
    var className = getClassName(el);
    return new RegExp("(^| )" + name + "( |$)", "gi").test(className);
  }

  function getClassName(el) {
    if (el.className instanceof SVGAnimatedString) {
      return el.className.baseVal;
    }
    return el.className;
  }

  function setClassName(el, className) {
    el.setAttribute("class", className);
  }

  function updateClasses(el, add, all) {
    // Of the set of 'all' classes, we need the 'add' classes, and only the
    // 'add' classes to be set.
    all.forEach(function (cls) {
      if (add.indexOf(cls) === -1 && hasClass(el, cls)) {
        removeClass(el, cls);
      }
    });

    add.forEach(function (cls) {
      if (!hasClass(el, cls)) {
        addClass(el, cls);
      }
    });
  }

  var deferred = [];

  var defer = function defer(fn) {
    deferred.push(fn);
  };

  var flush = function flush() {
    var fn = undefined;
    while ((fn = deferred.pop())) {
      fn();
    }
  };

  var Evented = (function () {
    function Evented() {
      _classCallCheck(this, Evented);
    }

    _createClass(Evented, [
      {
        key: "on",
        value: function on(event, handler, ctx) {
          var once =
            arguments.length <= 3 || arguments[3] === undefined
              ? false
              : arguments[3];

          if (typeof this.bindings === "undefined") {
            this.bindings = {};
          }
          if (typeof this.bindings[event] === "undefined") {
            this.bindings[event] = [];
          }
          this.bindings[event].push({ handler: handler, ctx: ctx, once: once });
        },
      },
      {
        key: "once",
        value: function once(event, handler, ctx) {
          this.on(event, handler, ctx, true);
        },
      },
      {
        key: "off",
        value: function off(event, handler) {
          if (
            typeof this.bindings !== "undefined" &&
            typeof this.bindings[event] !== "undefined"
          ) {
            return;
          }

          if (typeof handler === "undefined") {
            delete this.bindings[event];
          } else {
            var i = 0;
            while (i < this.bindings[event].length) {
              if (this.bindings[event][i].handler === handler) {
                this.bindings[event].splice(i, 1);
              } else {
                ++i;
              }
            }
          }
        },
      },
      {
        key: "trigger",
        value: function trigger(event) {
          if (typeof this.bindings !== "undefined" && this.bindings[event]) {
            var i = 0;

            for (
              var _len = arguments.length,
                args = Array(_len > 1 ? _len - 1 : 0),
                _key = 1;
              _key < _len;
              _key++
            ) {
              args[_key - 1] = arguments[_key];
            }

            while (i < this.bindings[event].length) {
              var _bindings$event$i = this.bindings[event][i];
              var handler = _bindings$event$i.handler;
              var ctx = _bindings$event$i.ctx;
              var once = _bindings$event$i.once;

              var context = ctx;
              if (typeof context === "undefined") {
                context = this;
              }

              handler.apply(context, args);

              if (once) {
                this.bindings[event].splice(i, 1);
              } else {
                ++i;
              }
            }
          }
        },
      },
    ]);

    return Evented;
  })();

  TetherBase.Utils = {
    getScrollParents: getScrollParents,
    getBounds: getBounds,
    getOffsetParent: getOffsetParent,
    extend: extend,
    addClass: addClass,
    removeClass: removeClass,
    hasClass: hasClass,
    updateClasses: updateClasses,
    defer: defer,
    flush: flush,
    uniqueId: uniqueId,
    Evented: Evented,
    getScrollBarSize: getScrollBarSize,
    removeUtilElements: removeUtilElements,
  };
  /* globals TetherBase, performance */

  ("use strict");

  var _slicedToArray = (function () {
    function sliceIterator(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;
      try {
        for (
          var _i = arr[Symbol.iterator](), _s;
          !(_n = (_s = _i.next()).done);
          _n = true
        ) {
          _arr.push(_s.value);
          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"]) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }
      return _arr;
    }
    return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError(
          "Invalid attempt to destructure non-iterable instance"
        );
      }
    };
  })();

  var _createClass = (function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  })();

  var _get = function get(_x6, _x7, _x8) {
    var _again = true;
    _function: while (_again) {
      var object = _x6,
        property = _x7,
        receiver = _x8;
      _again = false;
      if (object === null) object = Function.prototype;
      var desc = Object.getOwnPropertyDescriptor(object, property);
      if (desc === undefined) {
        var parent = Object.getPrototypeOf(object);
        if (parent === null) {
          return undefined;
        } else {
          _x6 = parent;
          _x7 = property;
          _x8 = receiver;
          _again = true;
          desc = parent = undefined;
          continue _function;
        }
      } else if ("value" in desc) {
        return desc.value;
      } else {
        var getter = desc.get;
        if (getter === undefined) {
          return undefined;
        }
        return getter.call(receiver);
      }
    }
  };

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError(
        "Super expression must either be null or a function, not " +
          typeof superClass
      );
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true,
      },
    });
    if (superClass)
      Object.setPrototypeOf
        ? Object.setPrototypeOf(subClass, superClass)
        : (subClass.__proto__ = superClass);
  }

  if (typeof TetherBase === "undefined") {
    throw new Error("You must include the utils.js file before tether.js");
  }

  var _TetherBase$Utils = TetherBase.Utils;
  var getScrollParents = _TetherBase$Utils.getScrollParents;
  var getBounds = _TetherBase$Utils.getBounds;
  var getOffsetParent = _TetherBase$Utils.getOffsetParent;
  var extend = _TetherBase$Utils.extend;
  var addClass = _TetherBase$Utils.addClass;
  var removeClass = _TetherBase$Utils.removeClass;
  var updateClasses = _TetherBase$Utils.updateClasses;
  var defer = _TetherBase$Utils.defer;
  var flush = _TetherBase$Utils.flush;
  var getScrollBarSize = _TetherBase$Utils.getScrollBarSize;
  var removeUtilElements = _TetherBase$Utils.removeUtilElements;

  function within(a, b) {
    var diff =
      arguments.length <= 2 || arguments[2] === undefined ? 1 : arguments[2];

    return a + diff >= b && b >= a - diff;
  }

  var transformKey = (function () {
    if (typeof document === "undefined") {
      return "";
    }
    var el = document.createElement("div");

    var transforms = [
      "transform",
      "webkitTransform",
      "OTransform",
      "MozTransform",
      "msTransform",
    ];
    for (var i = 0; i < transforms.length; ++i) {
      var key = transforms[i];
      if (el.style[key] !== undefined) {
        return key;
      }
    }
  })();

  var tethers = [];

  var position = function position() {
    tethers.forEach(function (tether) {
      tether.position(false);
    });
    flush();
  };

  function now() {
    if (
      typeof performance !== "undefined" &&
      typeof performance.now !== "undefined"
    ) {
      return performance.now();
    }
    return +new Date();
  }

  (function () {
    var lastCall = null;
    var lastDuration = null;
    var pendingTimeout = null;

    var tick = function tick() {
      if (typeof lastDuration !== "undefined" && lastDuration > 16) {
        // We voluntarily throttle ourselves if we can't manage 60fps
        lastDuration = Math.min(lastDuration - 16, 250);

        // Just in case this is the last event, remember to position just once more
        pendingTimeout = setTimeout(tick, 250);
        return;
      }

      if (typeof lastCall !== "undefined" && now() - lastCall < 10) {
        // Some browsers call events a little too frequently, refuse to run more than is reasonable
        return;
      }

      if (typeof pendingTimeout !== "undefined") {
        clearTimeout(pendingTimeout);
        pendingTimeout = null;
      }

      lastCall = now();
      position();
      lastDuration = now() - lastCall;
    };

    if (
      typeof window !== "undefined" &&
      typeof window.addEventListener !== "undefined"
    ) {
      ["resize", "scroll", "touchmove"].forEach(function (event) {
        window.addEventListener(event, tick);
      });
    }
  })();

  var MIRROR_LR = {
    center: "center",
    left: "right",
    right: "left",
  };

  var MIRROR_TB = {
    middle: "middle",
    top: "bottom",
    bottom: "top",
  };

  var OFFSET_MAP = {
    top: 0,
    left: 0,
    middle: "50%",
    center: "50%",
    bottom: "100%",
    right: "100%",
  };

  var autoToFixedAttachment = function autoToFixedAttachment(
    attachment,
    relativeToAttachment
  ) {
    var left = attachment.left;
    var top = attachment.top;

    if (left === "auto") {
      left = MIRROR_LR[relativeToAttachment.left];
    }

    if (top === "auto") {
      top = MIRROR_TB[relativeToAttachment.top];
    }

    return { left: left, top: top };
  };

  var attachmentToOffset = function attachmentToOffset(attachment) {
    var left = attachment.left;
    var top = attachment.top;

    if (typeof OFFSET_MAP[attachment.left] !== "undefined") {
      left = OFFSET_MAP[attachment.left];
    }

    if (typeof OFFSET_MAP[attachment.top] !== "undefined") {
      top = OFFSET_MAP[attachment.top];
    }

    return { left: left, top: top };
  };

  function addOffset() {
    var out = { top: 0, left: 0 };

    for (
      var _len = arguments.length, offsets = Array(_len), _key = 0;
      _key < _len;
      _key++
    ) {
      offsets[_key] = arguments[_key];
    }

    offsets.forEach(function (_ref) {
      var top = _ref.top;
      var left = _ref.left;

      if (typeof top === "string") {
        top = parseFloat(top, 10);
      }
      if (typeof left === "string") {
        left = parseFloat(left, 10);
      }

      out.top += top;
      out.left += left;
    });

    return out;
  }

  function offsetToPx(offset, size) {
    if (typeof offset.left === "string" && offset.left.indexOf("%") !== -1) {
      offset.left = (parseFloat(offset.left, 10) / 100) * size.width;
    }
    if (typeof offset.top === "string" && offset.top.indexOf("%") !== -1) {
      offset.top = (parseFloat(offset.top, 10) / 100) * size.height;
    }

    return offset;
  }

  var parseOffset = function parseOffset(value) {
    var _value$split = value.split(" ");

    var _value$split2 = _slicedToArray(_value$split, 2);

    var top = _value$split2[0];
    var left = _value$split2[1];

    return { top: top, left: left };
  };
  var parseAttachment = parseOffset;

  var TetherClass = (function (_Evented) {
    _inherits(TetherClass, _Evented);

    function TetherClass(options) {
      var _this = this;

      _classCallCheck(this, TetherClass);

      _get(
        Object.getPrototypeOf(TetherClass.prototype),
        "constructor",
        this
      ).call(this);
      this.position = this.position.bind(this);

      tethers.push(this);

      this.history = [];

      this.setOptions(options, false);

      TetherBase.modules.forEach(function (module) {
        if (typeof module.initialize !== "undefined") {
          module.initialize.call(_this);
        }
      });

      this.position();
    }

    _createClass(TetherClass, [
      {
        key: "getClass",
        value: function getClass() {
          var key =
            arguments.length <= 0 || arguments[0] === undefined
              ? ""
              : arguments[0];
          var classes = this.options.classes;

          if (typeof classes !== "undefined" && classes[key]) {
            return this.options.classes[key];
          } else if (this.options.classPrefix) {
            return this.options.classPrefix + "-" + key;
          } else {
            return key;
          }
        },
      },
      {
        key: "setOptions",
        value: function setOptions(options) {
          var _this2 = this;

          var pos =
            arguments.length <= 1 || arguments[1] === undefined
              ? true
              : arguments[1];

          var defaults = {
            offset: "0 0",
            targetOffset: "0 0",
            targetAttachment: "auto auto",
            classPrefix: "tether",
          };

          this.options = extend(defaults, options);

          var _options = this.options;
          var element = _options.element;
          var target = _options.target;
          var targetModifier = _options.targetModifier;

          this.element = element;
          this.target = target;
          this.targetModifier = targetModifier;

          if (this.target === "viewport") {
            this.target = document.body;
            this.targetModifier = "visible";
          } else if (this.target === "scroll-handle") {
            this.target = document.body;
            this.targetModifier = "scroll-handle";
          }

          ["element", "target"].forEach(function (key) {
            if (typeof _this2[key] === "undefined") {
              throw new Error(
                "Tether Error: Both element and target must be defined"
              );
            }

            if (typeof _this2[key].jquery !== "undefined") {
              _this2[key] = _this2[key][0];
            } else if (typeof _this2[key] === "string") {
              _this2[key] = document.querySelector(_this2[key]);
            }
          });

          addClass(this.element, this.getClass("element"));
          if (!(this.options.addTargetClasses === false)) {
            addClass(this.target, this.getClass("target"));
          }

          if (!this.options.attachment) {
            throw new Error("Tether Error: You must provide an attachment");
          }

          this.targetAttachment = parseAttachment(
            this.options.targetAttachment
          );
          this.attachment = parseAttachment(this.options.attachment);
          this.offset = parseOffset(this.options.offset);
          this.targetOffset = parseOffset(this.options.targetOffset);

          if (typeof this.scrollParents !== "undefined") {
            this.disable();
          }

          if (this.targetModifier === "scroll-handle") {
            this.scrollParents = [this.target];
          } else {
            this.scrollParents = getScrollParents(this.target);
          }

          if (!(this.options.enabled === false)) {
            this.enable(pos);
          }
        },
      },
      {
        key: "getTargetBounds",
        value: function getTargetBounds() {
          if (typeof this.targetModifier !== "undefined") {
            if (this.targetModifier === "visible") {
              if (this.target === document.body) {
                return {
                  top: pageYOffset,
                  left: pageXOffset,
                  height: innerHeight,
                  width: innerWidth,
                };
              } else {
                var bounds = getBounds(this.target);

                var out = {
                  height: bounds.height,
                  width: bounds.width,
                  top: bounds.top,
                  left: bounds.left,
                };

                out.height = Math.min(
                  out.height,
                  bounds.height - (pageYOffset - bounds.top)
                );
                out.height = Math.min(
                  out.height,
                  bounds.height -
                    (bounds.top + bounds.height - (pageYOffset + innerHeight))
                );
                out.height = Math.min(innerHeight, out.height);
                out.height -= 2;

                out.width = Math.min(
                  out.width,
                  bounds.width - (pageXOffset - bounds.left)
                );
                out.width = Math.min(
                  out.width,
                  bounds.width -
                    (bounds.left + bounds.width - (pageXOffset + innerWidth))
                );
                out.width = Math.min(innerWidth, out.width);
                out.width -= 2;

                if (out.top < pageYOffset) {
                  out.top = pageYOffset;
                }
                if (out.left < pageXOffset) {
                  out.left = pageXOffset;
                }

                return out;
              }
            } else if (this.targetModifier === "scroll-handle") {
              var bounds = undefined;
              var target = this.target;
              if (target === document.body) {
                target = document.documentElement;

                bounds = {
                  left: pageXOffset,
                  top: pageYOffset,
                  height: innerHeight,
                  width: innerWidth,
                };
              } else {
                bounds = getBounds(target);
              }

              var style = getComputedStyle(target);

              var hasBottomScroll =
                target.scrollWidth > target.clientWidth ||
                [style.overflow, style.overflowX].indexOf("scroll") >= 0 ||
                this.target !== document.body;

              var scrollBottom = 0;
              if (hasBottomScroll) {
                scrollBottom = 15;
              }

              var height =
                bounds.height -
                parseFloat(style.borderTopWidth) -
                parseFloat(style.borderBottomWidth) -
                scrollBottom;

              var out = {
                width: 15,
                height: height * 0.975 * (height / target.scrollHeight),
                left:
                  bounds.left +
                  bounds.width -
                  parseFloat(style.borderLeftWidth) -
                  15,
              };

              var fitAdj = 0;
              if (height < 408 && this.target === document.body) {
                fitAdj =
                  -0.00011 * Math.pow(height, 2) - 0.00727 * height + 22.58;
              }

              if (this.target !== document.body) {
                out.height = Math.max(out.height, 24);
              }

              var scrollPercentage =
                this.target.scrollTop / (target.scrollHeight - height);
              out.top =
                scrollPercentage * (height - out.height - fitAdj) +
                bounds.top +
                parseFloat(style.borderTopWidth);

              if (this.target === document.body) {
                out.height = Math.max(out.height, 24);
              }

              return out;
            }
          } else {
            return getBounds(this.target);
          }
        },
      },
      {
        key: "clearCache",
        value: function clearCache() {
          this._cache = {};
        },
      },
      {
        key: "cache",
        value: function cache(k, getter) {
          // More than one module will often need the same DOM info, so
          // we keep a cache which is cleared on each position call
          if (typeof this._cache === "undefined") {
            this._cache = {};
          }

          if (typeof this._cache[k] === "undefined") {
            this._cache[k] = getter.call(this);
          }

          return this._cache[k];
        },
      },
      {
        key: "enable",
        value: function enable() {
          var _this3 = this;

          var pos =
            arguments.length <= 0 || arguments[0] === undefined
              ? true
              : arguments[0];

          if (!(this.options.addTargetClasses === false)) {
            addClass(this.target, this.getClass("enabled"));
          }
          addClass(this.element, this.getClass("enabled"));
          this.enabled = true;

          this.scrollParents.forEach(function (parent) {
            if (parent !== document) {
              parent.addEventListener("scroll", _this3.position);
            }
          });

          if (pos) {
            this.position();
          }
        },
      },
      {
        key: "disable",
        value: function disable() {
          var _this4 = this;

          removeClass(this.target, this.getClass("enabled"));
          removeClass(this.element, this.getClass("enabled"));
          this.enabled = false;

          if (typeof this.scrollParents !== "undefined") {
            this.scrollParents.forEach(function (parent) {
              parent.removeEventListener("scroll", _this4.position);
            });
          }
        },
      },
      {
        key: "destroy",
        value: function destroy() {
          var _this5 = this;

          this.disable();

          tethers.forEach(function (tether, i) {
            if (tether === _this5) {
              tethers.splice(i, 1);
            }
          });

          // Remove any elements we were using for convenience from the DOM
          if (tethers.length === 0) {
            removeUtilElements();
          }
        },
      },
      {
        key: "updateAttachClasses",
        value: function updateAttachClasses(elementAttach, targetAttach) {
          var _this6 = this;

          elementAttach = elementAttach || this.attachment;
          targetAttach = targetAttach || this.targetAttachment;
          var sides = ["left", "top", "bottom", "right", "middle", "center"];

          if (
            typeof this._addAttachClasses !== "undefined" &&
            this._addAttachClasses.length
          ) {
            // updateAttachClasses can be called more than once in a position call, so
            // we need to clean up after ourselves such that when the last defer gets
            // ran it doesn't add any extra classes from previous calls.
            this._addAttachClasses.splice(0, this._addAttachClasses.length);
          }

          if (typeof this._addAttachClasses === "undefined") {
            this._addAttachClasses = [];
          }
          var add = this._addAttachClasses;

          if (elementAttach.top) {
            add.push(
              this.getClass("element-attached") + "-" + elementAttach.top
            );
          }
          if (elementAttach.left) {
            add.push(
              this.getClass("element-attached") + "-" + elementAttach.left
            );
          }
          if (targetAttach.top) {
            add.push(this.getClass("target-attached") + "-" + targetAttach.top);
          }
          if (targetAttach.left) {
            add.push(
              this.getClass("target-attached") + "-" + targetAttach.left
            );
          }

          var all = [];
          sides.forEach(function (side) {
            all.push(_this6.getClass("element-attached") + "-" + side);
            all.push(_this6.getClass("target-attached") + "-" + side);
          });

          defer(function () {
            if (!(typeof _this6._addAttachClasses !== "undefined")) {
              return;
            }

            updateClasses(_this6.element, _this6._addAttachClasses, all);
            if (!(_this6.options.addTargetClasses === false)) {
              updateClasses(_this6.target, _this6._addAttachClasses, all);
            }

            delete _this6._addAttachClasses;
          });
        },
      },
      {
        key: "position",
        value: function position() {
          var _this7 = this;

          var flushChanges =
            arguments.length <= 0 || arguments[0] === undefined
              ? true
              : arguments[0];

          // flushChanges commits the changes immediately, leave true unless you are positioning multiple
          // tethers (in which case call Tether.Utils.flush yourself when you're done)

          if (!this.enabled) {
            return;
          }

          this.clearCache();

          // Turn 'auto' attachments into the appropriate corner or edge
          var targetAttachment = autoToFixedAttachment(
            this.targetAttachment,
            this.attachment
          );

          this.updateAttachClasses(this.attachment, targetAttachment);

          var elementPos = this.cache("element-bounds", function () {
            return getBounds(_this7.element);
          });

          var width = elementPos.width;
          var height = elementPos.height;

          if (
            width === 0 &&
            height === 0 &&
            typeof this.lastSize !== "undefined"
          ) {
            var _lastSize = this.lastSize;

            // We cache the height and width to make it possible to position elements that are
            // getting hidden.
            width = _lastSize.width;
            height = _lastSize.height;
          } else {
            this.lastSize = { width: width, height: height };
          }

          var targetPos = this.cache("target-bounds", function () {
            return _this7.getTargetBounds();
          });
          var targetSize = targetPos;

          // Get an actual px offset from the attachment
          var offset = offsetToPx(attachmentToOffset(this.attachment), {
            width: width,
            height: height,
          });
          var targetOffset = offsetToPx(
            attachmentToOffset(targetAttachment),
            targetSize
          );

          var manualOffset = offsetToPx(this.offset, {
            width: width,
            height: height,
          });
          var manualTargetOffset = offsetToPx(this.targetOffset, targetSize);

          // Add the manually provided offset
          offset = addOffset(offset, manualOffset);
          targetOffset = addOffset(targetOffset, manualTargetOffset);

          // It's now our goal to make (element position + offset) == (target position + target offset)
          var left = targetPos.left + targetOffset.left - offset.left;
          var top = targetPos.top + targetOffset.top - offset.top;

          for (var i = 0; i < TetherBase.modules.length; ++i) {
            var _module2 = TetherBase.modules[i];
            var ret = _module2.position.call(this, {
              left: left,
              top: top,
              targetAttachment: targetAttachment,
              targetPos: targetPos,
              elementPos: elementPos,
              offset: offset,
              targetOffset: targetOffset,
              manualOffset: manualOffset,
              manualTargetOffset: manualTargetOffset,
              scrollbarSize: scrollbarSize,
              attachment: this.attachment,
            });

            if (ret === false) {
              return false;
            } else if (typeof ret === "undefined" || typeof ret !== "object") {
              continue;
            } else {
              top = ret.top;
              left = ret.left;
            }
          }

          // We describe the position three different ways to give the optimizer
          // a chance to decide the best possible way to position the element
          // with the fewest repaints.
          var next = {
            // It's position relative to the page (absolute positioning when
            // the element is a child of the body)
            page: {
              top: top,
              left: left,
            },

            // It's position relative to the viewport (fixed positioning)
            viewport: {
              top: top - pageYOffset,
              bottom: pageYOffset - top - height + innerHeight,
              left: left - pageXOffset,
              right: pageXOffset - left - width + innerWidth,
            },
          };

          var scrollbarSize = undefined;
          if (document.body.scrollWidth > window.innerWidth) {
            scrollbarSize = this.cache("scrollbar-size", getScrollBarSize);
            next.viewport.bottom -= scrollbarSize.height;
          }

          if (document.body.scrollHeight > window.innerHeight) {
            scrollbarSize = this.cache("scrollbar-size", getScrollBarSize);
            next.viewport.right -= scrollbarSize.width;
          }

          if (
            ["", "static"].indexOf(document.body.style.position) === -1 ||
            ["", "static"].indexOf(
              document.body.parentElement.style.position
            ) === -1
          ) {
            // Absolute positioning in the body will be relative to the page, not the 'initial containing block'
            next.page.bottom = document.body.scrollHeight - top - height;
            next.page.right = document.body.scrollWidth - left - width;
          }

          if (
            typeof this.options.optimizations !== "undefined" &&
            this.options.optimizations.moveElement !== false &&
            !(typeof this.targetModifier !== "undefined")
          ) {
            (function () {
              var offsetParent = _this7.cache(
                "target-offsetparent",
                function () {
                  return getOffsetParent(_this7.target);
                }
              );
              var offsetPosition = _this7.cache(
                "target-offsetparent-bounds",
                function () {
                  return getBounds(offsetParent);
                }
              );
              var offsetParentStyle = getComputedStyle(offsetParent);
              var offsetParentSize = offsetPosition;

              var offsetBorder = {};
              ["Top", "Left", "Bottom", "Right"].forEach(function (side) {
                offsetBorder[side.toLowerCase()] = parseFloat(
                  offsetParentStyle["border" + side + "Width"]
                );
              });

              offsetPosition.right =
                document.body.scrollWidth -
                offsetPosition.left -
                offsetParentSize.width +
                offsetBorder.right;
              offsetPosition.bottom =
                document.body.scrollHeight -
                offsetPosition.top -
                offsetParentSize.height +
                offsetBorder.bottom;

              if (
                next.page.top >= offsetPosition.top + offsetBorder.top &&
                next.page.bottom >= offsetPosition.bottom
              ) {
                if (
                  next.page.left >= offsetPosition.left + offsetBorder.left &&
                  next.page.right >= offsetPosition.right
                ) {
                  // We're within the visible part of the target's scroll parent
                  var scrollTop = offsetParent.scrollTop;
                  var scrollLeft = offsetParent.scrollLeft;

                  // It's position relative to the target's offset parent (absolute positioning when
                  // the element is moved to be a child of the target's offset parent).
                  next.offset = {
                    top:
                      next.page.top -
                      offsetPosition.top +
                      scrollTop -
                      offsetBorder.top,
                    left:
                      next.page.left -
                      offsetPosition.left +
                      scrollLeft -
                      offsetBorder.left,
                  };
                }
              }
            })();
          }

          // We could also travel up the DOM and try each containing context, rather than only
          // looking at the body, but we're gonna get diminishing returns.

          this.move(next);

          this.history.unshift(next);

          if (this.history.length > 3) {
            this.history.pop();
          }

          if (flushChanges) {
            flush();
          }

          return true;
        },

        // THE ISSUE
      },
      {
        key: "move",
        value: function move(pos) {
          var _this8 = this;

          if (!(typeof this.element.parentNode !== "undefined")) {
            return;
          }

          var same = {};

          for (var type in pos) {
            same[type] = {};

            for (var key in pos[type]) {
              var found = false;

              for (var i = 0; i < this.history.length; ++i) {
                var point = this.history[i];
                if (
                  typeof point[type] !== "undefined" &&
                  !within(point[type][key], pos[type][key])
                ) {
                  found = true;
                  break;
                }
              }

              if (!found) {
                same[type][key] = true;
              }
            }
          }

          var css = { top: "", left: "", right: "", bottom: "" };

          var transcribe = function transcribe(_same, _pos) {
            var hasOptimizations =
              typeof _this8.options.optimizations !== "undefined";
            var gpu = hasOptimizations
              ? _this8.options.optimizations.gpu
              : null;
            if (gpu !== false) {
              var yPos = undefined,
                xPos = undefined;
              if (_same.top) {
                css.top = 0;
                yPos = _pos.top;
              } else {
                css.bottom = 0;
                yPos = -_pos.bottom;
              }

              if (_same.left) {
                css.left = 0;
                xPos = _pos.left;
              } else {
                css.right = 0;
                xPos = -_pos.right;
              }

              css[transformKey] =
                "translateX(" +
                Math.round(xPos) +
                "px) translateY(" +
                Math.round(yPos) +
                "px)";

              if (transformKey !== "msTransform") {
                // The Z transform will keep this in the GPU (faster, and prevents artifacts),
                // but IE9 doesn't support 3d transforms and will choke.
                css[transformKey] += " translateZ(0)";
              }
            } else {
              if (_same.top) {
                css.top = _pos.top + "px";
              } else {
                css.bottom = _pos.bottom + "px";
              }

              if (_same.left) {
                css.left = _pos.left + "px";
              } else {
                css.right = _pos.right + "px";
              }
            }
          };

          var moved = false;
          if (
            (same.page.top || same.page.bottom) &&
            (same.page.left || same.page.right)
          ) {
            css.position = "absolute";
            transcribe(same.page, pos.page);
          } else if (
            (same.viewport.top || same.viewport.bottom) &&
            (same.viewport.left || same.viewport.right)
          ) {
            css.position = "fixed";
            transcribe(same.viewport, pos.viewport);
          } else if (
            typeof same.offset !== "undefined" &&
            same.offset.top &&
            same.offset.left
          ) {
            (function () {
              css.position = "absolute";
              var offsetParent = _this8.cache(
                "target-offsetparent",
                function () {
                  return getOffsetParent(_this8.target);
                }
              );

              if (getOffsetParent(_this8.element) !== offsetParent) {
                defer(function () {
                  _this8.element.parentNode.removeChild(_this8.element);
                  offsetParent.appendChild(_this8.element);
                });
              }

              transcribe(same.offset, pos.offset);
              moved = true;
            })();
          } else {
            css.position = "absolute";
            transcribe({ top: true, left: true }, pos.page);
          }

          if (!moved) {
            var offsetParentIsBody = true;
            var currentNode = this.element.parentNode;
            while (
              currentNode &&
              currentNode.nodeType === 1 &&
              currentNode.tagName !== "BODY"
            ) {
              if (getComputedStyle(currentNode).position !== "static") {
                offsetParentIsBody = false;
                break;
              }

              currentNode = currentNode.parentNode;
            }

            if (!offsetParentIsBody) {
              this.element.parentNode.removeChild(this.element);
              document.body.appendChild(this.element);
            }
          }

          // Any css change will trigger a repaint, so let's avoid one if nothing changed
          var writeCSS = {};
          var write = false;
          for (var key in css) {
            var val = css[key];
            var elVal = this.element.style[key];

            if (elVal !== val) {
              write = true;
              writeCSS[key] = val;
            }
          }

          if (write) {
            defer(function () {
              extend(_this8.element.style, writeCSS);
            });
          }
        },
      },
    ]);

    return TetherClass;
  })(Evented);

  TetherClass.modules = [];

  TetherBase.position = position;

  var Tether = extend(TetherClass, TetherBase);
  /* globals TetherBase */

  ("use strict");

  var _slicedToArray = (function () {
    function sliceIterator(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;
      try {
        for (
          var _i = arr[Symbol.iterator](), _s;
          !(_n = (_s = _i.next()).done);
          _n = true
        ) {
          _arr.push(_s.value);
          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"]) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }
      return _arr;
    }
    return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError(
          "Invalid attempt to destructure non-iterable instance"
        );
      }
    };
  })();

  var _TetherBase$Utils = TetherBase.Utils;
  var getBounds = _TetherBase$Utils.getBounds;
  var extend = _TetherBase$Utils.extend;
  var updateClasses = _TetherBase$Utils.updateClasses;
  var defer = _TetherBase$Utils.defer;

  var BOUNDS_FORMAT = ["left", "top", "right", "bottom"];

  function getBoundingRect(tether, to) {
    if (to === "scrollParent") {
      to = tether.scrollParents[0];
    } else if (to === "window") {
      to = [
        pageXOffset,
        pageYOffset,
        innerWidth + pageXOffset,
        innerHeight + pageYOffset,
      ];
    }

    if (to === document) {
      to = to.documentElement;
    }

    if (typeof to.nodeType !== "undefined") {
      (function () {
        var size = getBounds(to);
        var pos = size;
        var style = getComputedStyle(to);

        to = [pos.left, pos.top, size.width + pos.left, size.height + pos.top];

        BOUNDS_FORMAT.forEach(function (side, i) {
          side = side[0].toUpperCase() + side.substr(1);
          if (side === "Top" || side === "Left") {
            to[i] += parseFloat(style["border" + side + "Width"]);
          } else {
            to[i] -= parseFloat(style["border" + side + "Width"]);
          }
        });
      })();
    }

    return to;
  }

  TetherBase.modules.push({
    position: function position(_ref) {
      var _this = this;

      var top = _ref.top;
      var left = _ref.left;
      var targetAttachment = _ref.targetAttachment;

      if (!this.options.constraints) {
        return true;
      }

      var _cache = this.cache("element-bounds", function () {
        return getBounds(_this.element);
      });

      var height = _cache.height;
      var width = _cache.width;

      if (width === 0 && height === 0 && typeof this.lastSize !== "undefined") {
        var _lastSize = this.lastSize;

        // Handle the item getting hidden as a result of our positioning without glitching
        // the classes in and out
        width = _lastSize.width;
        height = _lastSize.height;
      }

      var targetSize = this.cache("target-bounds", function () {
        return _this.getTargetBounds();
      });

      var targetHeight = targetSize.height;
      var targetWidth = targetSize.width;

      var allClasses = [
        this.getClass("pinned"),
        this.getClass("out-of-bounds"),
      ];

      this.options.constraints.forEach(function (constraint) {
        var outOfBoundsClass = constraint.outOfBoundsClass;
        var pinnedClass = constraint.pinnedClass;

        if (outOfBoundsClass) {
          allClasses.push(outOfBoundsClass);
        }
        if (pinnedClass) {
          allClasses.push(pinnedClass);
        }
      });

      allClasses.forEach(function (cls) {
        ["left", "top", "right", "bottom"].forEach(function (side) {
          allClasses.push(cls + "-" + side);
        });
      });

      var addClasses = [];

      var tAttachment = extend({}, targetAttachment);
      var eAttachment = extend({}, this.attachment);

      this.options.constraints.forEach(function (constraint) {
        var to = constraint.to;
        var attachment = constraint.attachment;
        var pin = constraint.pin;

        if (typeof attachment === "undefined") {
          attachment = "";
        }

        var changeAttachX = undefined,
          changeAttachY = undefined;
        if (attachment.indexOf(" ") >= 0) {
          var _attachment$split = attachment.split(" ");

          var _attachment$split2 = _slicedToArray(_attachment$split, 2);

          changeAttachY = _attachment$split2[0];
          changeAttachX = _attachment$split2[1];
        } else {
          changeAttachX = changeAttachY = attachment;
        }

        var bounds = getBoundingRect(_this, to);

        if (changeAttachY === "target" || changeAttachY === "both") {
          if (top < bounds[1] && tAttachment.top === "top") {
            top += targetHeight;
            tAttachment.top = "bottom";
          }

          if (top + height > bounds[3] && tAttachment.top === "bottom") {
            top -= targetHeight;
            tAttachment.top = "top";
          }
        }

        if (changeAttachY === "together") {
          if (tAttachment.top === "top") {
            if (eAttachment.top === "bottom" && top < bounds[1]) {
              top += targetHeight;
              tAttachment.top = "bottom";

              top += height;
              eAttachment.top = "top";
            } else if (
              eAttachment.top === "top" &&
              top + height > bounds[3] &&
              top - (height - targetHeight) >= bounds[1]
            ) {
              top -= height - targetHeight;
              tAttachment.top = "bottom";

              eAttachment.top = "bottom";
            }
          }

          if (tAttachment.top === "bottom") {
            if (eAttachment.top === "top" && top + height > bounds[3]) {
              top -= targetHeight;
              tAttachment.top = "top";

              top -= height;
              eAttachment.top = "bottom";
            } else if (
              eAttachment.top === "bottom" &&
              top < bounds[1] &&
              top + (height * 2 - targetHeight) <= bounds[3]
            ) {
              top += height - targetHeight;
              tAttachment.top = "top";

              eAttachment.top = "top";
            }
          }

          if (tAttachment.top === "middle") {
            if (top + height > bounds[3] && eAttachment.top === "top") {
              top -= height;
              eAttachment.top = "bottom";
            } else if (top < bounds[1] && eAttachment.top === "bottom") {
              top += height;
              eAttachment.top = "top";
            }
          }
        }

        if (changeAttachX === "target" || changeAttachX === "both") {
          if (left < bounds[0] && tAttachment.left === "left") {
            left += targetWidth;
            tAttachment.left = "right";
          }

          if (left + width > bounds[2] && tAttachment.left === "right") {
            left -= targetWidth;
            tAttachment.left = "left";
          }
        }

        if (changeAttachX === "together") {
          if (left < bounds[0] && tAttachment.left === "left") {
            if (eAttachment.left === "right") {
              left += targetWidth;
              tAttachment.left = "right";

              left += width;
              eAttachment.left = "left";
            } else if (eAttachment.left === "left") {
              left += targetWidth;
              tAttachment.left = "right";

              left -= width;
              eAttachment.left = "right";
            }
          } else if (left + width > bounds[2] && tAttachment.left === "right") {
            if (eAttachment.left === "left") {
              left -= targetWidth;
              tAttachment.left = "left";

              left -= width;
              eAttachment.left = "right";
            } else if (eAttachment.left === "right") {
              left -= targetWidth;
              tAttachment.left = "left";

              left += width;
              eAttachment.left = "left";
            }
          } else if (tAttachment.left === "center") {
            if (left + width > bounds[2] && eAttachment.left === "left") {
              left -= width;
              eAttachment.left = "right";
            } else if (left < bounds[0] && eAttachment.left === "right") {
              left += width;
              eAttachment.left = "left";
            }
          }
        }

        if (changeAttachY === "element" || changeAttachY === "both") {
          if (top < bounds[1] && eAttachment.top === "bottom") {
            top += height;
            eAttachment.top = "top";
          }

          if (top + height > bounds[3] && eAttachment.top === "top") {
            top -= height;
            eAttachment.top = "bottom";
          }
        }

        if (changeAttachX === "element" || changeAttachX === "both") {
          if (left < bounds[0]) {
            if (eAttachment.left === "right") {
              left += width;
              eAttachment.left = "left";
            } else if (eAttachment.left === "center") {
              left += width / 2;
              eAttachment.left = "left";
            }
          }

          if (left + width > bounds[2]) {
            if (eAttachment.left === "left") {
              left -= width;
              eAttachment.left = "right";
            } else if (eAttachment.left === "center") {
              left -= width / 2;
              eAttachment.left = "right";
            }
          }
        }

        if (typeof pin === "string") {
          pin = pin.split(",").map(function (p) {
            return p.trim();
          });
        } else if (pin === true) {
          pin = ["top", "left", "right", "bottom"];
        }

        pin = pin || [];

        var pinned = [];
        var oob = [];

        if (top < bounds[1]) {
          if (pin.indexOf("top") >= 0) {
            top = bounds[1];
            pinned.push("top");
          } else {
            oob.push("top");
          }
        }

        if (top + height > bounds[3]) {
          if (pin.indexOf("bottom") >= 0) {
            top = bounds[3] - height;
            pinned.push("bottom");
          } else {
            oob.push("bottom");
          }
        }

        if (left < bounds[0]) {
          if (pin.indexOf("left") >= 0) {
            left = bounds[0];
            pinned.push("left");
          } else {
            oob.push("left");
          }
        }

        if (left + width > bounds[2]) {
          if (pin.indexOf("right") >= 0) {
            left = bounds[2] - width;
            pinned.push("right");
          } else {
            oob.push("right");
          }
        }

        if (pinned.length) {
          (function () {
            var pinnedClass = undefined;
            if (typeof _this.options.pinnedClass !== "undefined") {
              pinnedClass = _this.options.pinnedClass;
            } else {
              pinnedClass = _this.getClass("pinned");
            }

            addClasses.push(pinnedClass);
            pinned.forEach(function (side) {
              addClasses.push(pinnedClass + "-" + side);
            });
          })();
        }

        if (oob.length) {
          (function () {
            var oobClass = undefined;
            if (typeof _this.options.outOfBoundsClass !== "undefined") {
              oobClass = _this.options.outOfBoundsClass;
            } else {
              oobClass = _this.getClass("out-of-bounds");
            }

            addClasses.push(oobClass);
            oob.forEach(function (side) {
              addClasses.push(oobClass + "-" + side);
            });
          })();
        }

        if (pinned.indexOf("left") >= 0 || pinned.indexOf("right") >= 0) {
          eAttachment.left = tAttachment.left = false;
        }
        if (pinned.indexOf("top") >= 0 || pinned.indexOf("bottom") >= 0) {
          eAttachment.top = tAttachment.top = false;
        }

        if (
          tAttachment.top !== targetAttachment.top ||
          tAttachment.left !== targetAttachment.left ||
          eAttachment.top !== _this.attachment.top ||
          eAttachment.left !== _this.attachment.left
        ) {
          _this.updateAttachClasses(eAttachment, tAttachment);
          _this.trigger("update", {
            attachment: eAttachment,
            targetAttachment: tAttachment,
          });
        }
      });

      defer(function () {
        if (!(_this.options.addTargetClasses === false)) {
          updateClasses(_this.target, addClasses, allClasses);
        }
        updateClasses(_this.element, addClasses, allClasses);
      });

      return { top: top, left: left };
    },
  });
  /* globals TetherBase */

  ("use strict");

  var _TetherBase$Utils = TetherBase.Utils;
  var getBounds = _TetherBase$Utils.getBounds;
  var updateClasses = _TetherBase$Utils.updateClasses;
  var defer = _TetherBase$Utils.defer;

  TetherBase.modules.push({
    position: function position(_ref) {
      var _this = this;

      var top = _ref.top;
      var left = _ref.left;

      var _cache = this.cache("element-bounds", function () {
        return getBounds(_this.element);
      });

      var height = _cache.height;
      var width = _cache.width;

      var targetPos = this.getTargetBounds();

      var bottom = top + height;
      var right = left + width;

      var abutted = [];
      if (top <= targetPos.bottom && bottom >= targetPos.top) {
        ["left", "right"].forEach(function (side) {
          var targetPosSide = targetPos[side];
          if (targetPosSide === left || targetPosSide === right) {
            abutted.push(side);
          }
        });
      }

      if (left <= targetPos.right && right >= targetPos.left) {
        ["top", "bottom"].forEach(function (side) {
          var targetPosSide = targetPos[side];
          if (targetPosSide === top || targetPosSide === bottom) {
            abutted.push(side);
          }
        });
      }

      var allClasses = [];
      var addClasses = [];

      var sides = ["left", "top", "right", "bottom"];
      allClasses.push(this.getClass("abutted"));
      sides.forEach(function (side) {
        allClasses.push(_this.getClass("abutted") + "-" + side);
      });

      if (abutted.length) {
        addClasses.push(this.getClass("abutted"));
      }

      abutted.forEach(function (side) {
        addClasses.push(_this.getClass("abutted") + "-" + side);
      });

      defer(function () {
        if (!(_this.options.addTargetClasses === false)) {
          updateClasses(_this.target, addClasses, allClasses);
        }
        updateClasses(_this.element, addClasses, allClasses);
      });

      return true;
    },
  });
  /* globals TetherBase */

  ("use strict");

  var _slicedToArray = (function () {
    function sliceIterator(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;
      try {
        for (
          var _i = arr[Symbol.iterator](), _s;
          !(_n = (_s = _i.next()).done);
          _n = true
        ) {
          _arr.push(_s.value);
          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"]) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }
      return _arr;
    }
    return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError(
          "Invalid attempt to destructure non-iterable instance"
        );
      }
    };
  })();

  TetherBase.modules.push({
    position: function position(_ref) {
      var top = _ref.top;
      var left = _ref.left;

      if (!this.options.shift) {
        return;
      }

      var shift = this.options.shift;
      if (typeof this.options.shift === "function") {
        shift = this.options.shift.call(this, { top: top, left: left });
      }

      var shiftTop = undefined,
        shiftLeft = undefined;
      if (typeof shift === "string") {
        shift = shift.split(" ");
        shift[1] = shift[1] || shift[0];

        var _shift = shift;

        var _shift2 = _slicedToArray(_shift, 2);

        shiftTop = _shift2[0];
        shiftLeft = _shift2[1];

        shiftTop = parseFloat(shiftTop, 10);
        shiftLeft = parseFloat(shiftLeft, 10);
      } else {
        shiftTop = shift.top;
        shiftLeft = shift.left;
      }

      top += shiftTop;
      left += shiftLeft;

      return { top: top, left: left };
    },
  });
  return Tether;
});

/*! tether-drop 1.4.0 */

(function (root, factory) {
  if (typeof define === "function" && define.amd) {
    define(["tether"], factory);
  } else if (typeof exports === "object") {
    module.exports = factory(require("tether"));
  } else {
    root.Drop = factory(root.Tether);
  }
})(this, function (Tether) {
  /* global Tether */
  "use strict";

  var _bind = Function.prototype.bind;

  var _slicedToArray = (function () {
    function sliceIterator(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;
      try {
        for (
          var _i = arr[Symbol.iterator](), _s;
          !(_n = (_s = _i.next()).done);
          _n = true
        ) {
          _arr.push(_s.value);
          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"]) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }
      return _arr;
    }
    return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError(
          "Invalid attempt to destructure non-iterable instance"
        );
      }
    };
  })();

  var _createClass = (function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  })();

  var _get = function get(_x2, _x3, _x4) {
    var _again = true;
    _function: while (_again) {
      var object = _x2,
        property = _x3,
        receiver = _x4;
      _again = false;
      if (object === null) object = Function.prototype;
      var desc = Object.getOwnPropertyDescriptor(object, property);
      if (desc === undefined) {
        var parent = Object.getPrototypeOf(object);
        if (parent === null) {
          return undefined;
        } else {
          _x2 = parent;
          _x3 = property;
          _x4 = receiver;
          _again = true;
          desc = parent = undefined;
          continue _function;
        }
      } else if ("value" in desc) {
        return desc.value;
      } else {
        var getter = desc.get;
        if (getter === undefined) {
          return undefined;
        }
        return getter.call(receiver);
      }
    }
  };

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError(
        "Super expression must either be null or a function, not " +
          typeof superClass
      );
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true,
      },
    });
    if (superClass)
      Object.setPrototypeOf
        ? Object.setPrototypeOf(subClass, superClass)
        : (subClass.__proto__ = superClass);
  }

  var _Tether$Utils = Tether.Utils;
  var extend = _Tether$Utils.extend;
  var addClass = _Tether$Utils.addClass;
  var removeClass = _Tether$Utils.removeClass;
  var hasClass = _Tether$Utils.hasClass;
  var Evented = _Tether$Utils.Evented;

  function sortAttach(str) {
    var _str$split = str.split(" ");

    var _str$split2 = _slicedToArray(_str$split, 2);

    var first = _str$split2[0];
    var second = _str$split2[1];

    if (["left", "right"].indexOf(first) >= 0) {
      var _ref = [second, first];
      first = _ref[0];
      second = _ref[1];
    }
    return [first, second].join(" ");
  }

  function removeFromArray(arr, item) {
    var index = undefined;
    var results = [];
    while ((index = arr.indexOf(item)) !== -1) {
      results.push(arr.splice(index, 1));
    }
    return results;
  }

  var clickEvents = ["click"];
  if ("ontouchstart" in document.documentElement) {
    clickEvents.push("touchstart");
  }

  var transitionEndEvents = {
    WebkitTransition: "webkitTransitionEnd",
    MozTransition: "transitionend",
    OTransition: "otransitionend",
    transition: "transitionend",
  };

  var transitionEndEvent = "";
  for (var _name in transitionEndEvents) {
    if ({}.hasOwnProperty.call(transitionEndEvents, _name)) {
      var tempEl = document.createElement("p");
      if (typeof tempEl.style[_name] !== "undefined") {
        transitionEndEvent = transitionEndEvents[_name];
      }
    }
  }

  var MIRROR_ATTACH = {
    left: "right",
    right: "left",
    top: "bottom",
    bottom: "top",
    middle: "middle",
    center: "center",
  };

  var allDrops = {};

  // Drop can be included in external libraries.  Calling createContext gives you a fresh
  // copy of drop which won't interact with other copies on the page (beyond calling the document events).

  function createContext() {
    var options =
      arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    var drop = function drop() {
      for (
        var _len = arguments.length, args = Array(_len), _key = 0;
        _key < _len;
        _key++
      ) {
        args[_key] = arguments[_key];
      }

      return new (_bind.apply(DropInstance, [null].concat(args)))();
    };

    extend(drop, {
      createContext: createContext,
      drops: [],
      defaults: {},
    });

    var defaultOptions = {
      classPrefix: "drop",
      defaults: {
        position: "bottom left",
        openOn: "click",
        beforeClose: null,
        constrainToScrollParent: true,
        constrainToWindow: true,
        classes: "",
        remove: false,
        openDelay: 0,
        closeDelay: 50,
        // inherited from openDelay and closeDelay if not explicitly defined
        focusDelay: null,
        blurDelay: null,
        hoverOpenDelay: null,
        hoverCloseDelay: null,
        tetherOptions: {},
      },
    };

    extend(drop, defaultOptions, options);
    extend(drop.defaults, defaultOptions.defaults, options.defaults);

    if (typeof allDrops[drop.classPrefix] === "undefined") {
      allDrops[drop.classPrefix] = [];
    }

    drop.updateBodyClasses = function () {
      // There is only one body, so despite the context concept, we still iterate through all
      // drops which share our classPrefix.

      var anyOpen = false;
      var drops = allDrops[drop.classPrefix];
      var len = drops.length;
      for (var i = 0; i < len; ++i) {
        if (drops[i].isOpened()) {
          anyOpen = true;
          break;
        }
      }

      if (anyOpen) {
        addClass(document.body, drop.classPrefix + "-open");
      } else {
        removeClass(document.body, drop.classPrefix + "-open");
      }
    };

    var DropInstance = (function (_Evented) {
      _inherits(DropInstance, _Evented);

      function DropInstance(opts) {
        _classCallCheck(this, DropInstance);

        _get(
          Object.getPrototypeOf(DropInstance.prototype),
          "constructor",
          this
        ).call(this);
        this.options = extend({}, drop.defaults, opts);
        this.target = this.options.target;

        if (typeof this.target === "undefined") {
          throw new Error("Drop Error: You must provide a target.");
        }

        var dataPrefix = "data-" + drop.classPrefix;

        var contentAttr = this.target.getAttribute(dataPrefix);
        if (contentAttr) {
          this.options.content = contentAttr;
        }

        var attrsOverride = ["position", "openOn"];
        for (var i = 0; i < attrsOverride.length; ++i) {
          var override = this.target.getAttribute(
            dataPrefix + "-" + attrsOverride[i]
          );
          if (override) {
            this.options[attrsOverride[i]] = override;
          }
        }

        if (this.options.classes && this.options.addTargetClasses !== false) {
          addClass(this.target, this.options.classes);
        }

        drop.drops.push(this);
        allDrops[drop.classPrefix].push(this);

        this._boundEvents = [];
        this.bindMethods();
        this.setupElements();
        this.setupEvents();
        this.setupTether();
      }

      _createClass(DropInstance, [
        {
          key: "_on",
          value: function _on(element, event, handler) {
            this._boundEvents.push({
              element: element,
              event: event,
              handler: handler,
            });
            element.addEventListener(event, handler);
          },
        },
        {
          key: "bindMethods",
          value: function bindMethods() {
            this.transitionEndHandler = this._transitionEndHandler.bind(this);
          },
        },
        {
          key: "setupElements",
          value: function setupElements() {
            var _this = this;

            this.drop = document.createElement("div");
            addClass(this.drop, drop.classPrefix);

            if (this.options.classes) {
              addClass(this.drop, this.options.classes);
            }

            this.content = document.createElement("div");
            addClass(this.content, drop.classPrefix + "-content");

            if (typeof this.options.content === "function") {
              var generateAndSetContent = function generateAndSetContent() {
                // content function might return a string or an element
                var contentElementOrHTML = _this.options.content.call(
                  _this,
                  _this
                );

                if (typeof contentElementOrHTML === "string") {
                  _this.content.innerHTML = contentElementOrHTML;
                } else if (typeof contentElementOrHTML === "object") {
                  _this.content.innerHTML = "";
                  _this.content.appendChild(contentElementOrHTML);
                } else {
                  throw new Error(
                    "Drop Error: Content function should return a string or HTMLElement."
                  );
                }
              };

              generateAndSetContent();
              this.on("open", generateAndSetContent.bind(this));
            } else if (typeof this.options.content === "object") {
              this.content.appendChild(this.options.content);
            } else {
              this.content.innerHTML = this.options.content;
            }

            this.drop.appendChild(this.content);
          },
        },
        {
          key: "setupTether",
          value: function setupTether() {
            // Tether expects two attachment points, one in the target element, one in the
            // drop.  We use a single one, and use the order as well, to allow us to put
            // the drop on either side of any of the four corners.  This magic converts between
            // the two:
            var dropAttach = this.options.position.split(" ");
            dropAttach[0] = MIRROR_ATTACH[dropAttach[0]];
            dropAttach = dropAttach.join(" ");

            var constraints = [];
            if (this.options.constrainToScrollParent) {
              constraints.push({
                to: "scrollParent",
                pin: "top, bottom",
                attachment: "together none",
              });
            } else {
              // To get 'out of bounds' classes
              constraints.push({
                to: "scrollParent",
              });
            }

            if (this.options.constrainToWindow !== false) {
              constraints.push({
                to: "window",
                attachment: "together",
              });
            } else {
              // To get 'out of bounds' classes
              constraints.push({
                to: "window",
              });
            }

            var opts = {
              element: this.drop,
              target: this.target,
              attachment: sortAttach(dropAttach),
              targetAttachment: sortAttach(this.options.position),
              classPrefix: drop.classPrefix,
              offset: "0 0",
              targetOffset: "0 0",
              enabled: false,
              constraints: constraints,
              addTargetClasses: this.options.addTargetClasses,
            };

            if (this.options.tetherOptions !== false) {
              this.tether = new Tether(
                extend({}, opts, this.options.tetherOptions)
              );
            }
          },
        },
        {
          key: "setupEvents",
          value: function setupEvents() {
            var _this2 = this;

            if (!this.options.openOn) {
              return;
            }

            if (this.options.openOn === "always") {
              setTimeout(this.open.bind(this));
              return;
            }

            var events = this.options.openOn.split(" ");

            if (events.indexOf("click") >= 0) {
              var openHandler = function openHandler(event) {
                _this2.toggle(event);
                event.preventDefault();
              };

              var closeHandler = function closeHandler(event) {
                if (!_this2.isOpened()) {
                  return;
                }

                // Clicking inside dropdown
                if (
                  event.target === _this2.drop ||
                  _this2.drop.contains(event.target)
                ) {
                  return;
                }

                // Clicking target
                if (
                  event.target === _this2.target ||
                  _this2.target.contains(event.target)
                ) {
                  return;
                }

                _this2.close(event);
              };

              for (var i = 0; i < clickEvents.length; ++i) {
                var clickEvent = clickEvents[i];
                this._on(this.target, clickEvent, openHandler);
                this._on(document, clickEvent, closeHandler);
              }
            }

            var inTimeout = null;
            var outTimeout = null;

            var inHandler = function inHandler(event) {
              if (outTimeout !== null) {
                clearTimeout(outTimeout);
              } else {
                inTimeout = setTimeout(function () {
                  _this2.open(event);
                  inTimeout = null;
                }, (event.type === "focus"
                  ? _this2.options.focusDelay
                  : _this2.options.hoverOpenDelay) || _this2.options.openDelay);
              }
            };

            var outHandler = function outHandler(event) {
              if (inTimeout !== null) {
                clearTimeout(inTimeout);
              } else {
                outTimeout = setTimeout(function () {
                  _this2.close(event);
                  outTimeout = null;
                }, (event.type === "blur"
                  ? _this2.options.blurDelay
                  : _this2.options.hoverCloseDelay) ||
                  _this2.options.closeDelay);
              }
            };

            if (events.indexOf("hover") >= 0) {
              this._on(this.target, "mouseover", inHandler);
              this._on(this.drop, "mouseover", inHandler);
              this._on(this.target, "mouseout", outHandler);
              this._on(this.drop, "mouseout", outHandler);
            }

            if (events.indexOf("focus") >= 0) {
              this._on(this.target, "focus", inHandler);
              this._on(this.drop, "focus", inHandler);
              this._on(this.target, "blur", outHandler);
              this._on(this.drop, "blur", outHandler);
            }
          },
        },
        {
          key: "isOpened",
          value: function isOpened() {
            if (this.drop) {
              return hasClass(this.drop, drop.classPrefix + "-open");
            }
          },
        },
        {
          key: "toggle",
          value: function toggle(event) {
            if (this.isOpened()) {
              this.close(event);
            } else {
              this.open(event);
            }
          },
        },
        {
          key: "open",
          value: function open(event) {
            var _this3 = this;

            /* eslint no-unused-vars: 0 */
            if (this.isOpened()) {
              return;
            }

            if (!this.drop.parentNode) {
              document.body.appendChild(this.drop);
            }

            if (typeof this.tether !== "undefined") {
              this.tether.enable();
            }

            addClass(this.drop, drop.classPrefix + "-open");
            addClass(this.drop, drop.classPrefix + "-open-transitionend");

            setTimeout(function () {
              if (_this3.drop) {
                addClass(_this3.drop, drop.classPrefix + "-after-open");
              }
            });

            if (typeof this.tether !== "undefined") {
              this.tether.position();
            }

            this.trigger("open");

            drop.updateBodyClasses();
          },
        },
        {
          key: "_transitionEndHandler",
          value: function _transitionEndHandler(e) {
            if (e.target !== e.currentTarget) {
              return;
            }

            if (!hasClass(this.drop, drop.classPrefix + "-open")) {
              removeClass(this.drop, drop.classPrefix + "-open-transitionend");
            }
            this.drop.removeEventListener(
              transitionEndEvent,
              this.transitionEndHandler
            );
          },
        },
        {
          key: "beforeCloseHandler",
          value: function beforeCloseHandler(event) {
            var shouldClose = true;

            if (
              !this.isClosing &&
              typeof this.options.beforeClose === "function"
            ) {
              this.isClosing = true;
              shouldClose = this.options.beforeClose(event, this) !== false;
            }

            this.isClosing = false;

            return shouldClose;
          },
        },
        {
          key: "close",
          value: function close(event) {
            if (!this.isOpened()) {
              return;
            }

            if (!this.beforeCloseHandler(event)) {
              return;
            }

            removeClass(this.drop, drop.classPrefix + "-open");
            removeClass(this.drop, drop.classPrefix + "-after-open");

            this.drop.addEventListener(
              transitionEndEvent,
              this.transitionEndHandler
            );

            this.trigger("close");

            if (typeof this.tether !== "undefined") {
              this.tether.disable();
            }

            drop.updateBodyClasses();

            if (this.options.remove) {
              this.remove(event);
            }
          },
        },
        {
          key: "remove",
          value: function remove(event) {
            this.close(event);
            if (this.drop.parentNode) {
              this.drop.parentNode.removeChild(this.drop);
            }
          },
        },
        {
          key: "position",
          value: function position() {
            if (this.isOpened() && typeof this.tether !== "undefined") {
              this.tether.position();
            }
          },
        },
        {
          key: "destroy",
          value: function destroy() {
            this.remove();

            if (typeof this.tether !== "undefined") {
              this.tether.destroy();
            }

            for (var i = 0; i < this._boundEvents.length; ++i) {
              var _boundEvents$i = this._boundEvents[i];
              var element = _boundEvents$i.element;
              var _event = _boundEvents$i.event;
              var handler = _boundEvents$i.handler;

              element.removeEventListener(_event, handler);
            }

            this._boundEvents = [];

            this.tether = null;
            this.drop = null;
            this.content = null;
            this.target = null;

            removeFromArray(allDrops[drop.classPrefix], this);
            removeFromArray(drop.drops, this);
          },
        },
      ]);

      return DropInstance;
    })(Evented);

    return drop;
  }

  var Drop = createContext();

  document.addEventListener("DOMContentLoaded", function () {
    Drop.updateBodyClasses();
  });
  return Drop;
});

/*!
Waypoints - 3.1.1
Copyright © 2011-2015 Caleb Troughton
Licensed under the MIT license.
https://github.com/imakewebthings/waypoints/blog/master/licenses.txt
*/
(function () {
  "use strict";

  var keyCounter = 0;
  var allWaypoints = {};

  /* http://imakewebthings.com/waypoints/api/waypoint */
  function Waypoint(options) {
    if (!options) {
      throw new Error("No options passed to Waypoint constructor");
    }
    if (!options.element) {
      throw new Error("No element option passed to Waypoint constructor");
    }
    if (!options.handler) {
      throw new Error("No handler option passed to Waypoint constructor");
    }

    this.key = "waypoint-" + keyCounter;
    this.options = Waypoint.Adapter.extend({}, Waypoint.defaults, options);
    this.element = this.options.element;
    this.adapter = new Waypoint.Adapter(this.element);
    this.callback = options.handler;
    this.axis = this.options.horizontal ? "horizontal" : "vertical";
    this.enabled = this.options.enabled;
    this.triggerPoint = null;
    this.group = Waypoint.Group.findOrCreate({
      name: this.options.group,
      axis: this.axis,
    });
    this.context = Waypoint.Context.findOrCreateByElement(this.options.context);

    if (Waypoint.offsetAliases[this.options.offset]) {
      this.options.offset = Waypoint.offsetAliases[this.options.offset];
    }
    this.group.add(this);
    this.context.add(this);
    allWaypoints[this.key] = this;
    keyCounter += 1;
  }

  /* Private */
  Waypoint.prototype.queueTrigger = function (direction) {
    this.group.queueTrigger(this, direction);
  };

  /* Private */
  Waypoint.prototype.trigger = function (args) {
    if (!this.enabled) {
      return;
    }
    if (this.callback) {
      this.callback.apply(this, args);
    }
  };

  /* Public */
  /* http://imakewebthings.com/waypoints/api/destroy */
  Waypoint.prototype.destroy = function () {
    this.context.remove(this);
    this.group.remove(this);
    delete allWaypoints[this.key];
  };

  /* Public */
  /* http://imakewebthings.com/waypoints/api/disable */
  Waypoint.prototype.disable = function () {
    this.enabled = false;
    return this;
  };

  /* Public */
  /* http://imakewebthings.com/waypoints/api/enable */
  Waypoint.prototype.enable = function () {
    this.context.refresh();
    this.enabled = true;
    return this;
  };

  /* Public */
  /* http://imakewebthings.com/waypoints/api/next */
  Waypoint.prototype.next = function () {
    return this.group.next(this);
  };

  /* Public */
  /* http://imakewebthings.com/waypoints/api/previous */
  Waypoint.prototype.previous = function () {
    return this.group.previous(this);
  };

  /* Private */
  Waypoint.invokeAll = function (method) {
    var allWaypointsArray = [];
    for (var waypointKey in allWaypoints) {
      allWaypointsArray.push(allWaypoints[waypointKey]);
    }
    for (var i = 0, end = allWaypointsArray.length; i < end; i++) {
      allWaypointsArray[i][method]();
    }
  };

  /* Public */
  /* http://imakewebthings.com/waypoints/api/destroy-all */
  Waypoint.destroyAll = function () {
    Waypoint.invokeAll("destroy");
  };

  /* Public */
  /* http://imakewebthings.com/waypoints/api/disable-all */
  Waypoint.disableAll = function () {
    Waypoint.invokeAll("disable");
  };

  /* Public */
  /* http://imakewebthings.com/waypoints/api/enable-all */
  Waypoint.enableAll = function () {
    Waypoint.invokeAll("enable");
  };

  /* Public */
  /* http://imakewebthings.com/waypoints/api/refresh-all */
  Waypoint.refreshAll = function () {
    Waypoint.Context.refreshAll();
  };

  /* Public */
  /* http://imakewebthings.com/waypoints/api/viewport-height */
  Waypoint.viewportHeight = function () {
    return window.innerHeight || document.documentElement.clientHeight;
  };

  /* Public */
  /* http://imakewebthings.com/waypoints/api/viewport-width */
  Waypoint.viewportWidth = function () {
    return document.documentElement.clientWidth;
  };

  Waypoint.adapters = [];

  Waypoint.defaults = {
    context: window,
    continuous: true,
    enabled: true,
    group: "default",
    horizontal: false,
    offset: 0,
  };

  Waypoint.offsetAliases = {
    "bottom-in-view": function () {
      return this.context.innerHeight() - this.adapter.outerHeight();
    },
    "right-in-view": function () {
      return this.context.innerWidth() - this.adapter.outerWidth();
    },
  };

  window.Waypoint = Waypoint;
})();
(function () {
  "use strict";

  function requestAnimationFrameShim(callback) {
    window.setTimeout(callback, 1000 / 60);
  }

  var keyCounter = 0;
  var contexts = {};
  var Waypoint = window.Waypoint;
  var oldWindowLoad = window.onload;

  /* http://imakewebthings.com/waypoints/api/context */
  function Context(element) {
    this.element = element;
    this.Adapter = Waypoint.Adapter;
    this.adapter = new this.Adapter(element);
    this.key = "waypoint-context-" + keyCounter;
    this.didScroll = false;
    this.didResize = false;
    this.oldScroll = {
      x: this.adapter.scrollLeft(),
      y: this.adapter.scrollTop(),
    };
    this.waypoints = {
      vertical: {},
      horizontal: {},
    };

    element.waypointContextKey = this.key;
    contexts[element.waypointContextKey] = this;
    keyCounter += 1;

    this.createThrottledScrollHandler();
    this.createThrottledResizeHandler();
  }

  /* Private */
  Context.prototype.add = function (waypoint) {
    var axis = waypoint.options.horizontal ? "horizontal" : "vertical";
    this.waypoints[axis][waypoint.key] = waypoint;
    this.refresh();
  };

  /* Private */
  Context.prototype.checkEmpty = function () {
    var horizontalEmpty = this.Adapter.isEmptyObject(this.waypoints.horizontal);
    var verticalEmpty = this.Adapter.isEmptyObject(this.waypoints.vertical);
    if (horizontalEmpty && verticalEmpty) {
      this.adapter.off(".waypoints");
      delete contexts[this.key];
    }
  };

  /* Private */
  Context.prototype.createThrottledResizeHandler = function () {
    var self = this;

    function resizeHandler() {
      self.handleResize();
      self.didResize = false;
    }

    this.adapter.on("resize.waypoints", function () {
      if (!self.didResize) {
        self.didResize = true;
        Waypoint.requestAnimationFrame(resizeHandler);
      }
    });
  };

  /* Private */
  Context.prototype.createThrottledScrollHandler = function () {
    var self = this;
    function scrollHandler() {
      self.handleScroll();
      self.didScroll = false;
    }

    this.adapter.on("scroll.waypoints", function () {
      if (!self.didScroll || Waypoint.isTouch) {
        self.didScroll = true;
        Waypoint.requestAnimationFrame(scrollHandler);
      }
    });
  };

  /* Private */
  Context.prototype.handleResize = function () {
    Waypoint.Context.refreshAll();
  };

  /* Private */
  Context.prototype.handleScroll = function () {
    var triggeredGroups = {};
    var axes = {
      horizontal: {
        newScroll: this.adapter.scrollLeft(),
        oldScroll: this.oldScroll.x,
        forward: "right",
        backward: "left",
      },
      vertical: {
        newScroll: this.adapter.scrollTop(),
        oldScroll: this.oldScroll.y,
        forward: "down",
        backward: "up",
      },
    };

    for (var axisKey in axes) {
      var axis = axes[axisKey];
      var isForward = axis.newScroll > axis.oldScroll;
      var direction = isForward ? axis.forward : axis.backward;

      for (var waypointKey in this.waypoints[axisKey]) {
        var waypoint = this.waypoints[axisKey][waypointKey];
        var wasBeforeTriggerPoint = axis.oldScroll < waypoint.triggerPoint;
        var nowAfterTriggerPoint = axis.newScroll >= waypoint.triggerPoint;
        var crossedForward = wasBeforeTriggerPoint && nowAfterTriggerPoint;
        var crossedBackward = !wasBeforeTriggerPoint && !nowAfterTriggerPoint;
        if (crossedForward || crossedBackward) {
          waypoint.queueTrigger(direction);
          triggeredGroups[waypoint.group.id] = waypoint.group;
        }
      }
    }

    for (var groupKey in triggeredGroups) {
      triggeredGroups[groupKey].flushTriggers();
    }

    this.oldScroll = {
      x: axes.horizontal.newScroll,
      y: axes.vertical.newScroll,
    };
  };

  /* Private */
  Context.prototype.innerHeight = function () {
    /*eslint-disable eqeqeq */
    if (this.element == this.element.window) {
      return Waypoint.viewportHeight();
    }
    /*eslint-enable eqeqeq */
    return this.adapter.innerHeight();
  };

  /* Private */
  Context.prototype.remove = function (waypoint) {
    delete this.waypoints[waypoint.axis][waypoint.key];
    this.checkEmpty();
  };

  /* Private */
  Context.prototype.innerWidth = function () {
    /*eslint-disable eqeqeq */
    if (this.element == this.element.window) {
      return Waypoint.viewportWidth();
    }
    /*eslint-enable eqeqeq */
    return this.adapter.innerWidth();
  };

  /* Public */
  /* http://imakewebthings.com/waypoints/api/context-destroy */
  Context.prototype.destroy = function () {
    var allWaypoints = [];
    for (var axis in this.waypoints) {
      for (var waypointKey in this.waypoints[axis]) {
        allWaypoints.push(this.waypoints[axis][waypointKey]);
      }
    }
    for (var i = 0, end = allWaypoints.length; i < end; i++) {
      allWaypoints[i].destroy();
    }
  };

  /* Public */
  /* http://imakewebthings.com/waypoints/api/context-refresh */
  Context.prototype.refresh = function () {
    /*eslint-disable eqeqeq */
    var isWindow = this.element == this.element.window;
    /*eslint-enable eqeqeq */
    var contextOffset = this.adapter.offset();
    var triggeredGroups = {};
    var axes;

    this.handleScroll();
    axes = {
      horizontal: {
        contextOffset: isWindow ? 0 : contextOffset.left,
        contextScroll: isWindow ? 0 : this.oldScroll.x,
        contextDimension: this.innerWidth(),
        oldScroll: this.oldScroll.x,
        forward: "right",
        backward: "left",
        offsetProp: "left",
      },
      vertical: {
        contextOffset: isWindow ? 0 : contextOffset.top,
        contextScroll: isWindow ? 0 : this.oldScroll.y,
        contextDimension: this.innerHeight(),
        oldScroll: this.oldScroll.y,
        forward: "down",
        backward: "up",
        offsetProp: "top",
      },
    };

    for (var axisKey in axes) {
      var axis = axes[axisKey];
      for (var waypointKey in this.waypoints[axisKey]) {
        var waypoint = this.waypoints[axisKey][waypointKey];
        var adjustment = waypoint.options.offset;
        var oldTriggerPoint = waypoint.triggerPoint;
        var elementOffset = 0;
        var freshWaypoint = oldTriggerPoint == null;
        var contextModifier, wasBeforeScroll, nowAfterScroll;
        var triggeredBackward, triggeredForward;

        if (waypoint.element !== waypoint.element.window) {
          elementOffset = waypoint.adapter.offset()[axis.offsetProp];
        }

        if (typeof adjustment === "function") {
          adjustment = adjustment.apply(waypoint);
        } else if (typeof adjustment === "string") {
          adjustment = parseFloat(adjustment);
          if (waypoint.options.offset.indexOf("%") > -1) {
            adjustment = Math.ceil((axis.contextDimension * adjustment) / 100);
          }
        }

        contextModifier = axis.contextScroll - axis.contextOffset;
        waypoint.triggerPoint = elementOffset + contextModifier - adjustment;
        wasBeforeScroll = oldTriggerPoint < axis.oldScroll;
        nowAfterScroll = waypoint.triggerPoint >= axis.oldScroll;
        triggeredBackward = wasBeforeScroll && nowAfterScroll;
        triggeredForward = !wasBeforeScroll && !nowAfterScroll;

        if (!freshWaypoint && triggeredBackward) {
          waypoint.queueTrigger(axis.backward);
          triggeredGroups[waypoint.group.id] = waypoint.group;
        } else if (!freshWaypoint && triggeredForward) {
          waypoint.queueTrigger(axis.forward);
          triggeredGroups[waypoint.group.id] = waypoint.group;
        } else if (freshWaypoint && axis.oldScroll >= waypoint.triggerPoint) {
          waypoint.queueTrigger(axis.forward);
          triggeredGroups[waypoint.group.id] = waypoint.group;
        }
      }
    }

    for (var groupKey in triggeredGroups) {
      triggeredGroups[groupKey].flushTriggers();
    }

    return this;
  };

  /* Private */
  Context.findOrCreateByElement = function (element) {
    return Context.findByElement(element) || new Context(element);
  };

  /* Private */
  Context.refreshAll = function () {
    for (var contextId in contexts) {
      contexts[contextId].refresh();
    }
  };

  /* Public */
  /* http://imakewebthings.com/waypoints/api/context-find-by-element */
  Context.findByElement = function (element) {
    return contexts[element.waypointContextKey];
  };

  window.onload = function () {
    if (oldWindowLoad) {
      oldWindowLoad();
    }
    Context.refreshAll();
  };

  Waypoint.requestAnimationFrame = function (callback) {
    var requestFn =
      window.requestAnimationFrame ||
      window.mozRequestAnimationFrame ||
      window.webkitRequestAnimationFrame ||
      requestAnimationFrameShim;
    requestFn.call(window, callback);
  };
  Waypoint.Context = Context;
})();
(function () {
  "use strict";

  function byTriggerPoint(a, b) {
    return a.triggerPoint - b.triggerPoint;
  }

  function byReverseTriggerPoint(a, b) {
    return b.triggerPoint - a.triggerPoint;
  }

  var groups = {
    vertical: {},
    horizontal: {},
  };
  var Waypoint = window.Waypoint;

  /* http://imakewebthings.com/waypoints/api/group */
  function Group(options) {
    this.name = options.name;
    this.axis = options.axis;
    this.id = this.name + "-" + this.axis;
    this.waypoints = [];
    this.clearTriggerQueues();
    groups[this.axis][this.name] = this;
  }

  /* Private */
  Group.prototype.add = function (waypoint) {
    this.waypoints.push(waypoint);
  };

  /* Private */
  Group.prototype.clearTriggerQueues = function () {
    this.triggerQueues = {
      up: [],
      down: [],
      left: [],
      right: [],
    };
  };

  /* Private */
  Group.prototype.flushTriggers = function () {
    for (var direction in this.triggerQueues) {
      var waypoints = this.triggerQueues[direction];
      var reverse = direction === "up" || direction === "left";
      waypoints.sort(reverse ? byReverseTriggerPoint : byTriggerPoint);
      for (var i = 0, end = waypoints.length; i < end; i += 1) {
        var waypoint = waypoints[i];
        if (waypoint.options.continuous || i === waypoints.length - 1) {
          waypoint.trigger([direction]);
        }
      }
    }
    this.clearTriggerQueues();
  };

  /* Private */
  Group.prototype.next = function (waypoint) {
    this.waypoints.sort(byTriggerPoint);
    var index = Waypoint.Adapter.inArray(waypoint, this.waypoints);
    var isLast = index === this.waypoints.length - 1;
    return isLast ? null : this.waypoints[index + 1];
  };

  /* Private */
  Group.prototype.previous = function (waypoint) {
    this.waypoints.sort(byTriggerPoint);
    var index = Waypoint.Adapter.inArray(waypoint, this.waypoints);
    return index ? this.waypoints[index - 1] : null;
  };

  /* Private */
  Group.prototype.queueTrigger = function (waypoint, direction) {
    this.triggerQueues[direction].push(waypoint);
  };

  /* Private */
  Group.prototype.remove = function (waypoint) {
    var index = Waypoint.Adapter.inArray(waypoint, this.waypoints);
    if (index > -1) {
      this.waypoints.splice(index, 1);
    }
  };

  /* Public */
  /* http://imakewebthings.com/waypoints/api/first */
  Group.prototype.first = function () {
    return this.waypoints[0];
  };

  /* Public */
  /* http://imakewebthings.com/waypoints/api/last */
  Group.prototype.last = function () {
    return this.waypoints[this.waypoints.length - 1];
  };

  /* Private */
  Group.findOrCreate = function (options) {
    return groups[options.axis][options.name] || new Group(options);
  };

  Waypoint.Group = Group;
})();
(function () {
  "use strict";

  var $ = window.jQuery;
  var Waypoint = window.Waypoint;

  function JQueryAdapter(element) {
    this.$element = $(element);
  }

  $.each(
    [
      "innerHeight",
      "innerWidth",
      "off",
      "offset",
      "on",
      "outerHeight",
      "outerWidth",
      "scrollLeft",
      "scrollTop",
    ],
    function (i, method) {
      JQueryAdapter.prototype[method] = function () {
        var args = Array.prototype.slice.call(arguments);
        return this.$element[method].apply(this.$element, args);
      };
    }
  );

  $.each(["extend", "inArray", "isEmptyObject"], function (i, method) {
    JQueryAdapter[method] = $[method];
  });

  Waypoint.adapters.push({
    name: "jquery",
    Adapter: JQueryAdapter,
  });
  Waypoint.Adapter = JQueryAdapter;
})();
(function () {
  "use strict";

  var Waypoint = window.Waypoint;

  function createExtension(framework) {
    return function () {
      var waypoints = [];
      var overrides = arguments[0];

      if (framework.isFunction(arguments[0])) {
        overrides = framework.extend({}, arguments[1]);
        overrides.handler = arguments[0];
      }

      this.each(function () {
        var options = framework.extend({}, overrides, {
          element: this,
        });
        if (typeof options.context === "string") {
          options.context = framework(this).closest(options.context)[0];
        }
        waypoints.push(new Waypoint(options));
      });

      return waypoints;
    };
  }

  if (window.jQuery) {
    window.jQuery.fn.waypoint = createExtension(window.jQuery);
  }
  if (window.Zepto) {
    window.Zepto.fn.waypoint = createExtension(window.Zepto);
  }
})();
// Generated by CoffeeScript 1.4.0

(function () {
    function UpdateNews() {
      // if (!$("#news-and-media-form").valid()) return;
      var formData = $("#news-and-media-form").serialize();

      $(".loader").show();
      var apiUrl = $('#news-and-media-form input[name="Api"]').val();
      // if (
      //   $("section.news-and-media #news-and-media-load-more-btn").prop(
      //     "disabled"
      //   ) == true
      // ) {
      //   console.log("disabled");

      //   return false;
      // }
      $.post(apiUrl, formData, function (data) {
        $(".loader").hide();
        if (data.success) {
          $(".news-row").remove();
          if (!data.loadmore) {
            $("section.news-and-media #news-and-media-load-more-btn").hide();
          } else {
            $("section.news-and-media #news-and-media-load-more-btn").show();
          }
          $("#news-and-media-page").val(data.page);
          $.each(data.news, function (i, e) {
            if ($("#news-holder .news-row").length == 0) {
              $("#news-holder").append(
                '<div class="row margin-bottom news-row"></div>'
              );
            }
            if ($("#news-holder .news-row:last > div").length == 4) {
              $("#news-holder").append(
                '<div class="row margin-bottom news-row"></div>'
              );
            }
            if ($("#news-holder").hasClass("without-images")) {
              $("#news-holder").append(
                '<li class="news-row" id="' +
                  e.Id +
                  '"><h4>' +
                  e.DateStr +
                  ", " +
                  e.CategoriesStr +
                  "</h4>" +
                  '<h2><a target="_blank" href="' +
                  e.Url +
                  '">' +
                  e.Title +
                  "</a></h2></li>"
              );
            } else {
              $("#news-holder .news-row:last").append(
                '<div class="col-sm-3" id="' +
                  e.Id +
                  '"><div class="body-small"><ul class="list-span"><li><date>' +
                  e.DateStr +
                  "</date>" +
                  '</li><li class="text-right">' +
                  e.CategoriesStr +
                  '</li></ul><img src="' +
                  e.Image +
                  '" class="img-responsive margin-xs-bottom"><p><strong>' +
                  e.Title +
                  "</strong></p>" +
                  "<p>" +
                  e.Summary +
                  '</p><div class="text-right"><a href="' +
                  e.Url +
                  '" class="link-green">read <span class="icon-doc-text"></span></a></div></div>'
              );
            }
          });
        }

        $("section.news-and-media #news-and-media-load-more-btn").prop(
          "disabled",
          false
        );
      });
    }
  var $;

  $ = window.jQuery || window.Zepto || window.$;

  $.fn.fancySelect = function (opts) {
    var isiOS, settings;
    if (opts == null) {
      opts = {};
    }
    settings = $.extend(
      {
        forceiOS: false,
        includeBlank: false,
        optionTemplate: function (optionEl) {
          return optionEl.text();
        },
        triggerTemplate: function (optionEl) {
          return optionEl.text();
        },
      },
      opts
    );
    isiOS = !!navigator.userAgent.match(/iP(hone|od|ad)/i);
    return this.each(function () {
      var copyOptionsToList,
        disabled,
        options,
        sel,
        trigger,
        updateTriggerText,
        wrapper;
      sel = $(this);
      if (sel.hasClass("fancified") || sel[0].tagName !== "SELECT") {
        return;
      }
      sel.addClass("fancified");
      sel.css({
        width: 1,
        height: 1,
        display: "block",
        position: "absolute",
        top: 0,
        left: 0,
        opacity: 0,
      });
      sel.wrap('<div class="fancy-select">');
      wrapper = sel.parent();
      if (sel.data("class")) {
        wrapper.addClass(sel.data("class"));
      }
      wrapper.append('<div class="trigger">');
      if (!(isiOS && !settings.forceiOS)) {
        wrapper.append('<ul class="options">');
      }
      trigger = wrapper.find(".trigger");
      options = wrapper.find(".options");
      disabled = sel.prop("disabled");
      if (disabled) {
        wrapper.addClass("disabled");
      }
      updateTriggerText = function () {
        var triggerHtml;
        triggerHtml = settings.triggerTemplate(sel.find(":selected"));
        return trigger.html(triggerHtml);
      };
      sel.on("blur.fs", function () {
        if (trigger.hasClass("open")) {
          return setTimeout(function () {
            return trigger.trigger("close.fs");
          }, 120);
        }
      });
      trigger.on("close.fs", function () {
        trigger.removeClass("open");
        return options.removeClass("open");
      });
      trigger.on("click.fs", function () {
        var offParent, parent;
        if (!disabled) {
          trigger.toggleClass("open");
          if (isiOS && !settings.forceiOS) {
            if (trigger.hasClass("open")) {
              return sel.focus();
            }
          } else {
            if (trigger.hasClass("open")) {
              parent = trigger.parent();
              offParent = parent.offsetParent();
              if (
                parent.offset().top +
                  parent.outerHeight() +
                  options.outerHeight() +
                  20 >
                $(window).height() + $(window).scrollTop()
              ) {
                options.addClass("overflowing");
              } else {
                options.removeClass("overflowing");
              }
            }
            options.toggleClass("open");
            if (!isiOS) {
              return sel.focus();
            }
          }
        }
      });
      sel.on("enable", function () {
        sel.prop("disabled", false);
        wrapper.removeClass("disabled");
        disabled = false;
        return copyOptionsToList();
      });
      sel.on("disable", function () {
        sel.prop("disabled", true);
        wrapper.addClass("disabled");
        return (disabled = true);
      });
      sel.on("change.fs", function (e) {
        if (e.originalEvent && e.originalEvent.isTrusted) {
          return e.stopPropagation();
        } else {
          return updateTriggerText();
        }
      });
      sel.on("keydown", function (e) {
        var hovered, newHovered, w;
        w = e.which;
        hovered = options.find(".hover");
        hovered.removeClass("hover");
        if (!options.hasClass("open")) {
          if (w === 13 || w === 32 || w === 38 || w === 40) {
            e.preventDefault();
            return trigger.trigger("click.fs");
          }
        } else {
          if (w === 38) {
            e.preventDefault();
            if (hovered.length && hovered.index() > 0) {
              hovered.prev().addClass("hover");
            } else {
              options.find("li:last-child").addClass("hover");
            }
          } else if (w === 40) {
            e.preventDefault();
            if (
              hovered.length &&
              hovered.index() < options.find("li").length - 1
            ) {
              hovered.next().addClass("hover");
            } else {
              options.find("li:first-child").addClass("hover");
            }
          } else if (w === 27) {
            e.preventDefault();
            trigger.trigger("click.fs");
          } else if (w === 13 || w === 32) {
            e.preventDefault();
            hovered.trigger("click.fs");
          } else if (w === 9) {
            if (trigger.hasClass("open")) {
              trigger.trigger("close.fs");
            }
          }
          newHovered = options.find(".hover");
          if (newHovered.length) {
            options.scrollTop(0);
            return options.scrollTop(newHovered.position().top - 12);
          }
        }
      });
      options.on("click.fs", "li", function (e) {
        var clicked;
        clicked = $(this);
        sel.val(clicked.data("raw-value"));
        if (!isiOS) {
          sel.trigger("blur.fs").trigger("focus.fs");
        }
        options.find(".selected").removeClass("selected");
        clicked.addClass("selected");
        trigger.addClass("selected");
        UpdateNews(); 
        return sel
          .val(clicked.data("raw-value"))
          .trigger("change.fs")
          .trigger("blur.fs")
          .trigger("focus.fs");
      });
      options.on("mouseenter.fs", "li", function () {
        var hovered, nowHovered;
        nowHovered = $(this);
        hovered = options.find(".hover");
        hovered.removeClass("hover");
        return nowHovered.addClass("hover");
      });
      options.on("mouseleave.fs", "li", function () {
        return options.find(".hover").removeClass("hover");
      });
      copyOptionsToList = function () {
        var selOpts;
        updateTriggerText();
        if (isiOS && !settings.forceiOS) {
          return;
        }
        selOpts = sel.find("option");
        return sel.find("option").each(function (i, opt) {
          var optHtml;
          opt = $(opt);
          if (!opt.prop("disabled") && (opt.val() || settings.includeBlank)) {
            optHtml = settings.optionTemplate(opt);
            if (opt.prop("selected")) {
              return options.append(
                '<li data-raw-value="' +
                  opt.val() +
                  '" class="selected">' +
                  optHtml +
                  "</li>"
              );
            } else {
              return options.append(
                '<li data-raw-value="' + opt.val() + '">' + optHtml + "</li>"
              );
            }
          }
        });
      };
      sel.on("update.fs", function () {
        wrapper.find(".options").empty();
        return copyOptionsToList();
      });
      return copyOptionsToList();
    });
  };
}).call(this);

/*!
 * jQuery Validation Plugin v1.15.0
 *
 * http://jqueryvalidation.org/
 *
 * Copyright (c) 2016 Jörn Zaefferer
 * Released under the MIT license
 */
(function (factory) {
  if (typeof define === "function" && define.amd) {
    define(["jquery"], factory);
  } else if (typeof module === "object" && module.exports) {
    module.exports = factory(require("jquery"));
  } else {
    factory(jQuery);
  }
})(function ($) {
  $.extend($.fn, {
    // http://jqueryvalidation.org/validate/
    validate: function (options) {
      // If nothing is selected, return nothing; can't chain anyway
      if (!this.length) {
        if (options && options.debug && window.console) {
          console.warn("Nothing selected, can't validate, returning nothing.");
        }
        return;
      }

      // Check if a validator for this form was already created
      var validator = $.data(this[0], "validator");
      if (validator) {
        return validator;
      }

      // Add novalidate tag if HTML5.
      this.attr("novalidate", "novalidate");

      validator = new $.validator(options, this[0]);
      $.data(this[0], "validator", validator);

      if (validator.settings.onsubmit) {
        this.on("click.validate", ":submit", function (event) {
          if (validator.settings.submitHandler) {
            validator.submitButton = event.target;
          }

          // Allow suppressing validation by adding a cancel class to the submit button
          if ($(this).hasClass("cancel")) {
            validator.cancelSubmit = true;
          }

          // Allow suppressing validation by adding the html5 formnovalidate attribute to the submit button
          if ($(this).attr("formnovalidate") !== undefined) {
            validator.cancelSubmit = true;
          }
        });

        // Validate the form on submit
        this.on("submit.validate", function (event) {
          if (validator.settings.debug) {
            // Prevent form submit to be able to see console output
            event.preventDefault();
          }
          function handle() {
            var hidden, result;
            if (validator.settings.submitHandler) {
              if (validator.submitButton) {
                // Insert a hidden input as a replacement for the missing submit button
                hidden = $("<input type='hidden'/>")
                  .attr("name", validator.submitButton.name)
                  .val($(validator.submitButton).val())
                  .appendTo(validator.currentForm);
              }
              result = validator.settings.submitHandler.call(
                validator,
                validator.currentForm,
                event
              );
              if (validator.submitButton) {
                // And clean up afterwards; thanks to no-block-scope, hidden can be referenced
                hidden.remove();
              }
              if (result !== undefined) {
                return result;
              }
              return false;
            }
            return true;
          }

          // Prevent submit for invalid forms or custom submit handlers
          if (validator.cancelSubmit) {
            validator.cancelSubmit = false;
            return handle();
          }
          if (validator.form()) {
            if (validator.pendingRequest) {
              validator.formSubmitted = true;
              return false;
            }
            return handle();
          } else {
            validator.focusInvalid();
            return false;
          }
        });
      }

      return validator;
    },

    // http://jqueryvalidation.org/valid/
    valid: function () {
      var valid, validator, errorList;

      if ($(this[0]).is("form")) {
        valid = this.validate().form();
      } else {
        errorList = [];
        valid = true;
        validator = $(this[0].form).validate();
        this.each(function () {
          valid = validator.element(this) && valid;
          if (!valid) {
            errorList = errorList.concat(validator.errorList);
          }
        });
        validator.errorList = errorList;
      }
      return valid;
    },

    // http://jqueryvalidation.org/rules/
    rules: function (command, argument) {
      // If nothing is selected, return nothing; can't chain anyway
      if (!this.length) {
        return;
      }

      var element = this[0],
        settings,
        staticRules,
        existingRules,
        data,
        param,
        filtered;

      if (command) {
        settings = $.data(element.form, "validator").settings;
        staticRules = settings.rules;
        existingRules = $.validator.staticRules(element);
        switch (command) {
          case "add":
            $.extend(existingRules, $.validator.normalizeRule(argument));

            // Remove messages from rules, but allow them to be set separately
            delete existingRules.messages;
            staticRules[element.name] = existingRules;
            if (argument.messages) {
              settings.messages[element.name] = $.extend(
                settings.messages[element.name],
                argument.messages
              );
            }
            break;
          case "remove":
            if (!argument) {
              delete staticRules[element.name];
              return existingRules;
            }
            filtered = {};
            $.each(argument.split(/\s/), function (index, method) {
              filtered[method] = existingRules[method];
              delete existingRules[method];
              if (method === "required") {
                $(element).removeAttr("aria-required");
              }
            });
            return filtered;
        }
      }

      data = $.validator.normalizeRules(
        $.extend(
          {},
          $.validator.classRules(element),
          $.validator.attributeRules(element),
          $.validator.dataRules(element),
          $.validator.staticRules(element)
        ),
        element
      );

      // Make sure required is at front
      if (data.required) {
        param = data.required;
        delete data.required;
        data = $.extend({ required: param }, data);
        $(element).attr("aria-required", "true");
      }

      // Make sure remote is at back
      if (data.remote) {
        param = data.remote;
        delete data.remote;
        data = $.extend(data, { remote: param });
      }

      return data;
    },
  });

  // Custom selectors
  $.extend($.expr[":"], {
    // http://jqueryvalidation.org/blank-selector/
    blank: function (a) {
      return !$.trim("" + $(a).val());
    },

    // http://jqueryvalidation.org/filled-selector/
    filled: function (a) {
      var val = $(a).val();
      return val !== null && !!$.trim("" + val);
    },

    // http://jqueryvalidation.org/unchecked-selector/
    unchecked: function (a) {
      return !$(a).prop("checked");
    },
  });

  // Constructor for validator
  $.validator = function (options, form) {
    this.settings = $.extend(true, {}, $.validator.defaults, options);
    this.currentForm = form;
    this.init();
  };

  // http://jqueryvalidation.org/jQuery.validator.format/
  $.validator.format = function (source, params) {
    if (arguments.length === 1) {
      return function () {
        var args = $.makeArray(arguments);
        args.unshift(source);
        return $.validator.format.apply(this, args);
      };
    }
    if (params === undefined) {
      return source;
    }
    if (arguments.length > 2 && params.constructor !== Array) {
      params = $.makeArray(arguments).slice(1);
    }
    if (params.constructor !== Array) {
      params = [params];
    }
    $.each(params, function (i, n) {
      source = source.replace(new RegExp("\\{" + i + "\\}", "g"), function () {
        return n;
      });
    });
    return source;
  };

  $.extend($.validator, {
    defaults: {
      messages: {},
      groups: {},
      rules: {},
      errorClass: "error",
      pendingClass: "pending",
      validClass: "valid",
      errorElement: "label",
      focusCleanup: false,
      focusInvalid: true,
      errorContainer: $([]),
      errorLabelContainer: $([]),
      onsubmit: true,
      ignore: ":hidden",
      ignoreTitle: false,
      onfocusin: function (element) {
        this.lastActive = element;

        // Hide error label and remove error class on focus if enabled
        if (this.settings.focusCleanup) {
          if (this.settings.unhighlight) {
            this.settings.unhighlight.call(
              this,
              element,
              this.settings.errorClass,
              this.settings.validClass
            );
          }
          this.hideThese(this.errorsFor(element));
        }
      },
      onfocusout: function (element) {
        if (
          !this.checkable(element) &&
          (element.name in this.submitted || !this.optional(element))
        ) {
          this.element(element);
        }
      },
      onkeyup: function (element, event) {
        // Avoid revalidate the field when pressing one of the following keys
        // Shift       => 16
        // Ctrl        => 17
        // Alt         => 18
        // Caps lock   => 20
        // End         => 35
        // Home        => 36
        // Left arrow  => 37
        // Up arrow    => 38
        // Right arrow => 39
        // Down arrow  => 40
        // Insert      => 45
        // Num lock    => 144
        // AltGr key   => 225
        var excludedKeys = [
          16, 17, 18, 20, 35, 36, 37, 38, 39, 40, 45, 144, 225,
        ];

        if (
          (event.which === 9 && this.elementValue(element) === "") ||
          $.inArray(event.keyCode, excludedKeys) !== -1
        ) {
          return;
        } else if (
          element.name in this.submitted ||
          element.name in this.invalid
        ) {
          this.element(element);
        }
      },
      onclick: function (element) {
        // Click on selects, radiobuttons and checkboxes
        if (element.name in this.submitted) {
          this.element(element);

          // Or option elements, check parent select in that case
        } else if (element.parentNode.name in this.submitted) {
          this.element(element.parentNode);
        }
      },
      highlight: function (element, errorClass, validClass) {
        if (element.type === "radio") {
          this.findByName(element.name)
            .addClass(errorClass)
            .removeClass(validClass);
        } else {
          $(element).addClass(errorClass).removeClass(validClass);
        }
      },
      unhighlight: function (element, errorClass, validClass) {
        if (element.type === "radio") {
          this.findByName(element.name)
            .removeClass(errorClass)
            .addClass(validClass);
        } else {
          $(element).removeClass(errorClass).addClass(validClass);
        }
      },
    },

    // http://jqueryvalidation.org/jQuery.validator.setDefaults/
    setDefaults: function (settings) {
      $.extend($.validator.defaults, settings);
    },

    messages: {
      required: "This field is required.",
      remote: "Please fix this field.",
      email: "Please enter a valid email address.",
      url: "Please enter a valid URL.",
      date: "Please enter a valid date.",
      dateISO: "Please enter a valid date ( ISO ).",
      number: "Please enter a valid number.",
      digits: "Please enter only digits.",
      equalTo: "Please enter the same value again.",
      maxlength: $.validator.format(
        "Please enter no more than {0} characters."
      ),
      minlength: $.validator.format("Please enter at least {0} characters."),
      rangelength: $.validator.format(
        "Please enter a value between {0} and {1} characters long."
      ),
      range: $.validator.format("Please enter a value between {0} and {1}."),
      max: $.validator.format(
        "Please enter a value less than or equal to {0}."
      ),
      min: $.validator.format(
        "Please enter a value greater than or equal to {0}."
      ),
      step: $.validator.format("Please enter a multiple of {0}."),
    },

    autoCreateRanges: false,

    prototype: {
      init: function () {
        this.labelContainer = $(this.settings.errorLabelContainer);
        this.errorContext =
          (this.labelContainer.length && this.labelContainer) ||
          $(this.currentForm);
        this.containers = $(this.settings.errorContainer).add(
          this.settings.errorLabelContainer
        );
        this.submitted = {};
        this.valueCache = {};
        this.pendingRequest = 0;
        this.pending = {};
        this.invalid = {};
        this.reset();

        var groups = (this.groups = {}),
          rules;
        $.each(this.settings.groups, function (key, value) {
          if (typeof value === "string") {
            value = value.split(/\s/);
          }
          $.each(value, function (index, name) {
            groups[name] = key;
          });
        });
        rules = this.settings.rules;
        $.each(rules, function (key, value) {
          rules[key] = $.validator.normalizeRule(value);
        });

        function delegate(event) {
          var validator = $.data(this.form, "validator"),
            eventType = "on" + event.type.replace(/^validate/, ""),
            settings = validator.settings;
          if (settings[eventType] && !$(this).is(settings.ignore)) {
            settings[eventType].call(validator, this, event);
          }
        }

        $(this.currentForm)
          .on(
            "focusin.validate focusout.validate keyup.validate",
            ":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'], " +
              "[type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], " +
              "[type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'], " +
              "[type='radio'], [type='checkbox'], [contenteditable]",
            delegate
          )

          // Support: Chrome, oldIE
          // "select" is provided as event.target when clicking a option
          .on(
            "click.validate",
            "select, option, [type='radio'], [type='checkbox']",
            delegate
          );

        if (this.settings.invalidHandler) {
          $(this.currentForm).on(
            "invalid-form.validate",
            this.settings.invalidHandler
          );
        }

        // Add aria-required to any Static/Data/Class required fields before first validation
        // Screen readers require this attribute to be present before the initial submission http://www.w3.org/TR/WCAG-TECHS/ARIA2.html
        $(this.currentForm)
          .find("[required], [data-rule-required], .required")
          .attr("aria-required", "true");
      },

      // http://jqueryvalidation.org/Validator.form/
      form: function () {
        this.checkForm();
        $.extend(this.submitted, this.errorMap);
        this.invalid = $.extend({}, this.errorMap);
        if (!this.valid()) {
          $(this.currentForm).triggerHandler("invalid-form", [this]);
        }
        this.showErrors();
        return this.valid();
      },

      checkForm: function () {
        this.prepareForm();
        for (
          var i = 0, elements = (this.currentElements = this.elements());
          elements[i];
          i++
        ) {
          this.check(elements[i]);
        }
        return this.valid();
      },

      // http://jqueryvalidation.org/Validator.element/
      element: function (element) {
        var cleanElement = this.clean(element),
          checkElement = this.validationTargetFor(cleanElement),
          v = this,
          result = true,
          rs,
          group;

        if (checkElement === undefined) {
          delete this.invalid[cleanElement.name];
        } else {
          this.prepareElement(checkElement);
          this.currentElements = $(checkElement);

          // If this element is grouped, then validate all group elements already
          // containing a value
          group = this.groups[checkElement.name];
          if (group) {
            $.each(this.groups, function (name, testgroup) {
              if (testgroup === group && name !== checkElement.name) {
                cleanElement = v.validationTargetFor(
                  v.clean(v.findByName(name))
                );
                if (cleanElement && cleanElement.name in v.invalid) {
                  v.currentElements.push(cleanElement);
                  result = result && v.check(cleanElement);
                }
              }
            });
          }

          rs = this.check(checkElement) !== false;
          result = result && rs;
          if (rs) {
            this.invalid[checkElement.name] = false;
          } else {
            this.invalid[checkElement.name] = true;
          }

          if (!this.numberOfInvalids()) {
            // Hide error containers on last error
            this.toHide = this.toHide.add(this.containers);
          }
          this.showErrors();

          // Add aria-invalid status for screen readers
          $(element).attr("aria-invalid", !rs);
        }

        return result;
      },

      // http://jqueryvalidation.org/Validator.showErrors/
      showErrors: function (errors) {
        if (errors) {
          var validator = this;

          // Add items to error list and map
          $.extend(this.errorMap, errors);
          this.errorList = $.map(this.errorMap, function (message, name) {
            return {
              message: message,
              element: validator.findByName(name)[0],
            };
          });

          // Remove items from success list
          this.successList = $.grep(this.successList, function (element) {
            return !(element.name in errors);
          });
        }
        if (this.settings.showErrors) {
          this.settings.showErrors.call(this, this.errorMap, this.errorList);
        } else {
          this.defaultShowErrors();
        }
      },

      // http://jqueryvalidation.org/Validator.resetForm/
      resetForm: function () {
        if ($.fn.resetForm) {
          $(this.currentForm).resetForm();
        }
        this.invalid = {};
        this.submitted = {};
        this.prepareForm();
        this.hideErrors();
        var elements = this.elements()
          .removeData("previousValue")
          .removeAttr("aria-invalid");

        this.resetElements(elements);
      },

      resetElements: function (elements) {
        var i;

        if (this.settings.unhighlight) {
          for (i = 0; elements[i]; i++) {
            this.settings.unhighlight.call(
              this,
              elements[i],
              this.settings.errorClass,
              ""
            );
            this.findByName(elements[i].name).removeClass(
              this.settings.validClass
            );
          }
        } else {
          elements
            .removeClass(this.settings.errorClass)
            .removeClass(this.settings.validClass);
        }
      },

      numberOfInvalids: function () {
        return this.objectLength(this.invalid);
      },

      objectLength: function (obj) {
        /* jshint unused: false */
        var count = 0,
          i;
        for (i in obj) {
          if (obj[i]) {
            count++;
          }
        }
        return count;
      },

      hideErrors: function () {
        this.hideThese(this.toHide);
      },

      hideThese: function (errors) {
        errors.not(this.containers).text("");
        this.addWrapper(errors).hide();
      },

      valid: function () {
        return this.size() === 0;
      },

      size: function () {
        return this.errorList.length;
      },

      focusInvalid: function () {
        if (this.settings.focusInvalid) {
          try {
            $(
              this.findLastActive() ||
                (this.errorList.length && this.errorList[0].element) ||
                []
            )
              .filter(":visible")
              .focus()

              // Manually trigger focusin event; without it, focusin handler isn't called, findLastActive won't have anything to find
              .trigger("focusin");
          } catch (e) {
            // Ignore IE throwing errors when focusing hidden elements
          }
        }
      },

      findLastActive: function () {
        var lastActive = this.lastActive;
        return (
          lastActive &&
          $.grep(this.errorList, function (n) {
            return n.element.name === lastActive.name;
          }).length === 1 &&
          lastActive
        );
      },

      elements: function () {
        var validator = this,
          rulesCache = {};

        // Select all valid inputs inside the form (no submit or reset buttons)
        return $(this.currentForm)
          .find("input, select, textarea, [contenteditable]")
          .not(":submit, :reset, :image, :disabled")
          .not(this.settings.ignore)
          .filter(function () {
            var name = this.name || $(this).attr("name"); // For contenteditable
            if (!name && validator.settings.debug && window.console) {
              console.error("%o has no name assigned", this);
            }

            // Set form expando on contenteditable
            if (this.hasAttribute("contenteditable")) {
              this.form = $(this).closest("form")[0];
            }

            // Select only the first element for each name, and only those with rules specified
            if (
              name in rulesCache ||
              !validator.objectLength($(this).rules())
            ) {
              return false;
            }

            rulesCache[name] = true;
            return true;
          });
      },

      clean: function (selector) {
        return $(selector)[0];
      },

      errors: function () {
        var errorClass = this.settings.errorClass.split(" ").join(".");
        return $(
          this.settings.errorElement + "." + errorClass,
          this.errorContext
        );
      },

      resetInternals: function () {
        this.successList = [];
        this.errorList = [];
        this.errorMap = {};
        this.toShow = $([]);
        this.toHide = $([]);
      },

      reset: function () {
        this.resetInternals();
        this.currentElements = $([]);
      },

      prepareForm: function () {
        this.reset();
        this.toHide = this.errors().add(this.containers);
      },

      prepareElement: function (element) {
        this.reset();
        this.toHide = this.errorsFor(element);
      },

      elementValue: function (element) {
        var $element = $(element),
          type = element.type,
          val,
          idx;

        if (type === "radio" || type === "checkbox") {
          return this.findByName(element.name).filter(":checked").val();
        } else if (
          type === "number" &&
          typeof element.validity !== "undefined"
        ) {
          return element.validity.badInput ? "NaN" : $element.val();
        }

        if (element.hasAttribute("contenteditable")) {
          val = $element.text();
        } else {
          val = $element.val();
        }

        if (type === "file") {
          // Modern browser (chrome & safari)
          if (val.substr(0, 12) === "C:\\fakepath\\") {
            return val.substr(12);
          }

          // Legacy browsers
          // Unix-based path
          idx = val.lastIndexOf("/");
          if (idx >= 0) {
            return val.substr(idx + 1);
          }

          // Windows-based path
          idx = val.lastIndexOf("\\");
          if (idx >= 0) {
            return val.substr(idx + 1);
          }

          // Just the file name
          return val;
        }

        if (typeof val === "string") {
          return val.replace(/\r/g, "");
        }
        return val;
      },

      check: function (element) {
        element = this.validationTargetFor(this.clean(element));

        var rules = $(element).rules(),
          rulesCount = $.map(rules, function (n, i) {
            return i;
          }).length,
          dependencyMismatch = false,
          val = this.elementValue(element),
          result,
          method,
          rule;

        // If a normalizer is defined for this element, then
        // call it to retreive the changed value instead
        // of using the real one.
        // Note that `this` in the normalizer is `element`.
        if (typeof rules.normalizer === "function") {
          val = rules.normalizer.call(element, val);

          if (typeof val !== "string") {
            throw new TypeError("The normalizer should return a string value.");
          }

          // Delete the normalizer from rules to avoid treating
          // it as a pre-defined method.
          delete rules.normalizer;
        }

        for (method in rules) {
          rule = { method: method, parameters: rules[method] };
          try {
            result = $.validator.methods[method].call(
              this,
              val,
              element,
              rule.parameters
            );

            // If a method indicates that the field is optional and therefore valid,
            // don't mark it as valid when there are no other rules
            if (result === "dependency-mismatch" && rulesCount === 1) {
              dependencyMismatch = true;
              continue;
            }
            dependencyMismatch = false;

            if (result === "pending") {
              this.toHide = this.toHide.not(this.errorsFor(element));
              return;
            }

            if (!result) {
              this.formatAndAdd(element, rule);
              return false;
            }
          } catch (e) {
            if (this.settings.debug && window.console) {
              console.log(
                "Exception occurred when checking element " +
                  element.id +
                  ", check the '" +
                  rule.method +
                  "' method.",
                e
              );
            }
            if (e instanceof TypeError) {
              e.message +=
                ".  Exception occurred when checking element " +
                element.id +
                ", check the '" +
                rule.method +
                "' method.";
            }

            throw e;
          }
        }
        if (dependencyMismatch) {
          return;
        }
        if (this.objectLength(rules)) {
          this.successList.push(element);
        }
        return true;
      },

      // Return the custom message for the given element and validation method
      // specified in the element's HTML5 data attribute
      // return the generic message if present and no method specific message is present
      customDataMessage: function (element, method) {
        return (
          $(element).data(
            "msg" +
              method.charAt(0).toUpperCase() +
              method.substring(1).toLowerCase()
          ) || $(element).data("msg")
        );
      },

      // Return the custom message for the given element name and validation method
      customMessage: function (name, method) {
        var m = this.settings.messages[name];
        return m && (m.constructor === String ? m : m[method]);
      },

      // Return the first defined argument, allowing empty strings
      findDefined: function () {
        for (var i = 0; i < arguments.length; i++) {
          if (arguments[i] !== undefined) {
            return arguments[i];
          }
        }
        return undefined;
      },

      defaultMessage: function (element, rule) {
        var message = this.findDefined(
            this.customMessage(element.name, rule.method),
            this.customDataMessage(element, rule.method),

            // 'title' is never undefined, so handle empty string as undefined
            (!this.settings.ignoreTitle && element.title) || undefined,
            $.validator.messages[rule.method],
            "<strong>Warning: No message defined for " +
              element.name +
              "</strong>"
          ),
          theregex = /\$?\{(\d+)\}/g;
        if (typeof message === "function") {
          message = message.call(this, rule.parameters, element);
        } else if (theregex.test(message)) {
          message = $.validator.format(
            message.replace(theregex, "{$1}"),
            rule.parameters
          );
        }

        return message;
      },

      formatAndAdd: function (element, rule) {
        var message = this.defaultMessage(element, rule);

        this.errorList.push({
          message: message,
          element: element,
          method: rule.method,
        });

        this.errorMap[element.name] = message;
        this.submitted[element.name] = message;
      },

      addWrapper: function (toToggle) {
        if (this.settings.wrapper) {
          toToggle = toToggle.add(toToggle.parent(this.settings.wrapper));
        }
        return toToggle;
      },

      defaultShowErrors: function () {
        var i, elements, error;
        for (i = 0; this.errorList[i]; i++) {
          error = this.errorList[i];
          if (this.settings.highlight) {
            this.settings.highlight.call(
              this,
              error.element,
              this.settings.errorClass,
              this.settings.validClass
            );
          }
          this.showLabel(error.element, error.message);
        }
        if (this.errorList.length) {
          this.toShow = this.toShow.add(this.containers);
        }
        if (this.settings.success) {
          for (i = 0; this.successList[i]; i++) {
            this.showLabel(this.successList[i]);
          }
        }
        if (this.settings.unhighlight) {
          for (i = 0, elements = this.validElements(); elements[i]; i++) {
            this.settings.unhighlight.call(
              this,
              elements[i],
              this.settings.errorClass,
              this.settings.validClass
            );
          }
        }
        this.toHide = this.toHide.not(this.toShow);
        this.hideErrors();
        this.addWrapper(this.toShow).show();
      },

      validElements: function () {
        return this.currentElements.not(this.invalidElements());
      },

      invalidElements: function () {
        return $(this.errorList).map(function () {
          return this.element;
        });
      },

      showLabel: function (element, message) {
        var place,
          group,
          errorID,
          v,
          error = this.errorsFor(element),
          elementID = this.idOrName(element),
          describedBy = $(element).attr("aria-describedby");

        if (error.length) {
          // Refresh error/success class
          error
            .removeClass(this.settings.validClass)
            .addClass(this.settings.errorClass);

          // Replace message on existing label
          error.html(message);
        } else {
          // Create error element
          error = $("<" + this.settings.errorElement + ">")
            .attr("id", elementID + "-error")
            .addClass(this.settings.errorClass)
            .html(message || "");

          // Maintain reference to the element to be placed into the DOM
          place = error;
          if (this.settings.wrapper) {
            // Make sure the element is visible, even in IE
            // actually showing the wrapped element is handled elsewhere
            place = error
              .hide()
              .show()
              .wrap("<" + this.settings.wrapper + "/>")
              .parent();
          }
          if (this.labelContainer.length) {
            this.labelContainer.append(place);
          } else if (this.settings.errorPlacement) {
            this.settings.errorPlacement(place, $(element));
          } else {
            place.insertAfter(element);
          }

          // Link error back to the element
          if (error.is("label")) {
            // If the error is a label, then associate using 'for'
            error.attr("for", elementID);

            // If the element is not a child of an associated label, then it's necessary
            // to explicitly apply aria-describedby
          } else if (
            error.parents("label[for='" + this.escapeCssMeta(elementID) + "']")
              .length === 0
          ) {
            errorID = error.attr("id");

            // Respect existing non-error aria-describedby
            if (!describedBy) {
              describedBy = errorID;
            } else if (
              !describedBy.match(
                new RegExp("\\b" + this.escapeCssMeta(errorID) + "\\b")
              )
            ) {
              // Add to end of list if not already present
              describedBy += " " + errorID;
            }
            $(element).attr("aria-describedby", describedBy);

            // If this element is grouped, then assign to all elements in the same group
            group = this.groups[element.name];
            if (group) {
              v = this;
              $.each(v.groups, function (name, testgroup) {
                if (testgroup === group) {
                  $(
                    "[name='" + v.escapeCssMeta(name) + "']",
                    v.currentForm
                  ).attr("aria-describedby", error.attr("id"));
                }
              });
            }
          }
        }
        if (!message && this.settings.success) {
          error.text("");
          if (typeof this.settings.success === "string") {
            error.addClass(this.settings.success);
          } else {
            this.settings.success(error, element);
          }
        }
        this.toShow = this.toShow.add(error);
      },

      errorsFor: function (element) {
        var name = this.escapeCssMeta(this.idOrName(element)),
          describer = $(element).attr("aria-describedby"),
          selector = "label[for='" + name + "'], label[for='" + name + "'] *";

        // 'aria-describedby' should directly reference the error element
        if (describer) {
          selector =
            selector +
            ", #" +
            this.escapeCssMeta(describer).replace(/\s+/g, ", #");
        }

        return this.errors().filter(selector);
      },

      // See https://api.jquery.com/category/selectors/, for CSS
      // meta-characters that should be escaped in order to be used with JQuery
      // as a literal part of a name/id or any selector.
      escapeCssMeta: function (string) {
        return string.replace(/([\\!"#$%&'()*+,./:;<=>?@\[\]^`{|}~])/g, "\\$1");
      },

      idOrName: function (element) {
        return (
          this.groups[element.name] ||
          (this.checkable(element) ? element.name : element.id || element.name)
        );
      },

      validationTargetFor: function (element) {
        // If radio/checkbox, validate first element in group instead
        if (this.checkable(element)) {
          element = this.findByName(element.name);
        }

        // Always apply ignore filter
        return $(element).not(this.settings.ignore)[0];
      },

      checkable: function (element) {
        return /radio|checkbox/i.test(element.type);
      },

      findByName: function (name) {
        return $(this.currentForm).find(
          "[name='" + this.escapeCssMeta(name) + "']"
        );
      },

      getLength: function (value, element) {
        switch (element.nodeName.toLowerCase()) {
          case "select":
            return $("option:selected", element).length;
          case "input":
            if (this.checkable(element)) {
              return this.findByName(element.name).filter(":checked").length;
            }
        }
        return value.length;
      },

      depend: function (param, element) {
        return this.dependTypes[typeof param]
          ? this.dependTypes[typeof param](param, element)
          : true;
      },

      dependTypes: {
        boolean: function (param) {
          return param;
        },
        string: function (param, element) {
          return !!$(param, element.form).length;
        },
        function: function (param, element) {
          return param(element);
        },
      },

      optional: function (element) {
        var val = this.elementValue(element);
        return (
          !$.validator.methods.required.call(this, val, element) &&
          "dependency-mismatch"
        );
      },

      startRequest: function (element) {
        if (!this.pending[element.name]) {
          this.pendingRequest++;
          $(element).addClass(this.settings.pendingClass);
          this.pending[element.name] = true;
        }
      },

      stopRequest: function (element, valid) {
        this.pendingRequest--;

        // Sometimes synchronization fails, make sure pendingRequest is never < 0
        if (this.pendingRequest < 0) {
          this.pendingRequest = 0;
        }
        delete this.pending[element.name];
        $(element).removeClass(this.settings.pendingClass);
        if (
          valid &&
          this.pendingRequest === 0 &&
          this.formSubmitted &&
          this.form()
        ) {
          $(this.currentForm).submit();
          this.formSubmitted = false;
        } else if (!valid && this.pendingRequest === 0 && this.formSubmitted) {
          $(this.currentForm).triggerHandler("invalid-form", [this]);
          this.formSubmitted = false;
        }
      },

      previousValue: function (element, method) {
        return (
          $.data(element, "previousValue") ||
          $.data(element, "previousValue", {
            old: null,
            valid: true,
            message: this.defaultMessage(element, { method: method }),
          })
        );
      },

      // Cleans up all forms and elements, removes validator-specific events
      destroy: function () {
        this.resetForm();

        $(this.currentForm)
          .off(".validate")
          .removeData("validator")
          .find(".validate-equalTo-blur")
          .off(".validate-equalTo")
          .removeClass("validate-equalTo-blur");
      },
    },

    classRuleSettings: {
      required: { required: true },
      email: { email: true },
      url: { url: true },
      date: { date: true },
      dateISO: { dateISO: true },
      number: { number: true },
      digits: { digits: true },
      creditcard: { creditcard: true },
    },

    addClassRules: function (className, rules) {
      if (className.constructor === String) {
        this.classRuleSettings[className] = rules;
      } else {
        $.extend(this.classRuleSettings, className);
      }
    },

    classRules: function (element) {
      var rules = {},
        classes = $(element).attr("class");

      if (classes) {
        $.each(classes.split(" "), function () {
          if (this in $.validator.classRuleSettings) {
            $.extend(rules, $.validator.classRuleSettings[this]);
          }
        });
      }
      return rules;
    },

    normalizeAttributeRule: function (rules, type, method, value) {
      // Convert the value to a number for number inputs, and for text for backwards compability
      // allows type="date" and others to be compared as strings
      if (
        /min|max|step/.test(method) &&
        (type === null || /number|range|text/.test(type))
      ) {
        value = Number(value);

        // Support Opera Mini, which returns NaN for undefined minlength
        if (isNaN(value)) {
          value = undefined;
        }
      }

      if (value || value === 0) {
        rules[method] = value;
      } else if (type === method && type !== "range") {
        // Exception: the jquery validate 'range' method
        // does not test for the html5 'range' type
        rules[method] = true;
      }
    },

    attributeRules: function (element) {
      var rules = {},
        $element = $(element),
        type = element.getAttribute("type"),
        method,
        value;

      for (method in $.validator.methods) {
        // Support for <input required> in both html5 and older browsers
        if (method === "required") {
          value = element.getAttribute(method);

          // Some browsers return an empty string for the required attribute
          // and non-HTML5 browsers might have required="" markup
          if (value === "") {
            value = true;
          }

          // Force non-HTML5 browsers to return bool
          value = !!value;
        } else {
          value = $element.attr(method);
        }

        this.normalizeAttributeRule(rules, type, method, value);
      }

      // 'maxlength' may be returned as -1, 2147483647 ( IE ) and 524288 ( safari ) for text inputs
      if (rules.maxlength && /-1|2147483647|524288/.test(rules.maxlength)) {
        delete rules.maxlength;
      }

      return rules;
    },

    dataRules: function (element) {
      var rules = {},
        $element = $(element),
        type = element.getAttribute("type"),
        method,
        value;

      for (method in $.validator.methods) {
        value = $element.data(
          "rule" +
            method.charAt(0).toUpperCase() +
            method.substring(1).toLowerCase()
        );
        this.normalizeAttributeRule(rules, type, method, value);
      }
      return rules;
    },

    staticRules: function (element) {
      var rules = {},
        validator = $.data(element.form, "validator");

      if (validator.settings.rules) {
        rules =
          $.validator.normalizeRule(validator.settings.rules[element.name]) ||
          {};
      }
      return rules;
    },

    normalizeRules: function (rules, element) {
      // Handle dependency check
      $.each(rules, function (prop, val) {
        // Ignore rule when param is explicitly false, eg. required:false
        if (val === false) {
          delete rules[prop];
          return;
        }
        if (val.param || val.depends) {
          var keepRule = true;
          switch (typeof val.depends) {
            case "string":
              keepRule = !!$(val.depends, element.form).length;
              break;
            case "function":
              keepRule = val.depends.call(element, element);
              break;
          }
          if (keepRule) {
            rules[prop] = val.param !== undefined ? val.param : true;
          } else {
            $.data(element.form, "validator").resetElements($(element));
            delete rules[prop];
          }
        }
      });

      // Evaluate parameters
      $.each(rules, function (rule, parameter) {
        rules[rule] =
          $.isFunction(parameter) && rule !== "normalizer"
            ? parameter(element)
            : parameter;
      });

      // Clean number parameters
      $.each(["minlength", "maxlength"], function () {
        if (rules[this]) {
          rules[this] = Number(rules[this]);
        }
      });
      $.each(["rangelength", "range"], function () {
        var parts;
        if (rules[this]) {
          if ($.isArray(rules[this])) {
            rules[this] = [Number(rules[this][0]), Number(rules[this][1])];
          } else if (typeof rules[this] === "string") {
            parts = rules[this].replace(/[\[\]]/g, "").split(/[\s,]+/);
            rules[this] = [Number(parts[0]), Number(parts[1])];
          }
        }
      });

      if ($.validator.autoCreateRanges) {
        // Auto-create ranges
        if (rules.min != null && rules.max != null) {
          rules.range = [rules.min, rules.max];
          delete rules.min;
          delete rules.max;
        }
        if (rules.minlength != null && rules.maxlength != null) {
          rules.rangelength = [rules.minlength, rules.maxlength];
          delete rules.minlength;
          delete rules.maxlength;
        }
      }

      return rules;
    },

    // Converts a simple string to a {string: true} rule, e.g., "required" to {required:true}
    normalizeRule: function (data) {
      if (typeof data === "string") {
        var transformed = {};
        $.each(data.split(/\s/), function () {
          transformed[this] = true;
        });
        data = transformed;
      }
      return data;
    },

    // http://jqueryvalidation.org/jQuery.validator.addMethod/
    addMethod: function (name, method, message) {
      $.validator.methods[name] = method;
      $.validator.messages[name] =
        message !== undefined ? message : $.validator.messages[name];
      if (method.length < 3) {
        $.validator.addClassRules(name, $.validator.normalizeRule(name));
      }
    },

    // http://jqueryvalidation.org/jQuery.validator.methods/
    methods: {
      // http://jqueryvalidation.org/required-method/
      required: function (value, element, param) {
        // Check if dependency is met
        if (!this.depend(param, element)) {
          return "dependency-mismatch";
        }
        if (element.nodeName.toLowerCase() === "select") {
          // Could be an array for select-multiple or a string, both are fine this way
          var val = $(element).val();
          return val && val.length > 0;
        }
        if (this.checkable(element)) {
          return this.getLength(value, element) > 0;
        }
        return value.length > 0;
      },

      // http://jqueryvalidation.org/email-method/
      email: function (value, element) {
        // From https://html.spec.whatwg.org/multipage/forms.html#valid-e-mail-address
        // Retrieved 2014-01-14
        // If you have a problem with this implementation, report a bug against the above spec
        // Or use custom methods to implement your own email validation
        return (
          this.optional(element) ||
          /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(
            value
          )
        );
      },

      // http://jqueryvalidation.org/url-method/
      url: function (value, element) {
        // Copyright (c) 2010-2013 Diego Perini, MIT licensed
        // https://gist.github.com/dperini/729294
        // see also https://mathiasbynens.be/demo/url-regex
        // modified to allow protocol-relative URLs
        return (
          this.optional(element) ||
          /^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})).?)(?::\d{2,5})?(?:[/?#]\S*)?$/i.test(
            value
          )
        );
      },

      // http://jqueryvalidation.org/date-method/
      date: function (value, element) {
        return (
          this.optional(element) ||
          !/Invalid|NaN/.test(new Date(value).toString())
        );
      },

      // http://jqueryvalidation.org/dateISO-method/
      dateISO: function (value, element) {
        return (
          this.optional(element) ||
          /^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(
            value
          )
        );
      },

      // http://jqueryvalidation.org/number-method/
      number: function (value, element) {
        return (
          this.optional(element) ||
          /^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(value)
        );
      },

      // http://jqueryvalidation.org/digits-method/
      digits: function (value, element) {
        return this.optional(element) || /^\d+$/.test(value);
      },

      // http://jqueryvalidation.org/minlength-method/
      minlength: function (value, element, param) {
        var length = $.isArray(value)
          ? value.length
          : this.getLength(value, element);
        return this.optional(element) || length >= param;
      },

      // http://jqueryvalidation.org/maxlength-method/
      maxlength: function (value, element, param) {
        var length = $.isArray(value)
          ? value.length
          : this.getLength(value, element);
        return this.optional(element) || length <= param;
      },

      // http://jqueryvalidation.org/rangelength-method/
      rangelength: function (value, element, param) {
        var length = $.isArray(value)
          ? value.length
          : this.getLength(value, element);
        return (
          this.optional(element) || (length >= param[0] && length <= param[1])
        );
      },

      // http://jqueryvalidation.org/min-method/
      min: function (value, element, param) {
        return this.optional(element) || value >= param;
      },

      // http://jqueryvalidation.org/max-method/
      max: function (value, element, param) {
        return this.optional(element) || value <= param;
      },

      // http://jqueryvalidation.org/range-method/
      range: function (value, element, param) {
        return (
          this.optional(element) || (value >= param[0] && value <= param[1])
        );
      },

      // http://jqueryvalidation.org/step-method/
      step: function (value, element, param) {
        var type = $(element).attr("type"),
          errorMessage =
            "Step attribute on input type " + type + " is not supported.",
          supportedTypes = ["text", "number", "range"],
          re = new RegExp("\\b" + type + "\\b"),
          notSupported = type && !re.test(supportedTypes.join());

        // Works only for text, number and range input types
        // TODO find a way to support input types date, datetime, datetime-local, month, time and week
        if (notSupported) {
          throw new Error(errorMessage);
        }
        return this.optional(element) || value % param === 0;
      },

      // http://jqueryvalidation.org/equalTo-method/
      equalTo: function (value, element, param) {
        // Bind to the blur event of the target in order to revalidate whenever the target field is updated
        var target = $(param);
        if (
          this.settings.onfocusout &&
          target.not(".validate-equalTo-blur").length
        ) {
          target
            .addClass("validate-equalTo-blur")
            .on("blur.validate-equalTo", function () {
              $(element).valid();
            });
        }
        return value === target.val();
      },

      // http://jqueryvalidation.org/remote-method/
      remote: function (value, element, param, method) {
        if (this.optional(element)) {
          return "dependency-mismatch";
        }

        method = (typeof method === "string" && method) || "remote";

        var previous = this.previousValue(element, method),
          validator,
          data,
          optionDataString;

        if (!this.settings.messages[element.name]) {
          this.settings.messages[element.name] = {};
        }
        previous.originalMessage =
          previous.originalMessage ||
          this.settings.messages[element.name][method];
        this.settings.messages[element.name][method] = previous.message;

        param = (typeof param === "string" && { url: param }) || param;
        optionDataString = $.param($.extend({ data: value }, param.data));
        if (previous.old === optionDataString) {
          return previous.valid;
        }

        previous.old = optionDataString;
        validator = this;
        this.startRequest(element);
        data = {};
        data[element.name] = value;
        $.ajax(
          $.extend(
            true,
            {
              mode: "abort",
              port: "validate" + element.name,
              dataType: "json",
              data: data,
              context: validator.currentForm,
              success: function (response) {
                var valid = response === true || response === "true",
                  errors,
                  message,
                  submitted;

                validator.settings.messages[element.name][method] =
                  previous.originalMessage;
                if (valid) {
                  submitted = validator.formSubmitted;
                  validator.resetInternals();
                  validator.toHide = validator.errorsFor(element);
                  validator.formSubmitted = submitted;
                  validator.successList.push(element);
                  validator.invalid[element.name] = false;
                  validator.showErrors();
                } else {
                  errors = {};
                  message =
                    response ||
                    validator.defaultMessage(element, {
                      method: method,
                      parameters: value,
                    });
                  errors[element.name] = previous.message = message;
                  validator.invalid[element.name] = true;
                  validator.showErrors(errors);
                }
                previous.valid = valid;
                validator.stopRequest(element, valid);
              },
            },
            param
          )
        );
        return "pending";
      },
    },
  });

  // Ajax mode: abort
  // usage: $.ajax({ mode: "abort"[, port: "uniqueport"]});
  // if mode:"abort" is used, the previous request on that port (port can be undefined) is aborted via XMLHttpRequest.abort()

  var pendingRequests = {},
    ajax;

  // Use a prefilter if available (1.5+)
  if ($.ajaxPrefilter) {
    $.ajaxPrefilter(function (settings, _, xhr) {
      var port = settings.port;
      if (settings.mode === "abort") {
        if (pendingRequests[port]) {
          pendingRequests[port].abort();
        }
        pendingRequests[port] = xhr;
      }
    });
  } else {
    // Proxy ajax
    ajax = $.ajax;
    $.ajax = function (settings) {
      var mode = ("mode" in settings ? settings : $.ajaxSettings).mode,
        port = ("port" in settings ? settings : $.ajaxSettings).port;
      if (mode === "abort") {
        if (pendingRequests[port]) {
          pendingRequests[port].abort();
        }
        pendingRequests[port] = ajax.apply(this, arguments);
        return pendingRequests[port];
      }
      return ajax.apply(this, arguments);
    };
  }
});
/**
 * @license
 * Unobtrusive validation support library for jQuery and jQuery Validate
 * Copyright (c) .NET Foundation. All rights reserved.
 * Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.
 * @version <placeholder>
 */

/*jslint white: true, browser: true, onevar: true, undef: true, nomen: true, eqeqeq: true, plusplus: true, bitwise: true, regexp: true, newcap: true, immed: true, strict: false */
/*global document: false, jQuery: false */

(function (factory) {
  if (typeof define === "function" && define.amd) {
    // AMD. Register as an anonymous module.
    define("jquery.validate.unobtrusive", ["jquery-validation"], factory);
  } else if (typeof module === "object" && module.exports) {
    // CommonJS-like environments that support module.exports
    module.exports = factory(require("jquery-validation"));
  } else {
    // Browser global
    jQuery.validator.unobtrusive = factory(jQuery);
  }
})(function ($) {
  var $jQval = $.validator,
    adapters,
    data_validation = "unobtrusiveValidation";

  function setValidationValues(options, ruleName, value) {
    options.rules[ruleName] = value;
    if (options.message) {
      options.messages[ruleName] = options.message;
    }
  }

  function splitAndTrim(value) {
    return value.replace(/^\s+|\s+$/g, "").split(/\s*,\s*/g);
  }

  function escapeAttributeValue(value) {
    // As mentioned on http://api.jquery.com/category/selectors/
    return value.replace(/([!"#$%&'()*+,./:;<=>?@\[\\\]^`{|}~])/g, "\\$1");
  }

  function getModelPrefix(fieldName) {
    return fieldName.substr(0, fieldName.lastIndexOf(".") + 1);
  }

  function appendModelPrefix(value, prefix) {
    if (value.indexOf("*.") === 0) {
      value = value.replace("*.", prefix);
    }
    return value;
  }

  function onError(error, inputElement) {
    // 'this' is the form element
    var container = $(this).find(
        "[data-valmsg-for='" + escapeAttributeValue(inputElement[0].name) + "']"
      ),
      replaceAttrValue = container.attr("data-valmsg-replace"),
      replace = replaceAttrValue
        ? $.parseJSON(replaceAttrValue) !== false
        : null;

    container
      .removeClass("field-validation-valid")
      .addClass("field-validation-error");
    error.data("unobtrusiveContainer", container);

    if (replace) {
      container.empty();
      error.removeClass("input-validation-error").appendTo(container);
    } else {
      error.hide();
    }
  }

  function onErrors(event, validator) {
    // 'this' is the form element
    var container = $(this).find("[data-valmsg-summary=true]"),
      list = container.find("ul");

    if (list && list.length && validator.errorList.length) {
      list.empty();
      container
        .addClass("validation-summary-errors")
        .removeClass("validation-summary-valid");

      $.each(validator.errorList, function () {
        $("<li />").html(this.message).appendTo(list);
      });
    }
  }

  function onSuccess(error) {
    // 'this' is the form element
    var container = error.data("unobtrusiveContainer");

    if (container) {
      var replaceAttrValue = container.attr("data-valmsg-replace"),
        replace = replaceAttrValue ? $.parseJSON(replaceAttrValue) : null;

      container
        .addClass("field-validation-valid")
        .removeClass("field-validation-error");
      error.removeData("unobtrusiveContainer");

      if (replace) {
        container.empty();
      }
    }
  }

  function onReset(event) {
    // 'this' is the form element
    var $form = $(this),
      key = "__jquery_unobtrusive_validation_form_reset";
    if ($form.data(key)) {
      return;
    }
    // Set a flag that indicates we're currently resetting the form.
    $form.data(key, true);
    try {
      $form.data("validator").resetForm();
    } finally {
      $form.removeData(key);
    }

    $form
      .find(".validation-summary-errors")
      .addClass("validation-summary-valid")
      .removeClass("validation-summary-errors");
    $form
      .find(".field-validation-error")
      .addClass("field-validation-valid")
      .removeClass("field-validation-error")
      .removeData("unobtrusiveContainer")
      .find(">*") // If we were using valmsg-replace, get the underlying error
      .removeData("unobtrusiveContainer");
  }

  function validationInfo(form) {
    var $form = $(form),
      result = $form.data(data_validation),
      onResetProxy = $.proxy(onReset, form),
      defaultOptions = $jQval.unobtrusive.options || {},
      execInContext = function (name, args) {
        var func = defaultOptions[name];
        func && $.isFunction(func) && func.apply(form, args);
      };

    if (!result) {
      result = {
        options: {
          // options structure passed to jQuery Validate's validate() method
          errorClass: defaultOptions.errorClass || "input-validation-error",
          errorElement: defaultOptions.errorElement || "span",
          errorPlacement: function () {
            onError.apply(form, arguments);
            execInContext("errorPlacement", arguments);
          },
          invalidHandler: function () {
            onErrors.apply(form, arguments);
            execInContext("invalidHandler", arguments);
          },
          messages: {},
          rules: {},
          success: function () {
            onSuccess.apply(form, arguments);
            execInContext("success", arguments);
          },
        },
        attachValidation: function () {
          $form
            .off("reset." + data_validation, onResetProxy)
            .on("reset." + data_validation, onResetProxy)
            .validate(this.options);
        },
        validate: function () {
          // a validation function that is called by unobtrusive Ajax
          $form.validate();
          return $form.valid();
        },
      };
      $form.data(data_validation, result);
    }

    return result;
  }

  $jQval.unobtrusive = {
    adapters: [],

    parseElement: function (element, skipAttach) {
      /// <summary>
      /// Parses a single HTML element for unobtrusive validation attributes.
      /// </summary>
      /// <param name="element" domElement="true">The HTML element to be parsed.</param>
      /// <param name="skipAttach" type="Boolean">[Optional] true to skip attaching the
      /// validation to the form. If parsing just this single element, you should specify true.
      /// If parsing several elements, you should specify false, and manually attach the validation
      /// to the form when you are finished. The default is false.</param>
      var $element = $(element),
        form = $element.parents("form")[0],
        valInfo,
        rules,
        messages;

      if (!form) {
        // Cannot do client-side validation without a form
        return;
      }

      valInfo = validationInfo(form);
      valInfo.options.rules[element.name] = rules = {};
      valInfo.options.messages[element.name] = messages = {};

      $.each(this.adapters, function () {
        var prefix = "data-val-" + this.name,
          message = $element.attr(prefix),
          paramValues = {};

        if (message !== undefined) {
          // Compare against undefined, because an empty message is legal (and falsy)
          prefix += "-";

          $.each(this.params, function () {
            paramValues[this] = $element.attr(prefix + this);
          });

          this.adapt({
            element: element,
            form: form,
            message: message,
            params: paramValues,
            rules: rules,
            messages: messages,
          });
        }
      });

      $.extend(rules, { __dummy__: true });

      if (!skipAttach) {
        valInfo.attachValidation();
      }
    },

    parse: function (selector) {
      /// <summary>
      /// Parses all the HTML elements in the specified selector. It looks for input elements decorated
      /// with the [data-val=true] attribute value and enables validation according to the data-val-*
      /// attribute values.
      /// </summary>
      /// <param name="selector" type="String">Any valid jQuery selector.</param>

      // $forms includes all forms in selector's DOM hierarchy (parent, children and self) that have at least one
      // element with data-val=true
      var $selector = $(selector),
        $forms = $selector
          .parents()
          .addBack()
          .filter("form")
          .add($selector.find("form"))
          .has("[data-val=true]");

      $selector.find("[data-val=true]").each(function () {
        $jQval.unobtrusive.parseElement(this, true);
      });

      $forms.each(function () {
        var info = validationInfo(this);
        if (info) {
          info.attachValidation();
        }
      });
    },
  };

  adapters = $jQval.unobtrusive.adapters;

  adapters.add = function (adapterName, params, fn) {
    /// <summary>Adds a new adapter to convert unobtrusive HTML into a jQuery Validate validation.</summary>
    /// <param name="adapterName" type="String">The name of the adapter to be added. This matches the name used
    /// in the data-val-nnnn HTML attribute (where nnnn is the adapter name).</param>
    /// <param name="params" type="Array" optional="true">[Optional] An array of parameter names (strings) that will
    /// be extracted from the data-val-nnnn-mmmm HTML attributes (where nnnn is the adapter name, and
    /// mmmm is the parameter name).</param>
    /// <param name="fn" type="Function">The function to call, which adapts the values from the HTML
    /// attributes into jQuery Validate rules and/or messages.</param>
    /// <returns type="jQuery.validator.unobtrusive.adapters" />
    if (!fn) {
      // Called with no params, just a function
      fn = params;
      params = [];
    }
    this.push({ name: adapterName, params: params, adapt: fn });
    return this;
  };

  adapters.addBool = function (adapterName, ruleName) {
    /// <summary>Adds a new adapter to convert unobtrusive HTML into a jQuery Validate validation, where
    /// the jQuery Validate validation rule has no parameter values.</summary>
    /// <param name="adapterName" type="String">The name of the adapter to be added. This matches the name used
    /// in the data-val-nnnn HTML attribute (where nnnn is the adapter name).</param>
    /// <param name="ruleName" type="String" optional="true">[Optional] The name of the jQuery Validate rule. If not provided, the value
    /// of adapterName will be used instead.</param>
    /// <returns type="jQuery.validator.unobtrusive.adapters" />
    return this.add(adapterName, function (options) {
      setValidationValues(options, ruleName || adapterName, true);
    });
  };

  adapters.addMinMax = function (
    adapterName,
    minRuleName,
    maxRuleName,
    minMaxRuleName,
    minAttribute,
    maxAttribute
  ) {
    /// <summary>Adds a new adapter to convert unobtrusive HTML into a jQuery Validate validation, where
    /// the jQuery Validate validation has three potential rules (one for min-only, one for max-only, and
    /// one for min-and-max). The HTML parameters are expected to be named -min and -max.</summary>
    /// <param name="adapterName" type="String">The name of the adapter to be added. This matches the name used
    /// in the data-val-nnnn HTML attribute (where nnnn is the adapter name).</param>
    /// <param name="minRuleName" type="String">The name of the jQuery Validate rule to be used when you only
    /// have a minimum value.</param>
    /// <param name="maxRuleName" type="String">The name of the jQuery Validate rule to be used when you only
    /// have a maximum value.</param>
    /// <param name="minMaxRuleName" type="String">The name of the jQuery Validate rule to be used when you
    /// have both a minimum and maximum value.</param>
    /// <param name="minAttribute" type="String" optional="true">[Optional] The name of the HTML attribute that
    /// contains the minimum value. The default is "min".</param>
    /// <param name="maxAttribute" type="String" optional="true">[Optional] The name of the HTML attribute that
    /// contains the maximum value. The default is "max".</param>
    /// <returns type="jQuery.validator.unobtrusive.adapters" />
    return this.add(
      adapterName,
      [minAttribute || "min", maxAttribute || "max"],
      function (options) {
        var min = options.params.min,
          max = options.params.max;

        if (min && max) {
          setValidationValues(options, minMaxRuleName, [min, max]);
        } else if (min) {
          setValidationValues(options, minRuleName, min);
        } else if (max) {
          setValidationValues(options, maxRuleName, max);
        }
      }
    );
  };

  adapters.addSingleVal = function (adapterName, attribute, ruleName) {
    /// <summary>Adds a new adapter to convert unobtrusive HTML into a jQuery Validate validation, where
    /// the jQuery Validate validation rule has a single value.</summary>
    /// <param name="adapterName" type="String">The name of the adapter to be added. This matches the name used
    /// in the data-val-nnnn HTML attribute(where nnnn is the adapter name).</param>
    /// <param name="attribute" type="String">[Optional] The name of the HTML attribute that contains the value.
    /// The default is "val".</param>
    /// <param name="ruleName" type="String" optional="true">[Optional] The name of the jQuery Validate rule. If not provided, the value
    /// of adapterName will be used instead.</param>
    /// <returns type="jQuery.validator.unobtrusive.adapters" />
    return this.add(adapterName, [attribute || "val"], function (options) {
      setValidationValues(
        options,
        ruleName || adapterName,
        options.params[attribute]
      );
    });
  };

  $jQval.addMethod("__dummy__", function (value, element, params) {
    return true;
  });

  $jQval.addMethod("regex", function (value, element, params) {
    var match;
    if (this.optional(element)) {
      return true;
    }

    match = new RegExp(params).exec(value);
    return match && match.index === 0 && match[0].length === value.length;
  });

  $jQval.addMethod("nonalphamin", function (value, element, nonalphamin) {
    var match;
    if (nonalphamin) {
      match = value.match(/\W/g);
      match = match && match.length >= nonalphamin;
    }
    return match;
  });

  if ($jQval.methods.extension) {
    adapters.addSingleVal("accept", "mimtype");
    adapters.addSingleVal("extension", "extension");
  } else {
    // for backward compatibility, when the 'extension' validation method does not exist, such as with versions
    // of JQuery Validation plugin prior to 1.10, we should use the 'accept' method for
    // validating the extension, and ignore mime-type validations as they are not supported.
    adapters.addSingleVal("extension", "extension", "accept");
  }

  adapters.addSingleVal("regex", "pattern");
  adapters
    .addBool("creditcard")
    .addBool("date")
    .addBool("digits")
    .addBool("email")
    .addBool("number")
    .addBool("url");
  adapters
    .addMinMax("length", "minlength", "maxlength", "rangelength")
    .addMinMax("range", "min", "max", "range");
  adapters
    .addMinMax("minlength", "minlength")
    .addMinMax("maxlength", "minlength", "maxlength");
  adapters.add("equalto", ["other"], function (options) {
    var prefix = getModelPrefix(options.element.name),
      other = options.params.other,
      fullOtherName = appendModelPrefix(other, prefix),
      element = $(options.form)
        .find(":input")
        .filter("[name='" + escapeAttributeValue(fullOtherName) + "']")[0];

    setValidationValues(options, "equalTo", element);
  });
  adapters.add("required", function (options) {
    // jQuery Validate equates "required" with "mandatory" for checkbox elements
    if (
      options.element.tagName.toUpperCase() !== "INPUT" ||
      options.element.type.toUpperCase() !== "CHECKBOX"
    ) {
      setValidationValues(options, "required", true);
    }
  });
  adapters.add(
    "remote",
    ["url", "type", "additionalfields"],
    function (options) {
      var value = {
          url: options.params.url,
          type: options.params.type || "GET",
          data: {},
        },
        prefix = getModelPrefix(options.element.name);

      $.each(
        splitAndTrim(options.params.additionalfields || options.element.name),
        function (i, fieldName) {
          var paramName = appendModelPrefix(fieldName, prefix);
          value.data[paramName] = function () {
            var field = $(options.form)
              .find(":input")
              .filter("[name='" + escapeAttributeValue(paramName) + "']");
            // For checkboxes and radio buttons, only pick up values from checked fields.
            if (field.is(":checkbox")) {
              return (
                field.filter(":checked").val() ||
                field.filter(":hidden").val() ||
                ""
              );
            } else if (field.is(":radio")) {
              return field.filter(":checked").val() || "";
            }
            return field.val();
          };
        }
      );

      setValidationValues(options, "remote", value);
    }
  );
  adapters.add("password", ["min", "nonalphamin", "regex"], function (options) {
    if (options.params.min) {
      setValidationValues(options, "minlength", options.params.min);
    }
    if (options.params.nonalphamin) {
      setValidationValues(options, "nonalphamin", options.params.nonalphamin);
    }
    if (options.params.regex) {
      setValidationValues(options, "regex", options.params.regex);
    }
  });
  adapters.add("fileextensions", ["extensions"], function (options) {
    setValidationValues(options, "extension", options.params.extensions);
  });

  $(function () {
    $jQval.unobtrusive.parse(document);
  });

  return $jQval.unobtrusive;
});

/*! DataTables 1.10.12
 * ©2008-2015 SpryMedia Ltd - datatables.net/license
 */

/**
 * @summary     DataTables
 * @description Paginate, search and order HTML tables
 * @version     1.10.12
 * @file        jquery.dataTables.js
 * @author      SpryMedia Ltd (www.sprymedia.co.uk)
 * @contact     www.sprymedia.co.uk/contact
 * @copyright   Copyright 2008-2015 SpryMedia Ltd.
 *
 * This source file is free software, available under the following license:
 *   MIT license - http://datatables.net/license
 *
 * This source file is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.
 *
 * For details please refer to: http://www.datatables.net
 */

/*jslint evil: true, undef: true, browser: true */
/*globals $,require,jQuery,define,_selector_run,_selector_opts,_selector_first,_selector_row_indexes,_ext,_Api,_api_register,_api_registerPlural,_re_new_lines,_re_html,_re_formatted_numeric,_re_escape_regex,_empty,_intVal,_numToDecimal,_isNumber,_isHtml,_htmlNumeric,_pluck,_pluck_order,_range,_stripHtml,_unique,_fnBuildAjax,_fnAjaxUpdate,_fnAjaxParameters,_fnAjaxUpdateDraw,_fnAjaxDataSrc,_fnAddColumn,_fnColumnOptions,_fnAdjustColumnSizing,_fnVisibleToColumnIndex,_fnColumnIndexToVisible,_fnVisbleColumns,_fnGetColumns,_fnColumnTypes,_fnApplyColumnDefs,_fnHungarianMap,_fnCamelToHungarian,_fnLanguageCompat,_fnBrowserDetect,_fnAddData,_fnAddTr,_fnNodeToDataIndex,_fnNodeToColumnIndex,_fnGetCellData,_fnSetCellData,_fnSplitObjNotation,_fnGetObjectDataFn,_fnSetObjectDataFn,_fnGetDataMaster,_fnClearTable,_fnDeleteIndex,_fnInvalidate,_fnGetRowElements,_fnCreateTr,_fnBuildHead,_fnDrawHead,_fnDraw,_fnReDraw,_fnAddOptionsHtml,_fnDetectHeader,_fnGetUniqueThs,_fnFeatureHtmlFilter,_fnFilterComplete,_fnFilterCustom,_fnFilterColumn,_fnFilter,_fnFilterCreateSearch,_fnEscapeRegex,_fnFilterData,_fnFeatureHtmlInfo,_fnUpdateInfo,_fnInfoMacros,_fnInitialise,_fnInitComplete,_fnLengthChange,_fnFeatureHtmlLength,_fnFeatureHtmlPaginate,_fnPageChange,_fnFeatureHtmlProcessing,_fnProcessingDisplay,_fnFeatureHtmlTable,_fnScrollDraw,_fnApplyToChildren,_fnCalculateColumnWidths,_fnThrottle,_fnConvertToWidth,_fnGetWidestNode,_fnGetMaxLenString,_fnStringToCss,_fnSortFlatten,_fnSort,_fnSortAria,_fnSortListener,_fnSortAttachListener,_fnSortingClasses,_fnSortData,_fnSaveState,_fnLoadState,_fnSettingsFromNode,_fnLog,_fnMap,_fnBindAction,_fnCallbackReg,_fnCallbackFire,_fnLengthOverflow,_fnRenderer,_fnDataSource,_fnRowAttributes*/

(function (factory) {
  "use strict";

  if (typeof define === "function" && define.amd) {
    // AMD
    define(["jquery"], function ($) {
      return factory($, window, document);
    });
  } else if (typeof exports === "object") {
    // CommonJS
    module.exports = function (root, $) {
      if (!root) {
        // CommonJS environments without a window global must pass a
        // root. This will give an error otherwise
        root = window;
      }

      if (!$) {
        $ =
          typeof window !== "undefined" // jQuery's factory checks for a global window
            ? require("jquery")
            : require("jquery")(root);
      }

      return factory($, root, root.document);
    };
  } else {
    // Browser
    factory(jQuery, window, document);
  }
})(function ($, window, document, undefined) {
  "use strict";

  /**
   * DataTables is a plug-in for the jQuery Javascript library. It is a highly
   * flexible tool, based upon the foundations of progressive enhancement,
   * which will add advanced interaction controls to any HTML table. For a
   * full list of features please refer to
   * [DataTables.net](href="http://datatables.net).
   *
   * Note that the `DataTable` object is not a global variable but is aliased
   * to `jQuery.fn.DataTable` and `jQuery.fn.dataTable` through which it may
   * be  accessed.
   *
   *  @class
   *  @param {object} [init={}] Configuration object for DataTables. Options
   *    are defined by {@link DataTable.defaults}
   *  @requires jQuery 1.7+
   *
   *  @example
   *    // Basic initialisation
   *    $(document).ready( function {
   *      $('#example').dataTable();
   *    } );
   *
   *  @example
   *    // Initialisation with configuration options - in this case, disable
   *    // pagination and sorting.
   *    $(document).ready( function {
   *      $('#example').dataTable( {
   *        "paginate": false,
   *        "sort": false
   *      } );
   *    } );
   */
  var DataTable = function (options) {
    /**
     * Perform a jQuery selector action on the table's TR elements (from the tbody) and
     * return the resulting jQuery object.
     *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on
     *  @param {object} [oOpts] Optional parameters for modifying the rows to be included
     *  @param {string} [oOpts.filter=none] Select TR elements that meet the current filter
     *    criterion ("applied") or all TR elements (i.e. no filter).
     *  @param {string} [oOpts.order=current] Order of the TR elements in the processed array.
     *    Can be either 'current', whereby the current sorting of the table is used, or
     *    'original' whereby the original order the data was read into the table is used.
     *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page
     *    ("current") or not ("all"). If 'current' is given, then order is assumed to be
     *    'current' and filter is 'applied', regardless of what they might be given as.
     *  @returns {object} jQuery object, filtered by the given selector.
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable();
     *
     *      // Highlight every second row
     *      oTable.$('tr:odd').css('backgroundColor', 'blue');
     *    } );
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable();
     *
     *      // Filter to rows with 'Webkit' in them, add a background colour and then
     *      // remove the filter, thus highlighting the 'Webkit' rows only.
     *      oTable.fnFilter('Webkit');
     *      oTable.$('tr', {"search": "applied"}).css('backgroundColor', 'blue');
     *      oTable.fnFilter('');
     *    } );
     */
    this.$ = function (sSelector, oOpts) {
      return this.api(true).$(sSelector, oOpts);
    };

    /**
     * Almost identical to $ in operation, but in this case returns the data for the matched
     * rows - as such, the jQuery selector used should match TR row nodes or TD/TH cell nodes
     * rather than any descendants, so the data can be obtained for the row/cell. If matching
     * rows are found, the data returned is the original data array/object that was used to
     * create the row (or a generated array if from a DOM source).
     *
     * This method is often useful in-combination with $ where both functions are given the
     * same parameters and the array indexes will match identically.
     *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on
     *  @param {object} [oOpts] Optional parameters for modifying the rows to be included
     *  @param {string} [oOpts.filter=none] Select elements that meet the current filter
     *    criterion ("applied") or all elements (i.e. no filter).
     *  @param {string} [oOpts.order=current] Order of the data in the processed array.
     *    Can be either 'current', whereby the current sorting of the table is used, or
     *    'original' whereby the original order the data was read into the table is used.
     *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page
     *    ("current") or not ("all"). If 'current' is given, then order is assumed to be
     *    'current' and filter is 'applied', regardless of what they might be given as.
     *  @returns {array} Data for the matched elements. If any elements, as a result of the
     *    selector, were not TR, TD or TH elements in the DataTable, they will have a null
     *    entry in the array.
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable();
     *
     *      // Get the data from the first row in the table
     *      var data = oTable._('tr:first');
     *
     *      // Do something useful with the data
     *      alert( "First cell is: "+data[0] );
     *    } );
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable();
     *
     *      // Filter to 'Webkit' and get all data for
     *      oTable.fnFilter('Webkit');
     *      var data = oTable._('tr', {"search": "applied"});
     *
     *      // Do something with the data
     *      alert( data.length+" rows matched the search" );
     *    } );
     */
    this._ = function (sSelector, oOpts) {
      return this.api(true).rows(sSelector, oOpts).data();
    };

    /**
     * Create a DataTables Api instance, with the currently selected tables for
     * the Api's context.
     * @param {boolean} [traditional=false] Set the API instance's context to be
     *   only the table referred to by the `DataTable.ext.iApiIndex` option, as was
     *   used in the API presented by DataTables 1.9- (i.e. the traditional mode),
     *   or if all tables captured in the jQuery object should be used.
     * @return {DataTables.Api}
     */
    this.api = function (traditional) {
      return traditional
        ? new _Api(_fnSettingsFromNode(this[_ext.iApiIndex]))
        : new _Api(this);
    };

    /**
     * Add a single new row or multiple rows of data to the table. Please note
     * that this is suitable for client-side processing only - if you are using
     * server-side processing (i.e. "bServerSide": true), then to add data, you
     * must add it to the data source, i.e. the server-side, through an Ajax call.
     *  @param {array|object} data The data to be added to the table. This can be:
     *    <ul>
     *      <li>1D array of data - add a single row with the data provided</li>
     *      <li>2D array of arrays - add multiple rows in a single call</li>
     *      <li>object - data object when using <i>mData</i></li>
     *      <li>array of objects - multiple data objects when using <i>mData</i></li>
     *    </ul>
     *  @param {bool} [redraw=true] redraw the table or not
     *  @returns {array} An array of integers, representing the list of indexes in
     *    <i>aoData</i> ({@link DataTable.models.oSettings}) that have been added to
     *    the table.
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    // Global var for counter
     *    var giCount = 2;
     *
     *    $(document).ready(function() {
     *      $('#example').dataTable();
     *    } );
     *
     *    function fnClickAddRow() {
     *      $('#example').dataTable().fnAddData( [
     *        giCount+".1",
     *        giCount+".2",
     *        giCount+".3",
     *        giCount+".4" ]
     *      );
     *
     *      giCount++;
     *    }
     */
    this.fnAddData = function (data, redraw) {
      var api = this.api(true);

      /* Check if we want to add multiple rows or not */
      var rows =
        $.isArray(data) && ($.isArray(data[0]) || $.isPlainObject(data[0]))
          ? api.rows.add(data)
          : api.row.add(data);

      if (redraw === undefined || redraw) {
        api.draw();
      }

      return rows.flatten().toArray();
    };

    /**
     * This function will make DataTables recalculate the column sizes, based on the data
     * contained in the table and the sizes applied to the columns (in the DOM, CSS or
     * through the sWidth parameter). This can be useful when the width of the table's
     * parent element changes (for example a window resize).
     *  @param {boolean} [bRedraw=true] Redraw the table or not, you will typically want to
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable( {
     *        "sScrollY": "200px",
     *        "bPaginate": false
     *      } );
     *
     *      $(window).bind('resize', function () {
     *        oTable.fnAdjustColumnSizing();
     *      } );
     *    } );
     */
    this.fnAdjustColumnSizing = function (bRedraw) {
      var api = this.api(true).columns.adjust();
      var settings = api.settings()[0];
      var scroll = settings.oScroll;

      if (bRedraw === undefined || bRedraw) {
        api.draw(false);
      } else if (scroll.sX !== "" || scroll.sY !== "") {
        /* If not redrawing, but scrolling, we want to apply the new column sizes anyway */
        _fnScrollDraw(settings);
      }
    };

    /**
     * Quickly and simply clear a table
     *  @param {bool} [bRedraw=true] redraw the table or not
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable();
     *
     *      // Immediately 'nuke' the current rows (perhaps waiting for an Ajax callback...)
     *      oTable.fnClearTable();
     *    } );
     */
    this.fnClearTable = function (bRedraw) {
      var api = this.api(true).clear();

      if (bRedraw === undefined || bRedraw) {
        api.draw();
      }
    };

    /**
     * The exact opposite of 'opening' a row, this function will close any rows which
     * are currently 'open'.
     *  @param {node} nTr the table row to 'close'
     *  @returns {int} 0 on success, or 1 if failed (can't find the row)
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable;
     *
     *      // 'open' an information row when a row is clicked on
     *      $('#example tbody tr').click( function () {
     *        if ( oTable.fnIsOpen(this) ) {
     *          oTable.fnClose( this );
     *        } else {
     *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
     *        }
     *      } );
     *
     *      oTable = $('#example').dataTable();
     *    } );
     */
    this.fnClose = function (nTr) {
      this.api(true).row(nTr).child.hide();
    };

    /**
     * Remove a row for the table
     *  @param {mixed} target The index of the row from aoData to be deleted, or
     *    the TR element you want to delete
     *  @param {function|null} [callBack] Callback function
     *  @param {bool} [redraw=true] Redraw the table or not
     *  @returns {array} The row that was deleted
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable();
     *
     *      // Immediately remove the first row
     *      oTable.fnDeleteRow( 0 );
     *    } );
     */
    this.fnDeleteRow = function (target, callback, redraw) {
      var api = this.api(true);
      var rows = api.rows(target);
      var settings = rows.settings()[0];
      var data = settings.aoData[rows[0][0]];

      rows.remove();

      if (callback) {
        callback.call(this, settings, data);
      }

      if (redraw === undefined || redraw) {
        api.draw();
      }

      return data;
    };

    /**
     * Restore the table to it's original state in the DOM by removing all of DataTables
     * enhancements, alterations to the DOM structure of the table and event listeners.
     *  @param {boolean} [remove=false] Completely remove the table from the DOM
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      // This example is fairly pointless in reality, but shows how fnDestroy can be used
     *      var oTable = $('#example').dataTable();
     *      oTable.fnDestroy();
     *    } );
     */
    this.fnDestroy = function (remove) {
      this.api(true).destroy(remove);
    };

    /**
     * Redraw the table
     *  @param {bool} [complete=true] Re-filter and resort (if enabled) the table before the draw.
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable();
     *
     *      // Re-draw the table - you wouldn't want to do it here, but it's an example :-)
     *      oTable.fnDraw();
     *    } );
     */
    this.fnDraw = function (complete) {
      // Note that this isn't an exact match to the old call to _fnDraw - it takes
      // into account the new data, but can hold position.
      this.api(true).draw(complete);
    };

    /**
     * Filter the input based on data
     *  @param {string} sInput String to filter the table on
     *  @param {int|null} [iColumn] Column to limit filtering to
     *  @param {bool} [bRegex=false] Treat as regular expression or not
     *  @param {bool} [bSmart=true] Perform smart filtering or not
     *  @param {bool} [bShowGlobal=true] Show the input global filter in it's input box(es)
     *  @param {bool} [bCaseInsensitive=true] Do case-insensitive matching (true) or not (false)
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable();
     *
     *      // Sometime later - filter...
     *      oTable.fnFilter( 'test string' );
     *    } );
     */
    this.fnFilter = function (
      sInput,
      iColumn,
      bRegex,
      bSmart,
      bShowGlobal,
      bCaseInsensitive
    ) {
      var api = this.api(true);

      if (iColumn === null || iColumn === undefined) {
        api.search(sInput, bRegex, bSmart, bCaseInsensitive);
      } else {
        api.column(iColumn).search(sInput, bRegex, bSmart, bCaseInsensitive);
      }

      api.draw();
    };

    /**
     * Get the data for the whole table, an individual row or an individual cell based on the
     * provided parameters.
     *  @param {int|node} [src] A TR row node, TD/TH cell node or an integer. If given as
     *    a TR node then the data source for the whole row will be returned. If given as a
     *    TD/TH cell node then iCol will be automatically calculated and the data for the
     *    cell returned. If given as an integer, then this is treated as the aoData internal
     *    data index for the row (see fnGetPosition) and the data for that row used.
     *  @param {int} [col] Optional column index that you want the data of.
     *  @returns {array|object|string} If mRow is undefined, then the data for all rows is
     *    returned. If mRow is defined, just data for that row, and is iCol is
     *    defined, only data for the designated cell is returned.
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    // Row data
     *    $(document).ready(function() {
     *      oTable = $('#example').dataTable();
     *
     *      oTable.$('tr').click( function () {
     *        var data = oTable.fnGetData( this );
     *        // ... do something with the array / object of data for the row
     *      } );
     *    } );
     *
     *  @example
     *    // Individual cell data
     *    $(document).ready(function() {
     *      oTable = $('#example').dataTable();
     *
     *      oTable.$('td').click( function () {
     *        var sData = oTable.fnGetData( this );
     *        alert( 'The cell clicked on had the value of '+sData );
     *      } );
     *    } );
     */
    this.fnGetData = function (src, col) {
      var api = this.api(true);

      if (src !== undefined) {
        var type = src.nodeName ? src.nodeName.toLowerCase() : "";

        return col !== undefined || type == "td" || type == "th"
          ? api.cell(src, col).data()
          : api.row(src).data() || null;
      }

      return api.data().toArray();
    };

    /**
     * Get an array of the TR nodes that are used in the table's body. Note that you will
     * typically want to use the '$' API method in preference to this as it is more
     * flexible.
     *  @param {int} [iRow] Optional row index for the TR element you want
     *  @returns {array|node} If iRow is undefined, returns an array of all TR elements
     *    in the table's body, or iRow is defined, just the TR element requested.
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable();
     *
     *      // Get the nodes from the table
     *      var nNodes = oTable.fnGetNodes( );
     *    } );
     */
    this.fnGetNodes = function (iRow) {
      var api = this.api(true);

      return iRow !== undefined
        ? api.row(iRow).node()
        : api.rows().nodes().flatten().toArray();
    };

    /**
     * Get the array indexes of a particular cell from it's DOM element
     * and column index including hidden columns
     *  @param {node} node this can either be a TR, TD or TH in the table's body
     *  @returns {int} If nNode is given as a TR, then a single index is returned, or
     *    if given as a cell, an array of [row index, column index (visible),
     *    column index (all)] is given.
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      $('#example tbody td').click( function () {
     *        // Get the position of the current data from the node
     *        var aPos = oTable.fnGetPosition( this );
     *
     *        // Get the data array for this row
     *        var aData = oTable.fnGetData( aPos[0] );
     *
     *        // Update the data array and return the value
     *        aData[ aPos[1] ] = 'clicked';
     *        this.innerHTML = 'clicked';
     *      } );
     *
     *      // Init DataTables
     *      oTable = $('#example').dataTable();
     *    } );
     */
    this.fnGetPosition = function (node) {
      var api = this.api(true);
      var nodeName = node.nodeName.toUpperCase();

      if (nodeName == "TR") {
        return api.row(node).index();
      } else if (nodeName == "TD" || nodeName == "TH") {
        var cell = api.cell(node).index();

        return [cell.row, cell.columnVisible, cell.column];
      }
      return null;
    };

    /**
     * Check to see if a row is 'open' or not.
     *  @param {node} nTr the table row to check
     *  @returns {boolean} true if the row is currently open, false otherwise
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable;
     *
     *      // 'open' an information row when a row is clicked on
     *      $('#example tbody tr').click( function () {
     *        if ( oTable.fnIsOpen(this) ) {
     *          oTable.fnClose( this );
     *        } else {
     *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
     *        }
     *      } );
     *
     *      oTable = $('#example').dataTable();
     *    } );
     */
    this.fnIsOpen = function (nTr) {
      return this.api(true).row(nTr).child.isShown();
    };

    /**
     * This function will place a new row directly after a row which is currently
     * on display on the page, with the HTML contents that is passed into the
     * function. This can be used, for example, to ask for confirmation that a
     * particular record should be deleted.
     *  @param {node} nTr The table row to 'open'
     *  @param {string|node|jQuery} mHtml The HTML to put into the row
     *  @param {string} sClass Class to give the new TD cell
     *  @returns {node} The row opened. Note that if the table row passed in as the
     *    first parameter, is not found in the table, this method will silently
     *    return.
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable;
     *
     *      // 'open' an information row when a row is clicked on
     *      $('#example tbody tr').click( function () {
     *        if ( oTable.fnIsOpen(this) ) {
     *          oTable.fnClose( this );
     *        } else {
     *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
     *        }
     *      } );
     *
     *      oTable = $('#example').dataTable();
     *    } );
     */
    this.fnOpen = function (nTr, mHtml, sClass) {
      return this.api(true).row(nTr).child(mHtml, sClass).show().child()[0];
    };

    /**
     * Change the pagination - provides the internal logic for pagination in a simple API
     * function. With this function you can have a DataTables table go to the next,
     * previous, first or last pages.
     *  @param {string|int} mAction Paging action to take: "first", "previous", "next" or "last"
     *    or page number to jump to (integer), note that page 0 is the first page.
     *  @param {bool} [bRedraw=true] Redraw the table or not
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable();
     *      oTable.fnPageChange( 'next' );
     *    } );
     */
    this.fnPageChange = function (mAction, bRedraw) {
      var api = this.api(true).page(mAction);

      if (bRedraw === undefined || bRedraw) {
        api.draw(false);
      }
    };

    /**
     * Show a particular column
     *  @param {int} iCol The column whose display should be changed
     *  @param {bool} bShow Show (true) or hide (false) the column
     *  @param {bool} [bRedraw=true] Redraw the table or not
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable();
     *
     *      // Hide the second column after initialisation
     *      oTable.fnSetColumnVis( 1, false );
     *    } );
     */
    this.fnSetColumnVis = function (iCol, bShow, bRedraw) {
      var api = this.api(true).column(iCol).visible(bShow);

      if (bRedraw === undefined || bRedraw) {
        api.columns.adjust().draw();
      }
    };

    /**
     * Get the settings for a particular table for external manipulation
     *  @returns {object} DataTables settings object. See
     *    {@link DataTable.models.oSettings}
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable();
     *      var oSettings = oTable.fnSettings();
     *
     *      // Show an example parameter from the settings
     *      alert( oSettings._iDisplayStart );
     *    } );
     */
    this.fnSettings = function () {
      return _fnSettingsFromNode(this[_ext.iApiIndex]);
    };

    /**
     * Sort the table by a particular column
     *  @param {int} iCol the data index to sort on. Note that this will not match the
     *    'display index' if you have hidden data entries
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable();
     *
     *      // Sort immediately with columns 0 and 1
     *      oTable.fnSort( [ [0,'asc'], [1,'asc'] ] );
     *    } );
     */
    this.fnSort = function (aaSort) {
      this.api(true).order(aaSort).draw();
    };

    /**
     * Attach a sort listener to an element for a given column
     *  @param {node} nNode the element to attach the sort listener to
     *  @param {int} iColumn the column that a click on this node will sort on
     *  @param {function} [fnCallback] callback function when sort is run
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable();
     *
     *      // Sort on column 1, when 'sorter' is clicked on
     *      oTable.fnSortListener( document.getElementById('sorter'), 1 );
     *    } );
     */
    this.fnSortListener = function (nNode, iColumn, fnCallback) {
      this.api(true).order.listener(nNode, iColumn, fnCallback);
    };

    /**
     * Update a table cell or row - this method will accept either a single value to
     * update the cell with, an array of values with one element for each column or
     * an object in the same format as the original data source. The function is
     * self-referencing in order to make the multi column updates easier.
     *  @param {object|array|string} mData Data to update the cell/row with
     *  @param {node|int} mRow TR element you want to update or the aoData index
     *  @param {int} [iColumn] The column to update, give as null or undefined to
     *    update a whole row.
     *  @param {bool} [bRedraw=true] Redraw the table or not
     *  @param {bool} [bAction=true] Perform pre-draw actions or not
     *  @returns {int} 0 on success, 1 on error
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable();
     *      oTable.fnUpdate( 'Example update', 0, 0 ); // Single cell
     *      oTable.fnUpdate( ['a', 'b', 'c', 'd', 'e'], $('tbody tr')[0] ); // Row
     *    } );
     */
    this.fnUpdate = function (mData, mRow, iColumn, bRedraw, bAction) {
      var api = this.api(true);

      if (iColumn === undefined || iColumn === null) {
        api.row(mRow).data(mData);
      } else {
        api.cell(mRow, iColumn).data(mData);
      }

      if (bAction === undefined || bAction) {
        api.columns.adjust();
      }

      if (bRedraw === undefined || bRedraw) {
        api.draw();
      }
      return 0;
    };

    /**
     * Provide a common method for plug-ins to check the version of DataTables being used, in order
     * to ensure compatibility.
     *  @param {string} sVersion Version string to check for, in the format "X.Y.Z". Note that the
     *    formats "X" and "X.Y" are also acceptable.
     *  @returns {boolean} true if this version of DataTables is greater or equal to the required
     *    version, or false if this version of DataTales is not suitable
     *  @method
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable();
     *      alert( oTable.fnVersionCheck( '1.9.0' ) );
     *    } );
     */
    this.fnVersionCheck = _ext.fnVersionCheck;

    var _that = this;
    var emptyInit = options === undefined;
    var len = this.length;

    if (emptyInit) {
      options = {};
    }

    this.oApi = this.internal = _ext.internal;

    // Extend with old style plug-in API methods
    for (var fn in DataTable.ext.internal) {
      if (fn) {
        this[fn] = _fnExternApiFunc(fn);
      }
    }

    this.each(function () {
      // For each initialisation we want to give it a clean initialisation
      // object that can be bashed around
      var o = {};
      var oInit =
        len > 1 // optimisation for single table case
          ? _fnExtend(o, options, true)
          : options;

      /*global oInit,_that,emptyInit*/
      var i = 0,
        iLen,
        j,
        jLen,
        k,
        kLen;
      var sId = this.getAttribute("id");
      var bInitHandedOff = false;
      var defaults = DataTable.defaults;
      var $this = $(this);

      /* Sanity check */
      if (this.nodeName.toLowerCase() != "table") {
        _fnLog(
          null,
          0,
          "Non-table node initialisation (" + this.nodeName + ")",
          2
        );
        return;
      }

      /* Backwards compatibility for the defaults */
      _fnCompatOpts(defaults);
      _fnCompatCols(defaults.column);

      /* Convert the camel-case defaults to Hungarian */
      _fnCamelToHungarian(defaults, defaults, true);
      _fnCamelToHungarian(defaults.column, defaults.column, true);

      /* Setting up the initialisation object */
      _fnCamelToHungarian(defaults, $.extend(oInit, $this.data()));

      /* Check to see if we are re-initialising a table */
      var allSettings = DataTable.settings;
      for (i = 0, iLen = allSettings.length; i < iLen; i++) {
        var s = allSettings[i];

        /* Base check on table node */
        if (
          s.nTable == this ||
          s.nTHead.parentNode == this ||
          (s.nTFoot && s.nTFoot.parentNode == this)
        ) {
          var bRetrieve =
            oInit.bRetrieve !== undefined
              ? oInit.bRetrieve
              : defaults.bRetrieve;
          var bDestroy =
            oInit.bDestroy !== undefined ? oInit.bDestroy : defaults.bDestroy;

          if (emptyInit || bRetrieve) {
            return s.oInstance;
          } else if (bDestroy) {
            s.oInstance.fnDestroy();
            break;
          } else {
            _fnLog(s, 0, "Cannot reinitialise DataTable", 3);
            return;
          }
        }

        /* If the element we are initialising has the same ID as a table which was previously
         * initialised, but the table nodes don't match (from before) then we destroy the old
         * instance by simply deleting it. This is under the assumption that the table has been
         * destroyed by other methods. Anyone using non-id selectors will need to do this manually
         */
        if (s.sTableId == this.id) {
          allSettings.splice(i, 1);
          break;
        }
      }

      /* Ensure the table has an ID - required for accessibility */
      if (sId === null || sId === "") {
        sId = "DataTables_Table_" + DataTable.ext._unique++;
        this.id = sId;
      }

      /* Create the settings object for this table and set some of the default parameters */
      var oSettings = $.extend(true, {}, DataTable.models.oSettings, {
        sDestroyWidth: $this[0].style.width,
        sInstance: sId,
        sTableId: sId,
      });
      oSettings.nTable = this;
      oSettings.oApi = _that.internal;
      oSettings.oInit = oInit;

      allSettings.push(oSettings);

      // Need to add the instance after the instance after the settings object has been added
      // to the settings array, so we can self reference the table instance if more than one
      oSettings.oInstance = _that.length === 1 ? _that : $this.dataTable();

      // Backwards compatibility, before we apply all the defaults
      _fnCompatOpts(oInit);

      if (oInit.oLanguage) {
        _fnLanguageCompat(oInit.oLanguage);
      }

      // If the length menu is given, but the init display length is not, use the length menu
      if (oInit.aLengthMenu && !oInit.iDisplayLength) {
        oInit.iDisplayLength = $.isArray(oInit.aLengthMenu[0])
          ? oInit.aLengthMenu[0][0]
          : oInit.aLengthMenu[0];
      }

      // Apply the defaults and init options to make a single init object will all
      // options defined from defaults and instance options.
      oInit = _fnExtend($.extend(true, {}, defaults), oInit);

      // Map the initialisation options onto the settings object
      _fnMap(oSettings.oFeatures, oInit, [
        "bPaginate",
        "bLengthChange",
        "bFilter",
        "bSort",
        "bSortMulti",
        "bInfo",
        "bProcessing",
        "bAutoWidth",
        "bSortClasses",
        "bServerSide",
        "bDeferRender",
      ]);
      _fnMap(oSettings, oInit, [
        "asStripeClasses",
        "ajax",
        "fnServerData",
        "fnFormatNumber",
        "sServerMethod",
        "aaSorting",
        "aaSortingFixed",
        "aLengthMenu",
        "sPaginationType",
        "sAjaxSource",
        "sAjaxDataProp",
        "iStateDuration",
        "sDom",
        "bSortCellsTop",
        "iTabIndex",
        "fnStateLoadCallback",
        "fnStateSaveCallback",
        "renderer",
        "searchDelay",
        "rowId",
        ["iCookieDuration", "iStateDuration"], // backwards compat
        ["oSearch", "oPreviousSearch"],
        ["aoSearchCols", "aoPreSearchCols"],
        ["iDisplayLength", "_iDisplayLength"],
        ["bJQueryUI", "bJUI"],
      ]);
      _fnMap(oSettings.oScroll, oInit, [
        ["sScrollX", "sX"],
        ["sScrollXInner", "sXInner"],
        ["sScrollY", "sY"],
        ["bScrollCollapse", "bCollapse"],
      ]);
      _fnMap(oSettings.oLanguage, oInit, "fnInfoCallback");

      /* Callback functions which are array driven */
      _fnCallbackReg(oSettings, "aoDrawCallback", oInit.fnDrawCallback, "user");
      _fnCallbackReg(oSettings, "aoServerParams", oInit.fnServerParams, "user");
      _fnCallbackReg(
        oSettings,
        "aoStateSaveParams",
        oInit.fnStateSaveParams,
        "user"
      );
      _fnCallbackReg(
        oSettings,
        "aoStateLoadParams",
        oInit.fnStateLoadParams,
        "user"
      );
      _fnCallbackReg(oSettings, "aoStateLoaded", oInit.fnStateLoaded, "user");
      _fnCallbackReg(oSettings, "aoRowCallback", oInit.fnRowCallback, "user");
      _fnCallbackReg(
        oSettings,
        "aoRowCreatedCallback",
        oInit.fnCreatedRow,
        "user"
      );
      _fnCallbackReg(
        oSettings,
        "aoHeaderCallback",
        oInit.fnHeaderCallback,
        "user"
      );
      _fnCallbackReg(
        oSettings,
        "aoFooterCallback",
        oInit.fnFooterCallback,
        "user"
      );
      _fnCallbackReg(oSettings, "aoInitComplete", oInit.fnInitComplete, "user");
      _fnCallbackReg(
        oSettings,
        "aoPreDrawCallback",
        oInit.fnPreDrawCallback,
        "user"
      );

      oSettings.rowIdFn = _fnGetObjectDataFn(oInit.rowId);

      /* Browser support detection */
      _fnBrowserDetect(oSettings);

      var oClasses = oSettings.oClasses;

      // @todo Remove in 1.11
      if (oInit.bJQueryUI) {
        /* Use the JUI classes object for display. You could clone the oStdClasses object if
         * you want to have multiple tables with multiple independent classes
         */
        $.extend(oClasses, DataTable.ext.oJUIClasses, oInit.oClasses);

        if (oInit.sDom === defaults.sDom && defaults.sDom === "lfrtip") {
          /* Set the DOM to use a layout suitable for jQuery UI's theming */
          oSettings.sDom = '<"H"lfr>t<"F"ip>';
        }

        if (!oSettings.renderer) {
          oSettings.renderer = "jqueryui";
        } else if (
          $.isPlainObject(oSettings.renderer) &&
          !oSettings.renderer.header
        ) {
          oSettings.renderer.header = "jqueryui";
        }
      } else {
        $.extend(oClasses, DataTable.ext.classes, oInit.oClasses);
      }
      $this.addClass(oClasses.sTable);

      if (oSettings.iInitDisplayStart === undefined) {
        /* Display start point, taking into account the save saving */
        oSettings.iInitDisplayStart = oInit.iDisplayStart;
        oSettings._iDisplayStart = oInit.iDisplayStart;
      }

      if (oInit.iDeferLoading !== null) {
        oSettings.bDeferLoading = true;
        var tmp = $.isArray(oInit.iDeferLoading);
        oSettings._iRecordsDisplay = tmp
          ? oInit.iDeferLoading[0]
          : oInit.iDeferLoading;
        oSettings._iRecordsTotal = tmp
          ? oInit.iDeferLoading[1]
          : oInit.iDeferLoading;
      }

      /* Language definitions */
      var oLanguage = oSettings.oLanguage;
      $.extend(true, oLanguage, oInit.oLanguage);

      if (oLanguage.sUrl !== "") {
        /* Get the language definitions from a file - because this Ajax call makes the language
         * get async to the remainder of this function we use bInitHandedOff to indicate that
         * _fnInitialise will be fired by the returned Ajax handler, rather than the constructor
         */
        $.ajax({
          dataType: "json",
          url: oLanguage.sUrl,
          success: function (json) {
            _fnLanguageCompat(json);
            _fnCamelToHungarian(defaults.oLanguage, json);
            $.extend(true, oLanguage, json);
            _fnInitialise(oSettings);
          },
          error: function () {
            // Error occurred loading language file, continue on as best we can
            _fnInitialise(oSettings);
          },
        });
        bInitHandedOff = true;
      }

      /*
       * Stripes
       */
      if (oInit.asStripeClasses === null) {
        oSettings.asStripeClasses = [oClasses.sStripeOdd, oClasses.sStripeEven];
      }

      /* Remove row stripe classes if they are already on the table row */
      var stripeClasses = oSettings.asStripeClasses;
      var rowOne = $this.children("tbody").find("tr").eq(0);
      if (
        $.inArray(
          true,
          $.map(stripeClasses, function (el, i) {
            return rowOne.hasClass(el);
          })
        ) !== -1
      ) {
        $("tbody tr", this).removeClass(stripeClasses.join(" "));
        oSettings.asDestroyStripes = stripeClasses.slice();
      }

      /*
       * Columns
       * See if we should load columns automatically or use defined ones
       */
      var anThs = [];
      var aoColumnsInit;
      var nThead = this.getElementsByTagName("thead");
      if (nThead.length !== 0) {
        _fnDetectHeader(oSettings.aoHeader, nThead[0]);
        anThs = _fnGetUniqueThs(oSettings);
      }

      /* If not given a column array, generate one with nulls */
      if (oInit.aoColumns === null) {
        aoColumnsInit = [];
        for (i = 0, iLen = anThs.length; i < iLen; i++) {
          aoColumnsInit.push(null);
        }
      } else {
        aoColumnsInit = oInit.aoColumns;
      }

      /* Add the columns */
      for (i = 0, iLen = aoColumnsInit.length; i < iLen; i++) {
        _fnAddColumn(oSettings, anThs ? anThs[i] : null);
      }

      /* Apply the column definitions */
      _fnApplyColumnDefs(
        oSettings,
        oInit.aoColumnDefs,
        aoColumnsInit,
        function (iCol, oDef) {
          _fnColumnOptions(oSettings, iCol, oDef);
        }
      );

      /* HTML5 attribute detection - build an mData object automatically if the
       * attributes are found
       */
      if (rowOne.length) {
        var a = function (cell, name) {
          return cell.getAttribute("data-" + name) !== null ? name : null;
        };

        $(rowOne[0])
          .children("th, td")
          .each(function (i, cell) {
            var col = oSettings.aoColumns[i];

            if (col.mData === i) {
              var sort = a(cell, "sort") || a(cell, "order");
              var filter = a(cell, "filter") || a(cell, "search");

              if (sort !== null || filter !== null) {
                col.mData = {
                  _: i + ".display",
                  sort: sort !== null ? i + ".@data-" + sort : undefined,
                  type: sort !== null ? i + ".@data-" + sort : undefined,
                  filter: filter !== null ? i + ".@data-" + filter : undefined,
                };

                _fnColumnOptions(oSettings, i);
              }
            }
          });
      }

      var features = oSettings.oFeatures;

      /* Must be done after everything which can be overridden by the state saving! */
      if (oInit.bStateSave) {
        features.bStateSave = true;
        _fnLoadState(oSettings, oInit);
        _fnCallbackReg(oSettings, "aoDrawCallback", _fnSaveState, "state_save");
      }

      /*
       * Sorting
       * @todo For modularisation (1.11) this needs to do into a sort start up handler
       */

      // If aaSorting is not defined, then we use the first indicator in asSorting
      // in case that has been altered, so the default sort reflects that option
      if (oInit.aaSorting === undefined) {
        var sorting = oSettings.aaSorting;
        for (i = 0, iLen = sorting.length; i < iLen; i++) {
          sorting[i][1] = oSettings.aoColumns[i].asSorting[0];
        }
      }

      /* Do a first pass on the sorting classes (allows any size changes to be taken into
       * account, and also will apply sorting disabled classes if disabled
       */
      _fnSortingClasses(oSettings);

      if (features.bSort) {
        _fnCallbackReg(oSettings, "aoDrawCallback", function () {
          if (oSettings.bSorted) {
            var aSort = _fnSortFlatten(oSettings);
            var sortedColumns = {};

            $.each(aSort, function (i, val) {
              sortedColumns[val.src] = val.dir;
            });

            _fnCallbackFire(oSettings, null, "order", [
              oSettings,
              aSort,
              sortedColumns,
            ]);
            _fnSortAria(oSettings);
          }
        });
      }

      _fnCallbackReg(
        oSettings,
        "aoDrawCallback",
        function () {
          if (
            oSettings.bSorted ||
            _fnDataSource(oSettings) === "ssp" ||
            features.bDeferRender
          ) {
            _fnSortingClasses(oSettings);
          }
        },
        "sc"
      );

      /*
       * Final init
       * Cache the header, body and footer as required, creating them if needed
       */

      // Work around for Webkit bug 83867 - store the caption-side before removing from doc
      var captions = $this.children("caption").each(function () {
        this._captionSide = $this.css("caption-side");
      });

      var thead = $this.children("thead");
      if (thead.length === 0) {
        thead = $("<thead/>").appendTo(this);
      }
      oSettings.nTHead = thead[0];

      var tbody = $this.children("tbody");
      if (tbody.length === 0) {
        tbody = $("<tbody/>").appendTo(this);
      }
      oSettings.nTBody = tbody[0];

      var tfoot = $this.children("tfoot");
      if (
        tfoot.length === 0 &&
        captions.length > 0 &&
        (oSettings.oScroll.sX !== "" || oSettings.oScroll.sY !== "")
      ) {
        // If we are a scrolling table, and no footer has been given, then we need to create
        // a tfoot element for the caption element to be appended to
        tfoot = $("<tfoot/>").appendTo(this);
      }

      if (tfoot.length === 0 || tfoot.children().length === 0) {
        $this.addClass(oClasses.sNoFooter);
      } else if (tfoot.length > 0) {
        oSettings.nTFoot = tfoot[0];
        _fnDetectHeader(oSettings.aoFooter, oSettings.nTFoot);
      }

      /* Check if there is data passing into the constructor */
      if (oInit.aaData) {
        for (i = 0; i < oInit.aaData.length; i++) {
          _fnAddData(oSettings, oInit.aaData[i]);
        }
      } else if (oSettings.bDeferLoading || _fnDataSource(oSettings) == "dom") {
        /* Grab the data from the page - only do this when deferred loading or no Ajax
         * source since there is no point in reading the DOM data if we are then going
         * to replace it with Ajax data
         */
        _fnAddTr(oSettings, $(oSettings.nTBody).children("tr"));
      }

      /* Copy the data index array */
      oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();

      /* Initialisation complete - table can be drawn */
      oSettings.bInitialised = true;

      /* Check if we need to initialise the table (it might not have been handed off to the
       * language processor)
       */
      if (bInitHandedOff === false) {
        _fnInitialise(oSettings);
      }
    });
    _that = null;
    return this;
  };

  /*
   * It is useful to have variables which are scoped locally so only the
   * DataTables functions can access them and they don't leak into global space.
   * At the same time these functions are often useful over multiple files in the
   * core and API, so we list, or at least document, all variables which are used
   * by DataTables as private variables here. This also ensures that there is no
   * clashing of variable names and that they can easily referenced for reuse.
   */

  // Defined else where
  //  _selector_run
  //  _selector_opts
  //  _selector_first
  //  _selector_row_indexes

  var _ext; // DataTable.ext
  var _Api; // DataTable.Api
  var _api_register; // DataTable.Api.register
  var _api_registerPlural; // DataTable.Api.registerPlural

  var _re_dic = {};
  var _re_new_lines = /[\r\n]/g;
  var _re_html = /<.*?>/g;
  var _re_date_start = /^[\w\+\-]/;
  var _re_date_end = /[\w\+\-]$/;

  // Escape regular expression special characters
  var _re_escape_regex = new RegExp(
    "(\\" +
      [
        "/",
        ".",
        "*",
        "+",
        "?",
        "|",
        "(",
        ")",
        "[",
        "]",
        "{",
        "}",
        "\\",
        "$",
        "^",
        "-",
      ].join("|\\") +
      ")",
    "g"
  );

  // http://en.wikipedia.org/wiki/Foreign_exchange_market
  // - \u20BD - Russian ruble.
  // - \u20a9 - South Korean Won
  // - \u20BA - Turkish Lira
  // - \u20B9 - Indian Rupee
  // - R - Brazil (R$) and South Africa
  // - fr - Swiss Franc
  // - kr - Swedish krona, Norwegian krone and Danish krone
  // - \u2009 is thin space and \u202F is narrow no-break space, both used in many
  //   standards as thousands separators.
  var _re_formatted_numeric = /[',$£€¥%\u2009\u202F\u20BD\u20a9\u20BArfk]/gi;

  var _empty = function (d) {
    return !d || d === true || d === "-" ? true : false;
  };

  var _intVal = function (s) {
    var integer = parseInt(s, 10);
    return !isNaN(integer) && isFinite(s) ? integer : null;
  };

  // Convert from a formatted number with characters other than `.` as the
  // decimal place, to a Javascript number
  var _numToDecimal = function (num, decimalPoint) {
    // Cache created regular expressions for speed as this function is called often
    if (!_re_dic[decimalPoint]) {
      _re_dic[decimalPoint] = new RegExp(_fnEscapeRegex(decimalPoint), "g");
    }
    return typeof num === "string" && decimalPoint !== "."
      ? num.replace(/\./g, "").replace(_re_dic[decimalPoint], ".")
      : num;
  };

  var _isNumber = function (d, decimalPoint, formatted) {
    var strType = typeof d === "string";

    // If empty return immediately so there must be a number if it is a
    // formatted string (this stops the string "k", or "kr", etc being detected
    // as a formatted number for currency
    if (_empty(d)) {
      return true;
    }

    if (decimalPoint && strType) {
      d = _numToDecimal(d, decimalPoint);
    }

    if (formatted && strType) {
      d = d.replace(_re_formatted_numeric, "");
    }

    return !isNaN(parseFloat(d)) && isFinite(d);
  };

  // A string without HTML in it can be considered to be HTML still
  var _isHtml = function (d) {
    return _empty(d) || typeof d === "string";
  };

  var _htmlNumeric = function (d, decimalPoint, formatted) {
    if (_empty(d)) {
      return true;
    }

    var html = _isHtml(d);
    return !html
      ? null
      : _isNumber(_stripHtml(d), decimalPoint, formatted)
      ? true
      : null;
  };

  var _pluck = function (a, prop, prop2) {
    var out = [];
    var i = 0,
      ien = a.length;

    // Could have the test in the loop for slightly smaller code, but speed
    // is essential here
    if (prop2 !== undefined) {
      for (; i < ien; i++) {
        if (a[i] && a[i][prop]) {
          out.push(a[i][prop][prop2]);
        }
      }
    } else {
      for (; i < ien; i++) {
        if (a[i]) {
          out.push(a[i][prop]);
        }
      }
    }

    return out;
  };

  // Basically the same as _pluck, but rather than looping over `a` we use `order`
  // as the indexes to pick from `a`
  var _pluck_order = function (a, order, prop, prop2) {
    var out = [];
    var i = 0,
      ien = order.length;

    // Could have the test in the loop for slightly smaller code, but speed
    // is essential here
    if (prop2 !== undefined) {
      for (; i < ien; i++) {
        if (a[order[i]][prop]) {
          out.push(a[order[i]][prop][prop2]);
        }
      }
    } else {
      for (; i < ien; i++) {
        out.push(a[order[i]][prop]);
      }
    }

    return out;
  };

  var _range = function (len, start) {
    var out = [];
    var end;

    if (start === undefined) {
      start = 0;
      end = len;
    } else {
      end = start;
      start = len;
    }

    for (var i = start; i < end; i++) {
      out.push(i);
    }

    return out;
  };

  var _removeEmpty = function (a) {
    var out = [];

    for (var i = 0, ien = a.length; i < ien; i++) {
      if (a[i]) {
        // careful - will remove all falsy values!
        out.push(a[i]);
      }
    }

    return out;
  };

  var _stripHtml = function (d) {
    return d.replace(_re_html, "");
  };

  /**
   * Find the unique elements in a source array.
   *
   * @param  {array} src Source array
   * @return {array} Array of unique items
   * @ignore
   */
  var _unique = function (src) {
    // A faster unique method is to use object keys to identify used values,
    // but this doesn't work with arrays or objects, which we must also
    // consider. See jsperf.com/compare-array-unique-versions/4 for more
    // information.
    var out = [],
      val,
      i,
      ien = src.length,
      j,
      k = 0;

    again: for (i = 0; i < ien; i++) {
      val = src[i];

      for (j = 0; j < k; j++) {
        if (out[j] === val) {
          continue again;
        }
      }

      out.push(val);
      k++;
    }

    return out;
  };

  /**
   * DataTables utility methods
   *
   * This namespace provides helper methods that DataTables uses internally to
   * create a DataTable, but which are not exclusively used only for DataTables.
   * These methods can be used by extension authors to save the duplication of
   * code.
   *
   *  @namespace
   */
  DataTable.util = {
    /**
     * Throttle the calls to a function. Arguments and context are maintained
     * for the throttled function.
     *
     * @param {function} fn Function to be called
     * @param {integer} freq Call frequency in mS
     * @return {function} Wrapped function
     */
    throttle: function (fn, freq) {
      var frequency = freq !== undefined ? freq : 200,
        last,
        timer;

      return function () {
        var that = this,
          now = +new Date(),
          args = arguments;

        if (last && now < last + frequency) {
          clearTimeout(timer);

          timer = setTimeout(function () {
            last = undefined;
            fn.apply(that, args);
          }, frequency);
        } else {
          last = now;
          fn.apply(that, args);
        }
      };
    },

    /**
     * Escape a string such that it can be used in a regular expression
     *
     *  @param {string} val string to escape
     *  @returns {string} escaped string
     */
    escapeRegex: function (val) {
      return val.replace(_re_escape_regex, "\\$1");
    },
  };

  /**
   * Create a mapping object that allows camel case parameters to be looked up
   * for their Hungarian counterparts. The mapping is stored in a private
   * parameter called `_hungarianMap` which can be accessed on the source object.
   *  @param {object} o
   *  @memberof DataTable#oApi
   */
  function _fnHungarianMap(o) {
    var hungarian = "a aa ai ao as b fn i m o s ",
      match,
      newKey,
      map = {};

    $.each(o, function (key, val) {
      match = key.match(/^([^A-Z]+?)([A-Z])/);

      if (match && hungarian.indexOf(match[1] + " ") !== -1) {
        newKey = key.replace(match[0], match[2].toLowerCase());
        map[newKey] = key;

        if (match[1] === "o") {
          _fnHungarianMap(o[key]);
        }
      }
    });

    o._hungarianMap = map;
  }

  /**
   * Convert from camel case parameters to Hungarian, based on a Hungarian map
   * created by _fnHungarianMap.
   *  @param {object} src The model object which holds all parameters that can be
   *    mapped.
   *  @param {object} user The object to convert from camel case to Hungarian.
   *  @param {boolean} force When set to `true`, properties which already have a
   *    Hungarian value in the `user` object will be overwritten. Otherwise they
   *    won't be.
   *  @memberof DataTable#oApi
   */
  function _fnCamelToHungarian(src, user, force) {
    if (!src._hungarianMap) {
      _fnHungarianMap(src);
    }

    var hungarianKey;

    $.each(user, function (key, val) {
      hungarianKey = src._hungarianMap[key];

      if (
        hungarianKey !== undefined &&
        (force || user[hungarianKey] === undefined)
      ) {
        // For objects, we need to buzz down into the object to copy parameters
        if (hungarianKey.charAt(0) === "o") {
          // Copy the camelCase options over to the hungarian
          if (!user[hungarianKey]) {
            user[hungarianKey] = {};
          }
          $.extend(true, user[hungarianKey], user[key]);

          _fnCamelToHungarian(src[hungarianKey], user[hungarianKey], force);
        } else {
          user[hungarianKey] = user[key];
        }
      }
    });
  }

  /**
   * Language compatibility - when certain options are given, and others aren't, we
   * need to duplicate the values over, in order to provide backwards compatibility
   * with older language files.
   *  @param {object} oSettings dataTables settings object
   *  @memberof DataTable#oApi
   */
  function _fnLanguageCompat(lang) {
    var defaults = DataTable.defaults.oLanguage;
    var zeroRecords = lang.sZeroRecords;

    /* Backwards compatibility - if there is no sEmptyTable given, then use the same as
     * sZeroRecords - assuming that is given.
     */
    if (
      !lang.sEmptyTable &&
      zeroRecords &&
      defaults.sEmptyTable === "No data available in table"
    ) {
      _fnMap(lang, lang, "sZeroRecords", "sEmptyTable");
    }

    /* Likewise with loading records */
    if (
      !lang.sLoadingRecords &&
      zeroRecords &&
      defaults.sLoadingRecords === "Loading..."
    ) {
      _fnMap(lang, lang, "sZeroRecords", "sLoadingRecords");
    }

    // Old parameter name of the thousands separator mapped onto the new
    if (lang.sInfoThousands) {
      lang.sThousands = lang.sInfoThousands;
    }

    var decimal = lang.sDecimal;
    if (decimal) {
      _addNumericSort(decimal);
    }
  }

  /**
   * Map one parameter onto another
   *  @param {object} o Object to map
   *  @param {*} knew The new parameter name
   *  @param {*} old The old parameter name
   */
  var _fnCompatMap = function (o, knew, old) {
    if (o[knew] !== undefined) {
      o[old] = o[knew];
    }
  };

  /**
   * Provide backwards compatibility for the main DT options. Note that the new
   * options are mapped onto the old parameters, so this is an external interface
   * change only.
   *  @param {object} init Object to map
   */
  function _fnCompatOpts(init) {
    _fnCompatMap(init, "ordering", "bSort");
    _fnCompatMap(init, "orderMulti", "bSortMulti");
    _fnCompatMap(init, "orderClasses", "bSortClasses");
    _fnCompatMap(init, "orderCellsTop", "bSortCellsTop");
    _fnCompatMap(init, "order", "aaSorting");
    _fnCompatMap(init, "orderFixed", "aaSortingFixed");
    _fnCompatMap(init, "paging", "bPaginate");
    _fnCompatMap(init, "pagingType", "sPaginationType");
    _fnCompatMap(init, "pageLength", "iDisplayLength");
    _fnCompatMap(init, "searching", "bFilter");

    // Boolean initialisation of x-scrolling
    if (typeof init.sScrollX === "boolean") {
      init.sScrollX = init.sScrollX ? "100%" : "";
    }
    if (typeof init.scrollX === "boolean") {
      init.scrollX = init.scrollX ? "100%" : "";
    }

    // Column search objects are in an array, so it needs to be converted
    // element by element
    var searchCols = init.aoSearchCols;

    if (searchCols) {
      for (var i = 0, ien = searchCols.length; i < ien; i++) {
        if (searchCols[i]) {
          _fnCamelToHungarian(DataTable.models.oSearch, searchCols[i]);
        }
      }
    }
  }

  /**
   * Provide backwards compatibility for column options. Note that the new options
   * are mapped onto the old parameters, so this is an external interface change
   * only.
   *  @param {object} init Object to map
   */
  function _fnCompatCols(init) {
    _fnCompatMap(init, "orderable", "bSortable");
    _fnCompatMap(init, "orderData", "aDataSort");
    _fnCompatMap(init, "orderSequence", "asSorting");
    _fnCompatMap(init, "orderDataType", "sortDataType");

    // orderData can be given as an integer
    var dataSort = init.aDataSort;
    if (dataSort && !$.isArray(dataSort)) {
      init.aDataSort = [dataSort];
    }
  }

  /**
   * Browser feature detection for capabilities, quirks
   *  @param {object} settings dataTables settings object
   *  @memberof DataTable#oApi
   */
  function _fnBrowserDetect(settings) {
    // We don't need to do this every time DataTables is constructed, the values
    // calculated are specific to the browser and OS configuration which we
    // don't expect to change between initialisations
    if (!DataTable.__browser) {
      var browser = {};
      DataTable.__browser = browser;

      // Scrolling feature / quirks detection
      var n = $("<div/>")
        .css({
          position: "fixed",
          top: 0,
          left: 0,
          height: 1,
          width: 1,
          overflow: "hidden",
        })
        .append(
          $("<div/>")
            .css({
              position: "absolute",
              top: 1,
              left: 1,
              width: 100,
              overflow: "scroll",
            })
            .append(
              $("<div/>").css({
                width: "100%",
                height: 10,
              })
            )
        )
        .appendTo("body");

      var outer = n.children();
      var inner = outer.children();

      // Numbers below, in order, are:
      // inner.offsetWidth, inner.clientWidth, outer.offsetWidth, outer.clientWidth
      //
      // IE6 XP:                           100 100 100  83
      // IE7 Vista:                        100 100 100  83
      // IE 8+ Windows:                     83  83 100  83
      // Evergreen Windows:                 83  83 100  83
      // Evergreen Mac with scrollbars:     85  85 100  85
      // Evergreen Mac without scrollbars: 100 100 100 100

      // Get scrollbar width
      browser.barWidth = outer[0].offsetWidth - outer[0].clientWidth;

      // IE6/7 will oversize a width 100% element inside a scrolling element, to
      // include the width of the scrollbar, while other browsers ensure the inner
      // element is contained without forcing scrolling
      browser.bScrollOversize =
        inner[0].offsetWidth === 100 && outer[0].clientWidth !== 100;

      // In rtl text layout, some browsers (most, but not all) will place the
      // scrollbar on the left, rather than the right.
      browser.bScrollbarLeft = Math.round(inner.offset().left) !== 1;

      // IE8- don't provide height and width for getBoundingClientRect
      browser.bBounding = n[0].getBoundingClientRect().width ? true : false;

      n.remove();
    }

    $.extend(settings.oBrowser, DataTable.__browser);
    settings.oScroll.iBarWidth = DataTable.__browser.barWidth;
  }

  /**
   * Array.prototype reduce[Right] method, used for browsers which don't support
   * JS 1.6. Done this way to reduce code size, since we iterate either way
   *  @param {object} settings dataTables settings object
   *  @memberof DataTable#oApi
   */
  function _fnReduce(that, fn, init, start, end, inc) {
    var i = start,
      value,
      isSet = false;

    if (init !== undefined) {
      value = init;
      isSet = true;
    }

    while (i !== end) {
      if (!that.hasOwnProperty(i)) {
        continue;
      }

      value = isSet ? fn(value, that[i], i, that) : that[i];

      isSet = true;
      i += inc;
    }

    return value;
  }

  /**
   * Add a column to the list used for the table with default values
   *  @param {object} oSettings dataTables settings object
   *  @param {node} nTh The th element for this column
   *  @memberof DataTable#oApi
   */
  function _fnAddColumn(oSettings, nTh) {
    // Add column to aoColumns array
    var oDefaults = DataTable.defaults.column;
    var iCol = oSettings.aoColumns.length;
    var oCol = $.extend({}, DataTable.models.oColumn, oDefaults, {
      nTh: nTh ? nTh : document.createElement("th"),
      sTitle: oDefaults.sTitle ? oDefaults.sTitle : nTh ? nTh.innerHTML : "",
      aDataSort: oDefaults.aDataSort ? oDefaults.aDataSort : [iCol],
      mData: oDefaults.mData ? oDefaults.mData : iCol,
      idx: iCol,
    });
    oSettings.aoColumns.push(oCol);

    // Add search object for column specific search. Note that the `searchCols[ iCol ]`
    // passed into extend can be undefined. This allows the user to give a default
    // with only some of the parameters defined, and also not give a default
    var searchCols = oSettings.aoPreSearchCols;
    searchCols[iCol] = $.extend({}, DataTable.models.oSearch, searchCols[iCol]);

    // Use the default column options function to initialise classes etc
    _fnColumnOptions(oSettings, iCol, $(nTh).data());
  }

  /**
   * Apply options for a column
   *  @param {object} oSettings dataTables settings object
   *  @param {int} iCol column index to consider
   *  @param {object} oOptions object with sType, bVisible and bSearchable etc
   *  @memberof DataTable#oApi
   */
  function _fnColumnOptions(oSettings, iCol, oOptions) {
    var oCol = oSettings.aoColumns[iCol];
    var oClasses = oSettings.oClasses;
    var th = $(oCol.nTh);

    // Try to get width information from the DOM. We can't get it from CSS
    // as we'd need to parse the CSS stylesheet. `width` option can override
    if (!oCol.sWidthOrig) {
      // Width attribute
      oCol.sWidthOrig = th.attr("width") || null;

      // Style attribute
      var t = (th.attr("style") || "").match(/width:\s*(\d+[pxem%]+)/);
      if (t) {
        oCol.sWidthOrig = t[1];
      }
    }

    /* User specified column options */
    if (oOptions !== undefined && oOptions !== null) {
      // Backwards compatibility
      _fnCompatCols(oOptions);

      // Map camel case parameters to their Hungarian counterparts
      _fnCamelToHungarian(DataTable.defaults.column, oOptions);

      /* Backwards compatibility for mDataProp */
      if (oOptions.mDataProp !== undefined && !oOptions.mData) {
        oOptions.mData = oOptions.mDataProp;
      }

      if (oOptions.sType) {
        oCol._sManualType = oOptions.sType;
      }

      // `class` is a reserved word in Javascript, so we need to provide
      // the ability to use a valid name for the camel case input
      if (oOptions.className && !oOptions.sClass) {
        oOptions.sClass = oOptions.className;
      }

      $.extend(oCol, oOptions);
      _fnMap(oCol, oOptions, "sWidth", "sWidthOrig");

      /* iDataSort to be applied (backwards compatibility), but aDataSort will take
       * priority if defined
       */
      if (oOptions.iDataSort !== undefined) {
        oCol.aDataSort = [oOptions.iDataSort];
      }
      _fnMap(oCol, oOptions, "aDataSort");
    }

    /* Cache the data get and set functions for speed */
    var mDataSrc = oCol.mData;
    var mData = _fnGetObjectDataFn(mDataSrc);
    var mRender = oCol.mRender ? _fnGetObjectDataFn(oCol.mRender) : null;

    var attrTest = function (src) {
      return typeof src === "string" && src.indexOf("@") !== -1;
    };
    oCol._bAttrSrc =
      $.isPlainObject(mDataSrc) &&
      (attrTest(mDataSrc.sort) ||
        attrTest(mDataSrc.type) ||
        attrTest(mDataSrc.filter));
    oCol._setter = null;

    oCol.fnGetData = function (rowData, type, meta) {
      var innerData = mData(rowData, type, undefined, meta);

      return mRender && type
        ? mRender(innerData, type, rowData, meta)
        : innerData;
    };
    oCol.fnSetData = function (rowData, val, meta) {
      return _fnSetObjectDataFn(mDataSrc)(rowData, val, meta);
    };

    // Indicate if DataTables should read DOM data as an object or array
    // Used in _fnGetRowElements
    if (typeof mDataSrc !== "number") {
      oSettings._rowReadObject = true;
    }

    /* Feature sorting overrides column specific when off */
    if (!oSettings.oFeatures.bSort) {
      oCol.bSortable = false;
      th.addClass(oClasses.sSortableNone); // Have to add class here as order event isn't called
    }

    /* Check that the class assignment is correct for sorting */
    var bAsc = $.inArray("asc", oCol.asSorting) !== -1;
    var bDesc = $.inArray("desc", oCol.asSorting) !== -1;
    if (!oCol.bSortable || (!bAsc && !bDesc)) {
      oCol.sSortingClass = oClasses.sSortableNone;
      oCol.sSortingClassJUI = "";
    } else if (bAsc && !bDesc) {
      oCol.sSortingClass = oClasses.sSortableAsc;
      oCol.sSortingClassJUI = oClasses.sSortJUIAscAllowed;
    } else if (!bAsc && bDesc) {
      oCol.sSortingClass = oClasses.sSortableDesc;
      oCol.sSortingClassJUI = oClasses.sSortJUIDescAllowed;
    } else {
      oCol.sSortingClass = oClasses.sSortable;
      oCol.sSortingClassJUI = oClasses.sSortJUI;
    }
  }

  /**
   * Adjust the table column widths for new data. Note: you would probably want to
   * do a redraw after calling this function!
   *  @param {object} settings dataTables settings object
   *  @memberof DataTable#oApi
   */
  function _fnAdjustColumnSizing(settings) {
    /* Not interested in doing column width calculation if auto-width is disabled */
    if (settings.oFeatures.bAutoWidth !== false) {
      var columns = settings.aoColumns;

      _fnCalculateColumnWidths(settings);
      for (var i = 0, iLen = columns.length; i < iLen; i++) {
        columns[i].nTh.style.width = columns[i].sWidth;
      }
    }

    var scroll = settings.oScroll;
    if (scroll.sY !== "" || scroll.sX !== "") {
      _fnScrollDraw(settings);
    }

    _fnCallbackFire(settings, null, "column-sizing", [settings]);
  }

  /**
   * Covert the index of a visible column to the index in the data array (take account
   * of hidden columns)
   *  @param {object} oSettings dataTables settings object
   *  @param {int} iMatch Visible column index to lookup
   *  @returns {int} i the data index
   *  @memberof DataTable#oApi
   */
  function _fnVisibleToColumnIndex(oSettings, iMatch) {
    var aiVis = _fnGetColumns(oSettings, "bVisible");

    return typeof aiVis[iMatch] === "number" ? aiVis[iMatch] : null;
  }

  /**
   * Covert the index of an index in the data array and convert it to the visible
   *   column index (take account of hidden columns)
   *  @param {int} iMatch Column index to lookup
   *  @param {object} oSettings dataTables settings object
   *  @returns {int} i the data index
   *  @memberof DataTable#oApi
   */
  function _fnColumnIndexToVisible(oSettings, iMatch) {
    var aiVis = _fnGetColumns(oSettings, "bVisible");
    var iPos = $.inArray(iMatch, aiVis);

    return iPos !== -1 ? iPos : null;
  }

  /**
   * Get the number of visible columns
   *  @param {object} oSettings dataTables settings object
   *  @returns {int} i the number of visible columns
   *  @memberof DataTable#oApi
   */
  function _fnVisbleColumns(oSettings) {
    var vis = 0;

    // No reduce in IE8, use a loop for now
    $.each(oSettings.aoColumns, function (i, col) {
      if (col.bVisible && $(col.nTh).css("display") !== "none") {
        vis++;
      }
    });

    return vis;
  }

  /**
   * Get an array of column indexes that match a given property
   *  @param {object} oSettings dataTables settings object
   *  @param {string} sParam Parameter in aoColumns to look for - typically
   *    bVisible or bSearchable
   *  @returns {array} Array of indexes with matched properties
   *  @memberof DataTable#oApi
   */
  function _fnGetColumns(oSettings, sParam) {
    var a = [];

    $.map(oSettings.aoColumns, function (val, i) {
      if (val[sParam]) {
        a.push(i);
      }
    });

    return a;
  }

  /**
   * Calculate the 'type' of a column
   *  @param {object} settings dataTables settings object
   *  @memberof DataTable#oApi
   */
  function _fnColumnTypes(settings) {
    var columns = settings.aoColumns;
    var data = settings.aoData;
    var types = DataTable.ext.type.detect;
    var i, ien, j, jen, k, ken;
    var col, cell, detectedType, cache;

    // For each column, spin over the
    for (i = 0, ien = columns.length; i < ien; i++) {
      col = columns[i];
      cache = [];

      if (!col.sType && col._sManualType) {
        col.sType = col._sManualType;
      } else if (!col.sType) {
        for (j = 0, jen = types.length; j < jen; j++) {
          for (k = 0, ken = data.length; k < ken; k++) {
            // Use a cache array so we only need to get the type data
            // from the formatter once (when using multiple detectors)
            if (cache[k] === undefined) {
              cache[k] = _fnGetCellData(settings, k, i, "type");
            }

            detectedType = types[j](cache[k], settings);

            // If null, then this type can't apply to this column, so
            // rather than testing all cells, break out. There is an
            // exception for the last type which is `html`. We need to
            // scan all rows since it is possible to mix string and HTML
            // types
            if (!detectedType && j !== types.length - 1) {
              break;
            }

            // Only a single match is needed for html type since it is
            // bottom of the pile and very similar to string
            if (detectedType === "html") {
              break;
            }
          }

          // Type is valid for all data points in the column - use this
          // type
          if (detectedType) {
            col.sType = detectedType;
            break;
          }
        }

        // Fall back - if no type was detected, always use string
        if (!col.sType) {
          col.sType = "string";
        }
      }
    }
  }

  /**
   * Take the column definitions and static columns arrays and calculate how
   * they relate to column indexes. The callback function will then apply the
   * definition found for a column to a suitable configuration object.
   *  @param {object} oSettings dataTables settings object
   *  @param {array} aoColDefs The aoColumnDefs array that is to be applied
   *  @param {array} aoCols The aoColumns array that defines columns individually
   *  @param {function} fn Callback function - takes two parameters, the calculated
   *    column index and the definition for that column.
   *  @memberof DataTable#oApi
   */
  function _fnApplyColumnDefs(oSettings, aoColDefs, aoCols, fn) {
    var i, iLen, j, jLen, k, kLen, def;
    var columns = oSettings.aoColumns;

    // Column definitions with aTargets
    if (aoColDefs) {
      /* Loop over the definitions array - loop in reverse so first instance has priority */
      for (i = aoColDefs.length - 1; i >= 0; i--) {
        def = aoColDefs[i];

        /* Each definition can target multiple columns, as it is an array */
        var aTargets = def.targets !== undefined ? def.targets : def.aTargets;

        if (!$.isArray(aTargets)) {
          aTargets = [aTargets];
        }

        for (j = 0, jLen = aTargets.length; j < jLen; j++) {
          if (typeof aTargets[j] === "number" && aTargets[j] >= 0) {
            /* Add columns that we don't yet know about */
            while (columns.length <= aTargets[j]) {
              _fnAddColumn(oSettings);
            }

            /* Integer, basic index */
            fn(aTargets[j], def);
          } else if (typeof aTargets[j] === "number" && aTargets[j] < 0) {
            /* Negative integer, right to left column counting */
            fn(columns.length + aTargets[j], def);
          } else if (typeof aTargets[j] === "string") {
            /* Class name matching on TH element */
            for (k = 0, kLen = columns.length; k < kLen; k++) {
              if (
                aTargets[j] == "_all" ||
                $(columns[k].nTh).hasClass(aTargets[j])
              ) {
                fn(k, def);
              }
            }
          }
        }
      }
    }

    // Statically defined columns array
    if (aoCols) {
      for (i = 0, iLen = aoCols.length; i < iLen; i++) {
        fn(i, aoCols[i]);
      }
    }
  }

  /**
   * Add a data array to the table, creating DOM node etc. This is the parallel to
   * _fnGatherData, but for adding rows from a Javascript source, rather than a
   * DOM source.
   *  @param {object} oSettings dataTables settings object
   *  @param {array} aData data array to be added
   *  @param {node} [nTr] TR element to add to the table - optional. If not given,
   *    DataTables will create a row automatically
   *  @param {array} [anTds] Array of TD|TH elements for the row - must be given
   *    if nTr is.
   *  @returns {int} >=0 if successful (index of new aoData entry), -1 if failed
   *  @memberof DataTable#oApi
   */
  function _fnAddData(oSettings, aDataIn, nTr, anTds) {
    /* Create the object for storing information about this new row */
    var iRow = oSettings.aoData.length;
    var oData = $.extend(true, {}, DataTable.models.oRow, {
      src: nTr ? "dom" : "data",
      idx: iRow,
    });

    oData._aData = aDataIn;
    oSettings.aoData.push(oData);

    /* Create the cells */
    var nTd, sThisType;
    var columns = oSettings.aoColumns;

    // Invalidate the column types as the new data needs to be revalidated
    for (var i = 0, iLen = columns.length; i < iLen; i++) {
      columns[i].sType = null;
    }

    /* Add to the display array */
    oSettings.aiDisplayMaster.push(iRow);

    var id = oSettings.rowIdFn(aDataIn);
    if (id !== undefined) {
      oSettings.aIds[id] = oData;
    }

    /* Create the DOM information, or register it if already present */
    if (nTr || !oSettings.oFeatures.bDeferRender) {
      _fnCreateTr(oSettings, iRow, nTr, anTds);
    }

    return iRow;
  }

  /**
   * Add one or more TR elements to the table. Generally we'd expect to
   * use this for reading data from a DOM sourced table, but it could be
   * used for an TR element. Note that if a TR is given, it is used (i.e.
   * it is not cloned).
   *  @param {object} settings dataTables settings object
   *  @param {array|node|jQuery} trs The TR element(s) to add to the table
   *  @returns {array} Array of indexes for the added rows
   *  @memberof DataTable#oApi
   */
  function _fnAddTr(settings, trs) {
    var row;

    // Allow an individual node to be passed in
    if (!(trs instanceof $)) {
      trs = $(trs);
    }

    return trs.map(function (i, el) {
      row = _fnGetRowElements(settings, el);
      return _fnAddData(settings, row.data, el, row.cells);
    });
  }

  /**
   * Take a TR element and convert it to an index in aoData
   *  @param {object} oSettings dataTables settings object
   *  @param {node} n the TR element to find
   *  @returns {int} index if the node is found, null if not
   *  @memberof DataTable#oApi
   */
  function _fnNodeToDataIndex(oSettings, n) {
    return n._DT_RowIndex !== undefined ? n._DT_RowIndex : null;
  }

  /**
   * Take a TD element and convert it into a column data index (not the visible index)
   *  @param {object} oSettings dataTables settings object
   *  @param {int} iRow The row number the TD/TH can be found in
   *  @param {node} n The TD/TH element to find
   *  @returns {int} index if the node is found, -1 if not
   *  @memberof DataTable#oApi
   */
  function _fnNodeToColumnIndex(oSettings, iRow, n) {
    return $.inArray(n, oSettings.aoData[iRow].anCells);
  }

  /**
   * Get the data for a given cell from the internal cache, taking into account data mapping
   *  @param {object} settings dataTables settings object
   *  @param {int} rowIdx aoData row id
   *  @param {int} colIdx Column index
   *  @param {string} type data get type ('display', 'type' 'filter' 'sort')
   *  @returns {*} Cell data
   *  @memberof DataTable#oApi
   */
  function _fnGetCellData(settings, rowIdx, colIdx, type) {
    var draw = settings.iDraw;
    var col = settings.aoColumns[colIdx];
    var rowData = settings.aoData[rowIdx]._aData;
    var defaultContent = col.sDefaultContent;
    var cellData = col.fnGetData(rowData, type, {
      settings: settings,
      row: rowIdx,
      col: colIdx,
    });

    if (cellData === undefined) {
      if (settings.iDrawError != draw && defaultContent === null) {
        _fnLog(
          settings,
          0,
          "Requested unknown parameter " +
            (typeof col.mData == "function"
              ? "{function}"
              : "'" + col.mData + "'") +
            " for row " +
            rowIdx +
            ", column " +
            colIdx,
          4
        );
        settings.iDrawError = draw;
      }
      return defaultContent;
    }

    // When the data source is null and a specific data type is requested (i.e.
    // not the original data), we can use default column data
    if (
      (cellData === rowData || cellData === null) &&
      defaultContent !== null &&
      type !== undefined
    ) {
      cellData = defaultContent;
    } else if (typeof cellData === "function") {
      // If the data source is a function, then we run it and use the return,
      // executing in the scope of the data object (for instances)
      return cellData.call(rowData);
    }

    if (cellData === null && type == "display") {
      return "";
    }
    return cellData;
  }

  /**
   * Set the value for a specific cell, into the internal data cache
   *  @param {object} settings dataTables settings object
   *  @param {int} rowIdx aoData row id
   *  @param {int} colIdx Column index
   *  @param {*} val Value to set
   *  @memberof DataTable#oApi
   */
  function _fnSetCellData(settings, rowIdx, colIdx, val) {
    var col = settings.aoColumns[colIdx];
    var rowData = settings.aoData[rowIdx]._aData;

    col.fnSetData(rowData, val, {
      settings: settings,
      row: rowIdx,
      col: colIdx,
    });
  }

  // Private variable that is used to match action syntax in the data property object
  var __reArray = /\[.*?\]$/;
  var __reFn = /\(\)$/;

  /**
   * Split string on periods, taking into account escaped periods
   * @param  {string} str String to split
   * @return {array} Split string
   */
  function _fnSplitObjNotation(str) {
    return $.map(str.match(/(\\.|[^\.])+/g) || [""], function (s) {
      return s.replace(/\\./g, ".");
    });
  }

  /**
   * Return a function that can be used to get data from a source object, taking
   * into account the ability to use nested objects as a source
   *  @param {string|int|function} mSource The data source for the object
   *  @returns {function} Data get function
   *  @memberof DataTable#oApi
   */
  function _fnGetObjectDataFn(mSource) {
    if ($.isPlainObject(mSource)) {
      /* Build an object of get functions, and wrap them in a single call */
      var o = {};
      $.each(mSource, function (key, val) {
        if (val) {
          o[key] = _fnGetObjectDataFn(val);
        }
      });

      return function (data, type, row, meta) {
        var t = o[type] || o._;
        return t !== undefined ? t(data, type, row, meta) : data;
      };
    } else if (mSource === null) {
      /* Give an empty string for rendering / sorting etc */
      return function (data) {
        // type, row and meta also passed, but not used
        return data;
      };
    } else if (typeof mSource === "function") {
      return function (data, type, row, meta) {
        return mSource(data, type, row, meta);
      };
    } else if (
      typeof mSource === "string" &&
      (mSource.indexOf(".") !== -1 ||
        mSource.indexOf("[") !== -1 ||
        mSource.indexOf("(") !== -1)
    ) {
      /* If there is a . in the source string then the data source is in a
       * nested object so we loop over the data for each level to get the next
       * level down. On each loop we test for undefined, and if found immediately
       * return. This allows entire objects to be missing and sDefaultContent to
       * be used if defined, rather than throwing an error
       */
      var fetchData = function (data, type, src) {
        var arrayNotation, funcNotation, out, innerSrc;

        if (src !== "") {
          var a = _fnSplitObjNotation(src);

          for (var i = 0, iLen = a.length; i < iLen; i++) {
            // Check if we are dealing with special notation
            arrayNotation = a[i].match(__reArray);
            funcNotation = a[i].match(__reFn);

            if (arrayNotation) {
              // Array notation
              a[i] = a[i].replace(__reArray, "");

              // Condition allows simply [] to be passed in
              if (a[i] !== "") {
                data = data[a[i]];
              }
              out = [];

              // Get the remainder of the nested object to get
              a.splice(0, i + 1);
              innerSrc = a.join(".");

              // Traverse each entry in the array getting the properties requested
              if ($.isArray(data)) {
                for (var j = 0, jLen = data.length; j < jLen; j++) {
                  out.push(fetchData(data[j], type, innerSrc));
                }
              }

              // If a string is given in between the array notation indicators, that
              // is used to join the strings together, otherwise an array is returned
              var join = arrayNotation[0].substring(
                1,
                arrayNotation[0].length - 1
              );
              data = join === "" ? out : out.join(join);

              // The inner call to fetchData has already traversed through the remainder
              // of the source requested, so we exit from the loop
              break;
            } else if (funcNotation) {
              // Function call
              a[i] = a[i].replace(__reFn, "");
              data = data[a[i]]();
              continue;
            }

            if (data === null || data[a[i]] === undefined) {
              return undefined;
            }
            data = data[a[i]];
          }
        }

        return data;
      };

      return function (data, type) {
        // row and meta also passed, but not used
        return fetchData(data, type, mSource);
      };
    } else {
      /* Array or flat object mapping */
      return function (data, type) {
        // row and meta also passed, but not used
        return data[mSource];
      };
    }
  }

  /**
   * Return a function that can be used to set data from a source object, taking
   * into account the ability to use nested objects as a source
   *  @param {string|int|function} mSource The data source for the object
   *  @returns {function} Data set function
   *  @memberof DataTable#oApi
   */
  function _fnSetObjectDataFn(mSource) {
    if ($.isPlainObject(mSource)) {
      /* Unlike get, only the underscore (global) option is used for for
       * setting data since we don't know the type here. This is why an object
       * option is not documented for `mData` (which is read/write), but it is
       * for `mRender` which is read only.
       */
      return _fnSetObjectDataFn(mSource._);
    } else if (mSource === null) {
      /* Nothing to do when the data source is null */
      return function () {};
    } else if (typeof mSource === "function") {
      return function (data, val, meta) {
        mSource(data, "set", val, meta);
      };
    } else if (
      typeof mSource === "string" &&
      (mSource.indexOf(".") !== -1 ||
        mSource.indexOf("[") !== -1 ||
        mSource.indexOf("(") !== -1)
    ) {
      /* Like the get, we need to get data from a nested object */
      var setData = function (data, val, src) {
        var a = _fnSplitObjNotation(src),
          b;
        var aLast = a[a.length - 1];
        var arrayNotation, funcNotation, o, innerSrc;

        for (var i = 0, iLen = a.length - 1; i < iLen; i++) {
          // Check if we are dealing with an array notation request
          arrayNotation = a[i].match(__reArray);
          funcNotation = a[i].match(__reFn);

          if (arrayNotation) {
            a[i] = a[i].replace(__reArray, "");
            data[a[i]] = [];

            // Get the remainder of the nested object to set so we can recurse
            b = a.slice();
            b.splice(0, i + 1);
            innerSrc = b.join(".");

            // Traverse each entry in the array setting the properties requested
            if ($.isArray(val)) {
              for (var j = 0, jLen = val.length; j < jLen; j++) {
                o = {};
                setData(o, val[j], innerSrc);
                data[a[i]].push(o);
              }
            } else {
              // We've been asked to save data to an array, but it
              // isn't array data to be saved. Best that can be done
              // is to just save the value.
              data[a[i]] = val;
            }

            // The inner call to setData has already traversed through the remainder
            // of the source and has set the data, thus we can exit here
            return;
          } else if (funcNotation) {
            // Function call
            a[i] = a[i].replace(__reFn, "");
            data = data[a[i]](val);
          }

          // If the nested object doesn't currently exist - since we are
          // trying to set the value - create it
          if (data[a[i]] === null || data[a[i]] === undefined) {
            data[a[i]] = {};
          }
          data = data[a[i]];
        }

        // Last item in the input - i.e, the actual set
        if (aLast.match(__reFn)) {
          // Function call
          data = data[aLast.replace(__reFn, "")](val);
        } else {
          // If array notation is used, we just want to strip it and use the property name
          // and assign the value. If it isn't used, then we get the result we want anyway
          data[aLast.replace(__reArray, "")] = val;
        }
      };

      return function (data, val) {
        // meta is also passed in, but not used
        return setData(data, val, mSource);
      };
    } else {
      /* Array or flat object mapping */
      return function (data, val) {
        // meta is also passed in, but not used
        data[mSource] = val;
      };
    }
  }

  /**
   * Return an array with the full table data
   *  @param {object} oSettings dataTables settings object
   *  @returns array {array} aData Master data array
   *  @memberof DataTable#oApi
   */
  function _fnGetDataMaster(settings) {
    return _pluck(settings.aoData, "_aData");
  }

  /**
   * Nuke the table
   *  @param {object} oSettings dataTables settings object
   *  @memberof DataTable#oApi
   */
  function _fnClearTable(settings) {
    settings.aoData.length = 0;
    settings.aiDisplayMaster.length = 0;
    settings.aiDisplay.length = 0;
    settings.aIds = {};
  }

  /**
   * Take an array of integers (index array) and remove a target integer (value - not
   * the key!)
   *  @param {array} a Index array to target
   *  @param {int} iTarget value to find
   *  @memberof DataTable#oApi
   */
  function _fnDeleteIndex(a, iTarget, splice) {
    var iTargetIndex = -1;

    for (var i = 0, iLen = a.length; i < iLen; i++) {
      if (a[i] == iTarget) {
        iTargetIndex = i;
      } else if (a[i] > iTarget) {
        a[i]--;
      }
    }

    if (iTargetIndex != -1 && splice === undefined) {
      a.splice(iTargetIndex, 1);
    }
  }

  /**
   * Mark cached data as invalid such that a re-read of the data will occur when
   * the cached data is next requested. Also update from the data source object.
   *
   * @param {object} settings DataTables settings object
   * @param {int}    rowIdx   Row index to invalidate
   * @param {string} [src]    Source to invalidate from: undefined, 'auto', 'dom'
   *     or 'data'
   * @param {int}    [colIdx] Column index to invalidate. If undefined the whole
   *     row will be invalidated
   * @memberof DataTable#oApi
   *
   * @todo For the modularisation of v1.11 this will need to become a callback, so
   *   the sort and filter methods can subscribe to it. That will required
   *   initialisation options for sorting, which is why it is not already baked in
   */
  function _fnInvalidate(settings, rowIdx, src, colIdx) {
    var row = settings.aoData[rowIdx];
    var i, ien;
    var cellWrite = function (cell, col) {
      // This is very frustrating, but in IE if you just write directly
      // to innerHTML, and elements that are overwritten are GC'ed,
      // even if there is a reference to them elsewhere
      while (cell.childNodes.length) {
        cell.removeChild(cell.firstChild);
      }

      cell.innerHTML = _fnGetCellData(settings, rowIdx, col, "display");
    };

    // Are we reading last data from DOM or the data object?
    if (src === "dom" || ((!src || src === "auto") && row.src === "dom")) {
      // Read the data from the DOM
      row._aData = _fnGetRowElements(
        settings,
        row,
        colIdx,
        colIdx === undefined ? undefined : row._aData
      ).data;
    } else {
      // Reading from data object, update the DOM
      var cells = row.anCells;

      if (cells) {
        if (colIdx !== undefined) {
          cellWrite(cells[colIdx], colIdx);
        } else {
          for (i = 0, ien = cells.length; i < ien; i++) {
            cellWrite(cells[i], i);
          }
        }
      }
    }

    // For both row and cell invalidation, the cached data for sorting and
    // filtering is nulled out
    row._aSortData = null;
    row._aFilterData = null;

    // Invalidate the type for a specific column (if given) or all columns since
    // the data might have changed
    var cols = settings.aoColumns;
    if (colIdx !== undefined) {
      cols[colIdx].sType = null;
    } else {
      for (i = 0, ien = cols.length; i < ien; i++) {
        cols[i].sType = null;
      }

      // Update DataTables special `DT_*` attributes for the row
      _fnRowAttributes(settings, row);
    }
  }

  /**
   * Build a data source object from an HTML row, reading the contents of the
   * cells that are in the row.
   *
   * @param {object} settings DataTables settings object
   * @param {node|object} TR element from which to read data or existing row
   *   object from which to re-read the data from the cells
   * @param {int} [colIdx] Optional column index
   * @param {array|object} [d] Data source object. If `colIdx` is given then this
   *   parameter should also be given and will be used to write the data into.
   *   Only the column in question will be written
   * @returns {object} Object with two parameters: `data` the data read, in
   *   document order, and `cells` and array of nodes (they can be useful to the
   *   caller, so rather than needing a second traversal to get them, just return
   *   them from here).
   * @memberof DataTable#oApi
   */
  function _fnGetRowElements(settings, row, colIdx, d) {
    var tds = [],
      td = row.firstChild,
      name,
      col,
      o,
      i = 0,
      contents,
      columns = settings.aoColumns,
      objectRead = settings._rowReadObject;

    // Allow the data object to be passed in, or construct
    d = d !== undefined ? d : objectRead ? {} : [];

    var attr = function (str, td) {
      if (typeof str === "string") {
        var idx = str.indexOf("@");

        if (idx !== -1) {
          var attr = str.substring(idx + 1);
          var setter = _fnSetObjectDataFn(str);
          setter(d, td.getAttribute(attr));
        }
      }
    };

    // Read data from a cell and store into the data object
    var cellProcess = function (cell) {
      if (colIdx === undefined || colIdx === i) {
        col = columns[i];
        contents = $.trim(cell.innerHTML);

        if (col && col._bAttrSrc) {
          var setter = _fnSetObjectDataFn(col.mData._);
          setter(d, contents);

          attr(col.mData.sort, cell);
          attr(col.mData.type, cell);
          attr(col.mData.filter, cell);
        } else {
          // Depending on the `data` option for the columns the data can
          // be read to either an object or an array.
          if (objectRead) {
            if (!col._setter) {
              // Cache the setter function
              col._setter = _fnSetObjectDataFn(col.mData);
            }
            col._setter(d, contents);
          } else {
            d[i] = contents;
          }
        }
      }

      i++;
    };

    if (td) {
      // `tr` element was passed in
      while (td) {
        name = td.nodeName.toUpperCase();

        if (name == "TD" || name == "TH") {
          cellProcess(td);
          tds.push(td);
        }

        td = td.nextSibling;
      }
    } else {
      // Existing row object passed in
      tds = row.anCells;

      for (var j = 0, jen = tds.length; j < jen; j++) {
        cellProcess(tds[j]);
      }
    }

    // Read the ID from the DOM if present
    var rowNode = row.firstChild ? row : row.nTr;

    if (rowNode) {
      var id = rowNode.getAttribute("id");

      if (id) {
        _fnSetObjectDataFn(settings.rowId)(d, id);
      }
    }

    return {
      data: d,
      cells: tds,
    };
  }
  /**
   * Create a new TR element (and it's TD children) for a row
   *  @param {object} oSettings dataTables settings object
   *  @param {int} iRow Row to consider
   *  @param {node} [nTrIn] TR element to add to the table - optional. If not given,
   *    DataTables will create a row automatically
   *  @param {array} [anTds] Array of TD|TH elements for the row - must be given
   *    if nTr is.
   *  @memberof DataTable#oApi
   */
  function _fnCreateTr(oSettings, iRow, nTrIn, anTds) {
    var row = oSettings.aoData[iRow],
      rowData = row._aData,
      cells = [],
      nTr,
      nTd,
      oCol,
      i,
      iLen;

    if (row.nTr === null) {
      nTr = nTrIn || document.createElement("tr");

      row.nTr = nTr;
      row.anCells = cells;

      /* Use a private property on the node to allow reserve mapping from the node
       * to the aoData array for fast look up
       */
      nTr._DT_RowIndex = iRow;

      /* Special parameters can be given by the data source to be used on the row */
      _fnRowAttributes(oSettings, row);

      /* Process each column */
      for (i = 0, iLen = oSettings.aoColumns.length; i < iLen; i++) {
        oCol = oSettings.aoColumns[i];

        nTd = nTrIn ? anTds[i] : document.createElement(oCol.sCellType);
        nTd._DT_CellIndex = {
          row: iRow,
          column: i,
        };

        cells.push(nTd);

        // Need to create the HTML if new, or if a rendering function is defined
        if (
          (!nTrIn || oCol.mRender || oCol.mData !== i) &&
          (!$.isPlainObject(oCol.mData) || oCol.mData._ !== i + ".display")
        ) {
          nTd.innerHTML = _fnGetCellData(oSettings, iRow, i, "display");
        }

        /* Add user defined class */
        if (oCol.sClass) {
          nTd.className += " " + oCol.sClass;
        }

        // Visibility - add or remove as required
        if (oCol.bVisible && !nTrIn) {
          nTr.appendChild(nTd);
        } else if (!oCol.bVisible && nTrIn) {
          nTd.parentNode.removeChild(nTd);
        }

        if (oCol.fnCreatedCell) {
          oCol.fnCreatedCell.call(
            oSettings.oInstance,
            nTd,
            _fnGetCellData(oSettings, iRow, i),
            rowData,
            iRow,
            i
          );
        }
      }

      _fnCallbackFire(oSettings, "aoRowCreatedCallback", null, [
        nTr,
        rowData,
        iRow,
      ]);
    }

    // Remove once webkit bug 131819 and Chromium bug 365619 have been resolved
    // and deployed
    row.nTr.setAttribute("role", "row");
  }

  /**
   * Add attributes to a row based on the special `DT_*` parameters in a data
   * source object.
   *  @param {object} settings DataTables settings object
   *  @param {object} DataTables row object for the row to be modified
   *  @memberof DataTable#oApi
   */
  function _fnRowAttributes(settings, row) {
    var tr = row.nTr;
    var data = row._aData;

    if (tr) {
      var id = settings.rowIdFn(data);

      if (id) {
        tr.id = id;
      }

      if (data.DT_RowClass) {
        // Remove any classes added by DT_RowClass before
        var a = data.DT_RowClass.split(" ");
        row.__rowc = row.__rowc ? _unique(row.__rowc.concat(a)) : a;

        $(tr).removeClass(row.__rowc.join(" ")).addClass(data.DT_RowClass);
      }

      if (data.DT_RowAttr) {
        $(tr).attr(data.DT_RowAttr);
      }

      if (data.DT_RowData) {
        $(tr).data(data.DT_RowData);
      }
    }
  }

  /**
   * Create the HTML header for the table
   *  @param {object} oSettings dataTables settings object
   *  @memberof DataTable#oApi
   */
  function _fnBuildHead(oSettings) {
    var i, ien, cell, row, column;
    var thead = oSettings.nTHead;
    var tfoot = oSettings.nTFoot;
    var createHeader = $("th, td", thead).length === 0;
    var classes = oSettings.oClasses;
    var columns = oSettings.aoColumns;

    if (createHeader) {
      row = $("<tr/>").appendTo(thead);
    }

    for (i = 0, ien = columns.length; i < ien; i++) {
      column = columns[i];
      cell = $(column.nTh).addClass(column.sClass);

      if (createHeader) {
        cell.appendTo(row);
      }

      // 1.11 move into sorting
      if (oSettings.oFeatures.bSort) {
        cell.addClass(column.sSortingClass);

        if (column.bSortable !== false) {
          cell
            .attr("tabindex", oSettings.iTabIndex)
            .attr("aria-controls", oSettings.sTableId);

          _fnSortAttachListener(oSettings, column.nTh, i);
        }
      }

      if (column.sTitle != cell[0].innerHTML) {
        cell.html(column.sTitle);
      }

      _fnRenderer(oSettings, "header")(oSettings, cell, column, classes);
    }

    if (createHeader) {
      _fnDetectHeader(oSettings.aoHeader, thead);
    }

    /* ARIA role for the rows */
    $(thead).find(">tr").attr("role", "row");

    /* Deal with the footer - add classes if required */
    $(thead).find(">tr>th, >tr>td").addClass(classes.sHeaderTH);
    $(tfoot).find(">tr>th, >tr>td").addClass(classes.sFooterTH);

    // Cache the footer cells. Note that we only take the cells from the first
    // row in the footer. If there is more than one row the user wants to
    // interact with, they need to use the table().foot() method. Note also this
    // allows cells to be used for multiple columns using colspan
    if (tfoot !== null) {
      var cells = oSettings.aoFooter[0];

      for (i = 0, ien = cells.length; i < ien; i++) {
        column = columns[i];
        column.nTf = cells[i].cell;

        if (column.sClass) {
          $(column.nTf).addClass(column.sClass);
        }
      }
    }
  }

  /**
   * Draw the header (or footer) element based on the column visibility states. The
   * methodology here is to use the layout array from _fnDetectHeader, modified for
   * the instantaneous column visibility, to construct the new layout. The grid is
   * traversed over cell at a time in a rows x columns grid fashion, although each
   * cell insert can cover multiple elements in the grid - which is tracks using the
   * aApplied array. Cell inserts in the grid will only occur where there isn't
   * already a cell in that position.
   *  @param {object} oSettings dataTables settings object
   *  @param array {objects} aoSource Layout array from _fnDetectHeader
   *  @param {boolean} [bIncludeHidden=false] If true then include the hidden columns in the calc,
   *  @memberof DataTable#oApi
   */
  function _fnDrawHead(oSettings, aoSource, bIncludeHidden) {
    var i, iLen, j, jLen, k, kLen, n, nLocalTr;
    var aoLocal = [];
    var aApplied = [];
    var iColumns = oSettings.aoColumns.length;
    var iRowspan, iColspan;

    if (!aoSource) {
      return;
    }

    if (bIncludeHidden === undefined) {
      bIncludeHidden = false;
    }

    /* Make a copy of the master layout array, but without the visible columns in it */
    for (i = 0, iLen = aoSource.length; i < iLen; i++) {
      aoLocal[i] = aoSource[i].slice();
      aoLocal[i].nTr = aoSource[i].nTr;

      /* Remove any columns which are currently hidden */
      for (j = iColumns - 1; j >= 0; j--) {
        if (!oSettings.aoColumns[j].bVisible && !bIncludeHidden) {
          aoLocal[i].splice(j, 1);
        }
      }

      /* Prep the applied array - it needs an element for each row */
      aApplied.push([]);
    }

    for (i = 0, iLen = aoLocal.length; i < iLen; i++) {
      nLocalTr = aoLocal[i].nTr;

      /* All cells are going to be replaced, so empty out the row */
      if (nLocalTr) {
        while ((n = nLocalTr.firstChild)) {
          nLocalTr.removeChild(n);
        }
      }

      for (j = 0, jLen = aoLocal[i].length; j < jLen; j++) {
        iRowspan = 1;
        iColspan = 1;

        /* Check to see if there is already a cell (row/colspan) covering our target
         * insert point. If there is, then there is nothing to do.
         */
        if (aApplied[i][j] === undefined) {
          nLocalTr.appendChild(aoLocal[i][j].cell);
          aApplied[i][j] = 1;

          /* Expand the cell to cover as many rows as needed */
          while (
            aoLocal[i + iRowspan] !== undefined &&
            aoLocal[i][j].cell == aoLocal[i + iRowspan][j].cell
          ) {
            aApplied[i + iRowspan][j] = 1;
            iRowspan++;
          }

          /* Expand the cell to cover as many columns as needed */
          while (
            aoLocal[i][j + iColspan] !== undefined &&
            aoLocal[i][j].cell == aoLocal[i][j + iColspan].cell
          ) {
            /* Must update the applied array over the rows for the columns */
            for (k = 0; k < iRowspan; k++) {
              aApplied[i + k][j + iColspan] = 1;
            }
            iColspan++;
          }

          /* Do the actual expansion in the DOM */
          $(aoLocal[i][j].cell)
            .attr("rowspan", iRowspan)
            .attr("colspan", iColspan);
        }
      }
    }
  }

  /**
   * Insert the required TR nodes into the table for display
   *  @param {object} oSettings dataTables settings object
   *  @memberof DataTable#oApi
   */
  function _fnDraw(oSettings) {
    /* Provide a pre-callback function which can be used to cancel the draw is false is returned */
    var aPreDraw = _fnCallbackFire(oSettings, "aoPreDrawCallback", "preDraw", [
      oSettings,
    ]);
    if ($.inArray(false, aPreDraw) !== -1) {
      _fnProcessingDisplay(oSettings, false);
      return;
    }

    var i, iLen, n;
    var anRows = [];
    var iRowCount = 0;
    var asStripeClasses = oSettings.asStripeClasses;
    var iStripes = asStripeClasses.length;
    var iOpenRows = oSettings.aoOpenRows.length;
    var oLang = oSettings.oLanguage;
    var iInitDisplayStart = oSettings.iInitDisplayStart;
    var bServerSide = _fnDataSource(oSettings) == "ssp";
    var aiDisplay = oSettings.aiDisplay;

    oSettings.bDrawing = true;

    /* Check and see if we have an initial draw position from state saving */
    if (iInitDisplayStart !== undefined && iInitDisplayStart !== -1) {
      oSettings._iDisplayStart = bServerSide
        ? iInitDisplayStart
        : iInitDisplayStart >= oSettings.fnRecordsDisplay()
        ? 0
        : iInitDisplayStart;

      oSettings.iInitDisplayStart = -1;
    }

    var iDisplayStart = oSettings._iDisplayStart;
    var iDisplayEnd = oSettings.fnDisplayEnd();

    /* Server-side processing draw intercept */
    if (oSettings.bDeferLoading) {
      oSettings.bDeferLoading = false;
      oSettings.iDraw++;
      _fnProcessingDisplay(oSettings, false);
    } else if (!bServerSide) {
      oSettings.iDraw++;
    } else if (!oSettings.bDestroying && !_fnAjaxUpdate(oSettings)) {
      return;
    }

    if (aiDisplay.length !== 0) {
      var iStart = bServerSide ? 0 : iDisplayStart;
      var iEnd = bServerSide ? oSettings.aoData.length : iDisplayEnd;

      for (var j = iStart; j < iEnd; j++) {
        var iDataIndex = aiDisplay[j];
        var aoData = oSettings.aoData[iDataIndex];
        if (aoData.nTr === null) {
          _fnCreateTr(oSettings, iDataIndex);
        }

        var nRow = aoData.nTr;

        /* Remove the old striping classes and then add the new one */
        if (iStripes !== 0) {
          var sStripe = asStripeClasses[iRowCount % iStripes];
          if (aoData._sRowStripe != sStripe) {
            $(nRow).removeClass(aoData._sRowStripe).addClass(sStripe);
            aoData._sRowStripe = sStripe;
          }
        }

        // Row callback functions - might want to manipulate the row
        // iRowCount and j are not currently documented. Are they at all
        // useful?
        _fnCallbackFire(oSettings, "aoRowCallback", null, [
          nRow,
          aoData._aData,
          iRowCount,
          j,
        ]);

        anRows.push(nRow);
        iRowCount++;
      }
    } else {
      /* Table is empty - create a row with an empty message in it */
      var sZero = oLang.sZeroRecords;
      if (oSettings.iDraw == 1 && _fnDataSource(oSettings) == "ajax") {
        sZero = oLang.sLoadingRecords;
      } else if (oLang.sEmptyTable && oSettings.fnRecordsTotal() === 0) {
        sZero = oLang.sEmptyTable;
      }

      anRows[0] = $("<tr/>", {
        class: iStripes ? asStripeClasses[0] : "",
      }).append(
        $("<td />", {
          valign: "top",
          colSpan: _fnVisbleColumns(oSettings),
          class: oSettings.oClasses.sRowEmpty,
        }).html(sZero)
      )[0];
    }

    /* Header and footer callbacks */
    _fnCallbackFire(oSettings, "aoHeaderCallback", "header", [
      $(oSettings.nTHead).children("tr")[0],
      _fnGetDataMaster(oSettings),
      iDisplayStart,
      iDisplayEnd,
      aiDisplay,
    ]);

    _fnCallbackFire(oSettings, "aoFooterCallback", "footer", [
      $(oSettings.nTFoot).children("tr")[0],
      _fnGetDataMaster(oSettings),
      iDisplayStart,
      iDisplayEnd,
      aiDisplay,
    ]);

    var body = $(oSettings.nTBody);

    body.children().detach();
    body.append($(anRows));

    /* Call all required callback functions for the end of a draw */
    _fnCallbackFire(oSettings, "aoDrawCallback", "draw", [oSettings]);

    /* Draw is complete, sorting and filtering must be as well */
    oSettings.bSorted = false;
    oSettings.bFiltered = false;
    oSettings.bDrawing = false;
  }

  /**
   * Redraw the table - taking account of the various features which are enabled
   *  @param {object} oSettings dataTables settings object
   *  @param {boolean} [holdPosition] Keep the current paging position. By default
   *    the paging is reset to the first page
   *  @memberof DataTable#oApi
   */
  function _fnReDraw(settings, holdPosition) {
    var features = settings.oFeatures,
      sort = features.bSort,
      filter = features.bFilter;

    if (sort) {
      _fnSort(settings);
    }

    if (filter) {
      _fnFilterComplete(settings, settings.oPreviousSearch);
    } else {
      // No filtering, so we want to just use the display master
      settings.aiDisplay = settings.aiDisplayMaster.slice();
    }

    if (holdPosition !== true) {
      settings._iDisplayStart = 0;
    }

    // Let any modules know about the draw hold position state (used by
    // scrolling internally)
    settings._drawHold = holdPosition;

    _fnDraw(settings);

    settings._drawHold = false;
  }

  /**
   * Add the options to the page HTML for the table
   *  @param {object} oSettings dataTables settings object
   *  @memberof DataTable#oApi
   */
  function _fnAddOptionsHtml(oSettings) {
    var classes = oSettings.oClasses;
    var table = $(oSettings.nTable);
    var holding = $("<div/>").insertBefore(table); // Holding element for speed
    var features = oSettings.oFeatures;

    // All DataTables are wrapped in a div
    var insert = $("<div/>", {
      id: oSettings.sTableId + "_wrapper",
      class:
        classes.sWrapper + (oSettings.nTFoot ? "" : " " + classes.sNoFooter),
    });

    oSettings.nHolding = holding[0];
    oSettings.nTableWrapper = insert[0];
    oSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;

    /* Loop over the user set positioning and place the elements as needed */
    var aDom = oSettings.sDom.split("");
    var featureNode, cOption, nNewNode, cNext, sAttr, j;
    for (var i = 0; i < aDom.length; i++) {
      featureNode = null;
      cOption = aDom[i];

      if (cOption == "<") {
        /* New container div */
        nNewNode = $("<div/>")[0];

        /* Check to see if we should append an id and/or a class name to the container */
        cNext = aDom[i + 1];
        if (cNext == "'" || cNext == '"') {
          sAttr = "";
          j = 2;
          while (aDom[i + j] != cNext) {
            sAttr += aDom[i + j];
            j++;
          }

          /* Replace jQuery UI constants @todo depreciated */
          if (sAttr == "H") {
            sAttr = classes.sJUIHeader;
          } else if (sAttr == "F") {
            sAttr = classes.sJUIFooter;
          }

          /* The attribute can be in the format of "#id.class", "#id" or "class" This logic
           * breaks the string into parts and applies them as needed
           */
          if (sAttr.indexOf(".") != -1) {
            var aSplit = sAttr.split(".");
            nNewNode.id = aSplit[0].substr(1, aSplit[0].length - 1);
            nNewNode.className = aSplit[1];
          } else if (sAttr.charAt(0) == "#") {
            nNewNode.id = sAttr.substr(1, sAttr.length - 1);
          } else {
            nNewNode.className = sAttr;
          }

          i += j; /* Move along the position array */
        }

        insert.append(nNewNode);
        insert = $(nNewNode);
      } else if (cOption == ">") {
        /* End container div */
        insert = insert.parent();
      }
      // @todo Move options into their own plugins?
      else if (cOption == "l" && features.bPaginate && features.bLengthChange) {
        /* Length */
        featureNode = _fnFeatureHtmlLength(oSettings);
      } else if (cOption == "f" && features.bFilter) {
        /* Filter */
        featureNode = _fnFeatureHtmlFilter(oSettings);
      } else if (cOption == "r" && features.bProcessing) {
        /* pRocessing */
        featureNode = _fnFeatureHtmlProcessing(oSettings);
      } else if (cOption == "t") {
        /* Table */
        featureNode = _fnFeatureHtmlTable(oSettings);
      } else if (cOption == "i" && features.bInfo) {
        /* Info */
        featureNode = _fnFeatureHtmlInfo(oSettings);
      } else if (cOption == "p" && features.bPaginate) {
        /* Pagination */
        featureNode = _fnFeatureHtmlPaginate(oSettings);
      } else if (DataTable.ext.feature.length !== 0) {
        /* Plug-in features */
        var aoFeatures = DataTable.ext.feature;
        for (var k = 0, kLen = aoFeatures.length; k < kLen; k++) {
          if (cOption == aoFeatures[k].cFeature) {
            featureNode = aoFeatures[k].fnInit(oSettings);
            break;
          }
        }
      }

      /* Add to the 2D features array */
      if (featureNode) {
        var aanFeatures = oSettings.aanFeatures;

        if (!aanFeatures[cOption]) {
          aanFeatures[cOption] = [];
        }

        aanFeatures[cOption].push(featureNode);
        insert.append(featureNode);
      }
    }

    /* Built our DOM structure - replace the holding div with what we want */
    holding.replaceWith(insert);
    oSettings.nHolding = null;
  }

  /**
   * Use the DOM source to create up an array of header cells. The idea here is to
   * create a layout grid (array) of rows x columns, which contains a reference
   * to the cell that that point in the grid (regardless of col/rowspan), such that
   * any column / row could be removed and the new grid constructed
   *  @param array {object} aLayout Array to store the calculated layout in
   *  @param {node} nThead The header/footer element for the table
   *  @memberof DataTable#oApi
   */
  function _fnDetectHeader(aLayout, nThead) {
    var nTrs = $(nThead).children("tr");
    var nTr, nCell;
    var i, k, l, iLen, jLen, iColShifted, iColumn, iColspan, iRowspan;
    var bUnique;
    var fnShiftCol = function (a, i, j) {
      var k = a[i];
      while (k[j]) {
        j++;
      }
      return j;
    };

    aLayout.splice(0, aLayout.length);

    /* We know how many rows there are in the layout - so prep it */
    for (i = 0, iLen = nTrs.length; i < iLen; i++) {
      aLayout.push([]);
    }

    /* Calculate a layout array */
    for (i = 0, iLen = nTrs.length; i < iLen; i++) {
      nTr = nTrs[i];
      iColumn = 0;

      /* For every cell in the row... */
      nCell = nTr.firstChild;
      while (nCell) {
        if (
          nCell.nodeName.toUpperCase() == "TD" ||
          nCell.nodeName.toUpperCase() == "TH"
        ) {
          /* Get the col and rowspan attributes from the DOM and sanitise them */
          iColspan = nCell.getAttribute("colspan") * 1;
          iRowspan = nCell.getAttribute("rowspan") * 1;
          iColspan =
            !iColspan || iColspan === 0 || iColspan === 1 ? 1 : iColspan;
          iRowspan =
            !iRowspan || iRowspan === 0 || iRowspan === 1 ? 1 : iRowspan;

          /* There might be colspan cells already in this row, so shift our target
           * accordingly
           */
          iColShifted = fnShiftCol(aLayout, i, iColumn);

          /* Cache calculation for unique columns */
          bUnique = iColspan === 1 ? true : false;

          /* If there is col / rowspan, copy the information into the layout grid */
          for (l = 0; l < iColspan; l++) {
            for (k = 0; k < iRowspan; k++) {
              aLayout[i + k][iColShifted + l] = {
                cell: nCell,
                unique: bUnique,
              };
              aLayout[i + k].nTr = nTr;
            }
          }
        }
        nCell = nCell.nextSibling;
      }
    }
  }

  /**
   * Get an array of unique th elements, one for each column
   *  @param {object} oSettings dataTables settings object
   *  @param {node} nHeader automatically detect the layout from this node - optional
   *  @param {array} aLayout thead/tfoot layout from _fnDetectHeader - optional
   *  @returns array {node} aReturn list of unique th's
   *  @memberof DataTable#oApi
   */
  function _fnGetUniqueThs(oSettings, nHeader, aLayout) {
    var aReturn = [];
    if (!aLayout) {
      aLayout = oSettings.aoHeader;
      if (nHeader) {
        aLayout = [];
        _fnDetectHeader(aLayout, nHeader);
      }
    }

    for (var i = 0, iLen = aLayout.length; i < iLen; i++) {
      for (var j = 0, jLen = aLayout[i].length; j < jLen; j++) {
        if (aLayout[i][j].unique && (!aReturn[j] || !oSettings.bSortCellsTop)) {
          aReturn[j] = aLayout[i][j].cell;
        }
      }
    }

    return aReturn;
  }

  /**
   * Create an Ajax call based on the table's settings, taking into account that
   * parameters can have multiple forms, and backwards compatibility.
   *
   * @param {object} oSettings dataTables settings object
   * @param {array} data Data to send to the server, required by
   *     DataTables - may be augmented by developer callbacks
   * @param {function} fn Callback function to run when data is obtained
   */
  function _fnBuildAjax(oSettings, data, fn) {
    // Compatibility with 1.9-, allow fnServerData and event to manipulate
    _fnCallbackFire(oSettings, "aoServerParams", "serverParams", [data]);

    // Convert to object based for 1.10+ if using the old array scheme which can
    // come from server-side processing or serverParams
    if (data && $.isArray(data)) {
      var tmp = {};
      var rbracket = /(.*?)\[\]$/;

      $.each(data, function (key, val) {
        var match = val.name.match(rbracket);

        if (match) {
          // Support for arrays
          var name = match[0];

          if (!tmp[name]) {
            tmp[name] = [];
          }
          tmp[name].push(val.value);
        } else {
          tmp[val.name] = val.value;
        }
      });
      data = tmp;
    }

    var ajaxData;
    var ajax = oSettings.ajax;
    var instance = oSettings.oInstance;
    var callback = function (json) {
      _fnCallbackFire(oSettings, null, "xhr", [
        oSettings,
        json,
        oSettings.jqXHR,
      ]);
      fn(json);
    };

    if ($.isPlainObject(ajax) && ajax.data) {
      ajaxData = ajax.data;

      var newData = $.isFunction(ajaxData)
        ? ajaxData(data, oSettings) // fn can manipulate data or return
        : ajaxData; // an object object or array to merge

      // If the function returned something, use that alone
      data =
        $.isFunction(ajaxData) && newData
          ? newData
          : $.extend(true, data, newData);

      // Remove the data property as we've resolved it already and don't want
      // jQuery to do it again (it is restored at the end of the function)
      delete ajax.data;
    }

    var baseAjax = {
      data: data,
      success: function (json) {
        var error = json.error || json.sError;
        if (error) {
          _fnLog(oSettings, 0, error);
        }

        oSettings.json = json;
        callback(json);
      },
      dataType: "json",
      cache: false,
      type: oSettings.sServerMethod,
      error: function (xhr, error, thrown) {
        var ret = _fnCallbackFire(oSettings, null, "xhr", [
          oSettings,
          null,
          oSettings.jqXHR,
        ]);

        if ($.inArray(true, ret) === -1) {
          if (error == "parsererror") {
            _fnLog(oSettings, 0, "Invalid JSON response", 1);
          } else if (xhr.readyState === 4) {
            _fnLog(oSettings, 0, "Ajax error", 7);
          }
        }

        _fnProcessingDisplay(oSettings, false);
      },
    };

    // Store the data submitted for the API
    oSettings.oAjaxData = data;

    // Allow plug-ins and external processes to modify the data
    _fnCallbackFire(oSettings, null, "preXhr", [oSettings, data]);

    if (oSettings.fnServerData) {
      // DataTables 1.9- compatibility
      oSettings.fnServerData.call(
        instance,
        oSettings.sAjaxSource,
        $.map(data, function (val, key) {
          // Need to convert back to 1.9 trad format
          return { name: key, value: val };
        }),
        callback,
        oSettings
      );
    } else if (oSettings.sAjaxSource || typeof ajax === "string") {
      // DataTables 1.9- compatibility
      oSettings.jqXHR = $.ajax(
        $.extend(baseAjax, {
          url: ajax || oSettings.sAjaxSource,
        })
      );
    } else if ($.isFunction(ajax)) {
      // Is a function - let the caller define what needs to be done
      oSettings.jqXHR = ajax.call(instance, data, callback, oSettings);
    } else {
      // Object to extend the base settings
      oSettings.jqXHR = $.ajax($.extend(baseAjax, ajax));

      // Restore for next time around
      ajax.data = ajaxData;
    }
  }

  /**
   * Update the table using an Ajax call
   *  @param {object} settings dataTables settings object
   *  @returns {boolean} Block the table drawing or not
   *  @memberof DataTable#oApi
   */
  function _fnAjaxUpdate(settings) {
    if (settings.bAjaxDataGet) {
      settings.iDraw++;
      _fnProcessingDisplay(settings, true);

      _fnBuildAjax(settings, _fnAjaxParameters(settings), function (json) {
        _fnAjaxUpdateDraw(settings, json);
      });

      return false;
    }
    return true;
  }

  /**
   * Build up the parameters in an object needed for a server-side processing
   * request. Note that this is basically done twice, is different ways - a modern
   * method which is used by default in DataTables 1.10 which uses objects and
   * arrays, or the 1.9- method with is name / value pairs. 1.9 method is used if
   * the sAjaxSource option is used in the initialisation, or the legacyAjax
   * option is set.
   *  @param {object} oSettings dataTables settings object
   *  @returns {bool} block the table drawing or not
   *  @memberof DataTable#oApi
   */
  function _fnAjaxParameters(settings) {
    var columns = settings.aoColumns,
      columnCount = columns.length,
      features = settings.oFeatures,
      preSearch = settings.oPreviousSearch,
      preColSearch = settings.aoPreSearchCols,
      i,
      data = [],
      dataProp,
      column,
      columnSearch,
      sort = _fnSortFlatten(settings),
      displayStart = settings._iDisplayStart,
      displayLength =
        features.bPaginate !== false ? settings._iDisplayLength : -1;

    var param = function (name, value) {
      data.push({ name: name, value: value });
    };

    // DataTables 1.9- compatible method
    param("sEcho", settings.iDraw);
    param("iColumns", columnCount);
    param("sColumns", _pluck(columns, "sName").join(","));
    param("iDisplayStart", displayStart);
    param("iDisplayLength", displayLength);

    // DataTables 1.10+ method
    var d = {
      draw: settings.iDraw,
      columns: [],
      order: [],
      start: displayStart,
      length: displayLength,
      search: {
        value: preSearch.sSearch,
        regex: preSearch.bRegex,
      },
    };

    for (i = 0; i < columnCount; i++) {
      column = columns[i];
      columnSearch = preColSearch[i];
      dataProp = typeof column.mData == "function" ? "function" : column.mData;

      d.columns.push({
        data: dataProp,
        name: column.sName,
        searchable: column.bSearchable,
        orderable: column.bSortable,
        search: {
          value: columnSearch.sSearch,
          regex: columnSearch.bRegex,
        },
      });

      param("mDataProp_" + i, dataProp);

      if (features.bFilter) {
        param("sSearch_" + i, columnSearch.sSearch);
        param("bRegex_" + i, columnSearch.bRegex);
        param("bSearchable_" + i, column.bSearchable);
      }

      if (features.bSort) {
        param("bSortable_" + i, column.bSortable);
      }
    }

    if (features.bFilter) {
      param("sSearch", preSearch.sSearch);
      param("bRegex", preSearch.bRegex);
    }

    if (features.bSort) {
      $.each(sort, function (i, val) {
        d.order.push({ column: val.col, dir: val.dir });

        param("iSortCol_" + i, val.col);
        param("sSortDir_" + i, val.dir);
      });

      param("iSortingCols", sort.length);
    }

    // If the legacy.ajax parameter is null, then we automatically decide which
    // form to use, based on sAjaxSource
    var legacy = DataTable.ext.legacy.ajax;
    if (legacy === null) {
      return settings.sAjaxSource ? data : d;
    }

    // Otherwise, if legacy has been specified then we use that to decide on the
    // form
    return legacy ? data : d;
  }

  /**
   * Data the data from the server (nuking the old) and redraw the table
   *  @param {object} oSettings dataTables settings object
   *  @param {object} json json data return from the server.
   *  @param {string} json.sEcho Tracking flag for DataTables to match requests
   *  @param {int} json.iTotalRecords Number of records in the data set, not accounting for filtering
   *  @param {int} json.iTotalDisplayRecords Number of records in the data set, accounting for filtering
   *  @param {array} json.aaData The data to display on this page
   *  @param {string} [json.sColumns] Column ordering (sName, comma separated)
   *  @memberof DataTable#oApi
   */
  function _fnAjaxUpdateDraw(settings, json) {
    // v1.10 uses camelCase variables, while 1.9 uses Hungarian notation.
    // Support both
    var compat = function (old, modern) {
      return json[old] !== undefined ? json[old] : json[modern];
    };

    var data = _fnAjaxDataSrc(settings, json);
    var draw = compat("sEcho", "draw");
    var recordsTotal = compat("iTotalRecords", "recordsTotal");
    var recordsFiltered = compat("iTotalDisplayRecords", "recordsFiltered");

    if (draw) {
      // Protect against out of sequence returns
      if (draw * 1 < settings.iDraw) {
        return;
      }
      settings.iDraw = draw * 1;
    }

    _fnClearTable(settings);
    settings._iRecordsTotal = parseInt(recordsTotal, 10);
    settings._iRecordsDisplay = parseInt(recordsFiltered, 10);

    for (var i = 0, ien = data.length; i < ien; i++) {
      _fnAddData(settings, data[i]);
    }
    settings.aiDisplay = settings.aiDisplayMaster.slice();

    settings.bAjaxDataGet = false;
    _fnDraw(settings);

    if (!settings._bInitComplete) {
      _fnInitComplete(settings, json);
    }

    settings.bAjaxDataGet = true;
    _fnProcessingDisplay(settings, false);
  }

  /**
   * Get the data from the JSON data source to use for drawing a table. Using
   * `_fnGetObjectDataFn` allows the data to be sourced from a property of the
   * source object, or from a processing function.
   *  @param {object} oSettings dataTables settings object
   *  @param  {object} json Data source object / array from the server
   *  @return {array} Array of data to use
   */
  function _fnAjaxDataSrc(oSettings, json) {
    var dataSrc =
      $.isPlainObject(oSettings.ajax) && oSettings.ajax.dataSrc !== undefined
        ? oSettings.ajax.dataSrc
        : oSettings.sAjaxDataProp; // Compatibility with 1.9-.

    // Compatibility with 1.9-. In order to read from aaData, check if the
    // default has been changed, if not, check for aaData
    if (dataSrc === "data") {
      return json.aaData || json[dataSrc];
    }

    return dataSrc !== "" ? _fnGetObjectDataFn(dataSrc)(json) : json;
  }

  /**
   * Generate the node required for filtering text
   *  @returns {node} Filter control element
   *  @param {object} oSettings dataTables settings object
   *  @memberof DataTable#oApi
   */
  function _fnFeatureHtmlFilter(settings) {
    var classes = settings.oClasses;
    var tableId = settings.sTableId;
    var language = settings.oLanguage;
    var previousSearch = settings.oPreviousSearch;
    var features = settings.aanFeatures;
    var input = '<input type="search" class="' + classes.sFilterInput + '"/>';

    var str = language.sSearch;
    str = str.match(/_INPUT_/) ? str.replace("_INPUT_", input) : str + input;

    var filter = $("<div/>", {
      id: !features.f ? tableId + "_filter" : null,
      class: classes.sFilter,
    }).append($("<label/>").append(str));

    var searchFn = function () {
      /* Update all other filter input elements for the new display */
      var n = features.f;
      var val = !this.value ? "" : this.value; // mental IE8 fix :-(

      /* Now do the filter */
      if (val != previousSearch.sSearch) {
        _fnFilterComplete(settings, {
          sSearch: val,
          bRegex: previousSearch.bRegex,
          bSmart: previousSearch.bSmart,
          bCaseInsensitive: previousSearch.bCaseInsensitive,
        });

        // Need to redraw, without resorting
        settings._iDisplayStart = 0;
        _fnDraw(settings);
      }
    };

    var searchDelay =
      settings.searchDelay !== null
        ? settings.searchDelay
        : _fnDataSource(settings) === "ssp"
        ? 400
        : 0;

    var jqFilter = $("input", filter)
      .val(previousSearch.sSearch)
      .attr("placeholder", language.sSearchPlaceholder)
      .bind(
        "keyup.DT search.DT input.DT paste.DT cut.DT",
        searchDelay ? _fnThrottle(searchFn, searchDelay) : searchFn
      )
      .bind("keypress.DT", function (e) {
        /* Prevent form submission */
        if (e.keyCode == 13) {
          return false;
        }
      })
      .attr("aria-controls", tableId);

    // Update the input elements whenever the table is filtered
    $(settings.nTable).on("search.dt.DT", function (ev, s) {
      if (settings === s) {
        // IE9 throws an 'unknown error' if document.activeElement is used
        // inside an iframe or frame...
        try {
          if (jqFilter[0] !== document.activeElement) {
            jqFilter.val(previousSearch.sSearch);
          }
        } catch (e) {}
      }
    });

    return filter[0];
  }

  /**
   * Filter the table using both the global filter and column based filtering
   *  @param {object} oSettings dataTables settings object
   *  @param {object} oSearch search information
   *  @param {int} [iForce] force a research of the master array (1) or not (undefined or 0)
   *  @memberof DataTable#oApi
   */
  function _fnFilterComplete(oSettings, oInput, iForce) {
    var oPrevSearch = oSettings.oPreviousSearch;
    var aoPrevSearch = oSettings.aoPreSearchCols;
    var fnSaveFilter = function (oFilter) {
      /* Save the filtering values */
      oPrevSearch.sSearch = oFilter.sSearch;
      oPrevSearch.bRegex = oFilter.bRegex;
      oPrevSearch.bSmart = oFilter.bSmart;
      oPrevSearch.bCaseInsensitive = oFilter.bCaseInsensitive;
    };
    var fnRegex = function (o) {
      // Backwards compatibility with the bEscapeRegex option
      return o.bEscapeRegex !== undefined ? !o.bEscapeRegex : o.bRegex;
    };

    // Resolve any column types that are unknown due to addition or invalidation
    // @todo As per sort - can this be moved into an event handler?
    _fnColumnTypes(oSettings);

    /* In server-side processing all filtering is done by the server, so no point hanging around here */
    if (_fnDataSource(oSettings) != "ssp") {
      /* Global filter */
      _fnFilter(
        oSettings,
        oInput.sSearch,
        iForce,
        fnRegex(oInput),
        oInput.bSmart,
        oInput.bCaseInsensitive
      );
      fnSaveFilter(oInput);

      /* Now do the individual column filter */
      for (var i = 0; i < aoPrevSearch.length; i++) {
        _fnFilterColumn(
          oSettings,
          aoPrevSearch[i].sSearch,
          i,
          fnRegex(aoPrevSearch[i]),
          aoPrevSearch[i].bSmart,
          aoPrevSearch[i].bCaseInsensitive
        );
      }

      /* Custom filtering */
      _fnFilterCustom(oSettings);
    } else {
      fnSaveFilter(oInput);
    }

    /* Tell the draw function we have been filtering */
    oSettings.bFiltered = true;
    _fnCallbackFire(oSettings, null, "search", [oSettings]);
  }

  /**
   * Apply custom filtering functions
   *  @param {object} oSettings dataTables settings object
   *  @memberof DataTable#oApi
   */
  function _fnFilterCustom(settings) {
    var filters = DataTable.ext.search;
    var displayRows = settings.aiDisplay;
    var row, rowIdx;

    for (var i = 0, ien = filters.length; i < ien; i++) {
      var rows = [];

      // Loop over each row and see if it should be included
      for (var j = 0, jen = displayRows.length; j < jen; j++) {
        rowIdx = displayRows[j];
        row = settings.aoData[rowIdx];

        if (filters[i](settings, row._aFilterData, rowIdx, row._aData, j)) {
          rows.push(rowIdx);
        }
      }

      // So the array reference doesn't break set the results into the
      // existing array
      displayRows.length = 0;
      $.merge(displayRows, rows);
    }
  }

  /**
   * Filter the table on a per-column basis
   *  @param {object} oSettings dataTables settings object
   *  @param {string} sInput string to filter on
   *  @param {int} iColumn column to filter
   *  @param {bool} bRegex treat search string as a regular expression or not
   *  @param {bool} bSmart use smart filtering or not
   *  @param {bool} bCaseInsensitive Do case insenstive matching or not
   *  @memberof DataTable#oApi
   */
  function _fnFilterColumn(
    settings,
    searchStr,
    colIdx,
    regex,
    smart,
    caseInsensitive
  ) {
    if (searchStr === "") {
      return;
    }

    var data;
    var display = settings.aiDisplay;
    var rpSearch = _fnFilterCreateSearch(
      searchStr,
      regex,
      smart,
      caseInsensitive
    );

    for (var i = display.length - 1; i >= 0; i--) {
      data = settings.aoData[display[i]]._aFilterData[colIdx];

      if (!rpSearch.test(data)) {
        display.splice(i, 1);
      }
    }
  }

  /**
   * Filter the data table based on user input and draw the table
   *  @param {object} settings dataTables settings object
   *  @param {string} input string to filter on
   *  @param {int} force optional - force a research of the master array (1) or not (undefined or 0)
   *  @param {bool} regex treat as a regular expression or not
   *  @param {bool} smart perform smart filtering or not
   *  @param {bool} caseInsensitive Do case insenstive matching or not
   *  @memberof DataTable#oApi
   */
  function _fnFilter(settings, input, force, regex, smart, caseInsensitive) {
    var rpSearch = _fnFilterCreateSearch(input, regex, smart, caseInsensitive);
    var prevSearch = settings.oPreviousSearch.sSearch;
    var displayMaster = settings.aiDisplayMaster;
    var display, invalidated, i;

    // Need to take account of custom filtering functions - always filter
    if (DataTable.ext.search.length !== 0) {
      force = true;
    }

    // Check if any of the rows were invalidated
    invalidated = _fnFilterData(settings);

    // If the input is blank - we just want the full data set
    if (input.length <= 0) {
      settings.aiDisplay = displayMaster.slice();
    } else {
      // New search - start from the master array
      if (
        invalidated ||
        force ||
        prevSearch.length > input.length ||
        input.indexOf(prevSearch) !== 0 ||
        settings.bSorted // On resort, the display master needs to be
        // re-filtered since indexes will have changed
      ) {
        settings.aiDisplay = displayMaster.slice();
      }

      // Search the display array
      display = settings.aiDisplay;

      for (i = display.length - 1; i >= 0; i--) {
        if (!rpSearch.test(settings.aoData[display[i]]._sFilterRow)) {
          display.splice(i, 1);
        }
      }
    }
  }

  /**
   * Build a regular expression object suitable for searching a table
   *  @param {string} sSearch string to search for
   *  @param {bool} bRegex treat as a regular expression or not
   *  @param {bool} bSmart perform smart filtering or not
   *  @param {bool} bCaseInsensitive Do case insensitive matching or not
   *  @returns {RegExp} constructed object
   *  @memberof DataTable#oApi
   */
  function _fnFilterCreateSearch(search, regex, smart, caseInsensitive) {
    search = regex ? search : _fnEscapeRegex(search);

    if (smart) {
      /* For smart filtering we want to allow the search to work regardless of
       * word order. We also want double quoted text to be preserved, so word
       * order is important - a la google. So this is what we want to
       * generate:
       *
       * ^(?=.*?\bone\b)(?=.*?\btwo three\b)(?=.*?\bfour\b).*$
       */
      var a = $.map(search.match(/"[^"]+"|[^ ]+/g) || [""], function (word) {
        if (word.charAt(0) === '"') {
          var m = word.match(/^"(.*)"$/);
          word = m ? m[1] : word;
        }

        return word.replace('"', "");
      });

      search = "^(?=.*?" + a.join(")(?=.*?") + ").*$";
    }

    return new RegExp(search, caseInsensitive ? "i" : "");
  }

  /**
   * Escape a string such that it can be used in a regular expression
   *  @param {string} sVal string to escape
   *  @returns {string} escaped string
   *  @memberof DataTable#oApi
   */
  var _fnEscapeRegex = DataTable.util.escapeRegex;

  var __filter_div = $("<div>")[0];
  var __filter_div_textContent = __filter_div.textContent !== undefined;

  // Update the filtering data for each row if needed (by invalidation or first run)
  function _fnFilterData(settings) {
    var columns = settings.aoColumns;
    var column;
    var i, j, ien, jen, filterData, cellData, row;
    var fomatters = DataTable.ext.type.search;
    var wasInvalidated = false;

    for (i = 0, ien = settings.aoData.length; i < ien; i++) {
      row = settings.aoData[i];

      if (!row._aFilterData) {
        filterData = [];

        for (j = 0, jen = columns.length; j < jen; j++) {
          column = columns[j];

          if (column.bSearchable) {
            cellData = _fnGetCellData(settings, i, j, "filter");

            if (fomatters[column.sType]) {
              cellData = fomatters[column.sType](cellData);
            }

            // Search in DataTables 1.10 is string based. In 1.11 this
            // should be altered to also allow strict type checking.
            if (cellData === null) {
              cellData = "";
            }

            if (typeof cellData !== "string" && cellData.toString) {
              cellData = cellData.toString();
            }
          } else {
            cellData = "";
          }

          // If it looks like there is an HTML entity in the string,
          // attempt to decode it so sorting works as expected. Note that
          // we could use a single line of jQuery to do this, but the DOM
          // method used here is much faster http://jsperf.com/html-decode
          if (cellData.indexOf && cellData.indexOf("&") !== -1) {
            __filter_div.innerHTML = cellData;
            cellData = __filter_div_textContent
              ? __filter_div.textContent
              : __filter_div.innerText;
          }

          if (cellData.replace) {
            cellData = cellData.replace(/[\r\n]/g, "");
          }

          filterData.push(cellData);
        }

        row._aFilterData = filterData;
        row._sFilterRow = filterData.join("  ");
        wasInvalidated = true;
      }
    }

    return wasInvalidated;
  }

  /**
   * Convert from the internal Hungarian notation to camelCase for external
   * interaction
   *  @param {object} obj Object to convert
   *  @returns {object} Inverted object
   *  @memberof DataTable#oApi
   */
  function _fnSearchToCamel(obj) {
    return {
      search: obj.sSearch,
      smart: obj.bSmart,
      regex: obj.bRegex,
      caseInsensitive: obj.bCaseInsensitive,
    };
  }

  /**
   * Convert from camelCase notation to the internal Hungarian. We could use the
   * Hungarian convert function here, but this is cleaner
   *  @param {object} obj Object to convert
   *  @returns {object} Inverted object
   *  @memberof DataTable#oApi
   */
  function _fnSearchToHung(obj) {
    return {
      sSearch: obj.search,
      bSmart: obj.smart,
      bRegex: obj.regex,
      bCaseInsensitive: obj.caseInsensitive,
    };
  }

  /**
   * Generate the node required for the info display
   *  @param {object} oSettings dataTables settings object
   *  @returns {node} Information element
   *  @memberof DataTable#oApi
   */
  function _fnFeatureHtmlInfo(settings) {
    var tid = settings.sTableId,
      nodes = settings.aanFeatures.i,
      n = $("<div/>", {
        class: settings.oClasses.sInfo,
        id: !nodes ? tid + "_info" : null,
      });

    if (!nodes) {
      // Update display on each draw
      settings.aoDrawCallback.push({
        fn: _fnUpdateInfo,
        sName: "information",
      });

      n.attr("role", "status").attr("aria-live", "polite");

      // Table is described by our info div
      $(settings.nTable).attr("aria-describedby", tid + "_info");
    }

    return n[0];
  }

  /**
   * Update the information elements in the display
   *  @param {object} settings dataTables settings object
   *  @memberof DataTable#oApi
   */
  function _fnUpdateInfo(settings) {
    /* Show information about the table */
    var nodes = settings.aanFeatures.i;
    if (nodes.length === 0) {
      return;
    }

    var lang = settings.oLanguage,
      start = settings._iDisplayStart + 1,
      end = settings.fnDisplayEnd(),
      max = settings.fnRecordsTotal(),
      total = settings.fnRecordsDisplay(),
      out = total ? lang.sInfo : lang.sInfoEmpty;

    if (total !== max) {
      /* Record set after filtering */
      out += " " + lang.sInfoFiltered;
    }

    // Convert the macros
    out += lang.sInfoPostFix;
    out = _fnInfoMacros(settings, out);

    var callback = lang.fnInfoCallback;
    if (callback !== null) {
      out = callback.call(
        settings.oInstance,
        settings,
        start,
        end,
        max,
        total,
        out
      );
    }

    $(nodes).html(out);
  }

  function _fnInfoMacros(settings, str) {
    // When infinite scrolling, we are always starting at 1. _iDisplayStart is used only
    // internally
    var formatter = settings.fnFormatNumber,
      start = settings._iDisplayStart + 1,
      len = settings._iDisplayLength,
      vis = settings.fnRecordsDisplay(),
      all = len === -1;

    return str
      .replace(/_START_/g, formatter.call(settings, start))
      .replace(/_END_/g, formatter.call(settings, settings.fnDisplayEnd()))
      .replace(/_MAX_/g, formatter.call(settings, settings.fnRecordsTotal()))
      .replace(/_TOTAL_/g, formatter.call(settings, vis))
      .replace(
        /_PAGE_/g,
        formatter.call(settings, all ? 1 : Math.ceil(start / len))
      )
      .replace(
        /_PAGES_/g,
        formatter.call(settings, all ? 1 : Math.ceil(vis / len))
      );
  }

  /**
   * Draw the table for the first time, adding all required features
   *  @param {object} settings dataTables settings object
   *  @memberof DataTable#oApi
   */
  function _fnInitialise(settings) {
    var i,
      iLen,
      iAjaxStart = settings.iInitDisplayStart;
    var columns = settings.aoColumns,
      column;
    var features = settings.oFeatures;
    var deferLoading = settings.bDeferLoading; // value modified by the draw

    /* Ensure that the table data is fully initialised */
    if (!settings.bInitialised) {
      setTimeout(function () {
        _fnInitialise(settings);
      }, 200);
      return;
    }

    /* Show the display HTML options */
    _fnAddOptionsHtml(settings);

    /* Build and draw the header / footer for the table */
    _fnBuildHead(settings);
    _fnDrawHead(settings, settings.aoHeader);
    _fnDrawHead(settings, settings.aoFooter);

    /* Okay to show that something is going on now */
    _fnProcessingDisplay(settings, true);

    /* Calculate sizes for columns */
    if (features.bAutoWidth) {
      _fnCalculateColumnWidths(settings);
    }

    for (i = 0, iLen = columns.length; i < iLen; i++) {
      column = columns[i];

      if (column.sWidth) {
        column.nTh.style.width = _fnStringToCss(column.sWidth);
      }
    }

    _fnCallbackFire(settings, null, "preInit", [settings]);

    // If there is default sorting required - let's do it. The sort function
    // will do the drawing for us. Otherwise we draw the table regardless of the
    // Ajax source - this allows the table to look initialised for Ajax sourcing
    // data (show 'loading' message possibly)
    _fnReDraw(settings);

    // Server-side processing init complete is done by _fnAjaxUpdateDraw
    var dataSrc = _fnDataSource(settings);
    if (dataSrc != "ssp" || deferLoading) {
      // if there is an ajax source load the data
      if (dataSrc == "ajax") {
        _fnBuildAjax(
          settings,
          [],
          function (json) {
            var aData = _fnAjaxDataSrc(settings, json);

            // Got the data - add it to the table
            for (i = 0; i < aData.length; i++) {
              _fnAddData(settings, aData[i]);
            }

            // Reset the init display for cookie saving. We've already done
            // a filter, and therefore cleared it before. So we need to make
            // it appear 'fresh'
            settings.iInitDisplayStart = iAjaxStart;

            _fnReDraw(settings);

            _fnProcessingDisplay(settings, false);
            _fnInitComplete(settings, json);
          },
          settings
        );
      } else {
        _fnProcessingDisplay(settings, false);
        _fnInitComplete(settings);
      }
    }
  }

  /**
   * Draw the table for the first time, adding all required features
   *  @param {object} oSettings dataTables settings object
   *  @param {object} [json] JSON from the server that completed the table, if using Ajax source
   *    with client-side processing (optional)
   *  @memberof DataTable#oApi
   */
  function _fnInitComplete(settings, json) {
    settings._bInitComplete = true;

    // When data was added after the initialisation (data or Ajax) we need to
    // calculate the column sizing
    if (json || settings.oInit.aaData) {
      _fnAdjustColumnSizing(settings);
    }

    _fnCallbackFire(settings, null, "plugin-init", [settings, json]);
    _fnCallbackFire(settings, "aoInitComplete", "init", [settings, json]);
  }

  function _fnLengthChange(settings, val) {
    var len = parseInt(val, 10);
    settings._iDisplayLength = len;

    _fnLengthOverflow(settings);

    // Fire length change event
    _fnCallbackFire(settings, null, "length", [settings, len]);
  }

  /**
   * Generate the node required for user display length changing
   *  @param {object} settings dataTables settings object
   *  @returns {node} Display length feature node
   *  @memberof DataTable#oApi
   */
  function _fnFeatureHtmlLength(settings) {
    var classes = settings.oClasses,
      tableId = settings.sTableId,
      menu = settings.aLengthMenu,
      d2 = $.isArray(menu[0]),
      lengths = d2 ? menu[0] : menu,
      language = d2 ? menu[1] : menu;

    var select = $("<select/>", {
      name: tableId + "_length",
      "aria-controls": tableId,
      class: classes.sLengthSelect,
    });

    for (var i = 0, ien = lengths.length; i < ien; i++) {
      select[0][i] = new Option(language[i], lengths[i]);
    }

    var div = $("<div><label/></div>").addClass(classes.sLength);
    if (!settings.aanFeatures.l) {
      div[0].id = tableId + "_length";
    }

    div
      .children()
      .append(
        settings.oLanguage.sLengthMenu.replace("_MENU_", select[0].outerHTML)
      );

    // Can't use `select` variable as user might provide their own and the
    // reference is broken by the use of outerHTML
    $("select", div)
      .val(settings._iDisplayLength)
      .bind("change.DT", function (e) {
        _fnLengthChange(settings, $(this).val());
        _fnDraw(settings);
      });

    // Update node value whenever anything changes the table's length
    $(settings.nTable).bind("length.dt.DT", function (e, s, len) {
      if (settings === s) {
        $("select", div).val(len);
      }
    });

    return div[0];
  }

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   * Note that most of the paging logic is done in
   * DataTable.ext.pager
   */

  /**
   * Generate the node required for default pagination
   *  @param {object} oSettings dataTables settings object
   *  @returns {node} Pagination feature node
   *  @memberof DataTable#oApi
   */
  function _fnFeatureHtmlPaginate(settings) {
    var type = settings.sPaginationType,
      plugin = DataTable.ext.pager[type],
      modern = typeof plugin === "function",
      redraw = function (settings) {
        _fnDraw(settings);
      },
      node = $("<div/>").addClass(settings.oClasses.sPaging + type)[0],
      features = settings.aanFeatures;

    if (!modern) {
      plugin.fnInit(settings, node, redraw);
    }

    /* Add a draw callback for the pagination on first instance, to update the paging display */
    if (!features.p) {
      node.id = settings.sTableId + "_paginate";

      settings.aoDrawCallback.push({
        fn: function (settings) {
          if (modern) {
            var start = settings._iDisplayStart,
              len = settings._iDisplayLength,
              visRecords = settings.fnRecordsDisplay(),
              all = len === -1,
              page = all ? 0 : Math.ceil(start / len),
              pages = all ? 1 : Math.ceil(visRecords / len),
              buttons = plugin(page, pages),
              i,
              ien;

            for (i = 0, ien = features.p.length; i < ien; i++) {
              _fnRenderer(settings, "pageButton")(
                settings,
                features.p[i],
                i,
                buttons,
                page,
                pages
              );
            }
          } else {
            plugin.fnUpdate(settings, redraw);
          }
        },
        sName: "pagination",
      });
    }

    return node;
  }

  /**
   * Alter the display settings to change the page
   *  @param {object} settings DataTables settings object
   *  @param {string|int} action Paging action to take: "first", "previous",
   *    "next" or "last" or page number to jump to (integer)
   *  @param [bool] redraw Automatically draw the update or not
   *  @returns {bool} true page has changed, false - no change
   *  @memberof DataTable#oApi
   */
  function _fnPageChange(settings, action, redraw) {
    var start = settings._iDisplayStart,
      len = settings._iDisplayLength,
      records = settings.fnRecordsDisplay();

    if (records === 0 || len === -1) {
      start = 0;
    } else if (typeof action === "number") {
      start = action * len;

      if (start > records) {
        start = 0;
      }
    } else if (action == "first") {
      start = 0;
    } else if (action == "previous") {
      start = len >= 0 ? start - len : 0;

      if (start < 0) {
        start = 0;
      }
    } else if (action == "next") {
      if (start + len < records) {
        start += len;
      }
    } else if (action == "last") {
      start = Math.floor((records - 1) / len) * len;
    } else {
      _fnLog(settings, 0, "Unknown paging action: " + action, 5);
    }

    var changed = settings._iDisplayStart !== start;
    settings._iDisplayStart = start;

    if (changed) {
      _fnCallbackFire(settings, null, "page", [settings]);

      if (redraw) {
        _fnDraw(settings);
      }
    }

    return changed;
  }

  /**
   * Generate the node required for the processing node
   *  @param {object} settings dataTables settings object
   *  @returns {node} Processing element
   *  @memberof DataTable#oApi
   */
  function _fnFeatureHtmlProcessing(settings) {
    return $("<div/>", {
      id: !settings.aanFeatures.r ? settings.sTableId + "_processing" : null,
      class: settings.oClasses.sProcessing,
    })
      .html(settings.oLanguage.sProcessing)
      .insertBefore(settings.nTable)[0];
  }

  /**
   * Display or hide the processing indicator
   *  @param {object} settings dataTables settings object
   *  @param {bool} show Show the processing indicator (true) or not (false)
   *  @memberof DataTable#oApi
   */
  function _fnProcessingDisplay(settings, show) {
    if (settings.oFeatures.bProcessing) {
      $(settings.aanFeatures.r).css("display", show ? "block" : "none");
    }

    _fnCallbackFire(settings, null, "processing", [settings, show]);
  }

  /**
   * Add any control elements for the table - specifically scrolling
   *  @param {object} settings dataTables settings object
   *  @returns {node} Node to add to the DOM
   *  @memberof DataTable#oApi
   */
  function _fnFeatureHtmlTable(settings) {
    var table = $(settings.nTable);

    // Add the ARIA grid role to the table
    table.attr("role", "grid");

    // Scrolling from here on in
    var scroll = settings.oScroll;

    if (scroll.sX === "" && scroll.sY === "") {
      return settings.nTable;
    }

    var scrollX = scroll.sX;
    var scrollY = scroll.sY;
    var classes = settings.oClasses;
    var caption = table.children("caption");
    var captionSide = caption.length ? caption[0]._captionSide : null;
    var headerClone = $(table[0].cloneNode(false));
    var footerClone = $(table[0].cloneNode(false));
    var footer = table.children("tfoot");
    var _div = "<div/>";
    var size = function (s) {
      return !s ? null : _fnStringToCss(s);
    };

    if (!footer.length) {
      footer = null;
    }

    /*
     * The HTML structure that we want to generate in this function is:
     *  div - scroller
     *    div - scroll head
     *      div - scroll head inner
     *        table - scroll head table
     *          thead - thead
     *    div - scroll body
     *      table - table (master table)
     *        thead - thead clone for sizing
     *        tbody - tbody
     *    div - scroll foot
     *      div - scroll foot inner
     *        table - scroll foot table
     *          tfoot - tfoot
     */
    var scroller = $(_div, { class: classes.sScrollWrapper })
      .append(
        $(_div, { class: classes.sScrollHead })
          .css({
            overflow: "hidden",
            position: "relative",
            border: 0,
            width: scrollX ? size(scrollX) : "100%",
          })
          .append(
            $(_div, { class: classes.sScrollHeadInner })
              .css({
                "box-sizing": "content-box",
                width: scroll.sXInner || "100%",
              })
              .append(
                headerClone
                  .removeAttr("id")
                  .css("margin-left", 0)
                  .append(captionSide === "top" ? caption : null)
                  .append(table.children("thead"))
              )
          )
      )
      .append(
        $(_div, { class: classes.sScrollBody })
          .css({
            position: "relative",
            overflow: "auto",
            width: size(scrollX),
          })
          .append(table)
      );

    if (footer) {
      scroller.append(
        $(_div, { class: classes.sScrollFoot })
          .css({
            overflow: "hidden",
            border: 0,
            width: scrollX ? size(scrollX) : "100%",
          })
          .append(
            $(_div, { class: classes.sScrollFootInner }).append(
              footerClone
                .removeAttr("id")
                .css("margin-left", 0)
                .append(captionSide === "bottom" ? caption : null)
                .append(table.children("tfoot"))
            )
          )
      );
    }

    var children = scroller.children();
    var scrollHead = children[0];
    var scrollBody = children[1];
    var scrollFoot = footer ? children[2] : null;

    // When the body is scrolled, then we also want to scroll the headers
    if (scrollX) {
      $(scrollBody).on("scroll.DT", function (e) {
        var scrollLeft = this.scrollLeft;

        scrollHead.scrollLeft = scrollLeft;

        if (footer) {
          scrollFoot.scrollLeft = scrollLeft;
        }
      });
    }

    $(scrollBody).css(
      scrollY && scroll.bCollapse ? "max-height" : "height",
      scrollY
    );

    settings.nScrollHead = scrollHead;
    settings.nScrollBody = scrollBody;
    settings.nScrollFoot = scrollFoot;

    // On redraw - align columns
    settings.aoDrawCallback.push({
      fn: _fnScrollDraw,
      sName: "scrolling",
    });

    return scroller[0];
  }

  /**
   * Update the header, footer and body tables for resizing - i.e. column
   * alignment.
   *
   * Welcome to the most horrible function DataTables. The process that this
   * function follows is basically:
   *   1. Re-create the table inside the scrolling div
   *   2. Take live measurements from the DOM
   *   3. Apply the measurements to align the columns
   *   4. Clean up
   *
   *  @param {object} settings dataTables settings object
   *  @memberof DataTable#oApi
   */
  function _fnScrollDraw(settings) {
    // Given that this is such a monster function, a lot of variables are use
    // to try and keep the minimised size as small as possible
    var scroll = settings.oScroll,
      scrollX = scroll.sX,
      scrollXInner = scroll.sXInner,
      scrollY = scroll.sY,
      barWidth = scroll.iBarWidth,
      divHeader = $(settings.nScrollHead),
      divHeaderStyle = divHeader[0].style,
      divHeaderInner = divHeader.children("div"),
      divHeaderInnerStyle = divHeaderInner[0].style,
      divHeaderTable = divHeaderInner.children("table"),
      divBodyEl = settings.nScrollBody,
      divBody = $(divBodyEl),
      divBodyStyle = divBodyEl.style,
      divFooter = $(settings.nScrollFoot),
      divFooterInner = divFooter.children("div"),
      divFooterTable = divFooterInner.children("table"),
      header = $(settings.nTHead),
      table = $(settings.nTable),
      tableEl = table[0],
      tableStyle = tableEl.style,
      footer = settings.nTFoot ? $(settings.nTFoot) : null,
      browser = settings.oBrowser,
      ie67 = browser.bScrollOversize,
      dtHeaderCells = _pluck(settings.aoColumns, "nTh"),
      headerTrgEls,
      footerTrgEls,
      headerSrcEls,
      footerSrcEls,
      headerCopy,
      footerCopy,
      headerWidths = [],
      footerWidths = [],
      headerContent = [],
      footerContent = [],
      idx,
      correction,
      sanityWidth,
      zeroOut = function (nSizer) {
        var style = nSizer.style;
        style.paddingTop = "0";
        style.paddingBottom = "0";
        style.borderTopWidth = "0";
        style.borderBottomWidth = "0";
        style.height = 0;
      };

    // If the scrollbar visibility has changed from the last draw, we need to
    // adjust the column sizes as the table width will have changed to account
    // for the scrollbar
    var scrollBarVis = divBodyEl.scrollHeight > divBodyEl.clientHeight;

    if (
      settings.scrollBarVis !== scrollBarVis &&
      settings.scrollBarVis !== undefined
    ) {
      settings.scrollBarVis = scrollBarVis;
      _fnAdjustColumnSizing(settings);
      return; // adjust column sizing will call this function again
    } else {
      settings.scrollBarVis = scrollBarVis;
    }

    /*
     * 1. Re-create the table inside the scrolling div
     */

    // Remove the old minimised thead and tfoot elements in the inner table
    table.children("thead, tfoot").remove();

    if (footer) {
      footerCopy = footer.clone().prependTo(table);
      footerTrgEls = footer.find("tr"); // the original tfoot is in its own table and must be sized
      footerSrcEls = footerCopy.find("tr");
    }

    // Clone the current header and footer elements and then place it into the inner table
    headerCopy = header.clone().prependTo(table);
    headerTrgEls = header.find("tr"); // original header is in its own table
    headerSrcEls = headerCopy.find("tr");
    headerCopy.find("th, td").removeAttr("tabindex");

    /*
     * 2. Take live measurements from the DOM - do not alter the DOM itself!
     */

    // Remove old sizing and apply the calculated column widths
    // Get the unique column headers in the newly created (cloned) header. We want to apply the
    // calculated sizes to this header
    if (!scrollX) {
      divBodyStyle.width = "100%";
      divHeader[0].style.width = "100%";
    }

    $.each(_fnGetUniqueThs(settings, headerCopy), function (i, el) {
      idx = _fnVisibleToColumnIndex(settings, i);
      el.style.width = settings.aoColumns[idx].sWidth;
    });

    if (footer) {
      _fnApplyToChildren(function (n) {
        n.style.width = "";
      }, footerSrcEls);
    }

    // Size the table as a whole
    sanityWidth = table.outerWidth();
    if (scrollX === "") {
      // No x scrolling
      tableStyle.width = "100%";

      // IE7 will make the width of the table when 100% include the scrollbar
      // - which is shouldn't. When there is a scrollbar we need to take this
      // into account.
      if (
        ie67 &&
        (table.find("tbody").height() > divBodyEl.offsetHeight ||
          divBody.css("overflow-y") == "scroll")
      ) {
        tableStyle.width = _fnStringToCss(table.outerWidth() - barWidth);
      }

      // Recalculate the sanity width
      sanityWidth = table.outerWidth();
    } else if (scrollXInner !== "") {
      // legacy x scroll inner has been given - use it
      tableStyle.width = _fnStringToCss(scrollXInner);

      // Recalculate the sanity width
      sanityWidth = table.outerWidth();
    }

    // Hidden header should have zero height, so remove padding and borders. Then
    // set the width based on the real headers

    // Apply all styles in one pass
    _fnApplyToChildren(zeroOut, headerSrcEls);

    // Read all widths in next pass
    _fnApplyToChildren(function (nSizer) {
      headerContent.push(nSizer.innerHTML);
      headerWidths.push(_fnStringToCss($(nSizer).css("width")));
    }, headerSrcEls);

    // Apply all widths in final pass
    _fnApplyToChildren(function (nToSize, i) {
      // Only apply widths to the DataTables detected header cells - this
      // prevents complex headers from having contradictory sizes applied
      if ($.inArray(nToSize, dtHeaderCells) !== -1) {
        nToSize.style.width = headerWidths[i];
      }
    }, headerTrgEls);

    $(headerSrcEls).height(0);

    /* Same again with the footer if we have one */
    if (footer) {
      _fnApplyToChildren(zeroOut, footerSrcEls);

      _fnApplyToChildren(function (nSizer) {
        footerContent.push(nSizer.innerHTML);
        footerWidths.push(_fnStringToCss($(nSizer).css("width")));
      }, footerSrcEls);

      _fnApplyToChildren(function (nToSize, i) {
        nToSize.style.width = footerWidths[i];
      }, footerTrgEls);

      $(footerSrcEls).height(0);
    }

    /*
     * 3. Apply the measurements
     */

    // "Hide" the header and footer that we used for the sizing. We need to keep
    // the content of the cell so that the width applied to the header and body
    // both match, but we want to hide it completely. We want to also fix their
    // width to what they currently are
    _fnApplyToChildren(function (nSizer, i) {
      nSizer.innerHTML =
        '<div class="dataTables_sizing" style="height:0;overflow:hidden;">' +
        headerContent[i] +
        "</div>";
      nSizer.style.width = headerWidths[i];
    }, headerSrcEls);

    if (footer) {
      _fnApplyToChildren(function (nSizer, i) {
        nSizer.innerHTML =
          '<div class="dataTables_sizing" style="height:0;overflow:hidden;">' +
          footerContent[i] +
          "</div>";
        nSizer.style.width = footerWidths[i];
      }, footerSrcEls);
    }

    // Sanity check that the table is of a sensible width. If not then we are going to get
    // misalignment - try to prevent this by not allowing the table to shrink below its min width
    if (table.outerWidth() < sanityWidth) {
      // The min width depends upon if we have a vertical scrollbar visible or not */
      correction =
        divBodyEl.scrollHeight > divBodyEl.offsetHeight ||
        divBody.css("overflow-y") == "scroll"
          ? sanityWidth + barWidth
          : sanityWidth;

      // IE6/7 are a law unto themselves...
      if (
        ie67 &&
        (divBodyEl.scrollHeight > divBodyEl.offsetHeight ||
          divBody.css("overflow-y") == "scroll")
      ) {
        tableStyle.width = _fnStringToCss(correction - barWidth);
      }

      // And give the user a warning that we've stopped the table getting too small
      if (scrollX === "" || scrollXInner !== "") {
        _fnLog(settings, 1, "Possible column misalignment", 6);
      }
    } else {
      correction = "100%";
    }

    // Apply to the container elements
    divBodyStyle.width = _fnStringToCss(correction);
    divHeaderStyle.width = _fnStringToCss(correction);

    if (footer) {
      settings.nScrollFoot.style.width = _fnStringToCss(correction);
    }

    /*
     * 4. Clean up
     */
    if (!scrollY) {
      /* IE7< puts a vertical scrollbar in place (when it shouldn't be) due to subtracting
       * the scrollbar height from the visible display, rather than adding it on. We need to
       * set the height in order to sort this. Don't want to do it in any other browsers.
       */
      if (ie67) {
        divBodyStyle.height = _fnStringToCss(tableEl.offsetHeight + barWidth);
      }
    }

    /* Finally set the width's of the header and footer tables */
    var iOuterWidth = table.outerWidth();
    divHeaderTable[0].style.width = _fnStringToCss(iOuterWidth);
    divHeaderInnerStyle.width = _fnStringToCss(iOuterWidth);

    // Figure out if there are scrollbar present - if so then we need a the header and footer to
    // provide a bit more space to allow "overflow" scrolling (i.e. past the scrollbar)
    var bScrolling =
      table.height() > divBodyEl.clientHeight ||
      divBody.css("overflow-y") == "scroll";
    var padding = "padding" + (browser.bScrollbarLeft ? "Left" : "Right");
    divHeaderInnerStyle[padding] = bScrolling ? barWidth + "px" : "0px";

    if (footer) {
      divFooterTable[0].style.width = _fnStringToCss(iOuterWidth);
      divFooterInner[0].style.width = _fnStringToCss(iOuterWidth);
      divFooterInner[0].style[padding] = bScrolling ? barWidth + "px" : "0px";
    }

    // Correct DOM ordering for colgroup - comes before the thead
    table.children("colgroup").insertBefore(table.children("thead"));

    /* Adjust the position of the header in case we loose the y-scrollbar */
    divBody.scroll();

    // If sorting or filtering has occurred, jump the scrolling back to the top
    // only if we aren't holding the position
    if ((settings.bSorted || settings.bFiltered) && !settings._drawHold) {
      divBodyEl.scrollTop = 0;
    }
  }

  /**
   * Apply a given function to the display child nodes of an element array (typically
   * TD children of TR rows
   *  @param {function} fn Method to apply to the objects
   *  @param array {nodes} an1 List of elements to look through for display children
   *  @param array {nodes} an2 Another list (identical structure to the first) - optional
   *  @memberof DataTable#oApi
   */
  function _fnApplyToChildren(fn, an1, an2) {
    var index = 0,
      i = 0,
      iLen = an1.length;
    var nNode1, nNode2;

    while (i < iLen) {
      nNode1 = an1[i].firstChild;
      nNode2 = an2 ? an2[i].firstChild : null;

      while (nNode1) {
        if (nNode1.nodeType === 1) {
          if (an2) {
            fn(nNode1, nNode2, index);
          } else {
            fn(nNode1, index);
          }

          index++;
        }

        nNode1 = nNode1.nextSibling;
        nNode2 = an2 ? nNode2.nextSibling : null;
      }

      i++;
    }
  }

  var __re_html_remove = /<.*?>/g;

  /**
   * Calculate the width of columns for the table
   *  @param {object} oSettings dataTables settings object
   *  @memberof DataTable#oApi
   */
  function _fnCalculateColumnWidths(oSettings) {
    var table = oSettings.nTable,
      columns = oSettings.aoColumns,
      scroll = oSettings.oScroll,
      scrollY = scroll.sY,
      scrollX = scroll.sX,
      scrollXInner = scroll.sXInner,
      columnCount = columns.length,
      visibleColumns = _fnGetColumns(oSettings, "bVisible"),
      headerCells = $("th", oSettings.nTHead),
      tableWidthAttr = table.getAttribute("width"), // from DOM element
      tableContainer = table.parentNode,
      userInputs = false,
      i,
      column,
      columnIdx,
      width,
      outerWidth,
      browser = oSettings.oBrowser,
      ie67 = browser.bScrollOversize;

    var styleWidth = table.style.width;
    if (styleWidth && styleWidth.indexOf("%") !== -1) {
      tableWidthAttr = styleWidth;
    }

    /* Convert any user input sizes into pixel sizes */
    for (i = 0; i < visibleColumns.length; i++) {
      column = columns[visibleColumns[i]];

      if (column.sWidth !== null) {
        column.sWidth = _fnConvertToWidth(column.sWidthOrig, tableContainer);

        userInputs = true;
      }
    }

    /* If the number of columns in the DOM equals the number that we have to
     * process in DataTables, then we can use the offsets that are created by
     * the web- browser. No custom sizes can be set in order for this to happen,
     * nor scrolling used
     */
    if (
      ie67 ||
      (!userInputs &&
        !scrollX &&
        !scrollY &&
        columnCount == _fnVisbleColumns(oSettings) &&
        columnCount == headerCells.length)
    ) {
      for (i = 0; i < columnCount; i++) {
        var colIdx = _fnVisibleToColumnIndex(oSettings, i);

        if (colIdx !== null) {
          columns[colIdx].sWidth = _fnStringToCss(headerCells.eq(i).width());
        }
      }
    } else {
      // Otherwise construct a single row, worst case, table with the widest
      // node in the data, assign any user defined widths, then insert it into
      // the DOM and allow the browser to do all the hard work of calculating
      // table widths
      var tmpTable = $(table)
        .clone() // don't use cloneNode - IE8 will remove events on the main table
        .css("visibility", "hidden")
        .removeAttr("id");

      // Clean up the table body
      tmpTable.find("tbody tr").remove();
      var tr = $("<tr/>").appendTo(tmpTable.find("tbody"));

      // Clone the table header and footer - we can't use the header / footer
      // from the cloned table, since if scrolling is active, the table's
      // real header and footer are contained in different table tags
      tmpTable.find("thead, tfoot").remove();
      tmpTable
        .append($(oSettings.nTHead).clone())
        .append($(oSettings.nTFoot).clone());

      // Remove any assigned widths from the footer (from scrolling)
      tmpTable.find("tfoot th, tfoot td").css("width", "");

      // Apply custom sizing to the cloned header
      headerCells = _fnGetUniqueThs(oSettings, tmpTable.find("thead")[0]);

      for (i = 0; i < visibleColumns.length; i++) {
        column = columns[visibleColumns[i]];

        headerCells[i].style.width =
          column.sWidthOrig !== null && column.sWidthOrig !== ""
            ? _fnStringToCss(column.sWidthOrig)
            : "";

        // For scrollX we need to force the column width otherwise the
        // browser will collapse it. If this width is smaller than the
        // width the column requires, then it will have no effect
        if (column.sWidthOrig && scrollX) {
          $(headerCells[i]).append(
            $("<div/>").css({
              width: column.sWidthOrig,
              margin: 0,
              padding: 0,
              border: 0,
              height: 1,
            })
          );
        }
      }

      // Find the widest cell for each column and put it into the table
      if (oSettings.aoData.length) {
        for (i = 0; i < visibleColumns.length; i++) {
          columnIdx = visibleColumns[i];
          column = columns[columnIdx];

          $(_fnGetWidestNode(oSettings, columnIdx))
            .clone(false)
            .append(column.sContentPadding)
            .appendTo(tr);
        }
      }

      // Tidy the temporary table - remove name attributes so there aren't
      // duplicated in the dom (radio elements for example)
      $("[name]", tmpTable).removeAttr("name");

      // Table has been built, attach to the document so we can work with it.
      // A holding element is used, positioned at the top of the container
      // with minimal height, so it has no effect on if the container scrolls
      // or not. Otherwise it might trigger scrolling when it actually isn't
      // needed
      var holder = $("<div/>")
        .css(
          scrollX || scrollY
            ? {
                position: "absolute",
                top: 0,
                left: 0,
                height: 1,
                right: 0,
                overflow: "hidden",
              }
            : {}
        )
        .append(tmpTable)
        .appendTo(tableContainer);

      // When scrolling (X or Y) we want to set the width of the table as
      // appropriate. However, when not scrolling leave the table width as it
      // is. This results in slightly different, but I think correct behaviour
      if (scrollX && scrollXInner) {
        tmpTable.width(scrollXInner);
      } else if (scrollX) {
        tmpTable.css("width", "auto");
        tmpTable.removeAttr("width");

        // If there is no width attribute or style, then allow the table to
        // collapse
        if (tmpTable.width() < tableContainer.clientWidth && tableWidthAttr) {
          tmpTable.width(tableContainer.clientWidth);
        }
      } else if (scrollY) {
        tmpTable.width(tableContainer.clientWidth);
      } else if (tableWidthAttr) {
        tmpTable.width(tableWidthAttr);
      }

      // Get the width of each column in the constructed table - we need to
      // know the inner width (so it can be assigned to the other table's
      // cells) and the outer width so we can calculate the full width of the
      // table. This is safe since DataTables requires a unique cell for each
      // column, but if ever a header can span multiple columns, this will
      // need to be modified.
      var total = 0;
      for (i = 0; i < visibleColumns.length; i++) {
        var cell = $(headerCells[i]);
        var border = cell.outerWidth() - cell.width();

        // Use getBounding... where possible (not IE8-) because it can give
        // sub-pixel accuracy, which we then want to round up!
        var bounding = browser.bBounding
          ? Math.ceil(headerCells[i].getBoundingClientRect().width)
          : cell.outerWidth();

        // Total is tracked to remove any sub-pixel errors as the outerWidth
        // of the table might not equal the total given here (IE!).
        total += bounding;

        // Width for each column to use
        columns[visibleColumns[i]].sWidth = _fnStringToCss(bounding - border);
      }

      table.style.width = _fnStringToCss(total);

      // Finished with the table - ditch it
      holder.remove();
    }

    // If there is a width attr, we want to attach an event listener which
    // allows the table sizing to automatically adjust when the window is
    // resized. Use the width attr rather than CSS, since we can't know if the
    // CSS is a relative value or absolute - DOM read is always px.
    if (tableWidthAttr) {
      table.style.width = _fnStringToCss(tableWidthAttr);
    }

    if ((tableWidthAttr || scrollX) && !oSettings._reszEvt) {
      var bindResize = function () {
        $(window).bind(
          "resize.DT-" + oSettings.sInstance,
          _fnThrottle(function () {
            _fnAdjustColumnSizing(oSettings);
          })
        );
      };

      // IE6/7 will crash if we bind a resize event handler on page load.
      // To be removed in 1.11 which drops IE6/7 support
      if (ie67) {
        setTimeout(bindResize, 1000);
      } else {
        bindResize();
      }

      oSettings._reszEvt = true;
    }
  }

  /**
   * Throttle the calls to a function. Arguments and context are maintained for
   * the throttled function
   *  @param {function} fn Function to be called
   *  @param {int} [freq=200] call frequency in mS
   *  @returns {function} wrapped function
   *  @memberof DataTable#oApi
   */
  var _fnThrottle = DataTable.util.throttle;

  /**
   * Convert a CSS unit width to pixels (e.g. 2em)
   *  @param {string} width width to be converted
   *  @param {node} parent parent to get the with for (required for relative widths) - optional
   *  @returns {int} width in pixels
   *  @memberof DataTable#oApi
   */
  function _fnConvertToWidth(width, parent) {
    if (!width) {
      return 0;
    }

    var n = $("<div/>")
      .css("width", _fnStringToCss(width))
      .appendTo(parent || document.body);

    var val = n[0].offsetWidth;
    n.remove();

    return val;
  }

  /**
   * Get the widest node
   *  @param {object} settings dataTables settings object
   *  @param {int} colIdx column of interest
   *  @returns {node} widest table node
   *  @memberof DataTable#oApi
   */
  function _fnGetWidestNode(settings, colIdx) {
    var idx = _fnGetMaxLenString(settings, colIdx);
    if (idx < 0) {
      return null;
    }

    var data = settings.aoData[idx];
    return !data.nTr // Might not have been created when deferred rendering
      ? $("<td/>").html(_fnGetCellData(settings, idx, colIdx, "display"))[0]
      : data.anCells[colIdx];
  }

  /**
   * Get the maximum strlen for each data column
   *  @param {object} settings dataTables settings object
   *  @param {int} colIdx column of interest
   *  @returns {string} max string length for each column
   *  @memberof DataTable#oApi
   */
  function _fnGetMaxLenString(settings, colIdx) {
    var s,
      max = -1,
      maxIdx = -1;

    for (var i = 0, ien = settings.aoData.length; i < ien; i++) {
      s = _fnGetCellData(settings, i, colIdx, "display") + "";
      s = s.replace(__re_html_remove, "");
      s = s.replace(/&nbsp;/g, " ");

      if (s.length > max) {
        max = s.length;
        maxIdx = i;
      }
    }

    return maxIdx;
  }

  /**
   * Append a CSS unit (only if required) to a string
   *  @param {string} value to css-ify
   *  @returns {string} value with css unit
   *  @memberof DataTable#oApi
   */
  function _fnStringToCss(s) {
    if (s === null) {
      return "0px";
    }

    if (typeof s == "number") {
      return s < 0 ? "0px" : s + "px";
    }

    // Check it has a unit character already
    return s.match(/\d$/) ? s + "px" : s;
  }

  function _fnSortFlatten(settings) {
    var i,
      iLen,
      k,
      kLen,
      aSort = [],
      aiOrig = [],
      aoColumns = settings.aoColumns,
      aDataSort,
      iCol,
      sType,
      srcCol,
      fixed = settings.aaSortingFixed,
      fixedObj = $.isPlainObject(fixed),
      nestedSort = [],
      add = function (a) {
        if (a.length && !$.isArray(a[0])) {
          // 1D array
          nestedSort.push(a);
        } else {
          // 2D array
          $.merge(nestedSort, a);
        }
      };

    // Build the sort array, with pre-fix and post-fix options if they have been
    // specified
    if ($.isArray(fixed)) {
      add(fixed);
    }

    if (fixedObj && fixed.pre) {
      add(fixed.pre);
    }

    add(settings.aaSorting);

    if (fixedObj && fixed.post) {
      add(fixed.post);
    }

    for (i = 0; i < nestedSort.length; i++) {
      srcCol = nestedSort[i][0];
      aDataSort = aoColumns[srcCol].aDataSort;

      for (k = 0, kLen = aDataSort.length; k < kLen; k++) {
        iCol = aDataSort[k];
        sType = aoColumns[iCol].sType || "string";

        if (nestedSort[i]._idx === undefined) {
          nestedSort[i]._idx = $.inArray(
            nestedSort[i][1],
            aoColumns[iCol].asSorting
          );
        }

        aSort.push({
          src: srcCol,
          col: iCol,
          dir: nestedSort[i][1],
          index: nestedSort[i]._idx,
          type: sType,
          formatter: DataTable.ext.type.order[sType + "-pre"],
        });
      }
    }

    return aSort;
  }

  /**
   * Change the order of the table
   *  @param {object} oSettings dataTables settings object
   *  @memberof DataTable#oApi
   *  @todo This really needs split up!
   */
  function _fnSort(oSettings) {
    var i,
      ien,
      iLen,
      j,
      jLen,
      k,
      kLen,
      sDataType,
      nTh,
      aiOrig = [],
      oExtSort = DataTable.ext.type.order,
      aoData = oSettings.aoData,
      aoColumns = oSettings.aoColumns,
      aDataSort,
      data,
      iCol,
      sType,
      oSort,
      formatters = 0,
      sortCol,
      displayMaster = oSettings.aiDisplayMaster,
      aSort;

    // Resolve any column types that are unknown due to addition or invalidation
    // @todo Can this be moved into a 'data-ready' handler which is called when
    //   data is going to be used in the table?
    _fnColumnTypes(oSettings);

    aSort = _fnSortFlatten(oSettings);

    for (i = 0, ien = aSort.length; i < ien; i++) {
      sortCol = aSort[i];

      // Track if we can use the fast sort algorithm
      if (sortCol.formatter) {
        formatters++;
      }

      // Load the data needed for the sort, for each cell
      _fnSortData(oSettings, sortCol.col);
    }

    /* No sorting required if server-side or no sorting array */
    if (_fnDataSource(oSettings) != "ssp" && aSort.length !== 0) {
      // Create a value - key array of the current row positions such that we can use their
      // current position during the sort, if values match, in order to perform stable sorting
      for (i = 0, iLen = displayMaster.length; i < iLen; i++) {
        aiOrig[displayMaster[i]] = i;
      }

      /* Do the sort - here we want multi-column sorting based on a given data source (column)
       * and sorting function (from oSort) in a certain direction. It's reasonably complex to
       * follow on it's own, but this is what we want (example two column sorting):
       *  fnLocalSorting = function(a,b){
       *    var iTest;
       *    iTest = oSort['string-asc']('data11', 'data12');
       *      if (iTest !== 0)
       *        return iTest;
       *    iTest = oSort['numeric-desc']('data21', 'data22');
       *    if (iTest !== 0)
       *      return iTest;
       *    return oSort['numeric-asc']( aiOrig[a], aiOrig[b] );
       *  }
       * Basically we have a test for each sorting column, if the data in that column is equal,
       * test the next column. If all columns match, then we use a numeric sort on the row
       * positions in the original data array to provide a stable sort.
       *
       * Note - I know it seems excessive to have two sorting methods, but the first is around
       * 15% faster, so the second is only maintained for backwards compatibility with sorting
       * methods which do not have a pre-sort formatting function.
       */
      if (formatters === aSort.length) {
        // All sort types have formatting functions
        displayMaster.sort(function (a, b) {
          var x,
            y,
            k,
            test,
            sort,
            len = aSort.length,
            dataA = aoData[a]._aSortData,
            dataB = aoData[b]._aSortData;

          for (k = 0; k < len; k++) {
            sort = aSort[k];

            x = dataA[sort.col];
            y = dataB[sort.col];

            test = x < y ? -1 : x > y ? 1 : 0;
            if (test !== 0) {
              return sort.dir === "asc" ? test : -test;
            }
          }

          x = aiOrig[a];
          y = aiOrig[b];
          return x < y ? -1 : x > y ? 1 : 0;
        });
      } else {
        // Depreciated - remove in 1.11 (providing a plug-in option)
        // Not all sort types have formatting methods, so we have to call their sorting
        // methods.
        displayMaster.sort(function (a, b) {
          var x,
            y,
            k,
            l,
            test,
            sort,
            fn,
            len = aSort.length,
            dataA = aoData[a]._aSortData,
            dataB = aoData[b]._aSortData;

          for (k = 0; k < len; k++) {
            sort = aSort[k];

            x = dataA[sort.col];
            y = dataB[sort.col];

            fn =
              oExtSort[sort.type + "-" + sort.dir] ||
              oExtSort["string-" + sort.dir];
            test = fn(x, y);
            if (test !== 0) {
              return test;
            }
          }

          x = aiOrig[a];
          y = aiOrig[b];
          return x < y ? -1 : x > y ? 1 : 0;
        });
      }
    }

    /* Tell the draw function that we have sorted the data */
    oSettings.bSorted = true;
  }

  function _fnSortAria(settings) {
    var label;
    var nextSort;
    var columns = settings.aoColumns;
    var aSort = _fnSortFlatten(settings);
    var oAria = settings.oLanguage.oAria;

    // ARIA attributes - need to loop all columns, to update all (removing old
    // attributes as needed)
    for (var i = 0, iLen = columns.length; i < iLen; i++) {
      var col = columns[i];
      var asSorting = col.asSorting;
      var sTitle = col.sTitle.replace(/<.*?>/g, "");
      var th = col.nTh;

      // IE7 is throwing an error when setting these properties with jQuery's
      // attr() and removeAttr() methods...
      th.removeAttribute("aria-sort");

      /* In ARIA only the first sorting column can be marked as sorting - no multi-sort option */
      if (col.bSortable) {
        if (aSort.length > 0 && aSort[0].col == i) {
          th.setAttribute(
            "aria-sort",
            aSort[0].dir == "asc" ? "ascending" : "descending"
          );
          nextSort = asSorting[aSort[0].index + 1] || asSorting[0];
        } else {
          nextSort = asSorting[0];
        }

        label =
          sTitle +
          (nextSort === "asc" ? oAria.sSortAscending : oAria.sSortDescending);
      } else {
        label = sTitle;
      }

      th.setAttribute("aria-label", label);
    }
  }

  /**
   * Function to run on user sort request
   *  @param {object} settings dataTables settings object
   *  @param {node} attachTo node to attach the handler to
   *  @param {int} colIdx column sorting index
   *  @param {boolean} [append=false] Append the requested sort to the existing
   *    sort if true (i.e. multi-column sort)
   *  @param {function} [callback] callback function
   *  @memberof DataTable#oApi
   */
  function _fnSortListener(settings, colIdx, append, callback) {
    var col = settings.aoColumns[colIdx];
    var sorting = settings.aaSorting;
    var asSorting = col.asSorting;
    var nextSortIdx;
    var next = function (a, overflow) {
      var idx = a._idx;
      if (idx === undefined) {
        idx = $.inArray(a[1], asSorting);
      }

      return idx + 1 < asSorting.length ? idx + 1 : overflow ? null : 0;
    };

    // Convert to 2D array if needed
    if (typeof sorting[0] === "number") {
      sorting = settings.aaSorting = [sorting];
    }

    // If appending the sort then we are multi-column sorting
    if (append && settings.oFeatures.bSortMulti) {
      // Are we already doing some kind of sort on this column?
      var sortIdx = $.inArray(colIdx, _pluck(sorting, "0"));

      if (sortIdx !== -1) {
        // Yes, modify the sort
        nextSortIdx = next(sorting[sortIdx], true);

        if (nextSortIdx === null && sorting.length === 1) {
          nextSortIdx = 0; // can't remove sorting completely
        }

        if (nextSortIdx === null) {
          sorting.splice(sortIdx, 1);
        } else {
          sorting[sortIdx][1] = asSorting[nextSortIdx];
          sorting[sortIdx]._idx = nextSortIdx;
        }
      } else {
        // No sort on this column yet
        sorting.push([colIdx, asSorting[0], 0]);
        sorting[sorting.length - 1]._idx = 0;
      }
    } else if (sorting.length && sorting[0][0] == colIdx) {
      // Single column - already sorting on this column, modify the sort
      nextSortIdx = next(sorting[0]);

      sorting.length = 1;
      sorting[0][1] = asSorting[nextSortIdx];
      sorting[0]._idx = nextSortIdx;
    } else {
      // Single column - sort only on this column
      sorting.length = 0;
      sorting.push([colIdx, asSorting[0]]);
      sorting[0]._idx = 0;
    }

    // Run the sort by calling a full redraw
    _fnReDraw(settings);

    // callback used for async user interaction
    if (typeof callback == "function") {
      callback(settings);
    }
  }

  /**
   * Attach a sort handler (click) to a node
   *  @param {object} settings dataTables settings object
   *  @param {node} attachTo node to attach the handler to
   *  @param {int} colIdx column sorting index
   *  @param {function} [callback] callback function
   *  @memberof DataTable#oApi
   */
  function _fnSortAttachListener(settings, attachTo, colIdx, callback) {
    var col = settings.aoColumns[colIdx];

    _fnBindAction(attachTo, {}, function (e) {
      /* If the column is not sortable - don't to anything */
      if (col.bSortable === false) {
        return;
      }

      // If processing is enabled use a timeout to allow the processing
      // display to be shown - otherwise to it synchronously
      if (settings.oFeatures.bProcessing) {
        _fnProcessingDisplay(settings, true);

        setTimeout(function () {
          _fnSortListener(settings, colIdx, e.shiftKey, callback);

          // In server-side processing, the draw callback will remove the
          // processing display
          if (_fnDataSource(settings) !== "ssp") {
            _fnProcessingDisplay(settings, false);
          }
        }, 0);
      } else {
        _fnSortListener(settings, colIdx, e.shiftKey, callback);
      }
    });
  }

  /**
   * Set the sorting classes on table's body, Note: it is safe to call this function
   * when bSort and bSortClasses are false
   *  @param {object} oSettings dataTables settings object
   *  @memberof DataTable#oApi
   */
  function _fnSortingClasses(settings) {
    var oldSort = settings.aLastSort;
    var sortClass = settings.oClasses.sSortColumn;
    var sort = _fnSortFlatten(settings);
    var features = settings.oFeatures;
    var i, ien, colIdx;

    if (features.bSort && features.bSortClasses) {
      // Remove old sorting classes
      for (i = 0, ien = oldSort.length; i < ien; i++) {
        colIdx = oldSort[i].src;

        // Remove column sorting
        $(_pluck(settings.aoData, "anCells", colIdx)).removeClass(
          sortClass + (i < 2 ? i + 1 : 3)
        );
      }

      // Add new column sorting
      for (i = 0, ien = sort.length; i < ien; i++) {
        colIdx = sort[i].src;

        $(_pluck(settings.aoData, "anCells", colIdx)).addClass(
          sortClass + (i < 2 ? i + 1 : 3)
        );
      }
    }

    settings.aLastSort = sort;
  }

  // Get the data to sort a column, be it from cache, fresh (populating the
  // cache), or from a sort formatter
  function _fnSortData(settings, idx) {
    // Custom sorting function - provided by the sort data type
    var column = settings.aoColumns[idx];
    var customSort = DataTable.ext.order[column.sSortDataType];
    var customData;

    if (customSort) {
      customData = customSort.call(
        settings.oInstance,
        settings,
        idx,
        _fnColumnIndexToVisible(settings, idx)
      );
    }

    // Use / populate cache
    var row, cellData;
    var formatter = DataTable.ext.type.order[column.sType + "-pre"];

    for (var i = 0, ien = settings.aoData.length; i < ien; i++) {
      row = settings.aoData[i];

      if (!row._aSortData) {
        row._aSortData = [];
      }

      if (!row._aSortData[idx] || customSort) {
        cellData = customSort
          ? customData[i] // If there was a custom sort function, use data from there
          : _fnGetCellData(settings, i, idx, "sort");

        row._aSortData[idx] = formatter ? formatter(cellData) : cellData;
      }
    }
  }

  /**
   * Save the state of a table
   *  @param {object} oSettings dataTables settings object
   *  @memberof DataTable#oApi
   */
  function _fnSaveState(settings) {
    if (!settings.oFeatures.bStateSave || settings.bDestroying) {
      return;
    }

    /* Store the interesting variables */
    var state = {
      time: +new Date(),
      start: settings._iDisplayStart,
      length: settings._iDisplayLength,
      order: $.extend(true, [], settings.aaSorting),
      search: _fnSearchToCamel(settings.oPreviousSearch),
      columns: $.map(settings.aoColumns, function (col, i) {
        return {
          visible: col.bVisible,
          search: _fnSearchToCamel(settings.aoPreSearchCols[i]),
        };
      }),
    };

    _fnCallbackFire(settings, "aoStateSaveParams", "stateSaveParams", [
      settings,
      state,
    ]);

    settings.oSavedState = state;
    settings.fnStateSaveCallback.call(settings.oInstance, settings, state);
  }

  /**
   * Attempt to load a saved table state
   *  @param {object} oSettings dataTables settings object
   *  @param {object} oInit DataTables init object so we can override settings
   *  @memberof DataTable#oApi
   */
  function _fnLoadState(settings, oInit) {
    var i, ien;
    var columns = settings.aoColumns;

    if (!settings.oFeatures.bStateSave) {
      return;
    }

    var state = settings.fnStateLoadCallback.call(settings.oInstance, settings);
    if (!state || !state.time) {
      return;
    }

    /* Allow custom and plug-in manipulation functions to alter the saved data set and
     * cancelling of loading by returning false
     */
    var abStateLoad = _fnCallbackFire(
      settings,
      "aoStateLoadParams",
      "stateLoadParams",
      [settings, state]
    );
    if ($.inArray(false, abStateLoad) !== -1) {
      return;
    }

    /* Reject old data */
    var duration = settings.iStateDuration;
    if (duration > 0 && state.time < +new Date() - duration * 1000) {
      return;
    }

    // Number of columns have changed - all bets are off, no restore of settings
    if (columns.length !== state.columns.length) {
      return;
    }

    // Store the saved state so it might be accessed at any time
    settings.oLoadedState = $.extend(true, {}, state);

    // Restore key features - todo - for 1.11 this needs to be done by
    // subscribed events
    if (state.start !== undefined) {
      settings._iDisplayStart = state.start;
      settings.iInitDisplayStart = state.start;
    }
    if (state.length !== undefined) {
      settings._iDisplayLength = state.length;
    }

    // Order
    if (state.order !== undefined) {
      settings.aaSorting = [];
      $.each(state.order, function (i, col) {
        settings.aaSorting.push(col[0] >= columns.length ? [0, col[1]] : col);
      });
    }

    // Search
    if (state.search !== undefined) {
      $.extend(settings.oPreviousSearch, _fnSearchToHung(state.search));
    }

    // Columns
    for (i = 0, ien = state.columns.length; i < ien; i++) {
      var col = state.columns[i];

      // Visibility
      if (col.visible !== undefined) {
        columns[i].bVisible = col.visible;
      }

      // Search
      if (col.search !== undefined) {
        $.extend(settings.aoPreSearchCols[i], _fnSearchToHung(col.search));
      }
    }

    _fnCallbackFire(settings, "aoStateLoaded", "stateLoaded", [
      settings,
      state,
    ]);
  }

  /**
   * Return the settings object for a particular table
   *  @param {node} table table we are using as a dataTable
   *  @returns {object} Settings object - or null if not found
   *  @memberof DataTable#oApi
   */
  function _fnSettingsFromNode(table) {
    var settings = DataTable.settings;
    var idx = $.inArray(table, _pluck(settings, "nTable"));

    return idx !== -1 ? settings[idx] : null;
  }

  /**
   * Log an error message
   *  @param {object} settings dataTables settings object
   *  @param {int} level log error messages, or display them to the user
   *  @param {string} msg error message
   *  @param {int} tn Technical note id to get more information about the error.
   *  @memberof DataTable#oApi
   */
  function _fnLog(settings, level, msg, tn) {
    msg =
      "DataTables warning: " +
      (settings ? "table id=" + settings.sTableId + " - " : "") +
      msg;

    if (tn) {
      msg +=
        ". For more information about this error, please see " +
        "http://datatables.net/tn/" +
        tn;
    }

    if (!level) {
      // Backwards compatibility pre 1.10
      var ext = DataTable.ext;
      var type = ext.sErrMode || ext.errMode;

      if (settings) {
        _fnCallbackFire(settings, null, "error", [settings, tn, msg]);
      }

      if (type == "alert") {
        // alert( msg );
        console.log(msg);
      } else if (type == "throw") {
        throw new Error(msg);
      } else if (typeof type == "function") {
        type(settings, tn, msg);
      }
    } else if (window.console && console.log) {
      console.log(msg);
    }
  }

  /**
   * See if a property is defined on one object, if so assign it to the other object
   *  @param {object} ret target object
   *  @param {object} src source object
   *  @param {string} name property
   *  @param {string} [mappedName] name to map too - optional, name used if not given
   *  @memberof DataTable#oApi
   */
  function _fnMap(ret, src, name, mappedName) {
    if ($.isArray(name)) {
      $.each(name, function (i, val) {
        if ($.isArray(val)) {
          _fnMap(ret, src, val[0], val[1]);
        } else {
          _fnMap(ret, src, val);
        }
      });

      return;
    }

    if (mappedName === undefined) {
      mappedName = name;
    }

    if (src[name] !== undefined) {
      ret[mappedName] = src[name];
    }
  }

  /**
   * Extend objects - very similar to jQuery.extend, but deep copy objects, and
   * shallow copy arrays. The reason we need to do this, is that we don't want to
   * deep copy array init values (such as aaSorting) since the dev wouldn't be
   * able to override them, but we do want to deep copy arrays.
   *  @param {object} out Object to extend
   *  @param {object} extender Object from which the properties will be applied to
   *      out
   *  @param {boolean} breakRefs If true, then arrays will be sliced to take an
   *      independent copy with the exception of the `data` or `aaData` parameters
   *      if they are present. This is so you can pass in a collection to
   *      DataTables and have that used as your data source without breaking the
   *      references
   *  @returns {object} out Reference, just for convenience - out === the return.
   *  @memberof DataTable#oApi
   *  @todo This doesn't take account of arrays inside the deep copied objects.
   */
  function _fnExtend(out, extender, breakRefs) {
    var val;

    for (var prop in extender) {
      if (extender.hasOwnProperty(prop)) {
        val = extender[prop];

        if ($.isPlainObject(val)) {
          if (!$.isPlainObject(out[prop])) {
            out[prop] = {};
          }
          $.extend(true, out[prop], val);
        } else if (
          breakRefs &&
          prop !== "data" &&
          prop !== "aaData" &&
          $.isArray(val)
        ) {
          out[prop] = val.slice();
        } else {
          out[prop] = val;
        }
      }
    }

    return out;
  }

  /**
   * Bind an event handers to allow a click or return key to activate the callback.
   * This is good for accessibility since a return on the keyboard will have the
   * same effect as a click, if the element has focus.
   *  @param {element} n Element to bind the action to
   *  @param {object} oData Data object to pass to the triggered function
   *  @param {function} fn Callback function for when the event is triggered
   *  @memberof DataTable#oApi
   */
  function _fnBindAction(n, oData, fn) {
    $(n)
      .bind("click.DT", oData, function (e) {
        n.blur(); // Remove focus outline for mouse users
        fn(e);
      })
      .bind("keypress.DT", oData, function (e) {
        if (e.which === 13) {
          e.preventDefault();
          fn(e);
        }
      })
      .bind("selectstart.DT", function () {
        /* Take the brutal approach to cancelling text selection */
        return false;
      });
  }

  /**
   * Register a callback function. Easily allows a callback function to be added to
   * an array store of callback functions that can then all be called together.
   *  @param {object} oSettings dataTables settings object
   *  @param {string} sStore Name of the array storage for the callbacks in oSettings
   *  @param {function} fn Function to be called back
   *  @param {string} sName Identifying name for the callback (i.e. a label)
   *  @memberof DataTable#oApi
   */
  function _fnCallbackReg(oSettings, sStore, fn, sName) {
    if (fn) {
      oSettings[sStore].push({
        fn: fn,
        sName: sName,
      });
    }
  }

  /**
   * Fire callback functions and trigger events. Note that the loop over the
   * callback array store is done backwards! Further note that you do not want to
   * fire off triggers in time sensitive applications (for example cell creation)
   * as its slow.
   *  @param {object} settings dataTables settings object
   *  @param {string} callbackArr Name of the array storage for the callbacks in
   *      oSettings
   *  @param {string} eventName Name of the jQuery custom event to trigger. If
   *      null no trigger is fired
   *  @param {array} args Array of arguments to pass to the callback function /
   *      trigger
   *  @memberof DataTable#oApi
   */
  function _fnCallbackFire(settings, callbackArr, eventName, args) {
    var ret = [];

    if (callbackArr) {
      ret = $.map(settings[callbackArr].slice().reverse(), function (val, i) {
        return val.fn.apply(settings.oInstance, args);
      });
    }

    if (eventName !== null) {
      var e = $.Event(eventName + ".dt");

      $(settings.nTable).trigger(e, args);

      ret.push(e.result);
    }

    return ret;
  }

  function _fnLengthOverflow(settings) {
    var start = settings._iDisplayStart,
      end = settings.fnDisplayEnd(),
      len = settings._iDisplayLength;

    /* If we have space to show extra rows (backing up from the end point - then do so */
    if (start >= end) {
      start = end - len;
    }

    // Keep the start record on the current page
    start -= start % len;

    if (len === -1 || start < 0) {
      start = 0;
    }

    settings._iDisplayStart = start;
  }

  function _fnRenderer(settings, type) {
    var renderer = settings.renderer;
    var host = DataTable.ext.renderer[type];

    if ($.isPlainObject(renderer) && renderer[type]) {
      // Specific renderer for this type. If available use it, otherwise use
      // the default.
      return host[renderer[type]] || host._;
    } else if (typeof renderer === "string") {
      // Common renderer - if there is one available for this type use it,
      // otherwise use the default
      return host[renderer] || host._;
    }

    // Use the default
    return host._;
  }

  /**
   * Detect the data source being used for the table. Used to simplify the code
   * a little (ajax) and to make it compress a little smaller.
   *
   *  @param {object} settings dataTables settings object
   *  @returns {string} Data source
   *  @memberof DataTable#oApi
   */
  function _fnDataSource(settings) {
    if (settings.oFeatures.bServerSide) {
      return "ssp";
    } else if (settings.ajax || settings.sAjaxSource) {
      return "ajax";
    }
    return "dom";
  }

  /**
   * Computed structure of the DataTables API, defined by the options passed to
   * `DataTable.Api.register()` when building the API.
   *
   * The structure is built in order to speed creation and extension of the Api
   * objects since the extensions are effectively pre-parsed.
   *
   * The array is an array of objects with the following structure, where this
   * base array represents the Api prototype base:
   *
   *     [
   *       {
   *         name:      'data'                -- string   - Property name
   *         val:       function () {},       -- function - Api method (or undefined if just an object
   *         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result
   *         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property
   *       },
   *       {
   *         name:     'row'
   *         val:       {},
   *         methodExt: [ ... ],
   *         propExt:   [
   *           {
   *             name:      'data'
   *             val:       function () {},
   *             methodExt: [ ... ],
   *             propExt:   [ ... ]
   *           },
   *           ...
   *         ]
   *       }
   *     ]
   *
   * @type {Array}
   * @ignore
   */
  var __apiStruct = [];

  /**
   * `Array.prototype` reference.
   *
   * @type object
   * @ignore
   */
  var __arrayProto = Array.prototype;

  /**
   * Abstraction for `context` parameter of the `Api` constructor to allow it to
   * take several different forms for ease of use.
   *
   * Each of the input parameter types will be converted to a DataTables settings
   * object where possible.
   *
   * @param  {string|node|jQuery|object} mixed DataTable identifier. Can be one
   *   of:
   *
   *   * `string` - jQuery selector. Any DataTables' matching the given selector
   *     with be found and used.
   *   * `node` - `TABLE` node which has already been formed into a DataTable.
   *   * `jQuery` - A jQuery object of `TABLE` nodes.
   *   * `object` - DataTables settings object
   *   * `DataTables.Api` - API instance
   * @return {array|null} Matching DataTables settings objects. `null` or
   *   `undefined` is returned if no matching DataTable is found.
   * @ignore
   */
  var _toSettings = function (mixed) {
    var idx, jq;
    var settings = DataTable.settings;
    var tables = $.map(settings, function (el, i) {
      return el.nTable;
    });

    if (!mixed) {
      return [];
    } else if (mixed.nTable && mixed.oApi) {
      // DataTables settings object
      return [mixed];
    } else if (mixed.nodeName && mixed.nodeName.toLowerCase() === "table") {
      // Table node
      idx = $.inArray(mixed, tables);
      return idx !== -1 ? [settings[idx]] : null;
    } else if (mixed && typeof mixed.settings === "function") {
      return mixed.settings().toArray();
    } else if (typeof mixed === "string") {
      // jQuery selector
      jq = $(mixed);
    } else if (mixed instanceof $) {
      // jQuery object (also DataTables instance)
      jq = mixed;
    }

    if (jq) {
      return jq
        .map(function (i) {
          idx = $.inArray(this, tables);
          return idx !== -1 ? settings[idx] : null;
        })
        .toArray();
    }
  };

  /**
   * DataTables API class - used to control and interface with  one or more
   * DataTables enhanced tables.
   *
   * The API class is heavily based on jQuery, presenting a chainable interface
   * that you can use to interact with tables. Each instance of the API class has
   * a "context" - i.e. the tables that it will operate on. This could be a single
   * table, all tables on a page or a sub-set thereof.
   *
   * Additionally the API is designed to allow you to easily work with the data in
   * the tables, retrieving and manipulating it as required. This is done by
   * presenting the API class as an array like interface. The contents of the
   * array depend upon the actions requested by each method (for example
   * `rows().nodes()` will return an array of nodes, while `rows().data()` will
   * return an array of objects or arrays depending upon your table's
   * configuration). The API object has a number of array like methods (`push`,
   * `pop`, `reverse` etc) as well as additional helper methods (`each`, `pluck`,
   * `unique` etc) to assist your working with the data held in a table.
   *
   * Most methods (those which return an Api instance) are chainable, which means
   * the return from a method call also has all of the methods available that the
   * top level object had. For example, these two calls are equivalent:
   *
   *     // Not chained
   *     api.row.add( {...} );
   *     api.draw();
   *
   *     // Chained
   *     api.row.add( {...} ).draw();
   *
   * @class DataTable.Api
   * @param {array|object|string|jQuery} context DataTable identifier. This is
   *   used to define which DataTables enhanced tables this API will operate on.
   *   Can be one of:
   *
   *   * `string` - jQuery selector. Any DataTables' matching the given selector
   *     with be found and used.
   *   * `node` - `TABLE` node which has already been formed into a DataTable.
   *   * `jQuery` - A jQuery object of `TABLE` nodes.
   *   * `object` - DataTables settings object
   * @param {array} [data] Data to initialise the Api instance with.
   *
   * @example
   *   // Direct initialisation during DataTables construction
   *   var api = $('#example').DataTable();
   *
   * @example
   *   // Initialisation using a DataTables jQuery object
   *   var api = $('#example').dataTable().api();
   *
   * @example
   *   // Initialisation as a constructor
   *   var api = new $.fn.DataTable.Api( 'table.dataTable' );
   */
  _Api = function (context, data) {
    if (!(this instanceof _Api)) {
      return new _Api(context, data);
    }

    var settings = [];
    var ctxSettings = function (o) {
      var a = _toSettings(o);
      if (a) {
        settings = settings.concat(a);
      }
    };

    if ($.isArray(context)) {
      for (var i = 0, ien = context.length; i < ien; i++) {
        ctxSettings(context[i]);
      }
    } else {
      ctxSettings(context);
    }

    // Remove duplicates
    this.context = _unique(settings);

    // Initial data
    if (data) {
      $.merge(this, data);
    }

    // selector
    this.selector = {
      rows: null,
      cols: null,
      opts: null,
    };

    _Api.extend(this, this, __apiStruct);
  };

  DataTable.Api = _Api;

  // Don't destroy the existing prototype, just extend it. Required for jQuery 2's
  // isPlainObject.
  $.extend(_Api.prototype, {
    any: function () {
      return this.count() !== 0;
    },

    concat: __arrayProto.concat,

    context: [], // array of table settings objects

    count: function () {
      return this.flatten().length;
    },

    each: function (fn) {
      for (var i = 0, ien = this.length; i < ien; i++) {
        fn.call(this, this[i], i, this);
      }

      return this;
    },

    eq: function (idx) {
      var ctx = this.context;

      return ctx.length > idx ? new _Api(ctx[idx], this[idx]) : null;
    },

    filter: function (fn) {
      var a = [];

      if (__arrayProto.filter) {
        a = __arrayProto.filter.call(this, fn, this);
      } else {
        // Compatibility for browsers without EMCA-252-5 (JS 1.6)
        for (var i = 0, ien = this.length; i < ien; i++) {
          if (fn.call(this, this[i], i, this)) {
            a.push(this[i]);
          }
        }
      }

      return new _Api(this.context, a);
    },

    flatten: function () {
      var a = [];
      return new _Api(this.context, a.concat.apply(a, this.toArray()));
    },

    join: __arrayProto.join,

    indexOf:
      __arrayProto.indexOf ||
      function (obj, start) {
        for (var i = start || 0, ien = this.length; i < ien; i++) {
          if (this[i] === obj) {
            return i;
          }
        }
        return -1;
      },

    iterator: function (flatten, type, fn, alwaysNew) {
      var a = [],
        ret,
        i,
        ien,
        j,
        jen,
        context = this.context,
        rows,
        items,
        item,
        selector = this.selector;

      // Argument shifting
      if (typeof flatten === "string") {
        alwaysNew = fn;
        fn = type;
        type = flatten;
        flatten = false;
      }

      for (i = 0, ien = context.length; i < ien; i++) {
        var apiInst = new _Api(context[i]);

        if (type === "table") {
          ret = fn.call(apiInst, context[i], i);

          if (ret !== undefined) {
            a.push(ret);
          }
        } else if (type === "columns" || type === "rows") {
          // this has same length as context - one entry for each table
          ret = fn.call(apiInst, context[i], this[i], i);

          if (ret !== undefined) {
            a.push(ret);
          }
        } else if (
          type === "column" ||
          type === "column-rows" ||
          type === "row" ||
          type === "cell"
        ) {
          // columns and rows share the same structure.
          // 'this' is an array of column indexes for each context
          items = this[i];

          if (type === "column-rows") {
            rows = _selector_row_indexes(context[i], selector.opts);
          }

          for (j = 0, jen = items.length; j < jen; j++) {
            item = items[j];

            if (type === "cell") {
              ret = fn.call(apiInst, context[i], item.row, item.column, i, j);
            } else {
              ret = fn.call(apiInst, context[i], item, i, j, rows);
            }

            if (ret !== undefined) {
              a.push(ret);
            }
          }
        }
      }

      if (a.length || alwaysNew) {
        var api = new _Api(context, flatten ? a.concat.apply([], a) : a);
        var apiSelector = api.selector;
        apiSelector.rows = selector.rows;
        apiSelector.cols = selector.cols;
        apiSelector.opts = selector.opts;
        return api;
      }
      return this;
    },

    lastIndexOf:
      __arrayProto.lastIndexOf ||
      function (obj, start) {
        // Bit cheeky...
        return this.indexOf.apply(this.toArray.reverse(), arguments);
      },

    length: 0,

    map: function (fn) {
      var a = [];

      if (__arrayProto.map) {
        a = __arrayProto.map.call(this, fn, this);
      } else {
        // Compatibility for browsers without EMCA-252-5 (JS 1.6)
        for (var i = 0, ien = this.length; i < ien; i++) {
          a.push(fn.call(this, this[i], i));
        }
      }

      return new _Api(this.context, a);
    },

    pluck: function (prop) {
      return this.map(function (el) {
        return el[prop];
      });
    },

    pop: __arrayProto.pop,

    push: __arrayProto.push,

    // Does not return an API instance
    reduce:
      __arrayProto.reduce ||
      function (fn, init) {
        return _fnReduce(this, fn, init, 0, this.length, 1);
      },

    reduceRight:
      __arrayProto.reduceRight ||
      function (fn, init) {
        return _fnReduce(this, fn, init, this.length - 1, -1, -1);
      },

    reverse: __arrayProto.reverse,

    // Object with rows, columns and opts
    selector: null,

    shift: __arrayProto.shift,

    sort: __arrayProto.sort, // ? name - order?

    splice: __arrayProto.splice,

    toArray: function () {
      return __arrayProto.slice.call(this);
    },

    to$: function () {
      return $(this);
    },

    toJQuery: function () {
      return $(this);
    },

    unique: function () {
      return new _Api(this.context, _unique(this));
    },

    unshift: __arrayProto.unshift,
  });

  _Api.extend = function (scope, obj, ext) {
    // Only extend API instances and static properties of the API
    if (!ext.length || !obj || (!(obj instanceof _Api) && !obj.__dt_wrapper)) {
      return;
    }

    var i,
      ien,
      j,
      jen,
      struct,
      inner,
      methodScoping = function (scope, fn, struc) {
        return function () {
          var ret = fn.apply(scope, arguments);

          // Method extension
          _Api.extend(ret, ret, struc.methodExt);
          return ret;
        };
      };

    for (i = 0, ien = ext.length; i < ien; i++) {
      struct = ext[i];

      // Value
      obj[struct.name] =
        typeof struct.val === "function"
          ? methodScoping(scope, struct.val, struct)
          : $.isPlainObject(struct.val)
          ? {}
          : struct.val;

      obj[struct.name].__dt_wrapper = true;

      // Property extension
      _Api.extend(scope, obj[struct.name], struct.propExt);
    }
  };

  // @todo - Is there need for an augment function?
  // _Api.augment = function ( inst, name )
  // {
  // 	// Find src object in the structure from the name
  // 	var parts = name.split('.');

  // 	_Api.extend( inst, obj );
  // };

  //     [
  //       {
  //         name:      'data'                -- string   - Property name
  //         val:       function () {},       -- function - Api method (or undefined if just an object
  //         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result
  //         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property
  //       },
  //       {
  //         name:     'row'
  //         val:       {},
  //         methodExt: [ ... ],
  //         propExt:   [
  //           {
  //             name:      'data'
  //             val:       function () {},
  //             methodExt: [ ... ],
  //             propExt:   [ ... ]
  //           },
  //           ...
  //         ]
  //       }
  //     ]

  _Api.register = _api_register = function (name, val) {
    if ($.isArray(name)) {
      for (var j = 0, jen = name.length; j < jen; j++) {
        _Api.register(name[j], val);
      }
      return;
    }

    var i,
      ien,
      heir = name.split("."),
      struct = __apiStruct,
      key,
      method;

    var find = function (src, name) {
      for (var i = 0, ien = src.length; i < ien; i++) {
        if (src[i].name === name) {
          return src[i];
        }
      }
      return null;
    };

    for (i = 0, ien = heir.length; i < ien; i++) {
      method = heir[i].indexOf("()") !== -1;
      key = method ? heir[i].replace("()", "") : heir[i];

      var src = find(struct, key);
      if (!src) {
        src = {
          name: key,
          val: {},
          methodExt: [],
          propExt: [],
        };
        struct.push(src);
      }

      if (i === ien - 1) {
        src.val = val;
      } else {
        struct = method ? src.methodExt : src.propExt;
      }
    }
  };

  _Api.registerPlural = _api_registerPlural = function (
    pluralName,
    singularName,
    val
  ) {
    _Api.register(pluralName, val);

    _Api.register(singularName, function () {
      var ret = val.apply(this, arguments);

      if (ret === this) {
        // Returned item is the API instance that was passed in, return it
        return this;
      } else if (ret instanceof _Api) {
        // New API instance returned, want the value from the first item
        // in the returned array for the singular result.
        return ret.length
          ? $.isArray(ret[0])
            ? new _Api(ret.context, ret[0]) // Array results are 'enhanced'
            : ret[0]
          : undefined;
      }

      // Non-API return - just fire it back
      return ret;
    });
  };

  /**
   * Selector for HTML tables. Apply the given selector to the give array of
   * DataTables settings objects.
   *
   * @param {string|integer} [selector] jQuery selector string or integer
   * @param  {array} Array of DataTables settings objects to be filtered
   * @return {array}
   * @ignore
   */
  var __table_selector = function (selector, a) {
    // Integer is used to pick out a table by index
    if (typeof selector === "number") {
      return [a[selector]];
    }

    // Perform a jQuery selector on the table nodes
    var nodes = $.map(a, function (el, i) {
      return el.nTable;
    });

    return $(nodes)
      .filter(selector)
      .map(function (i) {
        // Need to translate back from the table node to the settings
        var idx = $.inArray(this, nodes);
        return a[idx];
      })
      .toArray();
  };

  /**
   * Context selector for the API's context (i.e. the tables the API instance
   * refers to.
   *
   * @name    DataTable.Api#tables
   * @param {string|integer} [selector] Selector to pick which tables the iterator
   *   should operate on. If not given, all tables in the current context are
   *   used. This can be given as a jQuery selector (for example `':gt(0)'`) to
   *   select multiple tables or as an integer to select a single table.
   * @returns {DataTable.Api} Returns a new API instance if a selector is given.
   */
  _api_register("tables()", function (selector) {
    // A new instance is created if there was a selector specified
    return selector ? new _Api(__table_selector(selector, this.context)) : this;
  });

  _api_register("table()", function (selector) {
    var tables = this.tables(selector);
    var ctx = tables.context;

    // Truncate to the first matched table
    return ctx.length ? new _Api(ctx[0]) : tables;
  });

  _api_registerPlural("tables().nodes()", "table().node()", function () {
    return this.iterator(
      "table",
      function (ctx) {
        return ctx.nTable;
      },
      1
    );
  });

  _api_registerPlural("tables().body()", "table().body()", function () {
    return this.iterator(
      "table",
      function (ctx) {
        return ctx.nTBody;
      },
      1
    );
  });

  _api_registerPlural("tables().header()", "table().header()", function () {
    return this.iterator(
      "table",
      function (ctx) {
        return ctx.nTHead;
      },
      1
    );
  });

  _api_registerPlural("tables().footer()", "table().footer()", function () {
    return this.iterator(
      "table",
      function (ctx) {
        return ctx.nTFoot;
      },
      1
    );
  });

  _api_registerPlural(
    "tables().containers()",
    "table().container()",
    function () {
      return this.iterator(
        "table",
        function (ctx) {
          return ctx.nTableWrapper;
        },
        1
      );
    }
  );

  /**
   * Redraw the tables in the current context.
   */
  _api_register("draw()", function (paging) {
    return this.iterator("table", function (settings) {
      if (paging === "page") {
        _fnDraw(settings);
      } else {
        if (typeof paging === "string") {
          paging = paging === "full-hold" ? false : true;
        }

        _fnReDraw(settings, paging === false);
      }
    });
  });

  /**
   * Get the current page index.
   *
   * @return {integer} Current page index (zero based)
   */ /**
   * Set the current page.
   *
   * Note that if you attempt to show a page which does not exist, DataTables will
   * not throw an error, but rather reset the paging.
   *
   * @param {integer|string} action The paging action to take. This can be one of:
   *  * `integer` - The page index to jump to
   *  * `string` - An action to take:
   *    * `first` - Jump to first page.
   *    * `next` - Jump to the next page
   *    * `previous` - Jump to previous page
   *    * `last` - Jump to the last page.
   * @returns {DataTables.Api} this
   */ _api_register("page()", function (action) {
    if (action === undefined) {
      return this.page.info().page; // not an expensive call
    }

    // else, have an action to take on all tables
    return this.iterator("table", function (settings) {
      _fnPageChange(settings, action);
    });
  });

  /**
   * Paging information for the first table in the current context.
   *
   * If you require paging information for another table, use the `table()` method
   * with a suitable selector.
   *
   * @return {object} Object with the following properties set:
   *  * `page` - Current page index (zero based - i.e. the first page is `0`)
   *  * `pages` - Total number of pages
   *  * `start` - Display index for the first record shown on the current page
   *  * `end` - Display index for the last record shown on the current page
   *  * `length` - Display length (number of records). Note that generally `start
   *    + length = end`, but this is not always true, for example if there are
   *    only 2 records to show on the final page, with a length of 10.
   *  * `recordsTotal` - Full data set length
   *  * `recordsDisplay` - Data set length once the current filtering criterion
   *    are applied.
   */
  _api_register("page.info()", function (action) {
    if (this.context.length === 0) {
      return undefined;
    }

    var settings = this.context[0],
      start = settings._iDisplayStart,
      len = settings.oFeatures.bPaginate ? settings._iDisplayLength : -1,
      visRecords = settings.fnRecordsDisplay(),
      all = len === -1;

    return {
      page: all ? 0 : Math.floor(start / len),
      pages: all ? 1 : Math.ceil(visRecords / len),
      start: start,
      end: settings.fnDisplayEnd(),
      length: len,
      recordsTotal: settings.fnRecordsTotal(),
      recordsDisplay: visRecords,
      serverSide: _fnDataSource(settings) === "ssp",
    };
  });

  /**
   * Get the current page length.
   *
   * @return {integer} Current page length. Note `-1` indicates that all records
   *   are to be shown.
   */ /**
   * Set the current page length.
   *
   * @param {integer} Page length to set. Use `-1` to show all records.
   * @returns {DataTables.Api} this
   */ _api_register("page.len()", function (len) {
    // Note that we can't call this function 'length()' because `length`
    // is a Javascript property of functions which defines how many arguments
    // the function expects.
    if (len === undefined) {
      return this.context.length !== 0
        ? this.context[0]._iDisplayLength
        : undefined;
    }

    // else, set the page length
    return this.iterator("table", function (settings) {
      _fnLengthChange(settings, len);
    });
  });

  var __reload = function (settings, holdPosition, callback) {
    // Use the draw event to trigger a callback
    if (callback) {
      var api = new _Api(settings);

      api.one("draw", function () {
        callback(api.ajax.json());
      });
    }

    if (_fnDataSource(settings) == "ssp") {
      _fnReDraw(settings, holdPosition);
    } else {
      _fnProcessingDisplay(settings, true);

      // Cancel an existing request
      var xhr = settings.jqXHR;
      if (xhr && xhr.readyState !== 4) {
        xhr.abort();
      }

      // Trigger xhr
      _fnBuildAjax(settings, [], function (json) {
        _fnClearTable(settings);

        var data = _fnAjaxDataSrc(settings, json);
        for (var i = 0, ien = data.length; i < ien; i++) {
          _fnAddData(settings, data[i]);
        }

        _fnReDraw(settings, holdPosition);
        _fnProcessingDisplay(settings, false);
      });
    }
  };

  /**
   * Get the JSON response from the last Ajax request that DataTables made to the
   * server. Note that this returns the JSON from the first table in the current
   * context.
   *
   * @return {object} JSON received from the server.
   */
  _api_register("ajax.json()", function () {
    var ctx = this.context;

    if (ctx.length > 0) {
      return ctx[0].json;
    }

    // else return undefined;
  });

  /**
   * Get the data submitted in the last Ajax request
   */
  _api_register("ajax.params()", function () {
    var ctx = this.context;

    if (ctx.length > 0) {
      return ctx[0].oAjaxData;
    }

    // else return undefined;
  });

  /**
   * Reload tables from the Ajax data source. Note that this function will
   * automatically re-draw the table when the remote data has been loaded.
   *
   * @param {boolean} [reset=true] Reset (default) or hold the current paging
   *   position. A full re-sort and re-filter is performed when this method is
   *   called, which is why the pagination reset is the default action.
   * @returns {DataTables.Api} this
   */
  _api_register("ajax.reload()", function (callback, resetPaging) {
    return this.iterator("table", function (settings) {
      __reload(settings, resetPaging === false, callback);
    });
  });

  /**
   * Get the current Ajax URL. Note that this returns the URL from the first
   * table in the current context.
   *
   * @return {string} Current Ajax source URL
   */ /**
   * Set the Ajax URL. Note that this will set the URL for all tables in the
   * current context.
   *
   * @param {string} url URL to set.
   * @returns {DataTables.Api} this
   */ _api_register("ajax.url()", function (url) {
    var ctx = this.context;

    if (url === undefined) {
      // get
      if (ctx.length === 0) {
        return undefined;
      }
      ctx = ctx[0];

      return ctx.ajax
        ? $.isPlainObject(ctx.ajax)
          ? ctx.ajax.url
          : ctx.ajax
        : ctx.sAjaxSource;
    }

    // set
    return this.iterator("table", function (settings) {
      if ($.isPlainObject(settings.ajax)) {
        settings.ajax.url = url;
      } else {
        settings.ajax = url;
      }
      // No need to consider sAjaxSource here since DataTables gives priority
      // to `ajax` over `sAjaxSource`. So setting `ajax` here, renders any
      // value of `sAjaxSource` redundant.
    });
  });

  /**
   * Load data from the newly set Ajax URL. Note that this method is only
   * available when `ajax.url()` is used to set a URL. Additionally, this method
   * has the same effect as calling `ajax.reload()` but is provided for
   * convenience when setting a new URL. Like `ajax.reload()` it will
   * automatically redraw the table once the remote data has been loaded.
   *
   * @returns {DataTables.Api} this
   */
  _api_register("ajax.url().load()", function (callback, resetPaging) {
    // Same as a reload, but makes sense to present it for easy access after a
    // url change
    return this.iterator("table", function (ctx) {
      __reload(ctx, resetPaging === false, callback);
    });
  });

  var _selector_run = function (type, selector, selectFn, settings, opts) {
    var out = [],
      res,
      a,
      i,
      ien,
      j,
      jen,
      selectorType = typeof selector;

    // Can't just check for isArray here, as an API or jQuery instance might be
    // given with their array like look
    if (
      !selector ||
      selectorType === "string" ||
      selectorType === "function" ||
      selector.length === undefined
    ) {
      selector = [selector];
    }

    for (i = 0, ien = selector.length; i < ien; i++) {
      a =
        selector[i] && selector[i].split
          ? selector[i].split(",")
          : [selector[i]];

      for (j = 0, jen = a.length; j < jen; j++) {
        res = selectFn(typeof a[j] === "string" ? $.trim(a[j]) : a[j]);

        if (res && res.length) {
          out = out.concat(res);
        }
      }
    }

    // selector extensions
    var ext = _ext.selector[type];
    if (ext.length) {
      for (i = 0, ien = ext.length; i < ien; i++) {
        out = ext[i](settings, opts, out);
      }
    }

    return _unique(out);
  };

  var _selector_opts = function (opts) {
    if (!opts) {
      opts = {};
    }

    // Backwards compatibility for 1.9- which used the terminology filter rather
    // than search
    if (opts.filter && opts.search === undefined) {
      opts.search = opts.filter;
    }

    return $.extend(
      {
        search: "none",
        order: "current",
        page: "all",
      },
      opts
    );
  };

  var _selector_first = function (inst) {
    // Reduce the API instance to the first item found
    for (var i = 0, ien = inst.length; i < ien; i++) {
      if (inst[i].length > 0) {
        // Assign the first element to the first item in the instance
        // and truncate the instance and context
        inst[0] = inst[i];
        inst[0].length = 1;
        inst.length = 1;
        inst.context = [inst.context[i]];

        return inst;
      }
    }

    // Not found - return an empty instance
    inst.length = 0;
    return inst;
  };

  var _selector_row_indexes = function (settings, opts) {
    var i,
      ien,
      tmp,
      a = [],
      displayFiltered = settings.aiDisplay,
      displayMaster = settings.aiDisplayMaster;

    var search = opts.search, // none, applied, removed
      order = opts.order, // applied, current, index (original - compatibility with 1.9)
      page = opts.page; // all, current

    if (_fnDataSource(settings) == "ssp") {
      // In server-side processing mode, most options are irrelevant since
      // rows not shown don't exist and the index order is the applied order
      // Removed is a special case - for consistency just return an empty
      // array
      return search === "removed" ? [] : _range(0, displayMaster.length);
    } else if (page == "current") {
      // Current page implies that order=current and fitler=applied, since it is
      // fairly senseless otherwise, regardless of what order and search actually
      // are
      for (
        i = settings._iDisplayStart, ien = settings.fnDisplayEnd();
        i < ien;
        i++
      ) {
        a.push(displayFiltered[i]);
      }
    } else if (order == "current" || order == "applied") {
      a =
        search == "none"
          ? displayMaster.slice() // no search
          : search == "applied"
          ? displayFiltered.slice() // applied search
          : $.map(displayMaster, function (el, i) {
              // removed search
              return $.inArray(el, displayFiltered) === -1 ? el : null;
            });
    } else if (order == "index" || order == "original") {
      for (i = 0, ien = settings.aoData.length; i < ien; i++) {
        if (search == "none") {
          a.push(i);
        } else {
          // applied | removed
          tmp = $.inArray(i, displayFiltered);

          if (
            (tmp === -1 && search == "removed") ||
            (tmp >= 0 && search == "applied")
          ) {
            a.push(i);
          }
        }
      }
    }

    return a;
  };

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   * Rows
   *
   * {}          - no selector - use all available rows
   * {integer}   - row aoData index
   * {node}      - TR node
   * {string}    - jQuery selector to apply to the TR elements
   * {array}     - jQuery array of nodes, or simply an array of TR nodes
   *
   */

  var __row_selector = function (settings, selector, opts) {
    var run = function (sel) {
      var selInt = _intVal(sel);
      var i, ien;

      // Short cut - selector is a number and no options provided (default is
      // all records, so no need to check if the index is in there, since it
      // must be - dev error if the index doesn't exist).
      if (selInt !== null && !opts) {
        return [selInt];
      }

      var rows = _selector_row_indexes(settings, opts);

      if (selInt !== null && $.inArray(selInt, rows) !== -1) {
        // Selector - integer
        return [selInt];
      } else if (!sel) {
        // Selector - none
        return rows;
      }

      // Selector - function
      if (typeof sel === "function") {
        return $.map(rows, function (idx) {
          var row = settings.aoData[idx];
          return sel(idx, row._aData, row.nTr) ? idx : null;
        });
      }

      // Get nodes in the order from the `rows` array with null values removed
      var nodes = _removeEmpty(_pluck_order(settings.aoData, rows, "nTr"));

      // Selector - node
      if (sel.nodeName) {
        if (sel._DT_RowIndex !== undefined) {
          return [sel._DT_RowIndex]; // Property added by DT for fast lookup
        } else if (sel._DT_CellIndex) {
          return [sel._DT_CellIndex.row];
        } else {
          var host = $(sel).closest("*[data-dt-row]");
          return host.length ? [host.data("dt-row")] : [];
        }
      }

      // ID selector. Want to always be able to select rows by id, regardless
      // of if the tr element has been created or not, so can't rely upon
      // jQuery here - hence a custom implementation. This does not match
      // Sizzle's fast selector or HTML4 - in HTML5 the ID can be anything,
      // but to select it using a CSS selector engine (like Sizzle or
      // querySelect) it would need to need to be escaped for some characters.
      // DataTables simplifies this for row selectors since you can select
      // only a row. A # indicates an id any anything that follows is the id -
      // unescaped.
      if (typeof sel === "string" && sel.charAt(0) === "#") {
        // get row index from id
        var rowObj = settings.aIds[sel.replace(/^#/, "")];
        if (rowObj !== undefined) {
          return [rowObj.idx];
        }

        // need to fall through to jQuery in case there is DOM id that
        // matches
      }

      // Selector - jQuery selector string, array of nodes or jQuery object/
      // As jQuery's .filter() allows jQuery objects to be passed in filter,
      // it also allows arrays, so this will cope with all three options
      return $(nodes)
        .filter(sel)
        .map(function () {
          return this._DT_RowIndex;
        })
        .toArray();
    };

    return _selector_run("row", selector, run, settings, opts);
  };

  _api_register("rows()", function (selector, opts) {
    // argument shifting
    if (selector === undefined) {
      selector = "";
    } else if ($.isPlainObject(selector)) {
      opts = selector;
      selector = "";
    }

    opts = _selector_opts(opts);

    var inst = this.iterator(
      "table",
      function (settings) {
        return __row_selector(settings, selector, opts);
      },
      1
    );

    // Want argument shifting here and in __row_selector?
    inst.selector.rows = selector;
    inst.selector.opts = opts;

    return inst;
  });

  _api_register("rows().nodes()", function () {
    return this.iterator(
      "row",
      function (settings, row) {
        return settings.aoData[row].nTr || undefined;
      },
      1
    );
  });

  _api_register("rows().data()", function () {
    return this.iterator(
      true,
      "rows",
      function (settings, rows) {
        return _pluck_order(settings.aoData, rows, "_aData");
      },
      1
    );
  });

  _api_registerPlural("rows().cache()", "row().cache()", function (type) {
    return this.iterator(
      "row",
      function (settings, row) {
        var r = settings.aoData[row];
        return type === "search" ? r._aFilterData : r._aSortData;
      },
      1
    );
  });

  _api_registerPlural(
    "rows().invalidate()",
    "row().invalidate()",
    function (src) {
      return this.iterator("row", function (settings, row) {
        _fnInvalidate(settings, row, src);
      });
    }
  );

  _api_registerPlural("rows().indexes()", "row().index()", function () {
    return this.iterator(
      "row",
      function (settings, row) {
        return row;
      },
      1
    );
  });

  _api_registerPlural("rows().ids()", "row().id()", function (hash) {
    var a = [];
    var context = this.context;

    // `iterator` will drop undefined values, but in this case we want them
    for (var i = 0, ien = context.length; i < ien; i++) {
      for (var j = 0, jen = this[i].length; j < jen; j++) {
        var id = context[i].rowIdFn(context[i].aoData[this[i][j]]._aData);
        a.push((hash === true ? "#" : "") + id);
      }
    }

    return new _Api(context, a);
  });

  _api_registerPlural("rows().remove()", "row().remove()", function () {
    var that = this;

    this.iterator("row", function (settings, row, thatIdx) {
      var data = settings.aoData;
      var rowData = data[row];
      var i, ien, j, jen;
      var loopRow, loopCells;

      data.splice(row, 1);

      // Update the cached indexes
      for (i = 0, ien = data.length; i < ien; i++) {
        loopRow = data[i];
        loopCells = loopRow.anCells;

        // Rows
        if (loopRow.nTr !== null) {
          loopRow.nTr._DT_RowIndex = i;
        }

        // Cells
        if (loopCells !== null) {
          for (j = 0, jen = loopCells.length; j < jen; j++) {
            loopCells[j]._DT_CellIndex.row = i;
          }
        }
      }

      // Delete from the display arrays
      _fnDeleteIndex(settings.aiDisplayMaster, row);
      _fnDeleteIndex(settings.aiDisplay, row);
      _fnDeleteIndex(that[thatIdx], row, false); // maintain local indexes

      // Check for an 'overflow' they case for displaying the table
      _fnLengthOverflow(settings);

      // Remove the row's ID reference if there is one
      var id = settings.rowIdFn(rowData._aData);
      if (id !== undefined) {
        delete settings.aIds[id];
      }
    });

    this.iterator("table", function (settings) {
      for (var i = 0, ien = settings.aoData.length; i < ien; i++) {
        settings.aoData[i].idx = i;
      }
    });

    return this;
  });

  _api_register("rows.add()", function (rows) {
    var newRows = this.iterator(
      "table",
      function (settings) {
        var row, i, ien;
        var out = [];

        for (i = 0, ien = rows.length; i < ien; i++) {
          row = rows[i];

          if (row.nodeName && row.nodeName.toUpperCase() === "TR") {
            out.push(_fnAddTr(settings, row)[0]);
          } else {
            out.push(_fnAddData(settings, row));
          }
        }

        return out;
      },
      1
    );

    // Return an Api.rows() extended instance, so rows().nodes() etc can be used
    var modRows = this.rows(-1);
    modRows.pop();
    $.merge(modRows, newRows);

    return modRows;
  });

  /**
   *
   */
  _api_register("row()", function (selector, opts) {
    return _selector_first(this.rows(selector, opts));
  });

  _api_register("row().data()", function (data) {
    var ctx = this.context;

    if (data === undefined) {
      // Get
      return ctx.length && this.length
        ? ctx[0].aoData[this[0]]._aData
        : undefined;
    }

    // Set
    ctx[0].aoData[this[0]]._aData = data;

    // Automatically invalidate
    _fnInvalidate(ctx[0], this[0], "data");

    return this;
  });

  _api_register("row().node()", function () {
    var ctx = this.context;

    return ctx.length && this.length
      ? ctx[0].aoData[this[0]].nTr || null
      : null;
  });

  _api_register("row.add()", function (row) {
    // Allow a jQuery object to be passed in - only a single row is added from
    // it though - the first element in the set
    if (row instanceof $ && row.length) {
      row = row[0];
    }

    var rows = this.iterator("table", function (settings) {
      if (row.nodeName && row.nodeName.toUpperCase() === "TR") {
        return _fnAddTr(settings, row)[0];
      }
      return _fnAddData(settings, row);
    });

    // Return an Api.rows() extended instance, with the newly added row selected
    return this.row(rows[0]);
  });

  var __details_add = function (ctx, row, data, klass) {
    // Convert to array of TR elements
    var rows = [];
    var addRow = function (r, k) {
      // Recursion to allow for arrays of jQuery objects
      if ($.isArray(r) || r instanceof $) {
        for (var i = 0, ien = r.length; i < ien; i++) {
          addRow(r[i], k);
        }
        return;
      }

      // If we get a TR element, then just add it directly - up to the dev
      // to add the correct number of columns etc
      if (r.nodeName && r.nodeName.toLowerCase() === "tr") {
        rows.push(r);
      } else {
        // Otherwise create a row with a wrapper
        var created = $("<tr><td/></tr>").addClass(k);
        $("td", created).addClass(k).html(r)[0].colSpan = _fnVisbleColumns(ctx);

        rows.push(created[0]);
      }
    };

    addRow(data, klass);

    if (row._details) {
      row._details.remove();
    }

    row._details = $(rows);

    // If the children were already shown, that state should be retained
    if (row._detailsShow) {
      row._details.insertAfter(row.nTr);
    }
  };

  var __details_remove = function (api, idx) {
    var ctx = api.context;

    if (ctx.length) {
      var row = ctx[0].aoData[idx !== undefined ? idx : api[0]];

      if (row && row._details) {
        row._details.remove();

        row._detailsShow = undefined;
        row._details = undefined;
      }
    }
  };

  var __details_display = function (api, show) {
    var ctx = api.context;

    if (ctx.length && api.length) {
      var row = ctx[0].aoData[api[0]];

      if (row._details) {
        row._detailsShow = show;

        if (show) {
          row._details.insertAfter(row.nTr);
        } else {
          row._details.detach();
        }

        __details_events(ctx[0]);
      }
    }
  };

  var __details_events = function (settings) {
    var api = new _Api(settings);
    var namespace = ".dt.DT_details";
    var drawEvent = "draw" + namespace;
    var colvisEvent = "column-visibility" + namespace;
    var destroyEvent = "destroy" + namespace;
    var data = settings.aoData;

    api.off(drawEvent + " " + colvisEvent + " " + destroyEvent);

    if (_pluck(data, "_details").length > 0) {
      // On each draw, insert the required elements into the document
      api.on(drawEvent, function (e, ctx) {
        if (settings !== ctx) {
          return;
        }

        api
          .rows({ page: "current" })
          .eq(0)
          .each(function (idx) {
            // Internal data grab
            var row = data[idx];

            if (row._detailsShow) {
              row._details.insertAfter(row.nTr);
            }
          });
      });

      // Column visibility change - update the colspan
      api.on(colvisEvent, function (e, ctx, idx, vis) {
        if (settings !== ctx) {
          return;
        }

        // Update the colspan for the details rows (note, only if it already has
        // a colspan)
        var row,
          visible = _fnVisbleColumns(ctx);

        for (var i = 0, ien = data.length; i < ien; i++) {
          row = data[i];

          if (row._details) {
            row._details.children("td[colspan]").attr("colspan", visible);
          }
        }
      });

      // Table destroyed - nuke any child rows
      api.on(destroyEvent, function (e, ctx) {
        if (settings !== ctx) {
          return;
        }

        for (var i = 0, ien = data.length; i < ien; i++) {
          if (data[i]._details) {
            __details_remove(api, i);
          }
        }
      });
    }
  };

  // Strings for the method names to help minification
  var _emp = "";
  var _child_obj = _emp + "row().child";
  var _child_mth = _child_obj + "()";

  // data can be:
  //  tr
  //  string
  //  jQuery or array of any of the above
  _api_register(_child_mth, function (data, klass) {
    var ctx = this.context;

    if (data === undefined) {
      // get
      return ctx.length && this.length
        ? ctx[0].aoData[this[0]]._details
        : undefined;
    } else if (data === true) {
      // show
      this.child.show();
    } else if (data === false) {
      // remove
      __details_remove(this);
    } else if (ctx.length && this.length) {
      // set
      __details_add(ctx[0], ctx[0].aoData[this[0]], data, klass);
    }

    return this;
  });

  _api_register(
    [
      _child_obj + ".show()",
      _child_mth + ".show()", // only when `child()` was called with parameters (without
    ],
    function (show) {
      // it returns an object and this method is not executed)
      __details_display(this, true);
      return this;
    }
  );

  _api_register(
    [
      _child_obj + ".hide()",
      _child_mth + ".hide()", // only when `child()` was called with parameters (without
    ],
    function () {
      // it returns an object and this method is not executed)
      __details_display(this, false);
      return this;
    }
  );

  _api_register(
    [
      _child_obj + ".remove()",
      _child_mth + ".remove()", // only when `child()` was called with parameters (without
    ],
    function () {
      // it returns an object and this method is not executed)
      __details_remove(this);
      return this;
    }
  );

  _api_register(_child_obj + ".isShown()", function () {
    var ctx = this.context;

    if (ctx.length && this.length) {
      // _detailsShown as false or undefined will fall through to return false
      return ctx[0].aoData[this[0]]._detailsShow || false;
    }
    return false;
  });

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   * Columns
   *
   * {integer}           - column index (>=0 count from left, <0 count from right)
   * "{integer}:visIdx"  - visible column index (i.e. translate to column index)  (>=0 count from left, <0 count from right)
   * "{integer}:visible" - alias for {integer}:visIdx  (>=0 count from left, <0 count from right)
   * "{string}:name"     - column name
   * "{string}"          - jQuery selector on column header nodes
   *
   */

  // can be an array of these items, comma separated list, or an array of comma
  // separated lists

  var __re_column_selector = /^(.+):(name|visIdx|visible)$/;

  // r1 and r2 are redundant - but it means that the parameters match for the
  // iterator callback in columns().data()
  var __columnData = function (settings, column, r1, r2, rows) {
    var a = [];
    for (var row = 0, ien = rows.length; row < ien; row++) {
      a.push(_fnGetCellData(settings, rows[row], column));
    }
    return a;
  };

  var __column_selector = function (settings, selector, opts) {
    var columns = settings.aoColumns,
      names = _pluck(columns, "sName"),
      nodes = _pluck(columns, "nTh");

    var run = function (s) {
      var selInt = _intVal(s);

      // Selector - all
      if (s === "") {
        return _range(columns.length);
      }

      // Selector - index
      if (selInt !== null) {
        return [
          selInt >= 0
            ? selInt // Count from left
            : columns.length + selInt, // Count from right (+ because its a negative value)
        ];
      }

      // Selector = function
      if (typeof s === "function") {
        var rows = _selector_row_indexes(settings, opts);

        return $.map(columns, function (col, idx) {
          return s(idx, __columnData(settings, idx, 0, 0, rows), nodes[idx])
            ? idx
            : null;
        });
      }

      // jQuery or string selector
      var match = typeof s === "string" ? s.match(__re_column_selector) : "";

      if (match) {
        switch (match[2]) {
          case "visIdx":
          case "visible":
            var idx = parseInt(match[1], 10);
            // Visible index given, convert to column index
            if (idx < 0) {
              // Counting from the right
              var visColumns = $.map(columns, function (col, i) {
                return col.bVisible ? i : null;
              });
              return [visColumns[visColumns.length + idx]];
            }
            // Counting from the left
            return [_fnVisibleToColumnIndex(settings, idx)];

          case "name":
            // match by name. `names` is column index complete and in order
            return $.map(names, function (name, i) {
              return name === match[1] ? i : null;
            });

          default:
            return [];
        }
      }

      // Cell in the table body
      if (s.nodeName && s._DT_CellIndex) {
        return [s._DT_CellIndex.column];
      }

      // jQuery selector on the TH elements for the columns
      var jqResult = $(nodes)
        .filter(s)
        .map(function () {
          return $.inArray(this, nodes); // `nodes` is column index complete and in order
        })
        .toArray();

      if (jqResult.length || !s.nodeName) {
        return jqResult;
      }

      // Otherwise a node which might have a `dt-column` data attribute, or be
      // a child or such an element
      var host = $(s).closest("*[data-dt-column]");
      return host.length ? [host.data("dt-column")] : [];
    };

    return _selector_run("column", selector, run, settings, opts);
  };

  var __setColumnVis = function (settings, column, vis) {
    var cols = settings.aoColumns,
      col = cols[column],
      data = settings.aoData,
      row,
      cells,
      i,
      ien,
      tr;

    // Get
    if (vis === undefined) {
      return col.bVisible;
    }

    // Set
    // No change
    if (col.bVisible === vis) {
      return;
    }

    if (vis) {
      // Insert column
      // Need to decide if we should use appendChild or insertBefore
      var insertBefore = $.inArray(true, _pluck(cols, "bVisible"), column + 1);

      for (i = 0, ien = data.length; i < ien; i++) {
        tr = data[i].nTr;
        cells = data[i].anCells;

        if (tr) {
          // insertBefore can act like appendChild if 2nd arg is null
          tr.insertBefore(cells[column], cells[insertBefore] || null);
        }
      }
    } else {
      // Remove column
      $(_pluck(settings.aoData, "anCells", column)).detach();
    }

    // Common actions
    col.bVisible = vis;
    _fnDrawHead(settings, settings.aoHeader);
    _fnDrawHead(settings, settings.aoFooter);

    _fnSaveState(settings);
  };

  _api_register("columns()", function (selector, opts) {
    // argument shifting
    if (selector === undefined) {
      selector = "";
    } else if ($.isPlainObject(selector)) {
      opts = selector;
      selector = "";
    }

    opts = _selector_opts(opts);

    var inst = this.iterator(
      "table",
      function (settings) {
        return __column_selector(settings, selector, opts);
      },
      1
    );

    // Want argument shifting here and in _row_selector?
    inst.selector.cols = selector;
    inst.selector.opts = opts;

    return inst;
  });

  _api_registerPlural(
    "columns().header()",
    "column().header()",
    function (selector, opts) {
      return this.iterator(
        "column",
        function (settings, column) {
          return settings.aoColumns[column].nTh;
        },
        1
      );
    }
  );

  _api_registerPlural(
    "columns().footer()",
    "column().footer()",
    function (selector, opts) {
      return this.iterator(
        "column",
        function (settings, column) {
          return settings.aoColumns[column].nTf;
        },
        1
      );
    }
  );

  _api_registerPlural("columns().data()", "column().data()", function () {
    return this.iterator("column-rows", __columnData, 1);
  });

  _api_registerPlural("columns().dataSrc()", "column().dataSrc()", function () {
    return this.iterator(
      "column",
      function (settings, column) {
        return settings.aoColumns[column].mData;
      },
      1
    );
  });

  _api_registerPlural("columns().cache()", "column().cache()", function (type) {
    return this.iterator(
      "column-rows",
      function (settings, column, i, j, rows) {
        return _pluck_order(
          settings.aoData,
          rows,
          type === "search" ? "_aFilterData" : "_aSortData",
          column
        );
      },
      1
    );
  });

  _api_registerPlural("columns().nodes()", "column().nodes()", function () {
    return this.iterator(
      "column-rows",
      function (settings, column, i, j, rows) {
        return _pluck_order(settings.aoData, rows, "anCells", column);
      },
      1
    );
  });

  _api_registerPlural(
    "columns().visible()",
    "column().visible()",
    function (vis, calc) {
      var ret = this.iterator("column", function (settings, column) {
        if (vis === undefined) {
          return settings.aoColumns[column].bVisible;
        } // else
        __setColumnVis(settings, column, vis);
      });

      // Group the column visibility changes
      if (vis !== undefined) {
        // Second loop once the first is done for events
        this.iterator("column", function (settings, column) {
          _fnCallbackFire(settings, null, "column-visibility", [
            settings,
            column,
            vis,
            calc,
          ]);
        });

        if (calc === undefined || calc) {
          this.columns.adjust();
        }
      }

      return ret;
    }
  );

  _api_registerPlural(
    "columns().indexes()",
    "column().index()",
    function (type) {
      return this.iterator(
        "column",
        function (settings, column) {
          return type === "visible"
            ? _fnColumnIndexToVisible(settings, column)
            : column;
        },
        1
      );
    }
  );

  _api_register("columns.adjust()", function () {
    return this.iterator(
      "table",
      function (settings) {
        _fnAdjustColumnSizing(settings);
      },
      1
    );
  });

  _api_register("column.index()", function (type, idx) {
    if (this.context.length !== 0) {
      var ctx = this.context[0];

      if (type === "fromVisible" || type === "toData") {
        return _fnVisibleToColumnIndex(ctx, idx);
      } else if (type === "fromData" || type === "toVisible") {
        return _fnColumnIndexToVisible(ctx, idx);
      }
    }
  });

  _api_register("column()", function (selector, opts) {
    return _selector_first(this.columns(selector, opts));
  });

  var __cell_selector = function (settings, selector, opts) {
    var data = settings.aoData;
    var rows = _selector_row_indexes(settings, opts);
    var cells = _removeEmpty(_pluck_order(data, rows, "anCells"));
    var allCells = $([].concat.apply([], cells));
    var row;
    var columns = settings.aoColumns.length;
    var a, i, ien, j, o, host;

    var run = function (s) {
      var fnSelector = typeof s === "function";

      if (s === null || s === undefined || fnSelector) {
        // All cells and function selectors
        a = [];

        for (i = 0, ien = rows.length; i < ien; i++) {
          row = rows[i];

          for (j = 0; j < columns; j++) {
            o = {
              row: row,
              column: j,
            };

            if (fnSelector) {
              // Selector - function
              host = data[row];

              if (
                s(
                  o,
                  _fnGetCellData(settings, row, j),
                  host.anCells ? host.anCells[j] : null
                )
              ) {
                a.push(o);
              }
            } else {
              // Selector - all
              a.push(o);
            }
          }
        }

        return a;
      }

      // Selector - index
      if ($.isPlainObject(s)) {
        return [s];
      }

      // Selector - jQuery filtered cells
      var jqResult = allCells
        .filter(s)
        .map(function (i, el) {
          return {
            // use a new object, in case someone changes the values
            row: el._DT_CellIndex.row,
            column: el._DT_CellIndex.column,
          };
        })
        .toArray();

      if (jqResult.length || !s.nodeName) {
        return jqResult;
      }

      // Otherwise the selector is a node, and there is one last option - the
      // element might be a child of an element which has dt-row and dt-column
      // data attributes
      host = $(s).closest("*[data-dt-row]");
      return host.length
        ? [
            {
              row: host.data("dt-row"),
              column: host.data("dt-column"),
            },
          ]
        : [];
    };

    return _selector_run("cell", selector, run, settings, opts);
  };

  _api_register("cells()", function (rowSelector, columnSelector, opts) {
    // Argument shifting
    if ($.isPlainObject(rowSelector)) {
      // Indexes
      if (rowSelector.row === undefined) {
        // Selector options in first parameter
        opts = rowSelector;
        rowSelector = null;
      } else {
        // Cell index objects in first parameter
        opts = columnSelector;
        columnSelector = null;
      }
    }
    if ($.isPlainObject(columnSelector)) {
      opts = columnSelector;
      columnSelector = null;
    }

    // Cell selector
    if (columnSelector === null || columnSelector === undefined) {
      return this.iterator("table", function (settings) {
        return __cell_selector(settings, rowSelector, _selector_opts(opts));
      });
    }

    // Row + column selector
    var columns = this.columns(columnSelector, opts);
    var rows = this.rows(rowSelector, opts);
    var a, i, ien, j, jen;

    var cells = this.iterator(
      "table",
      function (settings, idx) {
        a = [];

        for (i = 0, ien = rows[idx].length; i < ien; i++) {
          for (j = 0, jen = columns[idx].length; j < jen; j++) {
            a.push({
              row: rows[idx][i],
              column: columns[idx][j],
            });
          }
        }

        return a;
      },
      1
    );

    $.extend(cells.selector, {
      cols: columnSelector,
      rows: rowSelector,
      opts: opts,
    });

    return cells;
  });

  _api_registerPlural("cells().nodes()", "cell().node()", function () {
    return this.iterator(
      "cell",
      function (settings, row, column) {
        var data = settings.aoData[row];

        return data && data.anCells ? data.anCells[column] : undefined;
      },
      1
    );
  });

  _api_register("cells().data()", function () {
    return this.iterator(
      "cell",
      function (settings, row, column) {
        return _fnGetCellData(settings, row, column);
      },
      1
    );
  });

  _api_registerPlural("cells().cache()", "cell().cache()", function (type) {
    type = type === "search" ? "_aFilterData" : "_aSortData";

    return this.iterator(
      "cell",
      function (settings, row, column) {
        return settings.aoData[row][type][column];
      },
      1
    );
  });

  _api_registerPlural("cells().render()", "cell().render()", function (type) {
    return this.iterator(
      "cell",
      function (settings, row, column) {
        return _fnGetCellData(settings, row, column, type);
      },
      1
    );
  });

  _api_registerPlural("cells().indexes()", "cell().index()", function () {
    return this.iterator(
      "cell",
      function (settings, row, column) {
        return {
          row: row,
          column: column,
          columnVisible: _fnColumnIndexToVisible(settings, column),
        };
      },
      1
    );
  });

  _api_registerPlural(
    "cells().invalidate()",
    "cell().invalidate()",
    function (src) {
      return this.iterator("cell", function (settings, row, column) {
        _fnInvalidate(settings, row, src, column);
      });
    }
  );

  _api_register("cell()", function (rowSelector, columnSelector, opts) {
    return _selector_first(this.cells(rowSelector, columnSelector, opts));
  });

  _api_register("cell().data()", function (data) {
    var ctx = this.context;
    var cell = this[0];

    if (data === undefined) {
      // Get
      return ctx.length && cell.length
        ? _fnGetCellData(ctx[0], cell[0].row, cell[0].column)
        : undefined;
    }

    // Set
    _fnSetCellData(ctx[0], cell[0].row, cell[0].column, data);
    _fnInvalidate(ctx[0], cell[0].row, "data", cell[0].column);

    return this;
  });

  /**
   * Get current ordering (sorting) that has been applied to the table.
   *
   * @returns {array} 2D array containing the sorting information for the first
   *   table in the current context. Each element in the parent array represents
   *   a column being sorted upon (i.e. multi-sorting with two columns would have
   *   2 inner arrays). The inner arrays may have 2 or 3 elements. The first is
   *   the column index that the sorting condition applies to, the second is the
   *   direction of the sort (`desc` or `asc`) and, optionally, the third is the
   *   index of the sorting order from the `column.sorting` initialisation array.
   */ /**
   * Set the ordering for the table.
   *
   * @param {integer} order Column index to sort upon.
   * @param {string} direction Direction of the sort to be applied (`asc` or `desc`)
   * @returns {DataTables.Api} this
   */ /**
   * Set the ordering for the table.
   *
   * @param {array} order 1D array of sorting information to be applied.
   * @param {array} [...] Optional additional sorting conditions
   * @returns {DataTables.Api} this
   */ /**
   * Set the ordering for the table.
   *
   * @param {array} order 2D array of sorting information to be applied.
   * @returns {DataTables.Api} this
   */ _api_register("order()", function (order, dir) {
    var ctx = this.context;

    if (order === undefined) {
      // get
      return ctx.length !== 0 ? ctx[0].aaSorting : undefined;
    }

    // set
    if (typeof order === "number") {
      // Simple column / direction passed in
      order = [[order, dir]];
    } else if (order.length && !$.isArray(order[0])) {
      // Arguments passed in (list of 1D arrays)
      order = Array.prototype.slice.call(arguments);
    }
    // otherwise a 2D array was passed in

    return this.iterator("table", function (settings) {
      settings.aaSorting = order.slice();
    });
  });

  /**
   * Attach a sort listener to an element for a given column
   *
   * @param {node|jQuery|string} node Identifier for the element(s) to attach the
   *   listener to. This can take the form of a single DOM node, a jQuery
   *   collection of nodes or a jQuery selector which will identify the node(s).
   * @param {integer} column the column that a click on this node will sort on
   * @param {function} [callback] callback function when sort is run
   * @returns {DataTables.Api} this
   */
  _api_register("order.listener()", function (node, column, callback) {
    return this.iterator("table", function (settings) {
      _fnSortAttachListener(settings, node, column, callback);
    });
  });

  _api_register("order.fixed()", function (set) {
    if (!set) {
      var ctx = this.context;
      var fixed = ctx.length ? ctx[0].aaSortingFixed : undefined;

      return $.isArray(fixed) ? { pre: fixed } : fixed;
    }

    return this.iterator("table", function (settings) {
      settings.aaSortingFixed = $.extend(true, {}, set);
    });
  });

  // Order by the selected column(s)
  _api_register(["columns().order()", "column().order()"], function (dir) {
    var that = this;

    return this.iterator("table", function (settings, i) {
      var sort = [];

      $.each(that[i], function (j, col) {
        sort.push([col, dir]);
      });

      settings.aaSorting = sort;
    });
  });

  _api_register("search()", function (input, regex, smart, caseInsen) {
    var ctx = this.context;

    if (input === undefined) {
      // get
      return ctx.length !== 0 ? ctx[0].oPreviousSearch.sSearch : undefined;
    }

    // set
    return this.iterator("table", function (settings) {
      if (!settings.oFeatures.bFilter) {
        return;
      }

      _fnFilterComplete(
        settings,
        $.extend({}, settings.oPreviousSearch, {
          sSearch: input + "",
          bRegex: regex === null ? false : regex,
          bSmart: smart === null ? true : smart,
          bCaseInsensitive: caseInsen === null ? true : caseInsen,
        }),
        1
      );
    });
  });

  _api_registerPlural(
    "columns().search()",
    "column().search()",
    function (input, regex, smart, caseInsen) {
      return this.iterator("column", function (settings, column) {
        var preSearch = settings.aoPreSearchCols;

        if (input === undefined) {
          // get
          return preSearch[column].sSearch;
        }

        // set
        if (!settings.oFeatures.bFilter) {
          return;
        }

        $.extend(preSearch[column], {
          sSearch: input + "",
          bRegex: regex === null ? false : regex,
          bSmart: smart === null ? true : smart,
          bCaseInsensitive: caseInsen === null ? true : caseInsen,
        });

        _fnFilterComplete(settings, settings.oPreviousSearch, 1);
      });
    }
  );

  /*
   * State API methods
   */

  _api_register("state()", function () {
    return this.context.length ? this.context[0].oSavedState : null;
  });

  _api_register("state.clear()", function () {
    return this.iterator("table", function (settings) {
      // Save an empty object
      settings.fnStateSaveCallback.call(settings.oInstance, settings, {});
    });
  });

  _api_register("state.loaded()", function () {
    return this.context.length ? this.context[0].oLoadedState : null;
  });

  _api_register("state.save()", function () {
    return this.iterator("table", function (settings) {
      _fnSaveState(settings);
    });
  });

  /**
   * Provide a common method for plug-ins to check the version of DataTables being
   * used, in order to ensure compatibility.
   *
   *  @param {string} version Version string to check for, in the format "X.Y.Z".
   *    Note that the formats "X" and "X.Y" are also acceptable.
   *  @returns {boolean} true if this version of DataTables is greater or equal to
   *    the required version, or false if this version of DataTales is not
   *    suitable
   *  @static
   *  @dtopt API-Static
   *
   *  @example
   *    alert( $.fn.dataTable.versionCheck( '1.9.0' ) );
   */
  DataTable.versionCheck = DataTable.fnVersionCheck = function (version) {
    var aThis = DataTable.version.split(".");
    var aThat = version.split(".");
    var iThis, iThat;

    for (var i = 0, iLen = aThat.length; i < iLen; i++) {
      iThis = parseInt(aThis[i], 10) || 0;
      iThat = parseInt(aThat[i], 10) || 0;

      // Parts are the same, keep comparing
      if (iThis === iThat) {
        continue;
      }

      // Parts are different, return immediately
      return iThis > iThat;
    }

    return true;
  };

  /**
   * Check if a `<table>` node is a DataTable table already or not.
   *
   *  @param {node|jquery|string} table Table node, jQuery object or jQuery
   *      selector for the table to test. Note that if more than more than one
   *      table is passed on, only the first will be checked
   *  @returns {boolean} true the table given is a DataTable, or false otherwise
   *  @static
   *  @dtopt API-Static
   *
   *  @example
   *    if ( ! $.fn.DataTable.isDataTable( '#example' ) ) {
   *      $('#example').dataTable();
   *    }
   */
  DataTable.isDataTable = DataTable.fnIsDataTable = function (table) {
    var t = $(table).get(0);
    var is = false;

    $.each(DataTable.settings, function (i, o) {
      var head = o.nScrollHead ? $("table", o.nScrollHead)[0] : null;
      var foot = o.nScrollFoot ? $("table", o.nScrollFoot)[0] : null;

      if (o.nTable === t || head === t || foot === t) {
        is = true;
      }
    });

    return is;
  };

  /**
   * Get all DataTable tables that have been initialised - optionally you can
   * select to get only currently visible tables.
   *
   *  @param {boolean} [visible=false] Flag to indicate if you want all (default)
   *    or visible tables only.
   *  @returns {array} Array of `table` nodes (not DataTable instances) which are
   *    DataTables
   *  @static
   *  @dtopt API-Static
   *
   *  @example
   *    $.each( $.fn.dataTable.tables(true), function () {
   *      $(table).DataTable().columns.adjust();
   *    } );
   */
  DataTable.tables = DataTable.fnTables = function (visible) {
    var api = false;

    if ($.isPlainObject(visible)) {
      api = visible.api;
      visible = visible.visible;
    }

    var a = $.map(DataTable.settings, function (o) {
      if (!visible || (visible && $(o.nTable).is(":visible"))) {
        return o.nTable;
      }
    });

    return api ? new _Api(a) : a;
  };

  /**
   * Convert from camel case parameters to Hungarian notation. This is made public
   * for the extensions to provide the same ability as DataTables core to accept
   * either the 1.9 style Hungarian notation, or the 1.10+ style camelCase
   * parameters.
   *
   *  @param {object} src The model object which holds all parameters that can be
   *    mapped.
   *  @param {object} user The object to convert from camel case to Hungarian.
   *  @param {boolean} force When set to `true`, properties which already have a
   *    Hungarian value in the `user` object will be overwritten. Otherwise they
   *    won't be.
   */
  DataTable.camelToHungarian = _fnCamelToHungarian;

  /**
   *
   */
  _api_register("$()", function (selector, opts) {
    var rows = this.rows(opts).nodes(), // Get all rows
      jqRows = $(rows);

    return $(
      [].concat(
        jqRows.filter(selector).toArray(),
        jqRows.find(selector).toArray()
      )
    );
  });

  // jQuery functions to operate on the tables
  $.each(["on", "one", "off"], function (i, key) {
    _api_register(key + "()", function (/* event, handler */) {
      var args = Array.prototype.slice.call(arguments);

      // Add the `dt` namespace automatically if it isn't already present
      if (!args[0].match(/\.dt\b/)) {
        args[0] += ".dt";
      }

      var inst = $(this.tables().nodes());
      inst[key].apply(inst, args);
      return this;
    });
  });

  _api_register("clear()", function () {
    return this.iterator("table", function (settings) {
      _fnClearTable(settings);
    });
  });

  _api_register("settings()", function () {
    return new _Api(this.context, this.context);
  });

  _api_register("init()", function () {
    var ctx = this.context;
    return ctx.length ? ctx[0].oInit : null;
  });

  _api_register("data()", function () {
    return this.iterator("table", function (settings) {
      return _pluck(settings.aoData, "_aData");
    }).flatten();
  });

  _api_register("destroy()", function (remove) {
    remove = remove || false;

    return this.iterator("table", function (settings) {
      var orig = settings.nTableWrapper.parentNode;
      var classes = settings.oClasses;
      var table = settings.nTable;
      var tbody = settings.nTBody;
      var thead = settings.nTHead;
      var tfoot = settings.nTFoot;
      var jqTable = $(table);
      var jqTbody = $(tbody);
      var jqWrapper = $(settings.nTableWrapper);
      var rows = $.map(settings.aoData, function (r) {
        return r.nTr;
      });
      var i, ien;

      // Flag to note that the table is currently being destroyed - no action
      // should be taken
      settings.bDestroying = true;

      // Fire off the destroy callbacks for plug-ins etc
      _fnCallbackFire(settings, "aoDestroyCallback", "destroy", [settings]);

      // If not being removed from the document, make all columns visible
      if (!remove) {
        new _Api(settings).columns().visible(true);
      }

      // Blitz all `DT` namespaced events (these are internal events, the
      // lowercase, `dt` events are user subscribed and they are responsible
      // for removing them
      jqWrapper.unbind(".DT").find(":not(tbody *)").unbind(".DT");
      $(window).unbind(".DT-" + settings.sInstance);

      // When scrolling we had to break the table up - restore it
      if (table != thead.parentNode) {
        jqTable.children("thead").detach();
        jqTable.append(thead);
      }

      if (tfoot && table != tfoot.parentNode) {
        jqTable.children("tfoot").detach();
        jqTable.append(tfoot);
      }

      settings.aaSorting = [];
      settings.aaSortingFixed = [];
      _fnSortingClasses(settings);

      $(rows).removeClass(settings.asStripeClasses.join(" "));

      $("th, td", thead).removeClass(
        classes.sSortable +
          " " +
          classes.sSortableAsc +
          " " +
          classes.sSortableDesc +
          " " +
          classes.sSortableNone
      );

      if (settings.bJUI) {
        $(
          "th span." + classes.sSortIcon + ", td span." + classes.sSortIcon,
          thead
        ).detach();
        $("th, td", thead).each(function () {
          var wrapper = $("div." + classes.sSortJUIWrapper, this);
          $(this).append(wrapper.contents());
          wrapper.detach();
        });
      }

      // Add the TR elements back into the table in their original order
      jqTbody.children().detach();
      jqTbody.append(rows);

      // Remove the DataTables generated nodes, events and classes
      var removedMethod = remove ? "remove" : "detach";
      jqTable[removedMethod]();
      jqWrapper[removedMethod]();

      // If we need to reattach the table to the document
      if (!remove && orig) {
        // insertBefore acts like appendChild if !arg[1]
        orig.insertBefore(table, settings.nTableReinsertBefore);

        // Restore the width of the original table - was read from the style property,
        // so we can restore directly to that
        jqTable
          .css("width", settings.sDestroyWidth)
          .removeClass(classes.sTable);

        // If the were originally stripe classes - then we add them back here.
        // Note this is not fool proof (for example if not all rows had stripe
        // classes - but it's a good effort without getting carried away
        ien = settings.asDestroyStripes.length;

        if (ien) {
          jqTbody.children().each(function (i) {
            $(this).addClass(settings.asDestroyStripes[i % ien]);
          });
        }
      }

      /* Remove the settings object from the settings array */
      var idx = $.inArray(settings, DataTable.settings);
      if (idx !== -1) {
        DataTable.settings.splice(idx, 1);
      }
    });
  });

  // Add the `every()` method for rows, columns and cells in a compact form
  $.each(["column", "row", "cell"], function (i, type) {
    _api_register(type + "s().every()", function (fn) {
      var opts = this.selector.opts;
      var api = this;

      return this.iterator(type, function (settings, arg1, arg2, arg3, arg4) {
        // Rows and columns:
        //  arg1 - index
        //  arg2 - table counter
        //  arg3 - loop counter
        //  arg4 - undefined
        // Cells:
        //  arg1 - row index
        //  arg2 - column index
        //  arg3 - table counter
        //  arg4 - loop counter
        fn.call(
          api[type](
            arg1,
            type === "cell" ? arg2 : opts,
            type === "cell" ? opts : undefined
          ),
          arg1,
          arg2,
          arg3,
          arg4
        );
      });
    });
  });

  // i18n method for extensions to be able to use the language object from the
  // DataTable
  _api_register("i18n()", function (token, def, plural) {
    var ctx = this.context[0];
    var resolved = _fnGetObjectDataFn(token)(ctx.oLanguage);

    if (resolved === undefined) {
      resolved = def;
    }

    if (plural !== undefined && $.isPlainObject(resolved)) {
      resolved = resolved[plural] !== undefined ? resolved[plural] : resolved._;
    }

    return resolved.replace("%d", plural); // nb: plural might be undefined,
  });
  /**
   * Version string for plug-ins to check compatibility. Allowed format is
   * `a.b.c-d` where: a:int, b:int, c:int, d:string(dev|beta|alpha). `d` is used
   * only for non-release builds. See http://semver.org/ for more information.
   *  @member
   *  @type string
   *  @default Version number
   */
  DataTable.version = "1.10.12";

  /**
   * Private data store, containing all of the settings objects that are
   * created for the tables on a given page.
   *
   * Note that the `DataTable.settings` object is aliased to
   * `jQuery.fn.dataTableExt` through which it may be accessed and
   * manipulated, or `jQuery.fn.dataTable.settings`.
   *  @member
   *  @type array
   *  @default []
   *  @private
   */
  DataTable.settings = [];

  /**
   * Object models container, for the various models that DataTables has
   * available to it. These models define the objects that are used to hold
   * the active state and configuration of the table.
   *  @namespace
   */
  DataTable.models = {};

  /**
   * Template object for the way in which DataTables holds information about
   * search information for the global filter and individual column filters.
   *  @namespace
   */
  DataTable.models.oSearch = {
    /**
     * Flag to indicate if the filtering should be case insensitive or not
     *  @type boolean
     *  @default true
     */
    bCaseInsensitive: true,

    /**
     * Applied search term
     *  @type string
     *  @default <i>Empty string</i>
     */
    sSearch: "",

    /**
     * Flag to indicate if the search term should be interpreted as a
     * regular expression (true) or not (false) and therefore and special
     * regex characters escaped.
     *  @type boolean
     *  @default false
     */
    bRegex: false,

    /**
     * Flag to indicate if DataTables is to use its smart filtering or not.
     *  @type boolean
     *  @default true
     */
    bSmart: true,
  };

  /**
   * Template object for the way in which DataTables holds information about
   * each individual row. This is the object format used for the settings
   * aoData array.
   *  @namespace
   */
  DataTable.models.oRow = {
    /**
     * TR element for the row
     *  @type node
     *  @default null
     */
    nTr: null,

    /**
     * Array of TD elements for each row. This is null until the row has been
     * created.
     *  @type array nodes
     *  @default []
     */
    anCells: null,

    /**
     * Data object from the original data source for the row. This is either
     * an array if using the traditional form of DataTables, or an object if
     * using mData options. The exact type will depend on the passed in
     * data from the data source, or will be an array if using DOM a data
     * source.
     *  @type array|object
     *  @default []
     */
    _aData: [],

    /**
     * Sorting data cache - this array is ostensibly the same length as the
     * number of columns (although each index is generated only as it is
     * needed), and holds the data that is used for sorting each column in the
     * row. We do this cache generation at the start of the sort in order that
     * the formatting of the sort data need be done only once for each cell
     * per sort. This array should not be read from or written to by anything
     * other than the master sorting methods.
     *  @type array
     *  @default null
     *  @private
     */
    _aSortData: null,

    /**
     * Per cell filtering data cache. As per the sort data cache, used to
     * increase the performance of the filtering in DataTables
     *  @type array
     *  @default null
     *  @private
     */
    _aFilterData: null,

    /**
     * Filtering data cache. This is the same as the cell filtering cache, but
     * in this case a string rather than an array. This is easily computed with
     * a join on `_aFilterData`, but is provided as a cache so the join isn't
     * needed on every search (memory traded for performance)
     *  @type array
     *  @default null
     *  @private
     */
    _sFilterRow: null,

    /**
     * Cache of the class name that DataTables has applied to the row, so we
     * can quickly look at this variable rather than needing to do a DOM check
     * on className for the nTr property.
     *  @type string
     *  @default <i>Empty string</i>
     *  @private
     */
    _sRowStripe: "",

    /**
     * Denote if the original data source was from the DOM, or the data source
     * object. This is used for invalidating data, so DataTables can
     * automatically read data from the original source, unless uninstructed
     * otherwise.
     *  @type string
     *  @default null
     *  @private
     */
    src: null,

    /**
     * Index in the aoData array. This saves an indexOf lookup when we have the
     * object, but want to know the index
     *  @type integer
     *  @default -1
     *  @private
     */
    idx: -1,
  };

  /**
   * Template object for the column information object in DataTables. This object
   * is held in the settings aoColumns array and contains all the information that
   * DataTables needs about each individual column.
   *
   * Note that this object is related to {@link DataTable.defaults.column}
   * but this one is the internal data store for DataTables's cache of columns.
   * It should NOT be manipulated outside of DataTables. Any configuration should
   * be done through the initialisation options.
   *  @namespace
   */
  DataTable.models.oColumn = {
    /**
     * Column index. This could be worked out on-the-fly with $.inArray, but it
     * is faster to just hold it as a variable
     *  @type integer
     *  @default null
     */
    idx: null,

    /**
     * A list of the columns that sorting should occur on when this column
     * is sorted. That this property is an array allows multi-column sorting
     * to be defined for a column (for example first name / last name columns
     * would benefit from this). The values are integers pointing to the
     * columns to be sorted on (typically it will be a single integer pointing
     * at itself, but that doesn't need to be the case).
     *  @type array
     */
    aDataSort: null,

    /**
     * Define the sorting directions that are applied to the column, in sequence
     * as the column is repeatedly sorted upon - i.e. the first value is used
     * as the sorting direction when the column if first sorted (clicked on).
     * Sort it again (click again) and it will move on to the next index.
     * Repeat until loop.
     *  @type array
     */
    asSorting: null,

    /**
     * Flag to indicate if the column is searchable, and thus should be included
     * in the filtering or not.
     *  @type boolean
     */
    bSearchable: null,

    /**
     * Flag to indicate if the column is sortable or not.
     *  @type boolean
     */
    bSortable: null,

    /**
     * Flag to indicate if the column is currently visible in the table or not
     *  @type boolean
     */
    bVisible: null,

    /**
     * Store for manual type assignment using the `column.type` option. This
     * is held in store so we can manipulate the column's `sType` property.
     *  @type string
     *  @default null
     *  @private
     */
    _sManualType: null,

    /**
     * Flag to indicate if HTML5 data attributes should be used as the data
     * source for filtering or sorting. True is either are.
     *  @type boolean
     *  @default false
     *  @private
     */
    _bAttrSrc: false,

    /**
     * Developer definable function that is called whenever a cell is created (Ajax source,
     * etc) or processed for input (DOM source). This can be used as a compliment to mRender
     * allowing you to modify the DOM element (add background colour for example) when the
     * element is available.
     *  @type function
     *  @param {element} nTd The TD node that has been created
     *  @param {*} sData The Data for the cell
     *  @param {array|object} oData The data for the whole row
     *  @param {int} iRow The row index for the aoData data store
     *  @default null
     */
    fnCreatedCell: null,

    /**
     * Function to get data from a cell in a column. You should <b>never</b>
     * access data directly through _aData internally in DataTables - always use
     * the method attached to this property. It allows mData to function as
     * required. This function is automatically assigned by the column
     * initialisation method
     *  @type function
     *  @param {array|object} oData The data array/object for the array
     *    (i.e. aoData[]._aData)
     *  @param {string} sSpecific The specific data type you want to get -
     *    'display', 'type' 'filter' 'sort'
     *  @returns {*} The data for the cell from the given row's data
     *  @default null
     */
    fnGetData: null,

    /**
     * Function to set data for a cell in the column. You should <b>never</b>
     * set the data directly to _aData internally in DataTables - always use
     * this method. It allows mData to function as required. This function
     * is automatically assigned by the column initialisation method
     *  @type function
     *  @param {array|object} oData The data array/object for the array
     *    (i.e. aoData[]._aData)
     *  @param {*} sValue Value to set
     *  @default null
     */
    fnSetData: null,

    /**
     * Property to read the value for the cells in the column from the data
     * source array / object. If null, then the default content is used, if a
     * function is given then the return from the function is used.
     *  @type function|int|string|null
     *  @default null
     */
    mData: null,

    /**
     * Partner property to mData which is used (only when defined) to get
     * the data - i.e. it is basically the same as mData, but without the
     * 'set' option, and also the data fed to it is the result from mData.
     * This is the rendering method to match the data method of mData.
     *  @type function|int|string|null
     *  @default null
     */
    mRender: null,

    /**
     * Unique header TH/TD element for this column - this is what the sorting
     * listener is attached to (if sorting is enabled.)
     *  @type node
     *  @default null
     */
    nTh: null,

    /**
     * Unique footer TH/TD element for this column (if there is one). Not used
     * in DataTables as such, but can be used for plug-ins to reference the
     * footer for each column.
     *  @type node
     *  @default null
     */
    nTf: null,

    /**
     * The class to apply to all TD elements in the table's TBODY for the column
     *  @type string
     *  @default null
     */
    sClass: null,

    /**
     * When DataTables calculates the column widths to assign to each column,
     * it finds the longest string in each column and then constructs a
     * temporary table and reads the widths from that. The problem with this
     * is that "mmm" is much wider then "iiii", but the latter is a longer
     * string - thus the calculation can go wrong (doing it properly and putting
     * it into an DOM object and measuring that is horribly(!) slow). Thus as
     * a "work around" we provide this option. It will append its value to the
     * text that is found to be the longest string for the column - i.e. padding.
     *  @type string
     */
    sContentPadding: null,

    /**
     * Allows a default value to be given for a column's data, and will be used
     * whenever a null data source is encountered (this can be because mData
     * is set to null, or because the data source itself is null).
     *  @type string
     *  @default null
     */
    sDefaultContent: null,

    /**
     * Name for the column, allowing reference to the column by name as well as
     * by index (needs a lookup to work by name).
     *  @type string
     */
    sName: null,

    /**
     * Custom sorting data type - defines which of the available plug-ins in
     * afnSortData the custom sorting will use - if any is defined.
     *  @type string
     *  @default std
     */
    sSortDataType: "std",

    /**
     * Class to be applied to the header element when sorting on this column
     *  @type string
     *  @default null
     */
    sSortingClass: null,

    /**
     * Class to be applied to the header element when sorting on this column -
     * when jQuery UI theming is used.
     *  @type string
     *  @default null
     */
    sSortingClassJUI: null,

    /**
     * Title of the column - what is seen in the TH element (nTh).
     *  @type string
     */
    sTitle: null,

    /**
     * Column sorting and filtering type
     *  @type string
     *  @default null
     */
    sType: null,

    /**
     * Width of the column
     *  @type string
     *  @default null
     */
    sWidth: null,

    /**
     * Width of the column when it was first "encountered"
     *  @type string
     *  @default null
     */
    sWidthOrig: null,
  };

  /*
   * Developer note: The properties of the object below are given in Hungarian
   * notation, that was used as the interface for DataTables prior to v1.10, however
   * from v1.10 onwards the primary interface is camel case. In order to avoid
   * breaking backwards compatibility utterly with this change, the Hungarian
   * version is still, internally the primary interface, but is is not documented
   * - hence the @name tags in each doc comment. This allows a Javascript function
   * to create a map from Hungarian notation to camel case (going the other direction
   * would require each property to be listed, which would at around 3K to the size
   * of DataTables, while this method is about a 0.5K hit.
   *
   * Ultimately this does pave the way for Hungarian notation to be dropped
   * completely, but that is a massive amount of work and will break current
   * installs (therefore is on-hold until v2).
   */

  /**
   * Initialisation options that can be given to DataTables at initialisation
   * time.
   *  @namespace
   */
  DataTable.defaults = {
    /**
     * An array of data to use for the table, passed in at initialisation which
     * will be used in preference to any data which is already in the DOM. This is
     * particularly useful for constructing tables purely in Javascript, for
     * example with a custom Ajax call.
     *  @type array
     *  @default null
     *
     *  @dtopt Option
     *  @name DataTable.defaults.data
     *
     *  @example
     *    // Using a 2D array data source
     *    $(document).ready( function () {
     *      $('#example').dataTable( {
     *        "data": [
     *          ['Trident', 'Internet Explorer 4.0', 'Win 95+', 4, 'X'],
     *          ['Trident', 'Internet Explorer 5.0', 'Win 95+', 5, 'C'],
     *        ],
     *        "columns": [
     *          { "title": "Engine" },
     *          { "title": "Browser" },
     *          { "title": "Platform" },
     *          { "title": "Version" },
     *          { "title": "Grade" }
     *        ]
     *      } );
     *    } );
     *
     *  @example
     *    // Using an array of objects as a data source (`data`)
     *    $(document).ready( function () {
     *      $('#example').dataTable( {
     *        "data": [
     *          {
     *            "engine":   "Trident",
     *            "browser":  "Internet Explorer 4.0",
     *            "platform": "Win 95+",
     *            "version":  4,
     *            "grade":    "X"
     *          },
     *          {
     *            "engine":   "Trident",
     *            "browser":  "Internet Explorer 5.0",
     *            "platform": "Win 95+",
     *            "version":  5,
     *            "grade":    "C"
     *          }
     *        ],
     *        "columns": [
     *          { "title": "Engine",   "data": "engine" },
     *          { "title": "Browser",  "data": "browser" },
     *          { "title": "Platform", "data": "platform" },
     *          { "title": "Version",  "data": "version" },
     *          { "title": "Grade",    "data": "grade" }
     *        ]
     *      } );
     *    } );
     */
    aaData: null,

    /**
     * If ordering is enabled, then DataTables will perform a first pass sort on
     * initialisation. You can define which column(s) the sort is performed
     * upon, and the sorting direction, with this variable. The `sorting` array
     * should contain an array for each column to be sorted initially containing
     * the column's index and a direction string ('asc' or 'desc').
     *  @type array
     *  @default [[0,'asc']]
     *
     *  @dtopt Option
     *  @name DataTable.defaults.order
     *
     *  @example
     *    // Sort by 3rd column first, and then 4th column
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "order": [[2,'asc'], [3,'desc']]
     *      } );
     *    } );
     *
     *    // No initial sorting
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "order": []
     *      } );
     *    } );
     */
    aaSorting: [[0, "asc"]],

    /**
     * This parameter is basically identical to the `sorting` parameter, but
     * cannot be overridden by user interaction with the table. What this means
     * is that you could have a column (visible or hidden) which the sorting
     * will always be forced on first - any sorting after that (from the user)
     * will then be performed as required. This can be useful for grouping rows
     * together.
     *  @type array
     *  @default null
     *
     *  @dtopt Option
     *  @name DataTable.defaults.orderFixed
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "orderFixed": [[0,'asc']]
     *      } );
     *    } )
     */
    aaSortingFixed: [],

    /**
     * DataTables can be instructed to load data to display in the table from a
     * Ajax source. This option defines how that Ajax call is made and where to.
     *
     * The `ajax` property has three different modes of operation, depending on
     * how it is defined. These are:
     *
     * * `string` - Set the URL from where the data should be loaded from.
     * * `object` - Define properties for `jQuery.ajax`.
     * * `function` - Custom data get function
     *
     * `string`
     * --------
     *
     * As a string, the `ajax` property simply defines the URL from which
     * DataTables will load data.
     *
     * `object`
     * --------
     *
     * As an object, the parameters in the object are passed to
     * [jQuery.ajax](http://api.jquery.com/jQuery.ajax/) allowing fine control
     * of the Ajax request. DataTables has a number of default parameters which
     * you can override using this option. Please refer to the jQuery
     * documentation for a full description of the options available, although
     * the following parameters provide additional options in DataTables or
     * require special consideration:
     *
     * * `data` - As with jQuery, `data` can be provided as an object, but it
     *   can also be used as a function to manipulate the data DataTables sends
     *   to the server. The function takes a single parameter, an object of
     *   parameters with the values that DataTables has readied for sending. An
     *   object may be returned which will be merged into the DataTables
     *   defaults, or you can add the items to the object that was passed in and
     *   not return anything from the function. This supersedes `fnServerParams`
     *   from DataTables 1.9-.
     *
     * * `dataSrc` - By default DataTables will look for the property `data` (or
     *   `aaData` for compatibility with DataTables 1.9-) when obtaining data
     *   from an Ajax source or for server-side processing - this parameter
     *   allows that property to be changed. You can use Javascript dotted
     *   object notation to get a data source for multiple levels of nesting, or
     *   it my be used as a function. As a function it takes a single parameter,
     *   the JSON returned from the server, which can be manipulated as
     *   required, with the returned value being that used by DataTables as the
     *   data source for the table. This supersedes `sAjaxDataProp` from
     *   DataTables 1.9-.
     *
     * * `success` - Should not be overridden it is used internally in
     *   DataTables. To manipulate / transform the data returned by the server
     *   use `ajax.dataSrc`, or use `ajax` as a function (see below).
     *
     * `function`
     * ----------
     *
     * As a function, making the Ajax call is left up to yourself allowing
     * complete control of the Ajax request. Indeed, if desired, a method other
     * than Ajax could be used to obtain the required data, such as Web storage
     * or an AIR database.
     *
     * The function is given four parameters and no return is required. The
     * parameters are:
     *
     * 1. _object_ - Data to send to the server
     * 2. _function_ - Callback function that must be executed when the required
     *    data has been obtained. That data should be passed into the callback
     *    as the only parameter
     * 3. _object_ - DataTables settings object for the table
     *
     * Note that this supersedes `fnServerData` from DataTables 1.9-.
     *
     *  @type string|object|function
     *  @default null
     *
     *  @dtopt Option
     *  @name DataTable.defaults.ajax
     *  @since 1.10.0
     *
     * @example
     *   // Get JSON data from a file via Ajax.
     *   // Note DataTables expects data in the form `{ data: [ ...data... ] }` by default).
     *   $('#example').dataTable( {
     *     "ajax": "data.json"
     *   } );
     *
     * @example
     *   // Get JSON data from a file via Ajax, using `dataSrc` to change
     *   // `data` to `tableData` (i.e. `{ tableData: [ ...data... ] }`)
     *   $('#example').dataTable( {
     *     "ajax": {
     *       "url": "data.json",
     *       "dataSrc": "tableData"
     *     }
     *   } );
     *
     * @example
     *   // Get JSON data from a file via Ajax, using `dataSrc` to read data
     *   // from a plain array rather than an array in an object
     *   $('#example').dataTable( {
     *     "ajax": {
     *       "url": "data.json",
     *       "dataSrc": ""
     *     }
     *   } );
     *
     * @example
     *   // Manipulate the data returned from the server - add a link to data
     *   // (note this can, should, be done using `render` for the column - this
     *   // is just a simple example of how the data can be manipulated).
     *   $('#example').dataTable( {
     *     "ajax": {
     *       "url": "data.json",
     *       "dataSrc": function ( json ) {
     *         for ( var i=0, ien=json.length ; i<ien ; i++ ) {
     *           json[i][0] = '<a href="/message/'+json[i][0]+'>View message</a>';
     *         }
     *         return json;
     *       }
     *     }
     *   } );
     *
     * @example
     *   // Add data to the request
     *   $('#example').dataTable( {
     *     "ajax": {
     *       "url": "data.json",
     *       "data": function ( d ) {
     *         return {
     *           "extra_search": $('#extra').val()
     *         };
     *       }
     *     }
     *   } );
     *
     * @example
     *   // Send request as POST
     *   $('#example').dataTable( {
     *     "ajax": {
     *       "url": "data.json",
     *       "type": "POST"
     *     }
     *   } );
     *
     * @example
     *   // Get the data from localStorage (could interface with a form for
     *   // adding, editing and removing rows).
     *   $('#example').dataTable( {
     *     "ajax": function (data, callback, settings) {
     *       callback(
     *         JSON.parse( localStorage.getItem('dataTablesData') )
     *       );
     *     }
     *   } );
     */
    ajax: null,

    /**
     * This parameter allows you to readily specify the entries in the length drop
     * down menu that DataTables shows when pagination is enabled. It can be
     * either a 1D array of options which will be used for both the displayed
     * option and the value, or a 2D array which will use the array in the first
     * position as the value, and the array in the second position as the
     * displayed options (useful for language strings such as 'All').
     *
     * Note that the `pageLength` property will be automatically set to the
     * first value given in this array, unless `pageLength` is also provided.
     *  @type array
     *  @default [ 10, 25, 50, 100 ]
     *
     *  @dtopt Option
     *  @name DataTable.defaults.lengthMenu
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "lengthMenu": [[10, 25, 50, -1], [10, 25, 50, "All"]]
     *      } );
     *    } );
     */
    aLengthMenu: [10, 25, 50, 100],

    /**
     * The `columns` option in the initialisation parameter allows you to define
     * details about the way individual columns behave. For a full list of
     * column options that can be set, please see
     * {@link DataTable.defaults.column}. Note that if you use `columns` to
     * define your columns, you must have an entry in the array for every single
     * column that you have in your table (these can be null if you don't which
     * to specify any options).
     *  @member
     *
     *  @name DataTable.defaults.column
     */
    aoColumns: null,

    /**
     * Very similar to `columns`, `columnDefs` allows you to target a specific
     * column, multiple columns, or all columns, using the `targets` property of
     * each object in the array. This allows great flexibility when creating
     * tables, as the `columnDefs` arrays can be of any length, targeting the
     * columns you specifically want. `columnDefs` may use any of the column
     * options available: {@link DataTable.defaults.column}, but it _must_
     * have `targets` defined in each object in the array. Values in the `targets`
     * array may be:
     *   <ul>
     *     <li>a string - class name will be matched on the TH for the column</li>
     *     <li>0 or a positive integer - column index counting from the left</li>
     *     <li>a negative integer - column index counting from the right</li>
     *     <li>the string "_all" - all columns (i.e. assign a default)</li>
     *   </ul>
     *  @member
     *
     *  @name DataTable.defaults.columnDefs
     */
    aoColumnDefs: null,

    /**
     * Basically the same as `search`, this parameter defines the individual column
     * filtering state at initialisation time. The array must be of the same size
     * as the number of columns, and each element be an object with the parameters
     * `search` and `escapeRegex` (the latter is optional). 'null' is also
     * accepted and the default will be used.
     *  @type array
     *  @default []
     *
     *  @dtopt Option
     *  @name DataTable.defaults.searchCols
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "searchCols": [
     *          null,
     *          { "search": "My filter" },
     *          null,
     *          { "search": "^[0-9]", "escapeRegex": false }
     *        ]
     *      } );
     *    } )
     */
    aoSearchCols: [],

    /**
     * An array of CSS classes that should be applied to displayed rows. This
     * array may be of any length, and DataTables will apply each class
     * sequentially, looping when required.
     *  @type array
     *  @default null <i>Will take the values determined by the `oClasses.stripe*`
     *    options</i>
     *
     *  @dtopt Option
     *  @name DataTable.defaults.stripeClasses
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "stripeClasses": [ 'strip1', 'strip2', 'strip3' ]
     *      } );
     *    } )
     */
    asStripeClasses: null,

    /**
     * Enable or disable automatic column width calculation. This can be disabled
     * as an optimisation (it takes some time to calculate the widths) if the
     * tables widths are passed in using `columns`.
     *  @type boolean
     *  @default true
     *
     *  @dtopt Features
     *  @name DataTable.defaults.autoWidth
     *
     *  @example
     *    $(document).ready( function () {
     *      $('#example').dataTable( {
     *        "autoWidth": false
     *      } );
     *    } );
     */
    bAutoWidth: true,

    /**
     * Deferred rendering can provide DataTables with a huge speed boost when you
     * are using an Ajax or JS data source for the table. This option, when set to
     * true, will cause DataTables to defer the creation of the table elements for
     * each row until they are needed for a draw - saving a significant amount of
     * time.
     *  @type boolean
     *  @default false
     *
     *  @dtopt Features
     *  @name DataTable.defaults.deferRender
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "ajax": "sources/arrays.txt",
     *        "deferRender": true
     *      } );
     *    } );
     */
    bDeferRender: false,

    /**
     * Replace a DataTable which matches the given selector and replace it with
     * one which has the properties of the new initialisation object passed. If no
     * table matches the selector, then the new DataTable will be constructed as
     * per normal.
     *  @type boolean
     *  @default false
     *
     *  @dtopt Options
     *  @name DataTable.defaults.destroy
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "srollY": "200px",
     *        "paginate": false
     *      } );
     *
     *      // Some time later....
     *      $('#example').dataTable( {
     *        "filter": false,
     *        "destroy": true
     *      } );
     *    } );
     */
    bDestroy: false,

    /**
     * Enable or disable filtering of data. Filtering in DataTables is "smart" in
     * that it allows the end user to input multiple words (space separated) and
     * will match a row containing those words, even if not in the order that was
     * specified (this allow matching across multiple columns). Note that if you
     * wish to use filtering in DataTables this must remain 'true' - to remove the
     * default filtering input box and retain filtering abilities, please use
     * {@link DataTable.defaults.dom}.
     *  @type boolean
     *  @default true
     *
     *  @dtopt Features
     *  @name DataTable.defaults.searching
     *
     *  @example
     *    $(document).ready( function () {
     *      $('#example').dataTable( {
     *        "searching": false
     *      } );
     *    } );
     */
    bFilter: true,

    /**
     * Enable or disable the table information display. This shows information
     * about the data that is currently visible on the page, including information
     * about filtered data if that action is being performed.
     *  @type boolean
     *  @default true
     *
     *  @dtopt Features
     *  @name DataTable.defaults.info
     *
     *  @example
     *    $(document).ready( function () {
     *      $('#example').dataTable( {
     *        "info": false
     *      } );
     *    } );
     */
    bInfo: true,

    /**
     * Enable jQuery UI ThemeRoller support (required as ThemeRoller requires some
     * slightly different and additional mark-up from what DataTables has
     * traditionally used).
     *  @type boolean
     *  @default false
     *
     *  @dtopt Features
     *  @name DataTable.defaults.jQueryUI
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "jQueryUI": true
     *      } );
     *    } );
     */
    bJQueryUI: false,

    /**
     * Allows the end user to select the size of a formatted page from a select
     * menu (sizes are 10, 25, 50 and 100). Requires pagination (`paginate`).
     *  @type boolean
     *  @default true
     *
     *  @dtopt Features
     *  @name DataTable.defaults.lengthChange
     *
     *  @example
     *    $(document).ready( function () {
     *      $('#example').dataTable( {
     *        "lengthChange": false
     *      } );
     *    } );
     */
    bLengthChange: true,

    /**
     * Enable or disable pagination.
     *  @type boolean
     *  @default true
     *
     *  @dtopt Features
     *  @name DataTable.defaults.paging
     *
     *  @example
     *    $(document).ready( function () {
     *      $('#example').dataTable( {
     *        "paging": false
     *      } );
     *    } );
     */
    bPaginate: true,

    /**
     * Enable or disable the display of a 'processing' indicator when the table is
     * being processed (e.g. a sort). This is particularly useful for tables with
     * large amounts of data where it can take a noticeable amount of time to sort
     * the entries.
     *  @type boolean
     *  @default false
     *
     *  @dtopt Features
     *  @name DataTable.defaults.processing
     *
     *  @example
     *    $(document).ready( function () {
     *      $('#example').dataTable( {
     *        "processing": true
     *      } );
     *    } );
     */
    bProcessing: false,

    /**
     * Retrieve the DataTables object for the given selector. Note that if the
     * table has already been initialised, this parameter will cause DataTables
     * to simply return the object that has already been set up - it will not take
     * account of any changes you might have made to the initialisation object
     * passed to DataTables (setting this parameter to true is an acknowledgement
     * that you understand this). `destroy` can be used to reinitialise a table if
     * you need.
     *  @type boolean
     *  @default false
     *
     *  @dtopt Options
     *  @name DataTable.defaults.retrieve
     *
     *  @example
     *    $(document).ready( function() {
     *      initTable();
     *      tableActions();
     *    } );
     *
     *    function initTable ()
     *    {
     *      return $('#example').dataTable( {
     *        "scrollY": "200px",
     *        "paginate": false,
     *        "retrieve": true
     *      } );
     *    }
     *
     *    function tableActions ()
     *    {
     *      var table = initTable();
     *      // perform API operations with oTable
     *    }
     */
    bRetrieve: false,

    /**
     * When vertical (y) scrolling is enabled, DataTables will force the height of
     * the table's viewport to the given height at all times (useful for layout).
     * However, this can look odd when filtering data down to a small data set,
     * and the footer is left "floating" further down. This parameter (when
     * enabled) will cause DataTables to collapse the table's viewport down when
     * the result set will fit within the given Y height.
     *  @type boolean
     *  @default false
     *
     *  @dtopt Options
     *  @name DataTable.defaults.scrollCollapse
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "scrollY": "200",
     *        "scrollCollapse": true
     *      } );
     *    } );
     */
    bScrollCollapse: false,

    /**
     * Configure DataTables to use server-side processing. Note that the
     * `ajax` parameter must also be given in order to give DataTables a
     * source to obtain the required data for each draw.
     *  @type boolean
     *  @default false
     *
     *  @dtopt Features
     *  @dtopt Server-side
     *  @name DataTable.defaults.serverSide
     *
     *  @example
     *    $(document).ready( function () {
     *      $('#example').dataTable( {
     *        "serverSide": true,
     *        "ajax": "xhr.php"
     *      } );
     *    } );
     */
    bServerSide: false,

    /**
     * Enable or disable sorting of columns. Sorting of individual columns can be
     * disabled by the `sortable` option for each column.
     *  @type boolean
     *  @default true
     *
     *  @dtopt Features
     *  @name DataTable.defaults.ordering
     *
     *  @example
     *    $(document).ready( function () {
     *      $('#example').dataTable( {
     *        "ordering": false
     *      } );
     *    } );
     */
    bSort: true,

    /**
     * Enable or display DataTables' ability to sort multiple columns at the
     * same time (activated by shift-click by the user).
     *  @type boolean
     *  @default true
     *
     *  @dtopt Options
     *  @name DataTable.defaults.orderMulti
     *
     *  @example
     *    // Disable multiple column sorting ability
     *    $(document).ready( function () {
     *      $('#example').dataTable( {
     *        "orderMulti": false
     *      } );
     *    } );
     */
    bSortMulti: true,

    /**
     * Allows control over whether DataTables should use the top (true) unique
     * cell that is found for a single column, or the bottom (false - default).
     * This is useful when using complex headers.
     *  @type boolean
     *  @default false
     *
     *  @dtopt Options
     *  @name DataTable.defaults.orderCellsTop
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "orderCellsTop": true
     *      } );
     *    } );
     */
    bSortCellsTop: false,

    /**
     * Enable or disable the addition of the classes `sorting\_1`, `sorting\_2` and
     * `sorting\_3` to the columns which are currently being sorted on. This is
     * presented as a feature switch as it can increase processing time (while
     * classes are removed and added) so for large data sets you might want to
     * turn this off.
     *  @type boolean
     *  @default true
     *
     *  @dtopt Features
     *  @name DataTable.defaults.orderClasses
     *
     *  @example
     *    $(document).ready( function () {
     *      $('#example').dataTable( {
     *        "orderClasses": false
     *      } );
     *    } );
     */
    bSortClasses: true,

    /**
     * Enable or disable state saving. When enabled HTML5 `localStorage` will be
     * used to save table display information such as pagination information,
     * display length, filtering and sorting. As such when the end user reloads
     * the page the display display will match what thy had previously set up.
     *
     * Due to the use of `localStorage` the default state saving is not supported
     * in IE6 or 7. If state saving is required in those browsers, use
     * `stateSaveCallback` to provide a storage solution such as cookies.
     *  @type boolean
     *  @default false
     *
     *  @dtopt Features
     *  @name DataTable.defaults.stateSave
     *
     *  @example
     *    $(document).ready( function () {
     *      $('#example').dataTable( {
     *        "stateSave": true
     *      } );
     *    } );
     */
    bStateSave: false,

    /**
     * This function is called when a TR element is created (and all TD child
     * elements have been inserted), or registered if using a DOM source, allowing
     * manipulation of the TR element (adding classes etc).
     *  @type function
     *  @param {node} row "TR" element for the current row
     *  @param {array} data Raw data array for this row
     *  @param {int} dataIndex The index of this row in the internal aoData array
     *
     *  @dtopt Callbacks
     *  @name DataTable.defaults.createdRow
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "createdRow": function( row, data, dataIndex ) {
     *          // Bold the grade for all 'A' grade browsers
     *          if ( data[4] == "A" )
     *          {
     *            $('td:eq(4)', row).html( '<b>A</b>' );
     *          }
     *        }
     *      } );
     *    } );
     */
    fnCreatedRow: null,

    /**
     * This function is called on every 'draw' event, and allows you to
     * dynamically modify any aspect you want about the created DOM.
     *  @type function
     *  @param {object} settings DataTables settings object
     *
     *  @dtopt Callbacks
     *  @name DataTable.defaults.drawCallback
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "drawCallback": function( settings ) {
     *          alert( 'DataTables has redrawn the table' );
     *        }
     *      } );
     *    } );
     */
    fnDrawCallback: null,

    /**
     * Identical to fnHeaderCallback() but for the table footer this function
     * allows you to modify the table footer on every 'draw' event.
     *  @type function
     *  @param {node} foot "TR" element for the footer
     *  @param {array} data Full table data (as derived from the original HTML)
     *  @param {int} start Index for the current display starting point in the
     *    display array
     *  @param {int} end Index for the current display ending point in the
     *    display array
     *  @param {array int} display Index array to translate the visual position
     *    to the full data array
     *
     *  @dtopt Callbacks
     *  @name DataTable.defaults.footerCallback
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "footerCallback": function( tfoot, data, start, end, display ) {
     *          tfoot.getElementsByTagName('th')[0].innerHTML = "Starting index is "+start;
     *        }
     *      } );
     *    } )
     */
    fnFooterCallback: null,

    /**
     * When rendering large numbers in the information element for the table
     * (i.e. "Showing 1 to 10 of 57 entries") DataTables will render large numbers
     * to have a comma separator for the 'thousands' units (e.g. 1 million is
     * rendered as "1,000,000") to help readability for the end user. This
     * function will override the default method DataTables uses.
     *  @type function
     *  @member
     *  @param {int} toFormat number to be formatted
     *  @returns {string} formatted string for DataTables to show the number
     *
     *  @dtopt Callbacks
     *  @name DataTable.defaults.formatNumber
     *
     *  @example
     *    // Format a number using a single quote for the separator (note that
     *    // this can also be done with the language.thousands option)
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "formatNumber": function ( toFormat ) {
     *          return toFormat.toString().replace(
     *            /\B(?=(\d{3})+(?!\d))/g, "'"
     *          );
     *        };
     *      } );
     *    } );
     */
    fnFormatNumber: function (toFormat) {
      return toFormat
        .toString()
        .replace(/\B(?=(\d{3})+(?!\d))/g, this.oLanguage.sThousands);
    },

    /**
     * This function is called on every 'draw' event, and allows you to
     * dynamically modify the header row. This can be used to calculate and
     * display useful information about the table.
     *  @type function
     *  @param {node} head "TR" element for the header
     *  @param {array} data Full table data (as derived from the original HTML)
     *  @param {int} start Index for the current display starting point in the
     *    display array
     *  @param {int} end Index for the current display ending point in the
     *    display array
     *  @param {array int} display Index array to translate the visual position
     *    to the full data array
     *
     *  @dtopt Callbacks
     *  @name DataTable.defaults.headerCallback
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "fheaderCallback": function( head, data, start, end, display ) {
     *          head.getElementsByTagName('th')[0].innerHTML = "Displaying "+(end-start)+" records";
     *        }
     *      } );
     *    } )
     */
    fnHeaderCallback: null,

    /**
     * The information element can be used to convey information about the current
     * state of the table. Although the internationalisation options presented by
     * DataTables are quite capable of dealing with most customisations, there may
     * be times where you wish to customise the string further. This callback
     * allows you to do exactly that.
     *  @type function
     *  @param {object} oSettings DataTables settings object
     *  @param {int} start Starting position in data for the draw
     *  @param {int} end End position in data for the draw
     *  @param {int} max Total number of rows in the table (regardless of
     *    filtering)
     *  @param {int} total Total number of rows in the data set, after filtering
     *  @param {string} pre The string that DataTables has formatted using it's
     *    own rules
     *  @returns {string} The string to be displayed in the information element.
     *
     *  @dtopt Callbacks
     *  @name DataTable.defaults.infoCallback
     *
     *  @example
     *    $('#example').dataTable( {
     *      "infoCallback": function( settings, start, end, max, total, pre ) {
     *        return start +" to "+ end;
     *      }
     *    } );
     */
    fnInfoCallback: null,

    /**
     * Called when the table has been initialised. Normally DataTables will
     * initialise sequentially and there will be no need for this function,
     * however, this does not hold true when using external language information
     * since that is obtained using an async XHR call.
     *  @type function
     *  @param {object} settings DataTables settings object
     *  @param {object} json The JSON object request from the server - only
     *    present if client-side Ajax sourced data is used
     *
     *  @dtopt Callbacks
     *  @name DataTable.defaults.initComplete
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "initComplete": function(settings, json) {
     *          alert( 'DataTables has finished its initialisation.' );
     *        }
     *      } );
     *    } )
     */
    fnInitComplete: null,

    /**
     * Called at the very start of each table draw and can be used to cancel the
     * draw by returning false, any other return (including undefined) results in
     * the full draw occurring).
     *  @type function
     *  @param {object} settings DataTables settings object
     *  @returns {boolean} False will cancel the draw, anything else (including no
     *    return) will allow it to complete.
     *
     *  @dtopt Callbacks
     *  @name DataTable.defaults.preDrawCallback
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "preDrawCallback": function( settings ) {
     *          if ( $('#test').val() == 1 ) {
     *            return false;
     *          }
     *        }
     *      } );
     *    } );
     */
    fnPreDrawCallback: null,

    /**
     * This function allows you to 'post process' each row after it have been
     * generated for each table draw, but before it is rendered on screen. This
     * function might be used for setting the row class name etc.
     *  @type function
     *  @param {node} row "TR" element for the current row
     *  @param {array} data Raw data array for this row
     *  @param {int} displayIndex The display index for the current table draw
     *  @param {int} displayIndexFull The index of the data in the full list of
     *    rows (after filtering)
     *
     *  @dtopt Callbacks
     *  @name DataTable.defaults.rowCallback
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "rowCallback": function( row, data, displayIndex, displayIndexFull ) {
     *          // Bold the grade for all 'A' grade browsers
     *          if ( data[4] == "A" ) {
     *            $('td:eq(4)', row).html( '<b>A</b>' );
     *          }
     *        }
     *      } );
     *    } );
     */
    fnRowCallback: null,

    /**
     * __Deprecated__ The functionality provided by this parameter has now been
     * superseded by that provided through `ajax`, which should be used instead.
     *
     * This parameter allows you to override the default function which obtains
     * the data from the server so something more suitable for your application.
     * For example you could use POST data, or pull information from a Gears or
     * AIR database.
     *  @type function
     *  @member
     *  @param {string} source HTTP source to obtain the data from (`ajax`)
     *  @param {array} data A key/value pair object containing the data to send
     *    to the server
     *  @param {function} callback to be called on completion of the data get
     *    process that will draw the data on the page.
     *  @param {object} settings DataTables settings object
     *
     *  @dtopt Callbacks
     *  @dtopt Server-side
     *  @name DataTable.defaults.serverData
     *
     *  @deprecated 1.10. Please use `ajax` for this functionality now.
     */
    fnServerData: null,

    /**
     * __Deprecated__ The functionality provided by this parameter has now been
     * superseded by that provided through `ajax`, which should be used instead.
     *
     *  It is often useful to send extra data to the server when making an Ajax
     * request - for example custom filtering information, and this callback
     * function makes it trivial to send extra information to the server. The
     * passed in parameter is the data set that has been constructed by
     * DataTables, and you can add to this or modify it as you require.
     *  @type function
     *  @param {array} data Data array (array of objects which are name/value
     *    pairs) that has been constructed by DataTables and will be sent to the
     *    server. In the case of Ajax sourced data with server-side processing
     *    this will be an empty array, for server-side processing there will be a
     *    significant number of parameters!
     *  @returns {undefined} Ensure that you modify the data array passed in,
     *    as this is passed by reference.
     *
     *  @dtopt Callbacks
     *  @dtopt Server-side
     *  @name DataTable.defaults.serverParams
     *
     *  @deprecated 1.10. Please use `ajax` for this functionality now.
     */
    fnServerParams: null,

    /**
     * Load the table state. With this function you can define from where, and how, the
     * state of a table is loaded. By default DataTables will load from `localStorage`
     * but you might wish to use a server-side database or cookies.
     *  @type function
     *  @member
     *  @param {object} settings DataTables settings object
     *  @return {object} The DataTables state object to be loaded
     *
     *  @dtopt Callbacks
     *  @name DataTable.defaults.stateLoadCallback
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "stateSave": true,
     *        "stateLoadCallback": function (settings) {
     *          var o;
     *
     *          // Send an Ajax request to the server to get the data. Note that
     *          // this is a synchronous request.
     *          $.ajax( {
     *            "url": "/state_load",
     *            "async": false,
     *            "dataType": "json",
     *            "success": function (json) {
     *              o = json;
     *            }
     *          } );
     *
     *          return o;
     *        }
     *      } );
     *    } );
     */
    fnStateLoadCallback: function (settings) {
      try {
        return JSON.parse(
          (settings.iStateDuration === -1
            ? sessionStorage
            : localStorage
          ).getItem(
            "DataTables_" + settings.sInstance + "_" + location.pathname
          )
        );
      } catch (e) {}
    },

    /**
     * Callback which allows modification of the saved state prior to loading that state.
     * This callback is called when the table is loading state from the stored data, but
     * prior to the settings object being modified by the saved state. Note that for
     * plug-in authors, you should use the `stateLoadParams` event to load parameters for
     * a plug-in.
     *  @type function
     *  @param {object} settings DataTables settings object
     *  @param {object} data The state object that is to be loaded
     *
     *  @dtopt Callbacks
     *  @name DataTable.defaults.stateLoadParams
     *
     *  @example
     *    // Remove a saved filter, so filtering is never loaded
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "stateSave": true,
     *        "stateLoadParams": function (settings, data) {
     *          data.oSearch.sSearch = "";
     *        }
     *      } );
     *    } );
     *
     *  @example
     *    // Disallow state loading by returning false
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "stateSave": true,
     *        "stateLoadParams": function (settings, data) {
     *          return false;
     *        }
     *      } );
     *    } );
     */
    fnStateLoadParams: null,

    /**
     * Callback that is called when the state has been loaded from the state saving method
     * and the DataTables settings object has been modified as a result of the loaded state.
     *  @type function
     *  @param {object} settings DataTables settings object
     *  @param {object} data The state object that was loaded
     *
     *  @dtopt Callbacks
     *  @name DataTable.defaults.stateLoaded
     *
     *  @example
     *    // Show an alert with the filtering value that was saved
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "stateSave": true,
     *        "stateLoaded": function (settings, data) {
     *          alert( 'Saved filter was: '+data.oSearch.sSearch );
     *        }
     *      } );
     *    } );
     */
    fnStateLoaded: null,

    /**
     * Save the table state. This function allows you to define where and how the state
     * information for the table is stored By default DataTables will use `localStorage`
     * but you might wish to use a server-side database or cookies.
     *  @type function
     *  @member
     *  @param {object} settings DataTables settings object
     *  @param {object} data The state object to be saved
     *
     *  @dtopt Callbacks
     *  @name DataTable.defaults.stateSaveCallback
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "stateSave": true,
     *        "stateSaveCallback": function (settings, data) {
     *          // Send an Ajax request to the server with the state object
     *          $.ajax( {
     *            "url": "/state_save",
     *            "data": data,
     *            "dataType": "json",
     *            "method": "POST"
     *            "success": function () {}
     *          } );
     *        }
     *      } );
     *    } );
     */
    fnStateSaveCallback: function (settings, data) {
      try {
        (settings.iStateDuration === -1
          ? sessionStorage
          : localStorage
        ).setItem(
          "DataTables_" + settings.sInstance + "_" + location.pathname,
          JSON.stringify(data)
        );
      } catch (e) {}
    },

    /**
     * Callback which allows modification of the state to be saved. Called when the table
     * has changed state a new state save is required. This method allows modification of
     * the state saving object prior to actually doing the save, including addition or
     * other state properties or modification. Note that for plug-in authors, you should
     * use the `stateSaveParams` event to save parameters for a plug-in.
     *  @type function
     *  @param {object} settings DataTables settings object
     *  @param {object} data The state object to be saved
     *
     *  @dtopt Callbacks
     *  @name DataTable.defaults.stateSaveParams
     *
     *  @example
     *    // Remove a saved filter, so filtering is never saved
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "stateSave": true,
     *        "stateSaveParams": function (settings, data) {
     *          data.oSearch.sSearch = "";
     *        }
     *      } );
     *    } );
     */
    fnStateSaveParams: null,

    /**
     * Duration for which the saved state information is considered valid. After this period
     * has elapsed the state will be returned to the default.
     * Value is given in seconds.
     *  @type int
     *  @default 7200 <i>(2 hours)</i>
     *
     *  @dtopt Options
     *  @name DataTable.defaults.stateDuration
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "stateDuration": 60*60*24; // 1 day
     *      } );
     *    } )
     */
    iStateDuration: 7200,

    /**
     * When enabled DataTables will not make a request to the server for the first
     * page draw - rather it will use the data already on the page (no sorting etc
     * will be applied to it), thus saving on an XHR at load time. `deferLoading`
     * is used to indicate that deferred loading is required, but it is also used
     * to tell DataTables how many records there are in the full table (allowing
     * the information element and pagination to be displayed correctly). In the case
     * where a filtering is applied to the table on initial load, this can be
     * indicated by giving the parameter as an array, where the first element is
     * the number of records available after filtering and the second element is the
     * number of records without filtering (allowing the table information element
     * to be shown correctly).
     *  @type int | array
     *  @default null
     *
     *  @dtopt Options
     *  @name DataTable.defaults.deferLoading
     *
     *  @example
     *    // 57 records available in the table, no filtering applied
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "serverSide": true,
     *        "ajax": "scripts/server_processing.php",
     *        "deferLoading": 57
     *      } );
     *    } );
     *
     *  @example
     *    // 57 records after filtering, 100 without filtering (an initial filter applied)
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "serverSide": true,
     *        "ajax": "scripts/server_processing.php",
     *        "deferLoading": [ 57, 100 ],
     *        "search": {
     *          "search": "my_filter"
     *        }
     *      } );
     *    } );
     */
    iDeferLoading: null,

    /**
     * Number of rows to display on a single page when using pagination. If
     * feature enabled (`lengthChange`) then the end user will be able to override
     * this to a custom setting using a pop-up menu.
     *  @type int
     *  @default 10
     *
     *  @dtopt Options
     *  @name DataTable.defaults.pageLength
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "pageLength": 50
     *      } );
     *    } )
     */
    iDisplayLength: 10,

    /**
     * Define the starting point for data display when using DataTables with
     * pagination. Note that this parameter is the number of records, rather than
     * the page number, so if you have 10 records per page and want to start on
     * the third page, it should be "20".
     *  @type int
     *  @default 0
     *
     *  @dtopt Options
     *  @name DataTable.defaults.displayStart
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "displayStart": 20
     *      } );
     *    } )
     */
    iDisplayStart: 0,

    /**
     * By default DataTables allows keyboard navigation of the table (sorting, paging,
     * and filtering) by adding a `tabindex` attribute to the required elements. This
     * allows you to tab through the controls and press the enter key to activate them.
     * The tabindex is default 0, meaning that the tab follows the flow of the document.
     * You can overrule this using this parameter if you wish. Use a value of -1 to
     * disable built-in keyboard navigation.
     *  @type int
     *  @default 0
     *
     *  @dtopt Options
     *  @name DataTable.defaults.tabIndex
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "tabIndex": 1
     *      } );
     *    } );
     */
    iTabIndex: 0,

    /**
     * Classes that DataTables assigns to the various components and features
     * that it adds to the HTML table. This allows classes to be configured
     * during initialisation in addition to through the static
     * {@link DataTable.ext.oStdClasses} object).
     *  @namespace
     *  @name DataTable.defaults.classes
     */
    oClasses: {},

    /**
     * All strings that DataTables uses in the user interface that it creates
     * are defined in this object, allowing you to modified them individually or
     * completely replace them all as required.
     *  @namespace
     *  @name DataTable.defaults.language
     */
    oLanguage: {
      /**
       * Strings that are used for WAI-ARIA labels and controls only (these are not
       * actually visible on the page, but will be read by screenreaders, and thus
       * must be internationalised as well).
       *  @namespace
       *  @name DataTable.defaults.language.aria
       */
      oAria: {
        /**
         * ARIA label that is added to the table headers when the column may be
         * sorted ascending by activing the column (click or return when focused).
         * Note that the column header is prefixed to this string.
         *  @type string
         *  @default : activate to sort column ascending
         *
         *  @dtopt Language
         *  @name DataTable.defaults.language.aria.sortAscending
         *
         *  @example
         *    $(document).ready( function() {
         *      $('#example').dataTable( {
         *        "language": {
         *          "aria": {
         *            "sortAscending": " - click/return to sort ascending"
         *          }
         *        }
         *      } );
         *    } );
         */
        sSortAscending: ": activate to sort column ascending",

        /**
         * ARIA label that is added to the table headers when the column may be
         * sorted descending by activing the column (click or return when focused).
         * Note that the column header is prefixed to this string.
         *  @type string
         *  @default : activate to sort column ascending
         *
         *  @dtopt Language
         *  @name DataTable.defaults.language.aria.sortDescending
         *
         *  @example
         *    $(document).ready( function() {
         *      $('#example').dataTable( {
         *        "language": {
         *          "aria": {
         *            "sortDescending": " - click/return to sort descending"
         *          }
         *        }
         *      } );
         *    } );
         */
        sSortDescending: ": activate to sort column descending",
      },

      /**
       * Pagination string used by DataTables for the built-in pagination
       * control types.
       *  @namespace
       *  @name DataTable.defaults.language.paginate
       */
      oPaginate: {
        /**
         * Text to use when using the 'full_numbers' type of pagination for the
         * button to take the user to the first page.
         *  @type string
         *  @default First
         *
         *  @dtopt Language
         *  @name DataTable.defaults.language.paginate.first
         *
         *  @example
         *    $(document).ready( function() {
         *      $('#example').dataTable( {
         *        "language": {
         *          "paginate": {
         *            "first": "First page"
         *          }
         *        }
         *      } );
         *    } );
         */
        sFirst: "First",

        /**
         * Text to use when using the 'full_numbers' type of pagination for the
         * button to take the user to the last page.
         *  @type string
         *  @default Last
         *
         *  @dtopt Language
         *  @name DataTable.defaults.language.paginate.last
         *
         *  @example
         *    $(document).ready( function() {
         *      $('#example').dataTable( {
         *        "language": {
         *          "paginate": {
         *            "last": "Last page"
         *          }
         *        }
         *      } );
         *    } );
         */
        sLast: "Last",

        /**
         * Text to use for the 'next' pagination button (to take the user to the
         * next page).
         *  @type string
         *  @default Next
         *
         *  @dtopt Language
         *  @name DataTable.defaults.language.paginate.next
         *
         *  @example
         *    $(document).ready( function() {
         *      $('#example').dataTable( {
         *        "language": {
         *          "paginate": {
         *            "next": "Next page"
         *          }
         *        }
         *      } );
         *    } );
         */
        sNext: "Next",

        /**
         * Text to use for the 'previous' pagination button (to take the user to
         * the previous page).
         *  @type string
         *  @default Previous
         *
         *  @dtopt Language
         *  @name DataTable.defaults.language.paginate.previous
         *
         *  @example
         *    $(document).ready( function() {
         *      $('#example').dataTable( {
         *        "language": {
         *          "paginate": {
         *            "previous": "Previous page"
         *          }
         *        }
         *      } );
         *    } );
         */
        sPrevious: "Previous",
      },

      /**
       * This string is shown in preference to `zeroRecords` when the table is
       * empty of data (regardless of filtering). Note that this is an optional
       * parameter - if it is not given, the value of `zeroRecords` will be used
       * instead (either the default or given value).
       *  @type string
       *  @default No data available in table
       *
       *  @dtopt Language
       *  @name DataTable.defaults.language.emptyTable
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "language": {
       *          "emptyTable": "No data available in table"
       *        }
       *      } );
       *    } );
       */
      sEmptyTable: "No data available in table",

      /**
       * This string gives information to the end user about the information
       * that is current on display on the page. The following tokens can be
       * used in the string and will be dynamically replaced as the table
       * display updates. This tokens can be placed anywhere in the string, or
       * removed as needed by the language requires:
       *
       * * `\_START\_` - Display index of the first record on the current page
       * * `\_END\_` - Display index of the last record on the current page
       * * `\_TOTAL\_` - Number of records in the table after filtering
       * * `\_MAX\_` - Number of records in the table without filtering
       * * `\_PAGE\_` - Current page number
       * * `\_PAGES\_` - Total number of pages of data in the table
       *
       *  @type string
       *  @default Showing _START_ to _END_ of _TOTAL_ entries
       *
       *  @dtopt Language
       *  @name DataTable.defaults.language.info
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "language": {
       *          "info": "Showing page _PAGE_ of _PAGES_"
       *        }
       *      } );
       *    } );
       */
      sInfo: "Showing _START_ to _END_ of _TOTAL_ entries",

      /**
       * Display information string for when the table is empty. Typically the
       * format of this string should match `info`.
       *  @type string
       *  @default Showing 0 to 0 of 0 entries
       *
       *  @dtopt Language
       *  @name DataTable.defaults.language.infoEmpty
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "language": {
       *          "infoEmpty": "No entries to show"
       *        }
       *      } );
       *    } );
       */
      sInfoEmpty: "Showing 0 to 0 of 0 entries",

      /**
       * When a user filters the information in a table, this string is appended
       * to the information (`info`) to give an idea of how strong the filtering
       * is. The variable _MAX_ is dynamically updated.
       *  @type string
       *  @default (filtered from _MAX_ total entries)
       *
       *  @dtopt Language
       *  @name DataTable.defaults.language.infoFiltered
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "language": {
       *          "infoFiltered": " - filtering from _MAX_ records"
       *        }
       *      } );
       *    } );
       */
      sInfoFiltered: "(filtered from _MAX_ total entries)",

      /**
       * If can be useful to append extra information to the info string at times,
       * and this variable does exactly that. This information will be appended to
       * the `info` (`infoEmpty` and `infoFiltered` in whatever combination they are
       * being used) at all times.
       *  @type string
       *  @default <i>Empty string</i>
       *
       *  @dtopt Language
       *  @name DataTable.defaults.language.infoPostFix
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "language": {
       *          "infoPostFix": "All records shown are derived from real information."
       *        }
       *      } );
       *    } );
       */
      sInfoPostFix: "",

      /**
       * This decimal place operator is a little different from the other
       * language options since DataTables doesn't output floating point
       * numbers, so it won't ever use this for display of a number. Rather,
       * what this parameter does is modify the sort methods of the table so
       * that numbers which are in a format which has a character other than
       * a period (`.`) as a decimal place will be sorted numerically.
       *
       * Note that numbers with different decimal places cannot be shown in
       * the same table and still be sortable, the table must be consistent.
       * However, multiple different tables on the page can use different
       * decimal place characters.
       *  @type string
       *  @default
       *
       *  @dtopt Language
       *  @name DataTable.defaults.language.decimal
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "language": {
       *          "decimal": ","
       *          "thousands": "."
       *        }
       *      } );
       *    } );
       */
      sDecimal: "",

      /**
       * DataTables has a build in number formatter (`formatNumber`) which is
       * used to format large numbers that are used in the table information.
       * By default a comma is used, but this can be trivially changed to any
       * character you wish with this parameter.
       *  @type string
       *  @default ,
       *
       *  @dtopt Language
       *  @name DataTable.defaults.language.thousands
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "language": {
       *          "thousands": "'"
       *        }
       *      } );
       *    } );
       */
      sThousands: ",",

      /**
       * Detail the action that will be taken when the drop down menu for the
       * pagination length option is changed. The '_MENU_' variable is replaced
       * with a default select list of 10, 25, 50 and 100, and can be replaced
       * with a custom select box if required.
       *  @type string
       *  @default Show _MENU_ entries
       *
       *  @dtopt Language
       *  @name DataTable.defaults.language.lengthMenu
       *
       *  @example
       *    // Language change only
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "language": {
       *          "lengthMenu": "Display _MENU_ records"
       *        }
       *      } );
       *    } );
       *
       *  @example
       *    // Language and options change
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "language": {
       *          "lengthMenu": 'Display <select>'+
       *            '<option value="10">10</option>'+
       *            '<option value="20">20</option>'+
       *            '<option value="30">30</option>'+
       *            '<option value="40">40</option>'+
       *            '<option value="50">50</option>'+
       *            '<option value="-1">All</option>'+
       *            '</select> records'
       *        }
       *      } );
       *    } );
       */
      sLengthMenu: "Show _MENU_ entries",

      /**
       * When using Ajax sourced data and during the first draw when DataTables is
       * gathering the data, this message is shown in an empty row in the table to
       * indicate to the end user the the data is being loaded. Note that this
       * parameter is not used when loading data by server-side processing, just
       * Ajax sourced data with client-side processing.
       *  @type string
       *  @default Loading...
       *
       *  @dtopt Language
       *  @name DataTable.defaults.language.loadingRecords
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "language": {
       *          "loadingRecords": "Please wait - loading..."
       *        }
       *      } );
       *    } );
       */
      sLoadingRecords: "Loading...",

      /**
       * Text which is displayed when the table is processing a user action
       * (usually a sort command or similar).
       *  @type string
       *  @default Processing...
       *
       *  @dtopt Language
       *  @name DataTable.defaults.language.processing
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "language": {
       *          "processing": "DataTables is currently busy"
       *        }
       *      } );
       *    } );
       */
      sProcessing: "Processing...",

      /**
       * Details the actions that will be taken when the user types into the
       * filtering input text box. The variable "_INPUT_", if used in the string,
       * is replaced with the HTML text box for the filtering input allowing
       * control over where it appears in the string. If "_INPUT_" is not given
       * then the input box is appended to the string automatically.
       *  @type string
       *  @default Search:
       *
       *  @dtopt Language
       *  @name DataTable.defaults.language.search
       *
       *  @example
       *    // Input text box will be appended at the end automatically
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "language": {
       *          "search": "Filter records:"
       *        }
       *      } );
       *    } );
       *
       *  @example
       *    // Specify where the filter should appear
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "language": {
       *          "search": "Apply filter _INPUT_ to table"
       *        }
       *      } );
       *    } );
       */
      sSearch: "Search:",

      /**
       * Assign a `placeholder` attribute to the search `input` element
       *  @type string
       *  @default
       *
       *  @dtopt Language
       *  @name DataTable.defaults.language.searchPlaceholder
       */
      sSearchPlaceholder: "",

      /**
       * All of the language information can be stored in a file on the
       * server-side, which DataTables will look up if this parameter is passed.
       * It must store the URL of the language file, which is in a JSON format,
       * and the object has the same properties as the oLanguage object in the
       * initialiser object (i.e. the above parameters). Please refer to one of
       * the example language files to see how this works in action.
       *  @type string
       *  @default <i>Empty string - i.e. disabled</i>
       *
       *  @dtopt Language
       *  @name DataTable.defaults.language.url
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "language": {
       *          "url": "http://www.sprymedia.co.uk/dataTables/lang.txt"
       *        }
       *      } );
       *    } );
       */
      sUrl: "",

      /**
       * Text shown inside the table records when the is no information to be
       * displayed after filtering. `emptyTable` is shown when there is simply no
       * information in the table at all (regardless of filtering).
       *  @type string
       *  @default No matching records found
       *
       *  @dtopt Language
       *  @name DataTable.defaults.language.zeroRecords
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "language": {
       *          "zeroRecords": "No records to display"
       *        }
       *      } );
       *    } );
       */
      sZeroRecords: "No matching records found",
    },

    /**
     * This parameter allows you to have define the global filtering state at
     * initialisation time. As an object the `search` parameter must be
     * defined, but all other parameters are optional. When `regex` is true,
     * the search string will be treated as a regular expression, when false
     * (default) it will be treated as a straight string. When `smart`
     * DataTables will use it's smart filtering methods (to word match at
     * any point in the data), when false this will not be done.
     *  @namespace
     *  @extends DataTable.models.oSearch
     *
     *  @dtopt Options
     *  @name DataTable.defaults.search
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "search": {"search": "Initial search"}
     *      } );
     *    } )
     */
    oSearch: $.extend({}, DataTable.models.oSearch),

    /**
     * __Deprecated__ The functionality provided by this parameter has now been
     * superseded by that provided through `ajax`, which should be used instead.
     *
     * By default DataTables will look for the property `data` (or `aaData` for
     * compatibility with DataTables 1.9-) when obtaining data from an Ajax
     * source or for server-side processing - this parameter allows that
     * property to be changed. You can use Javascript dotted object notation to
     * get a data source for multiple levels of nesting.
     *  @type string
     *  @default data
     *
     *  @dtopt Options
     *  @dtopt Server-side
     *  @name DataTable.defaults.ajaxDataProp
     *
     *  @deprecated 1.10. Please use `ajax` for this functionality now.
     */
    sAjaxDataProp: "data",

    /**
     * __Deprecated__ The functionality provided by this parameter has now been
     * superseded by that provided through `ajax`, which should be used instead.
     *
     * You can instruct DataTables to load data from an external
     * source using this parameter (use aData if you want to pass data in you
     * already have). Simply provide a url a JSON object can be obtained from.
     *  @type string
     *  @default null
     *
     *  @dtopt Options
     *  @dtopt Server-side
     *  @name DataTable.defaults.ajaxSource
     *
     *  @deprecated 1.10. Please use `ajax` for this functionality now.
     */
    sAjaxSource: null,

    /**
     * This initialisation variable allows you to specify exactly where in the
     * DOM you want DataTables to inject the various controls it adds to the page
     * (for example you might want the pagination controls at the top of the
     * table). DIV elements (with or without a custom class) can also be added to
     * aid styling. The follow syntax is used:
     *   <ul>
     *     <li>The following options are allowed:
     *       <ul>
     *         <li>'l' - Length changing</li>
     *         <li>'f' - Filtering input</li>
     *         <li>'t' - The table!</li>
     *         <li>'i' - Information</li>
     *         <li>'p' - Pagination</li>
     *         <li>'r' - pRocessing</li>
     *       </ul>
     *     </li>
     *     <li>The following constants are allowed:
     *       <ul>
     *         <li>'H' - jQueryUI theme "header" classes ('fg-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix')</li>
     *         <li>'F' - jQueryUI theme "footer" classes ('fg-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix')</li>
     *       </ul>
     *     </li>
     *     <li>The following syntax is expected:
     *       <ul>
     *         <li>'&lt;' and '&gt;' - div elements</li>
     *         <li>'&lt;"class" and '&gt;' - div with a class</li>
     *         <li>'&lt;"#id" and '&gt;' - div with an ID</li>
     *       </ul>
     *     </li>
     *     <li>Examples:
     *       <ul>
     *         <li>'&lt;"wrapper"flipt&gt;'</li>
     *         <li>'&lt;lf&lt;t&gt;ip&gt;'</li>
     *       </ul>
     *     </li>
     *   </ul>
     *  @type string
     *  @default lfrtip <i>(when `jQueryUI` is false)</i> <b>or</b>
     *    <"H"lfr>t<"F"ip> <i>(when `jQueryUI` is true)</i>
     *
     *  @dtopt Options
     *  @name DataTable.defaults.dom
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "dom": '&lt;"top"i&gt;rt&lt;"bottom"flp&gt;&lt;"clear"&gt;'
     *      } );
     *    } );
     */
    sDom: "lfrtip",

    /**
     * Search delay option. This will throttle full table searches that use the
     * DataTables provided search input element (it does not effect calls to
     * `dt-api search()`, providing a delay before the search is made.
     *  @type integer
     *  @default 0
     *
     *  @dtopt Options
     *  @name DataTable.defaults.searchDelay
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "searchDelay": 200
     *      } );
     *    } )
     */
    searchDelay: null,

    /**
     * DataTables features four different built-in options for the buttons to
     * display for pagination control:
     *
     * * `simple` - 'Previous' and 'Next' buttons only
     * * 'simple_numbers` - 'Previous' and 'Next' buttons, plus page numbers
     * * `full` - 'First', 'Previous', 'Next' and 'Last' buttons
     * * `full_numbers` - 'First', 'Previous', 'Next' and 'Last' buttons, plus
     *   page numbers
     *
     * Further methods can be added using {@link DataTable.ext.oPagination}.
     *  @type string
     *  @default simple_numbers
     *
     *  @dtopt Options
     *  @name DataTable.defaults.pagingType
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "pagingType": "full_numbers"
     *      } );
     *    } )
     */
    sPaginationType: "simple_numbers",

    /**
     * Enable horizontal scrolling. When a table is too wide to fit into a
     * certain layout, or you have a large number of columns in the table, you
     * can enable x-scrolling to show the table in a viewport, which can be
     * scrolled. This property can be `true` which will allow the table to
     * scroll horizontally when needed, or any CSS unit, or a number (in which
     * case it will be treated as a pixel measurement). Setting as simply `true`
     * is recommended.
     *  @type boolean|string
     *  @default <i>blank string - i.e. disabled</i>
     *
     *  @dtopt Features
     *  @name DataTable.defaults.scrollX
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "scrollX": true,
     *        "scrollCollapse": true
     *      } );
     *    } );
     */
    sScrollX: "",

    /**
     * This property can be used to force a DataTable to use more width than it
     * might otherwise do when x-scrolling is enabled. For example if you have a
     * table which requires to be well spaced, this parameter is useful for
     * "over-sizing" the table, and thus forcing scrolling. This property can by
     * any CSS unit, or a number (in which case it will be treated as a pixel
     * measurement).
     *  @type string
     *  @default <i>blank string - i.e. disabled</i>
     *
     *  @dtopt Options
     *  @name DataTable.defaults.scrollXInner
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "scrollX": "100%",
     *        "scrollXInner": "110%"
     *      } );
     *    } );
     */
    sScrollXInner: "",

    /**
     * Enable vertical scrolling. Vertical scrolling will constrain the DataTable
     * to the given height, and enable scrolling for any data which overflows the
     * current viewport. This can be used as an alternative to paging to display
     * a lot of data in a small area (although paging and scrolling can both be
     * enabled at the same time). This property can be any CSS unit, or a number
     * (in which case it will be treated as a pixel measurement).
     *  @type string
     *  @default <i>blank string - i.e. disabled</i>
     *
     *  @dtopt Features
     *  @name DataTable.defaults.scrollY
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "scrollY": "200px",
     *        "paginate": false
     *      } );
     *    } );
     */
    sScrollY: "",

    /**
     * __Deprecated__ The functionality provided by this parameter has now been
     * superseded by that provided through `ajax`, which should be used instead.
     *
     * Set the HTTP method that is used to make the Ajax call for server-side
     * processing or Ajax sourced data.
     *  @type string
     *  @default GET
     *
     *  @dtopt Options
     *  @dtopt Server-side
     *  @name DataTable.defaults.serverMethod
     *
     *  @deprecated 1.10. Please use `ajax` for this functionality now.
     */
    sServerMethod: "GET",

    /**
     * DataTables makes use of renderers when displaying HTML elements for
     * a table. These renderers can be added or modified by plug-ins to
     * generate suitable mark-up for a site. For example the Bootstrap
     * integration plug-in for DataTables uses a paging button renderer to
     * display pagination buttons in the mark-up required by Bootstrap.
     *
     * For further information about the renderers available see
     * DataTable.ext.renderer
     *  @type string|object
     *  @default null
     *
     *  @name DataTable.defaults.renderer
     *
     */
    renderer: null,

    /**
     * Set the data property name that DataTables should use to get a row's id
     * to set as the `id` property in the node.
     *  @type string
     *  @default DT_RowId
     *
     *  @name DataTable.defaults.rowId
     */
    rowId: "DT_RowId",
  };

  _fnHungarianMap(DataTable.defaults);

  /*
   * Developer note - See note in model.defaults.js about the use of Hungarian
   * notation and camel case.
   */

  /**
   * Column options that can be given to DataTables at initialisation time.
   *  @namespace
   */
  DataTable.defaults.column = {
    /**
     * Define which column(s) an order will occur on for this column. This
     * allows a column's ordering to take multiple columns into account when
     * doing a sort or use the data from a different column. For example first
     * name / last name columns make sense to do a multi-column sort over the
     * two columns.
     *  @type array|int
     *  @default null <i>Takes the value of the column index automatically</i>
     *
     *  @name DataTable.defaults.column.orderData
     *  @dtopt Columns
     *
     *  @example
     *    // Using `columnDefs`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [
     *          { "orderData": [ 0, 1 ], "targets": [ 0 ] },
     *          { "orderData": [ 1, 0 ], "targets": [ 1 ] },
     *          { "orderData": 2, "targets": [ 2 ] }
     *        ]
     *      } );
     *    } );
     *
     *  @example
     *    // Using `columns`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columns": [
     *          { "orderData": [ 0, 1 ] },
     *          { "orderData": [ 1, 0 ] },
     *          { "orderData": 2 },
     *          null,
     *          null
     *        ]
     *      } );
     *    } );
     */
    aDataSort: null,
    iDataSort: -1,

    /**
     * You can control the default ordering direction, and even alter the
     * behaviour of the sort handler (i.e. only allow ascending ordering etc)
     * using this parameter.
     *  @type array
     *  @default [ 'asc', 'desc' ]
     *
     *  @name DataTable.defaults.column.orderSequence
     *  @dtopt Columns
     *
     *  @example
     *    // Using `columnDefs`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [
     *          { "orderSequence": [ "asc" ], "targets": [ 1 ] },
     *          { "orderSequence": [ "desc", "asc", "asc" ], "targets": [ 2 ] },
     *          { "orderSequence": [ "desc" ], "targets": [ 3 ] }
     *        ]
     *      } );
     *    } );
     *
     *  @example
     *    // Using `columns`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columns": [
     *          null,
     *          { "orderSequence": [ "asc" ] },
     *          { "orderSequence": [ "desc", "asc", "asc" ] },
     *          { "orderSequence": [ "desc" ] },
     *          null
     *        ]
     *      } );
     *    } );
     */
    asSorting: ["asc", "desc"],

    /**
     * Enable or disable filtering on the data in this column.
     *  @type boolean
     *  @default true
     *
     *  @name DataTable.defaults.column.searchable
     *  @dtopt Columns
     *
     *  @example
     *    // Using `columnDefs`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [
     *          { "searchable": false, "targets": [ 0 ] }
     *        ] } );
     *    } );
     *
     *  @example
     *    // Using `columns`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columns": [
     *          { "searchable": false },
     *          null,
     *          null,
     *          null,
     *          null
     *        ] } );
     *    } );
     */
    bSearchable: true,

    /**
     * Enable or disable ordering on this column.
     *  @type boolean
     *  @default true
     *
     *  @name DataTable.defaults.column.orderable
     *  @dtopt Columns
     *
     *  @example
     *    // Using `columnDefs`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [
     *          { "orderable": false, "targets": [ 0 ] }
     *        ] } );
     *    } );
     *
     *  @example
     *    // Using `columns`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columns": [
     *          { "orderable": false },
     *          null,
     *          null,
     *          null,
     *          null
     *        ] } );
     *    } );
     */
    bSortable: true,

    /**
     * Enable or disable the display of this column.
     *  @type boolean
     *  @default true
     *
     *  @name DataTable.defaults.column.visible
     *  @dtopt Columns
     *
     *  @example
     *    // Using `columnDefs`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [
     *          { "visible": false, "targets": [ 0 ] }
     *        ] } );
     *    } );
     *
     *  @example
     *    // Using `columns`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columns": [
     *          { "visible": false },
     *          null,
     *          null,
     *          null,
     *          null
     *        ] } );
     *    } );
     */
    bVisible: true,

    /**
     * Developer definable function that is called whenever a cell is created (Ajax source,
     * etc) or processed for input (DOM source). This can be used as a compliment to mRender
     * allowing you to modify the DOM element (add background colour for example) when the
     * element is available.
     *  @type function
     *  @param {element} td The TD node that has been created
     *  @param {*} cellData The Data for the cell
     *  @param {array|object} rowData The data for the whole row
     *  @param {int} row The row index for the aoData data store
     *  @param {int} col The column index for aoColumns
     *
     *  @name DataTable.defaults.column.createdCell
     *  @dtopt Columns
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [ {
     *          "targets": [3],
     *          "createdCell": function (td, cellData, rowData, row, col) {
     *            if ( cellData == "1.7" ) {
     *              $(td).css('color', 'blue')
     *            }
     *          }
     *        } ]
     *      });
     *    } );
     */
    fnCreatedCell: null,

    /**
     * This parameter has been replaced by `data` in DataTables to ensure naming
     * consistency. `dataProp` can still be used, as there is backwards
     * compatibility in DataTables for this option, but it is strongly
     * recommended that you use `data` in preference to `dataProp`.
     *  @name DataTable.defaults.column.dataProp
     */

    /**
     * This property can be used to read data from any data source property,
     * including deeply nested objects / properties. `data` can be given in a
     * number of different ways which effect its behaviour:
     *
     * * `integer` - treated as an array index for the data source. This is the
     *   default that DataTables uses (incrementally increased for each column).
     * * `string` - read an object property from the data source. There are
     *   three 'special' options that can be used in the string to alter how
     *   DataTables reads the data from the source object:
     *    * `.` - Dotted Javascript notation. Just as you use a `.` in
     *      Javascript to read from nested objects, so to can the options
     *      specified in `data`. For example: `browser.version` or
     *      `browser.name`. If your object parameter name contains a period, use
     *      `\\` to escape it - i.e. `first\\.name`.
     *    * `[]` - Array notation. DataTables can automatically combine data
     *      from and array source, joining the data with the characters provided
     *      between the two brackets. For example: `name[, ]` would provide a
     *      comma-space separated list from the source array. If no characters
     *      are provided between the brackets, the original array source is
     *      returned.
     *    * `()` - Function notation. Adding `()` to the end of a parameter will
     *      execute a function of the name given. For example: `browser()` for a
     *      simple function on the data source, `browser.version()` for a
     *      function in a nested property or even `browser().version` to get an
     *      object property if the function called returns an object. Note that
     *      function notation is recommended for use in `render` rather than
     *      `data` as it is much simpler to use as a renderer.
     * * `null` - use the original data source for the row rather than plucking
     *   data directly from it. This action has effects on two other
     *   initialisation options:
     *    * `defaultContent` - When null is given as the `data` option and
     *      `defaultContent` is specified for the column, the value defined by
     *      `defaultContent` will be used for the cell.
     *    * `render` - When null is used for the `data` option and the `render`
     *      option is specified for the column, the whole data source for the
     *      row is used for the renderer.
     * * `function` - the function given will be executed whenever DataTables
     *   needs to set or get the data for a cell in the column. The function
     *   takes three parameters:
     *    * Parameters:
     *      * `{array|object}` The data source for the row
     *      * `{string}` The type call data requested - this will be 'set' when
     *        setting data or 'filter', 'display', 'type', 'sort' or undefined
     *        when gathering data. Note that when `undefined` is given for the
     *        type DataTables expects to get the raw data for the object back<
     *      * `{*}` Data to set when the second parameter is 'set'.
     *    * Return:
     *      * The return value from the function is not required when 'set' is
     *        the type of call, but otherwise the return is what will be used
     *        for the data requested.
     *
     * Note that `data` is a getter and setter option. If you just require
     * formatting of data for output, you will likely want to use `render` which
     * is simply a getter and thus simpler to use.
     *
     * Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The
     * name change reflects the flexibility of this property and is consistent
     * with the naming of mRender. If 'mDataProp' is given, then it will still
     * be used by DataTables, as it automatically maps the old name to the new
     * if required.
     *
     *  @type string|int|function|null
     *  @default null <i>Use automatically calculated column index</i>
     *
     *  @name DataTable.defaults.column.data
     *  @dtopt Columns
     *
     *  @example
     *    // Read table data from objects
     *    // JSON structure for each row:
     *    //   {
     *    //      "engine": {value},
     *    //      "browser": {value},
     *    //      "platform": {value},
     *    //      "version": {value},
     *    //      "grade": {value}
     *    //   }
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "ajaxSource": "sources/objects.txt",
     *        "columns": [
     *          { "data": "engine" },
     *          { "data": "browser" },
     *          { "data": "platform" },
     *          { "data": "version" },
     *          { "data": "grade" }
     *        ]
     *      } );
     *    } );
     *
     *  @example
     *    // Read information from deeply nested objects
     *    // JSON structure for each row:
     *    //   {
     *    //      "engine": {value},
     *    //      "browser": {value},
     *    //      "platform": {
     *    //         "inner": {value}
     *    //      },
     *    //      "details": [
     *    //         {value}, {value}
     *    //      ]
     *    //   }
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "ajaxSource": "sources/deep.txt",
     *        "columns": [
     *          { "data": "engine" },
     *          { "data": "browser" },
     *          { "data": "platform.inner" },
     *          { "data": "platform.details.0" },
     *          { "data": "platform.details.1" }
     *        ]
     *      } );
     *    } );
     *
     *  @example
     *    // Using `data` as a function to provide different information for
     *    // sorting, filtering and display. In this case, currency (price)
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [ {
     *          "targets": [ 0 ],
     *          "data": function ( source, type, val ) {
     *            if (type === 'set') {
     *              source.price = val;
     *              // Store the computed dislay and filter values for efficiency
     *              source.price_display = val=="" ? "" : "$"+numberFormat(val);
     *              source.price_filter  = val=="" ? "" : "$"+numberFormat(val)+" "+val;
     *              return;
     *            }
     *            else if (type === 'display') {
     *              return source.price_display;
     *            }
     *            else if (type === 'filter') {
     *              return source.price_filter;
     *            }
     *            // 'sort', 'type' and undefined all just use the integer
     *            return source.price;
     *          }
     *        } ]
     *      } );
     *    } );
     *
     *  @example
     *    // Using default content
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [ {
     *          "targets": [ 0 ],
     *          "data": null,
     *          "defaultContent": "Click to edit"
     *        } ]
     *      } );
     *    } );
     *
     *  @example
     *    // Using array notation - outputting a list from an array
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [ {
     *          "targets": [ 0 ],
     *          "data": "name[, ]"
     *        } ]
     *      } );
     *    } );
     *
     */
    mData: null,

    /**
     * This property is the rendering partner to `data` and it is suggested that
     * when you want to manipulate data for display (including filtering,
     * sorting etc) without altering the underlying data for the table, use this
     * property. `render` can be considered to be the the read only companion to
     * `data` which is read / write (then as such more complex). Like `data`
     * this option can be given in a number of different ways to effect its
     * behaviour:
     *
     * * `integer` - treated as an array index for the data source. This is the
     *   default that DataTables uses (incrementally increased for each column).
     * * `string` - read an object property from the data source. There are
     *   three 'special' options that can be used in the string to alter how
     *   DataTables reads the data from the source object:
     *    * `.` - Dotted Javascript notation. Just as you use a `.` in
     *      Javascript to read from nested objects, so to can the options
     *      specified in `data`. For example: `browser.version` or
     *      `browser.name`. If your object parameter name contains a period, use
     *      `\\` to escape it - i.e. `first\\.name`.
     *    * `[]` - Array notation. DataTables can automatically combine data
     *      from and array source, joining the data with the characters provided
     *      between the two brackets. For example: `name[, ]` would provide a
     *      comma-space separated list from the source array. If no characters
     *      are provided between the brackets, the original array source is
     *      returned.
     *    * `()` - Function notation. Adding `()` to the end of a parameter will
     *      execute a function of the name given. For example: `browser()` for a
     *      simple function on the data source, `browser.version()` for a
     *      function in a nested property or even `browser().version` to get an
     *      object property if the function called returns an object.
     * * `object` - use different data for the different data types requested by
     *   DataTables ('filter', 'display', 'type' or 'sort'). The property names
     *   of the object is the data type the property refers to and the value can
     *   defined using an integer, string or function using the same rules as
     *   `render` normally does. Note that an `_` option _must_ be specified.
     *   This is the default value to use if you haven't specified a value for
     *   the data type requested by DataTables.
     * * `function` - the function given will be executed whenever DataTables
     *   needs to set or get the data for a cell in the column. The function
     *   takes three parameters:
     *    * Parameters:
     *      * {array|object} The data source for the row (based on `data`)
     *      * {string} The type call data requested - this will be 'filter',
     *        'display', 'type' or 'sort'.
     *      * {array|object} The full data source for the row (not based on
     *        `data`)
     *    * Return:
     *      * The return value from the function is what will be used for the
     *        data requested.
     *
     *  @type string|int|function|object|null
     *  @default null Use the data source value.
     *
     *  @name DataTable.defaults.column.render
     *  @dtopt Columns
     *
     *  @example
     *    // Create a comma separated list from an array of objects
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "ajaxSource": "sources/deep.txt",
     *        "columns": [
     *          { "data": "engine" },
     *          { "data": "browser" },
     *          {
     *            "data": "platform",
     *            "render": "[, ].name"
     *          }
     *        ]
     *      } );
     *    } );
     *
     *  @example
     *    // Execute a function to obtain data
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [ {
     *          "targets": [ 0 ],
     *          "data": null, // Use the full data source object for the renderer's source
     *          "render": "browserName()"
     *        } ]
     *      } );
     *    } );
     *
     *  @example
     *    // As an object, extracting different data for the different types
     *    // This would be used with a data source such as:
     *    //   { "phone": 5552368, "phone_filter": "5552368 555-2368", "phone_display": "555-2368" }
     *    // Here the `phone` integer is used for sorting and type detection, while `phone_filter`
     *    // (which has both forms) is used for filtering for if a user inputs either format, while
     *    // the formatted phone number is the one that is shown in the table.
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [ {
     *          "targets": [ 0 ],
     *          "data": null, // Use the full data source object for the renderer's source
     *          "render": {
     *            "_": "phone",
     *            "filter": "phone_filter",
     *            "display": "phone_display"
     *          }
     *        } ]
     *      } );
     *    } );
     *
     *  @example
     *    // Use as a function to create a link from the data source
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [ {
     *          "targets": [ 0 ],
     *          "data": "download_link",
     *          "render": function ( data, type, full ) {
     *            return '<a href="'+data+'">Download</a>';
     *          }
     *        } ]
     *      } );
     *    } );
     */
    mRender: null,

    /**
     * Change the cell type created for the column - either TD cells or TH cells. This
     * can be useful as TH cells have semantic meaning in the table body, allowing them
     * to act as a header for a row (you may wish to add scope='row' to the TH elements).
     *  @type string
     *  @default td
     *
     *  @name DataTable.defaults.column.cellType
     *  @dtopt Columns
     *
     *  @example
     *    // Make the first column use TH cells
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [ {
     *          "targets": [ 0 ],
     *          "cellType": "th"
     *        } ]
     *      } );
     *    } );
     */
    sCellType: "td",

    /**
     * Class to give to each cell in this column.
     *  @type string
     *  @default <i>Empty string</i>
     *
     *  @name DataTable.defaults.column.class
     *  @dtopt Columns
     *
     *  @example
     *    // Using `columnDefs`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [
     *          { "class": "my_class", "targets": [ 0 ] }
     *        ]
     *      } );
     *    } );
     *
     *  @example
     *    // Using `columns`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columns": [
     *          { "class": "my_class" },
     *          null,
     *          null,
     *          null,
     *          null
     *        ]
     *      } );
     *    } );
     */
    sClass: "",

    /**
     * When DataTables calculates the column widths to assign to each column,
     * it finds the longest string in each column and then constructs a
     * temporary table and reads the widths from that. The problem with this
     * is that "mmm" is much wider then "iiii", but the latter is a longer
     * string - thus the calculation can go wrong (doing it properly and putting
     * it into an DOM object and measuring that is horribly(!) slow). Thus as
     * a "work around" we provide this option. It will append its value to the
     * text that is found to be the longest string for the column - i.e. padding.
     * Generally you shouldn't need this!
     *  @type string
     *  @default <i>Empty string<i>
     *
     *  @name DataTable.defaults.column.contentPadding
     *  @dtopt Columns
     *
     *  @example
     *    // Using `columns`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columns": [
     *          null,
     *          null,
     *          null,
     *          {
     *            "contentPadding": "mmm"
     *          }
     *        ]
     *      } );
     *    } );
     */
    sContentPadding: "",

    /**
     * Allows a default value to be given for a column's data, and will be used
     * whenever a null data source is encountered (this can be because `data`
     * is set to null, or because the data source itself is null).
     *  @type string
     *  @default null
     *
     *  @name DataTable.defaults.column.defaultContent
     *  @dtopt Columns
     *
     *  @example
     *    // Using `columnDefs`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [
     *          {
     *            "data": null,
     *            "defaultContent": "Edit",
     *            "targets": [ -1 ]
     *          }
     *        ]
     *      } );
     *    } );
     *
     *  @example
     *    // Using `columns`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columns": [
     *          null,
     *          null,
     *          null,
     *          {
     *            "data": null,
     *            "defaultContent": "Edit"
     *          }
     *        ]
     *      } );
     *    } );
     */
    sDefaultContent: null,

    /**
     * This parameter is only used in DataTables' server-side processing. It can
     * be exceptionally useful to know what columns are being displayed on the
     * client side, and to map these to database fields. When defined, the names
     * also allow DataTables to reorder information from the server if it comes
     * back in an unexpected order (i.e. if you switch your columns around on the
     * client-side, your server-side code does not also need updating).
     *  @type string
     *  @default <i>Empty string</i>
     *
     *  @name DataTable.defaults.column.name
     *  @dtopt Columns
     *
     *  @example
     *    // Using `columnDefs`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [
     *          { "name": "engine", "targets": [ 0 ] },
     *          { "name": "browser", "targets": [ 1 ] },
     *          { "name": "platform", "targets": [ 2 ] },
     *          { "name": "version", "targets": [ 3 ] },
     *          { "name": "grade", "targets": [ 4 ] }
     *        ]
     *      } );
     *    } );
     *
     *  @example
     *    // Using `columns`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columns": [
     *          { "name": "engine" },
     *          { "name": "browser" },
     *          { "name": "platform" },
     *          { "name": "version" },
     *          { "name": "grade" }
     *        ]
     *      } );
     *    } );
     */
    sName: "",

    /**
     * Defines a data source type for the ordering which can be used to read
     * real-time information from the table (updating the internally cached
     * version) prior to ordering. This allows ordering to occur on user
     * editable elements such as form inputs.
     *  @type string
     *  @default std
     *
     *  @name DataTable.defaults.column.orderDataType
     *  @dtopt Columns
     *
     *  @example
     *    // Using `columnDefs`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [
     *          { "orderDataType": "dom-text", "targets": [ 2, 3 ] },
     *          { "type": "numeric", "targets": [ 3 ] },
     *          { "orderDataType": "dom-select", "targets": [ 4 ] },
     *          { "orderDataType": "dom-checkbox", "targets": [ 5 ] }
     *        ]
     *      } );
     *    } );
     *
     *  @example
     *    // Using `columns`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columns": [
     *          null,
     *          null,
     *          { "orderDataType": "dom-text" },
     *          { "orderDataType": "dom-text", "type": "numeric" },
     *          { "orderDataType": "dom-select" },
     *          { "orderDataType": "dom-checkbox" }
     *        ]
     *      } );
     *    } );
     */
    sSortDataType: "std",

    /**
     * The title of this column.
     *  @type string
     *  @default null <i>Derived from the 'TH' value for this column in the
     *    original HTML table.</i>
     *
     *  @name DataTable.defaults.column.title
     *  @dtopt Columns
     *
     *  @example
     *    // Using `columnDefs`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [
     *          { "title": "My column title", "targets": [ 0 ] }
     *        ]
     *      } );
     *    } );
     *
     *  @example
     *    // Using `columns`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columns": [
     *          { "title": "My column title" },
     *          null,
     *          null,
     *          null,
     *          null
     *        ]
     *      } );
     *    } );
     */
    sTitle: null,

    /**
     * The type allows you to specify how the data for this column will be
     * ordered. Four types (string, numeric, date and html (which will strip
     * HTML tags before ordering)) are currently available. Note that only date
     * formats understood by Javascript's Date() object will be accepted as type
     * date. For example: "Mar 26, 2008 5:03 PM". May take the values: 'string',
     * 'numeric', 'date' or 'html' (by default). Further types can be adding
     * through plug-ins.
     *  @type string
     *  @default null <i>Auto-detected from raw data</i>
     *
     *  @name DataTable.defaults.column.type
     *  @dtopt Columns
     *
     *  @example
     *    // Using `columnDefs`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [
     *          { "type": "html", "targets": [ 0 ] }
     *        ]
     *      } );
     *    } );
     *
     *  @example
     *    // Using `columns`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columns": [
     *          { "type": "html" },
     *          null,
     *          null,
     *          null,
     *          null
     *        ]
     *      } );
     *    } );
     */
    sType: null,

    /**
     * Defining the width of the column, this parameter may take any CSS value
     * (3em, 20px etc). DataTables applies 'smart' widths to columns which have not
     * been given a specific width through this interface ensuring that the table
     * remains readable.
     *  @type string
     *  @default null <i>Automatic</i>
     *
     *  @name DataTable.defaults.column.width
     *  @dtopt Columns
     *
     *  @example
     *    // Using `columnDefs`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [
     *          { "width": "20%", "targets": [ 0 ] }
     *        ]
     *      } );
     *    } );
     *
     *  @example
     *    // Using `columns`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columns": [
     *          { "width": "20%" },
     *          null,
     *          null,
     *          null,
     *          null
     *        ]
     *      } );
     *    } );
     */
    sWidth: null,
  };

  _fnHungarianMap(DataTable.defaults.column);

  /**
   * DataTables settings object - this holds all the information needed for a
   * given table, including configuration, data and current application of the
   * table options. DataTables does not have a single instance for each DataTable
   * with the settings attached to that instance, but rather instances of the
   * DataTable "class" are created on-the-fly as needed (typically by a
   * $().dataTable() call) and the settings object is then applied to that
   * instance.
   *
   * Note that this object is related to {@link DataTable.defaults} but this
   * one is the internal data store for DataTables's cache of columns. It should
   * NOT be manipulated outside of DataTables. Any configuration should be done
   * through the initialisation options.
   *  @namespace
   *  @todo Really should attach the settings object to individual instances so we
   *    don't need to create new instances on each $().dataTable() call (if the
   *    table already exists). It would also save passing oSettings around and
   *    into every single function. However, this is a very significant
   *    architecture change for DataTables and will almost certainly break
   *    backwards compatibility with older installations. This is something that
   *    will be done in 2.0.
   */
  DataTable.models.oSettings = {
    /**
     * Primary features of DataTables and their enablement state.
     *  @namespace
     */
    oFeatures: {
      /**
       * Flag to say if DataTables should automatically try to calculate the
       * optimum table and columns widths (true) or not (false).
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type boolean
       */
      bAutoWidth: null,

      /**
       * Delay the creation of TR and TD elements until they are actually
       * needed by a driven page draw. This can give a significant speed
       * increase for Ajax source and Javascript source data, but makes no
       * difference at all fro DOM and server-side processing tables.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type boolean
       */
      bDeferRender: null,

      /**
       * Enable filtering on the table or not. Note that if this is disabled
       * then there is no filtering at all on the table, including fnFilter.
       * To just remove the filtering input use sDom and remove the 'f' option.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type boolean
       */
      bFilter: null,

      /**
       * Table information element (the 'Showing x of y records' div) enable
       * flag.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type boolean
       */
      bInfo: null,

      /**
       * Present a user control allowing the end user to change the page size
       * when pagination is enabled.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type boolean
       */
      bLengthChange: null,

      /**
       * Pagination enabled or not. Note that if this is disabled then length
       * changing must also be disabled.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type boolean
       */
      bPaginate: null,

      /**
       * Processing indicator enable flag whenever DataTables is enacting a
       * user request - typically an Ajax request for server-side processing.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type boolean
       */
      bProcessing: null,

      /**
       * Server-side processing enabled flag - when enabled DataTables will
       * get all data from the server for every draw - there is no filtering,
       * sorting or paging done on the client-side.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type boolean
       */
      bServerSide: null,

      /**
       * Sorting enablement flag.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type boolean
       */
      bSort: null,

      /**
       * Multi-column sorting
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type boolean
       */
      bSortMulti: null,

      /**
       * Apply a class to the columns which are being sorted to provide a
       * visual highlight or not. This can slow things down when enabled since
       * there is a lot of DOM interaction.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type boolean
       */
      bSortClasses: null,

      /**
       * State saving enablement flag.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type boolean
       */
      bStateSave: null,
    },

    /**
     * Scrolling settings for a table.
     *  @namespace
     */
    oScroll: {
      /**
       * When the table is shorter in height than sScrollY, collapse the
       * table container down to the height of the table (when true).
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type boolean
       */
      bCollapse: null,

      /**
       * Width of the scrollbar for the web-browser's platform. Calculated
       * during table initialisation.
       *  @type int
       *  @default 0
       */
      iBarWidth: 0,

      /**
       * Viewport width for horizontal scrolling. Horizontal scrolling is
       * disabled if an empty string.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type string
       */
      sX: null,

      /**
       * Width to expand the table to when using x-scrolling. Typically you
       * should not need to use this.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type string
       *  @deprecated
       */
      sXInner: null,

      /**
       * Viewport height for vertical scrolling. Vertical scrolling is disabled
       * if an empty string.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type string
       */
      sY: null,
    },

    /**
     * Language information for the table.
     *  @namespace
     *  @extends DataTable.defaults.oLanguage
     */
    oLanguage: {
      /**
       * Information callback function. See
       * {@link DataTable.defaults.fnInfoCallback}
       *  @type function
       *  @default null
       */
      fnInfoCallback: null,
    },

    /**
     * Browser support parameters
     *  @namespace
     */
    oBrowser: {
      /**
       * Indicate if the browser incorrectly calculates width:100% inside a
       * scrolling element (IE6/7)
       *  @type boolean
       *  @default false
       */
      bScrollOversize: false,

      /**
       * Determine if the vertical scrollbar is on the right or left of the
       * scrolling container - needed for rtl language layout, although not
       * all browsers move the scrollbar (Safari).
       *  @type boolean
       *  @default false
       */
      bScrollbarLeft: false,

      /**
       * Flag for if `getBoundingClientRect` is fully supported or not
       *  @type boolean
       *  @default false
       */
      bBounding: false,

      /**
       * Browser scrollbar width
       *  @type integer
       *  @default 0
       */
      barWidth: 0,
    },

    ajax: null,

    /**
     * Array referencing the nodes which are used for the features. The
     * parameters of this object match what is allowed by sDom - i.e.
     *   <ul>
     *     <li>'l' - Length changing</li>
     *     <li>'f' - Filtering input</li>
     *     <li>'t' - The table!</li>
     *     <li>'i' - Information</li>
     *     <li>'p' - Pagination</li>
     *     <li>'r' - pRocessing</li>
     *   </ul>
     *  @type array
     *  @default []
     */
    aanFeatures: [],

    /**
     * Store data information - see {@link DataTable.models.oRow} for detailed
     * information.
     *  @type array
     *  @default []
     */
    aoData: [],

    /**
     * Array of indexes which are in the current display (after filtering etc)
     *  @type array
     *  @default []
     */
    aiDisplay: [],

    /**
     * Array of indexes for display - no filtering
     *  @type array
     *  @default []
     */
    aiDisplayMaster: [],

    /**
     * Map of row ids to data indexes
     *  @type object
     *  @default {}
     */
    aIds: {},

    /**
     * Store information about each column that is in use
     *  @type array
     *  @default []
     */
    aoColumns: [],

    /**
     * Store information about the table's header
     *  @type array
     *  @default []
     */
    aoHeader: [],

    /**
     * Store information about the table's footer
     *  @type array
     *  @default []
     */
    aoFooter: [],

    /**
     * Store the applied global search information in case we want to force a
     * research or compare the old search to a new one.
     * Note that this parameter will be set by the initialisation routine. To
     * set a default use {@link DataTable.defaults}.
     *  @namespace
     *  @extends DataTable.models.oSearch
     */
    oPreviousSearch: {},

    /**
     * Store the applied search for each column - see
     * {@link DataTable.models.oSearch} for the format that is used for the
     * filtering information for each column.
     *  @type array
     *  @default []
     */
    aoPreSearchCols: [],

    /**
     * Sorting that is applied to the table. Note that the inner arrays are
     * used in the following manner:
     * <ul>
     *   <li>Index 0 - column number</li>
     *   <li>Index 1 - current sorting direction</li>
     * </ul>
     * Note that this parameter will be set by the initialisation routine. To
     * set a default use {@link DataTable.defaults}.
     *  @type array
     *  @todo These inner arrays should really be objects
     */
    aaSorting: null,

    /**
     * Sorting that is always applied to the table (i.e. prefixed in front of
     * aaSorting).
     * Note that this parameter will be set by the initialisation routine. To
     * set a default use {@link DataTable.defaults}.
     *  @type array
     *  @default []
     */
    aaSortingFixed: [],

    /**
     * Classes to use for the striping of a table.
     * Note that this parameter will be set by the initialisation routine. To
     * set a default use {@link DataTable.defaults}.
     *  @type array
     *  @default []
     */
    asStripeClasses: null,

    /**
     * If restoring a table - we should restore its striping classes as well
     *  @type array
     *  @default []
     */
    asDestroyStripes: [],

    /**
     * If restoring a table - we should restore its width
     *  @type int
     *  @default 0
     */
    sDestroyWidth: 0,

    /**
     * Callback functions array for every time a row is inserted (i.e. on a draw).
     *  @type array
     *  @default []
     */
    aoRowCallback: [],

    /**
     * Callback functions for the header on each draw.
     *  @type array
     *  @default []
     */
    aoHeaderCallback: [],

    /**
     * Callback function for the footer on each draw.
     *  @type array
     *  @default []
     */
    aoFooterCallback: [],

    /**
     * Array of callback functions for draw callback functions
     *  @type array
     *  @default []
     */
    aoDrawCallback: [],

    /**
     * Array of callback functions for row created function
     *  @type array
     *  @default []
     */
    aoRowCreatedCallback: [],

    /**
     * Callback functions for just before the table is redrawn. A return of
     * false will be used to cancel the draw.
     *  @type array
     *  @default []
     */
    aoPreDrawCallback: [],

    /**
     * Callback functions for when the table has been initialised.
     *  @type array
     *  @default []
     */
    aoInitComplete: [],

    /**
     * Callbacks for modifying the settings to be stored for state saving, prior to
     * saving state.
     *  @type array
     *  @default []
     */
    aoStateSaveParams: [],

    /**
     * Callbacks for modifying the settings that have been stored for state saving
     * prior to using the stored values to restore the state.
     *  @type array
     *  @default []
     */
    aoStateLoadParams: [],

    /**
     * Callbacks for operating on the settings object once the saved state has been
     * loaded
     *  @type array
     *  @default []
     */
    aoStateLoaded: [],

    /**
     * Cache the table ID for quick access
     *  @type string
     *  @default <i>Empty string</i>
     */
    sTableId: "",

    /**
     * The TABLE node for the main table
     *  @type node
     *  @default null
     */
    nTable: null,

    /**
     * Permanent ref to the thead element
     *  @type node
     *  @default null
     */
    nTHead: null,

    /**
     * Permanent ref to the tfoot element - if it exists
     *  @type node
     *  @default null
     */
    nTFoot: null,

    /**
     * Permanent ref to the tbody element
     *  @type node
     *  @default null
     */
    nTBody: null,

    /**
     * Cache the wrapper node (contains all DataTables controlled elements)
     *  @type node
     *  @default null
     */
    nTableWrapper: null,

    /**
     * Indicate if when using server-side processing the loading of data
     * should be deferred until the second draw.
     * Note that this parameter will be set by the initialisation routine. To
     * set a default use {@link DataTable.defaults}.
     *  @type boolean
     *  @default false
     */
    bDeferLoading: false,

    /**
     * Indicate if all required information has been read in
     *  @type boolean
     *  @default false
     */
    bInitialised: false,

    /**
     * Information about open rows. Each object in the array has the parameters
     * 'nTr' and 'nParent'
     *  @type array
     *  @default []
     */
    aoOpenRows: [],

    /**
     * Dictate the positioning of DataTables' control elements - see
     * {@link DataTable.model.oInit.sDom}.
     * Note that this parameter will be set by the initialisation routine. To
     * set a default use {@link DataTable.defaults}.
     *  @type string
     *  @default null
     */
    sDom: null,

    /**
     * Search delay (in mS)
     *  @type integer
     *  @default null
     */
    searchDelay: null,

    /**
     * Which type of pagination should be used.
     * Note that this parameter will be set by the initialisation routine. To
     * set a default use {@link DataTable.defaults}.
     *  @type string
     *  @default two_button
     */
    sPaginationType: "two_button",

    /**
     * The state duration (for `stateSave`) in seconds.
     * Note that this parameter will be set by the initialisation routine. To
     * set a default use {@link DataTable.defaults}.
     *  @type int
     *  @default 0
     */
    iStateDuration: 0,

    /**
     * Array of callback functions for state saving. Each array element is an
     * object with the following parameters:
     *   <ul>
     *     <li>function:fn - function to call. Takes two parameters, oSettings
     *       and the JSON string to save that has been thus far created. Returns
     *       a JSON string to be inserted into a json object
     *       (i.e. '"param": [ 0, 1, 2]')</li>
     *     <li>string:sName - name of callback</li>
     *   </ul>
     *  @type array
     *  @default []
     */
    aoStateSave: [],

    /**
     * Array of callback functions for state loading. Each array element is an
     * object with the following parameters:
     *   <ul>
     *     <li>function:fn - function to call. Takes two parameters, oSettings
     *       and the object stored. May return false to cancel state loading</li>
     *     <li>string:sName - name of callback</li>
     *   </ul>
     *  @type array
     *  @default []
     */
    aoStateLoad: [],

    /**
     * State that was saved. Useful for back reference
     *  @type object
     *  @default null
     */
    oSavedState: null,

    /**
     * State that was loaded. Useful for back reference
     *  @type object
     *  @default null
     */
    oLoadedState: null,

    /**
     * Source url for AJAX data for the table.
     * Note that this parameter will be set by the initialisation routine. To
     * set a default use {@link DataTable.defaults}.
     *  @type string
     *  @default null
     */
    sAjaxSource: null,

    /**
     * Property from a given object from which to read the table data from. This
     * can be an empty string (when not server-side processing), in which case
     * it is  assumed an an array is given directly.
     * Note that this parameter will be set by the initialisation routine. To
     * set a default use {@link DataTable.defaults}.
     *  @type string
     */
    sAjaxDataProp: null,

    /**
     * Note if draw should be blocked while getting data
     *  @type boolean
     *  @default true
     */
    bAjaxDataGet: true,

    /**
     * The last jQuery XHR object that was used for server-side data gathering.
     * This can be used for working with the XHR information in one of the
     * callbacks
     *  @type object
     *  @default null
     */
    jqXHR: null,

    /**
     * JSON returned from the server in the last Ajax request
     *  @type object
     *  @default undefined
     */
    json: undefined,

    /**
     * Data submitted as part of the last Ajax request
     *  @type object
     *  @default undefined
     */
    oAjaxData: undefined,

    /**
     * Function to get the server-side data.
     * Note that this parameter will be set by the initialisation routine. To
     * set a default use {@link DataTable.defaults}.
     *  @type function
     */
    fnServerData: null,

    /**
     * Functions which are called prior to sending an Ajax request so extra
     * parameters can easily be sent to the server
     *  @type array
     *  @default []
     */
    aoServerParams: [],

    /**
     * Send the XHR HTTP method - GET or POST (could be PUT or DELETE if
     * required).
     * Note that this parameter will be set by the initialisation routine. To
     * set a default use {@link DataTable.defaults}.
     *  @type string
     */
    sServerMethod: null,

    /**
     * Format numbers for display.
     * Note that this parameter will be set by the initialisation routine. To
     * set a default use {@link DataTable.defaults}.
     *  @type function
     */
    fnFormatNumber: null,

    /**
     * List of options that can be used for the user selectable length menu.
     * Note that this parameter will be set by the initialisation routine. To
     * set a default use {@link DataTable.defaults}.
     *  @type array
     *  @default []
     */
    aLengthMenu: null,

    /**
     * Counter for the draws that the table does. Also used as a tracker for
     * server-side processing
     *  @type int
     *  @default 0
     */
    iDraw: 0,

    /**
     * Indicate if a redraw is being done - useful for Ajax
     *  @type boolean
     *  @default false
     */
    bDrawing: false,

    /**
     * Draw index (iDraw) of the last error when parsing the returned data
     *  @type int
     *  @default -1
     */
    iDrawError: -1,

    /**
     * Paging display length
     *  @type int
     *  @default 10
     */
    _iDisplayLength: 10,

    /**
     * Paging start point - aiDisplay index
     *  @type int
     *  @default 0
     */
    _iDisplayStart: 0,

    /**
     * Server-side processing - number of records in the result set
     * (i.e. before filtering), Use fnRecordsTotal rather than
     * this property to get the value of the number of records, regardless of
     * the server-side processing setting.
     *  @type int
     *  @default 0
     *  @private
     */
    _iRecordsTotal: 0,

    /**
     * Server-side processing - number of records in the current display set
     * (i.e. after filtering). Use fnRecordsDisplay rather than
     * this property to get the value of the number of records, regardless of
     * the server-side processing setting.
     *  @type boolean
     *  @default 0
     *  @private
     */
    _iRecordsDisplay: 0,

    /**
     * Flag to indicate if jQuery UI marking and classes should be used.
     * Note that this parameter will be set by the initialisation routine. To
     * set a default use {@link DataTable.defaults}.
     *  @type boolean
     */
    bJUI: null,

    /**
     * The classes to use for the table
     *  @type object
     *  @default {}
     */
    oClasses: {},

    /**
     * Flag attached to the settings object so you can check in the draw
     * callback if filtering has been done in the draw. Deprecated in favour of
     * events.
     *  @type boolean
     *  @default false
     *  @deprecated
     */
    bFiltered: false,

    /**
     * Flag attached to the settings object so you can check in the draw
     * callback if sorting has been done in the draw. Deprecated in favour of
     * events.
     *  @type boolean
     *  @default false
     *  @deprecated
     */
    bSorted: false,

    /**
     * Indicate that if multiple rows are in the header and there is more than
     * one unique cell per column, if the top one (true) or bottom one (false)
     * should be used for sorting / title by DataTables.
     * Note that this parameter will be set by the initialisation routine. To
     * set a default use {@link DataTable.defaults}.
     *  @type boolean
     */
    bSortCellsTop: null,

    /**
     * Initialisation object that is used for the table
     *  @type object
     *  @default null
     */
    oInit: null,

    /**
     * Destroy callback functions - for plug-ins to attach themselves to the
     * destroy so they can clean up markup and events.
     *  @type array
     *  @default []
     */
    aoDestroyCallback: [],

    /**
     * Get the number of records in the current record set, before filtering
     *  @type function
     */
    fnRecordsTotal: function () {
      return _fnDataSource(this) == "ssp"
        ? this._iRecordsTotal * 1
        : this.aiDisplayMaster.length;
    },

    /**
     * Get the number of records in the current record set, after filtering
     *  @type function
     */
    fnRecordsDisplay: function () {
      return _fnDataSource(this) == "ssp"
        ? this._iRecordsDisplay * 1
        : this.aiDisplay.length;
    },

    /**
     * Get the display end point - aiDisplay index
     *  @type function
     */
    fnDisplayEnd: function () {
      var len = this._iDisplayLength,
        start = this._iDisplayStart,
        calc = start + len,
        records = this.aiDisplay.length,
        features = this.oFeatures,
        paginate = features.bPaginate;

      if (features.bServerSide) {
        return paginate === false || len === -1
          ? start + records
          : Math.min(start + len, this._iRecordsDisplay);
      } else {
        return !paginate || calc > records || len === -1 ? records : calc;
      }
    },

    /**
     * The DataTables object for this table
     *  @type object
     *  @default null
     */
    oInstance: null,

    /**
     * Unique identifier for each instance of the DataTables object. If there
     * is an ID on the table node, then it takes that value, otherwise an
     * incrementing internal counter is used.
     *  @type string
     *  @default null
     */
    sInstance: null,

    /**
     * tabindex attribute value that is added to DataTables control elements, allowing
     * keyboard navigation of the table and its controls.
     */
    iTabIndex: 0,

    /**
     * DIV container for the footer scrolling table if scrolling
     */
    nScrollHead: null,

    /**
     * DIV container for the footer scrolling table if scrolling
     */
    nScrollFoot: null,

    /**
     * Last applied sort
     *  @type array
     *  @default []
     */
    aLastSort: [],

    /**
     * Stored plug-in instances
     *  @type object
     *  @default {}
     */
    oPlugins: {},

    /**
     * Function used to get a row's id from the row's data
     *  @type function
     *  @default null
     */
    rowIdFn: null,

    /**
     * Data location where to store a row's id
     *  @type string
     *  @default null
     */
    rowId: null,
  };

  /**
   * Extension object for DataTables that is used to provide all extension
   * options.
   *
   * Note that the `DataTable.ext` object is available through
   * `jQuery.fn.dataTable.ext` where it may be accessed and manipulated. It is
   * also aliased to `jQuery.fn.dataTableExt` for historic reasons.
   *  @namespace
   *  @extends DataTable.models.ext
   */

  /**
   * DataTables extensions
   *
   * This namespace acts as a collection area for plug-ins that can be used to
   * extend DataTables capabilities. Indeed many of the build in methods
   * use this method to provide their own capabilities (sorting methods for
   * example).
   *
   * Note that this namespace is aliased to `jQuery.fn.dataTableExt` for legacy
   * reasons
   *
   *  @namespace
   */
  DataTable.ext = _ext = {
    /**
     * Buttons. For use with the Buttons extension for DataTables. This is
     * defined here so other extensions can define buttons regardless of load
     * order. It is _not_ used by DataTables core.
     *
     *  @type object
     *  @default {}
     */
    buttons: {},

    /**
     * Element class names
     *
     *  @type object
     *  @default {}
     */
    classes: {},

    /**
     * DataTables build type (expanded by the download builder)
     *
     *  @type string
     */
    builder: "-source-",

    /**
     * Error reporting.
     *
     * How should DataTables report an error. Can take the value 'alert',
     * 'throw', 'none' or a function.
     *
     *  @type string|function
     *  @default alert
     */
    errMode: "alert",

    /**
     * Feature plug-ins.
     *
     * This is an array of objects which describe the feature plug-ins that are
     * available to DataTables. These feature plug-ins are then available for
     * use through the `dom` initialisation option.
     *
     * Each feature plug-in is described by an object which must have the
     * following properties:
     *
     * * `fnInit` - function that is used to initialise the plug-in,
     * * `cFeature` - a character so the feature can be enabled by the `dom`
     *   instillation option. This is case sensitive.
     *
     * The `fnInit` function has the following input parameters:
     *
     * 1. `{object}` DataTables settings object: see
     *    {@link DataTable.models.oSettings}
     *
     * And the following return is expected:
     *
     * * {node|null} The element which contains your feature. Note that the
     *   return may also be void if your plug-in does not require to inject any
     *   DOM elements into DataTables control (`dom`) - for example this might
     *   be useful when developing a plug-in which allows table control via
     *   keyboard entry
     *
     *  @type array
     *
     *  @example
     *    $.fn.dataTable.ext.features.push( {
     *      "fnInit": function( oSettings ) {
     *        return new TableTools( { "oDTSettings": oSettings } );
     *      },
     *      "cFeature": "T"
     *    } );
     */
    feature: [],

    /**
     * Row searching.
     *
     * This method of searching is complimentary to the default type based
     * searching, and a lot more comprehensive as it allows you complete control
     * over the searching logic. Each element in this array is a function
     * (parameters described below) that is called for every row in the table,
     * and your logic decides if it should be included in the searching data set
     * or not.
     *
     * Searching functions have the following input parameters:
     *
     * 1. `{object}` DataTables settings object: see
     *    {@link DataTable.models.oSettings}
     * 2. `{array|object}` Data for the row to be processed (same as the
     *    original format that was passed in as the data source, or an array
     *    from a DOM data source
     * 3. `{int}` Row index ({@link DataTable.models.oSettings.aoData}), which
     *    can be useful to retrieve the `TR` element if you need DOM interaction.
     *
     * And the following return is expected:
     *
     * * {boolean} Include the row in the searched result set (true) or not
     *   (false)
     *
     * Note that as with the main search ability in DataTables, technically this
     * is "filtering", since it is subtractive. However, for consistency in
     * naming we call it searching here.
     *
     *  @type array
     *  @default []
     *
     *  @example
     *    // The following example shows custom search being applied to the
     *    // fourth column (i.e. the data[3] index) based on two input values
     *    // from the end-user, matching the data in a certain range.
     *    $.fn.dataTable.ext.search.push(
     *      function( settings, data, dataIndex ) {
     *        var min = document.getElementById('min').value * 1;
     *        var max = document.getElementById('max').value * 1;
     *        var version = data[3] == "-" ? 0 : data[3]*1;
     *
     *        if ( min == "" && max == "" ) {
     *          return true;
     *        }
     *        else if ( min == "" && version < max ) {
     *          return true;
     *        }
     *        else if ( min < version && "" == max ) {
     *          return true;
     *        }
     *        else if ( min < version && version < max ) {
     *          return true;
     *        }
     *        return false;
     *      }
     *    );
     */
    search: [],

    /**
     * Selector extensions
     *
     * The `selector` option can be used to extend the options available for the
     * selector modifier options (`selector-modifier` object data type) that
     * each of the three built in selector types offer (row, column and cell +
     * their plural counterparts). For example the Select extension uses this
     * mechanism to provide an option to select only rows, columns and cells
     * that have been marked as selected by the end user (`{selected: true}`),
     * which can be used in conjunction with the existing built in selector
     * options.
     *
     * Each property is an array to which functions can be pushed. The functions
     * take three attributes:
     *
     * * Settings object for the host table
     * * Options object (`selector-modifier` object type)
     * * Array of selected item indexes
     *
     * The return is an array of the resulting item indexes after the custom
     * selector has been applied.
     *
     *  @type object
     */
    selector: {
      cell: [],
      column: [],
      row: [],
    },

    /**
     * Internal functions, exposed for used in plug-ins.
     *
     * Please note that you should not need to use the internal methods for
     * anything other than a plug-in (and even then, try to avoid if possible).
     * The internal function may change between releases.
     *
     *  @type object
     *  @default {}
     */
    internal: {},

    /**
     * Legacy configuration options. Enable and disable legacy options that
     * are available in DataTables.
     *
     *  @type object
     */
    legacy: {
      /**
       * Enable / disable DataTables 1.9 compatible server-side processing
       * requests
       *
       *  @type boolean
       *  @default null
       */
      ajax: null,
    },

    /**
     * Pagination plug-in methods.
     *
     * Each entry in this object is a function and defines which buttons should
     * be shown by the pagination rendering method that is used for the table:
     * {@link DataTable.ext.renderer.pageButton}. The renderer addresses how the
     * buttons are displayed in the document, while the functions here tell it
     * what buttons to display. This is done by returning an array of button
     * descriptions (what each button will do).
     *
     * Pagination types (the four built in options and any additional plug-in
     * options defined here) can be used through the `paginationType`
     * initialisation parameter.
     *
     * The functions defined take two parameters:
     *
     * 1. `{int} page` The current page index
     * 2. `{int} pages` The number of pages in the table
     *
     * Each function is expected to return an array where each element of the
     * array can be one of:
     *
     * * `first` - Jump to first page when activated
     * * `last` - Jump to last page when activated
     * * `previous` - Show previous page when activated
     * * `next` - Show next page when activated
     * * `{int}` - Show page of the index given
     * * `{array}` - A nested array containing the above elements to add a
     *   containing 'DIV' element (might be useful for styling).
     *
     * Note that DataTables v1.9- used this object slightly differently whereby
     * an object with two functions would be defined for each plug-in. That
     * ability is still supported by DataTables 1.10+ to provide backwards
     * compatibility, but this option of use is now decremented and no longer
     * documented in DataTables 1.10+.
     *
     *  @type object
     *  @default {}
     *
     *  @example
     *    // Show previous, next and current page buttons only
     *    $.fn.dataTableExt.oPagination.current = function ( page, pages ) {
     *      return [ 'previous', page, 'next' ];
     *    };
     */
    pager: {},

    renderer: {
      pageButton: {},
      header: {},
    },

    /**
     * Ordering plug-ins - custom data source
     *
     * The extension options for ordering of data available here is complimentary
     * to the default type based ordering that DataTables typically uses. It
     * allows much greater control over the the data that is being used to
     * order a column, but is necessarily therefore more complex.
     *
     * This type of ordering is useful if you want to do ordering based on data
     * live from the DOM (for example the contents of an 'input' element) rather
     * than just the static string that DataTables knows of.
     *
     * The way these plug-ins work is that you create an array of the values you
     * wish to be ordering for the column in question and then return that
     * array. The data in the array much be in the index order of the rows in
     * the table (not the currently ordering order!). Which order data gathering
     * function is run here depends on the `dt-init columns.orderDataType`
     * parameter that is used for the column (if any).
     *
     * The functions defined take two parameters:
     *
     * 1. `{object}` DataTables settings object: see
     *    {@link DataTable.models.oSettings}
     * 2. `{int}` Target column index
     *
     * Each function is expected to return an array:
     *
     * * `{array}` Data for the column to be ordering upon
     *
     *  @type array
     *
     *  @example
     *    // Ordering using `input` node values
     *    $.fn.dataTable.ext.order['dom-text'] = function  ( settings, col )
     *    {
     *      return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {
     *        return $('input', td).val();
     *      } );
     *    }
     */
    order: {},

    /**
     * Type based plug-ins.
     *
     * Each column in DataTables has a type assigned to it, either by automatic
     * detection or by direct assignment using the `type` option for the column.
     * The type of a column will effect how it is ordering and search (plug-ins
     * can also make use of the column type if required).
     *
     * @namespace
     */
    type: {
      /**
       * Type detection functions.
       *
       * The functions defined in this object are used to automatically detect
       * a column's type, making initialisation of DataTables super easy, even
       * when complex data is in the table.
       *
       * The functions defined take two parameters:
       *
       *  1. `{*}` Data from the column cell to be analysed
       *  2. `{settings}` DataTables settings object. This can be used to
       *     perform context specific type detection - for example detection
       *     based on language settings such as using a comma for a decimal
       *     place. Generally speaking the options from the settings will not
       *     be required
       *
       * Each function is expected to return:
       *
       * * `{string|null}` Data type detected, or null if unknown (and thus
       *   pass it on to the other type detection functions.
       *
       *  @type array
       *
       *  @example
       *    // Currency type detection plug-in:
       *    $.fn.dataTable.ext.type.detect.push(
       *      function ( data, settings ) {
       *        // Check the numeric part
       *        if ( ! $.isNumeric( data.substring(1) ) ) {
       *          return null;
       *        }
       *
       *        // Check prefixed by currency
       *        if ( data.charAt(0) == '$' || data.charAt(0) == '&pound;' ) {
       *          return 'currency';
       *        }
       *        return null;
       *      }
       *    );
       */
      detect: [],

      /**
       * Type based search formatting.
       *
       * The type based searching functions can be used to pre-format the
       * data to be search on. For example, it can be used to strip HTML
       * tags or to de-format telephone numbers for numeric only searching.
       *
       * Note that is a search is not defined for a column of a given type,
       * no search formatting will be performed.
       *
       * Pre-processing of searching data plug-ins - When you assign the sType
       * for a column (or have it automatically detected for you by DataTables
       * or a type detection plug-in), you will typically be using this for
       * custom sorting, but it can also be used to provide custom searching
       * by allowing you to pre-processing the data and returning the data in
       * the format that should be searched upon. This is done by adding
       * functions this object with a parameter name which matches the sType
       * for that target column. This is the corollary of <i>afnSortData</i>
       * for searching data.
       *
       * The functions defined take a single parameter:
       *
       *  1. `{*}` Data from the column cell to be prepared for searching
       *
       * Each function is expected to return:
       *
       * * `{string|null}` Formatted string that will be used for the searching.
       *
       *  @type object
       *  @default {}
       *
       *  @example
       *    $.fn.dataTable.ext.type.search['title-numeric'] = function ( d ) {
       *      return d.replace(/\n/g," ").replace( /<.*?>/g, "" );
       *    }
       */
      search: {},

      /**
       * Type based ordering.
       *
       * The column type tells DataTables what ordering to apply to the table
       * when a column is sorted upon. The order for each type that is defined,
       * is defined by the functions available in this object.
       *
       * Each ordering option can be described by three properties added to
       * this object:
       *
       * * `{type}-pre` - Pre-formatting function
       * * `{type}-asc` - Ascending order function
       * * `{type}-desc` - Descending order function
       *
       * All three can be used together, only `{type}-pre` or only
       * `{type}-asc` and `{type}-desc` together. It is generally recommended
       * that only `{type}-pre` is used, as this provides the optimal
       * implementation in terms of speed, although the others are provided
       * for compatibility with existing Javascript sort functions.
       *
       * `{type}-pre`: Functions defined take a single parameter:
       *
       *  1. `{*}` Data from the column cell to be prepared for ordering
       *
       * And return:
       *
       * * `{*}` Data to be sorted upon
       *
       * `{type}-asc` and `{type}-desc`: Functions are typical Javascript sort
       * functions, taking two parameters:
       *
       *  1. `{*}` Data to compare to the second parameter
       *  2. `{*}` Data to compare to the first parameter
       *
       * And returning:
       *
       * * `{*}` Ordering match: <0 if first parameter should be sorted lower
       *   than the second parameter, ===0 if the two parameters are equal and
       *   >0 if the first parameter should be sorted height than the second
       *   parameter.
       *
       *  @type object
       *  @default {}
       *
       *  @example
       *    // Numeric ordering of formatted numbers with a pre-formatter
       *    $.extend( $.fn.dataTable.ext.type.order, {
       *      "string-pre": function(x) {
       *        a = (a === "-" || a === "") ? 0 : a.replace( /[^\d\-\.]/g, "" );
       *        return parseFloat( a );
       *      }
       *    } );
       *
       *  @example
       *    // Case-sensitive string ordering, with no pre-formatting method
       *    $.extend( $.fn.dataTable.ext.order, {
       *      "string-case-asc": function(x,y) {
       *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));
       *      },
       *      "string-case-desc": function(x,y) {
       *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));
       *      }
       *    } );
       */
      order: {},
    },

    /**
     * Unique DataTables instance counter
     *
     * @type int
     * @private
     */
    _unique: 0,

    //
    // Depreciated
    // The following properties are retained for backwards compatiblity only.
    // The should not be used in new projects and will be removed in a future
    // version
    //

    /**
     * Version check function.
     *  @type function
     *  @depreciated Since 1.10
     */
    fnVersionCheck: DataTable.fnVersionCheck,

    /**
     * Index for what 'this' index API functions should use
     *  @type int
     *  @deprecated Since v1.10
     */
    iApiIndex: 0,

    /**
     * jQuery UI class container
     *  @type object
     *  @deprecated Since v1.10
     */
    oJUIClasses: {},

    /**
     * Software version
     *  @type string
     *  @deprecated Since v1.10
     */
    sVersion: DataTable.version,
  };

  //
  // Backwards compatibility. Alias to pre 1.10 Hungarian notation counter parts
  //
  $.extend(_ext, {
    afnFiltering: _ext.search,
    aTypes: _ext.type.detect,
    ofnSearch: _ext.type.search,
    oSort: _ext.type.order,
    afnSortData: _ext.order,
    aoFeatures: _ext.feature,
    oApi: _ext.internal,
    oStdClasses: _ext.classes,
    oPagination: _ext.pager,
  });

  $.extend(DataTable.ext.classes, {
    sTable: "dataTable",
    sNoFooter: "no-footer",

    /* Paging buttons */
    sPageButton: "paginate_button",
    sPageButtonActive: "current",
    sPageButtonDisabled: "disabled",

    /* Striping classes */
    sStripeOdd: "odd",
    sStripeEven: "even",

    /* Empty row */
    sRowEmpty: "dataTables_empty",

    /* Features */
    sWrapper: "dataTables_wrapper",
    sFilter: "dataTables_filter",
    sInfo: "dataTables_info",
    sPaging:
      "dataTables_paginate paging_" /* Note that the type is postfixed */,
    sLength: "dataTables_length",
    sProcessing: "dataTables_processing",

    /* Sorting */
    sSortAsc: "sorting_asc",
    sSortDesc: "sorting_desc",
    sSortable: "sorting" /* Sortable in both directions */,
    sSortableAsc: "sorting_asc_disabled",
    sSortableDesc: "sorting_desc_disabled",
    sSortableNone: "sorting_disabled",
    sSortColumn:
      "sorting_" /* Note that an int is postfixed for the sorting order */,

    /* Filtering */
    sFilterInput: "",

    /* Page length */
    sLengthSelect: "",

    /* Scrolling */
    sScrollWrapper: "dataTables_scroll",
    sScrollHead: "dataTables_scrollHead",
    sScrollHeadInner: "dataTables_scrollHeadInner",
    sScrollBody: "dataTables_scrollBody",
    sScrollFoot: "dataTables_scrollFoot",
    sScrollFootInner: "dataTables_scrollFootInner",

    /* Misc */
    sHeaderTH: "",
    sFooterTH: "",

    // Deprecated
    sSortJUIAsc: "",
    sSortJUIDesc: "",
    sSortJUI: "",
    sSortJUIAscAllowed: "",
    sSortJUIDescAllowed: "",
    sSortJUIWrapper: "",
    sSortIcon: "",
    sJUIHeader: "",
    sJUIFooter: "",
  });

  (function () {
    // Reused strings for better compression. Closure compiler appears to have a
    // weird edge case where it is trying to expand strings rather than use the
    // variable version. This results in about 200 bytes being added, for very
    // little preference benefit since it this run on script load only.
    var _empty = "";
    _empty = "";

    var _stateDefault = _empty + "ui-state-default";
    var _sortIcon = _empty + "css_right ui-icon ui-icon-";
    var _headerFooter =
      _empty + "fg-toolbar ui-toolbar ui-widget-header ui-helper-clearfix";

    $.extend(DataTable.ext.oJUIClasses, DataTable.ext.classes, {
      /* Full numbers paging buttons */
      sPageButton: "fg-button ui-button " + _stateDefault,
      sPageButtonActive: "ui-state-disabled",
      sPageButtonDisabled: "ui-state-disabled",

      /* Features */
      sPaging:
        "dataTables_paginate fg-buttonset ui-buttonset fg-buttonset-multi " +
        "ui-buttonset-multi paging_" /* Note that the type is postfixed */,

      /* Sorting */
      sSortAsc: _stateDefault + " sorting_asc",
      sSortDesc: _stateDefault + " sorting_desc",
      sSortable: _stateDefault + " sorting",
      sSortableAsc: _stateDefault + " sorting_asc_disabled",
      sSortableDesc: _stateDefault + " sorting_desc_disabled",
      sSortableNone: _stateDefault + " sorting_disabled",
      sSortJUIAsc: _sortIcon + "triangle-1-n",
      sSortJUIDesc: _sortIcon + "triangle-1-s",
      sSortJUI: _sortIcon + "carat-2-n-s",
      sSortJUIAscAllowed: _sortIcon + "carat-1-n",
      sSortJUIDescAllowed: _sortIcon + "carat-1-s",
      sSortJUIWrapper: "DataTables_sort_wrapper",
      sSortIcon: "DataTables_sort_icon",

      /* Scrolling */
      sScrollHead: "dataTables_scrollHead " + _stateDefault,
      sScrollFoot: "dataTables_scrollFoot " + _stateDefault,

      /* Misc */
      sHeaderTH: _stateDefault,
      sFooterTH: _stateDefault,
      sJUIHeader: _headerFooter + " ui-corner-tl ui-corner-tr",
      sJUIFooter: _headerFooter + " ui-corner-bl ui-corner-br",
    });
  })();

  var extPagination = DataTable.ext.pager;

  function _numbers(page, pages) {
    var numbers = [],
      buttons = extPagination.numbers_length,
      half = Math.floor(buttons / 2),
      i = 1;

    if (pages <= buttons) {
      numbers = _range(0, pages);
    } else if (page <= half) {
      numbers = _range(0, buttons - 2);
      numbers.push("ellipsis");
      numbers.push(pages - 1);
    } else if (page >= pages - 1 - half) {
      numbers = _range(pages - (buttons - 2), pages);
      numbers.splice(0, 0, "ellipsis"); // no unshift in ie6
      numbers.splice(0, 0, 0);
    } else {
      numbers = _range(page - half + 2, page + half - 1);
      numbers.push("ellipsis");
      numbers.push(pages - 1);
      numbers.splice(0, 0, "ellipsis");
      numbers.splice(0, 0, 0);
    }

    numbers.DT_el = "span";
    return numbers;
  }

  $.extend(extPagination, {
    simple: function (page, pages) {
      return ["previous", "next"];
    },

    full: function (page, pages) {
      return ["first", "previous", "next", "last"];
    },

    numbers: function (page, pages) {
      return [_numbers(page, pages)];
    },

    simple_numbers: function (page, pages) {
      return ["previous", _numbers(page, pages), "next"];
    },

    full_numbers: function (page, pages) {
      return ["first", "previous", _numbers(page, pages), "next", "last"];
    },

    // For testing and plug-ins to use
    _numbers: _numbers,

    // Number of number buttons (including ellipsis) to show. _Must be odd!_
    numbers_length: 7,
  });

  $.extend(true, DataTable.ext.renderer, {
    pageButton: {
      _: function (settings, host, idx, buttons, page, pages) {
        var classes = settings.oClasses;
        var lang = settings.oLanguage.oPaginate;
        var aria = settings.oLanguage.oAria.paginate || {};
        var btnDisplay,
          btnClass,
          counter = 0;

        var attach = function (container, buttons) {
          var i, ien, node, button;
          var clickHandler = function (e) {
            _fnPageChange(settings, e.data.action, true);
          };

          for (i = 0, ien = buttons.length; i < ien; i++) {
            button = buttons[i];

            if ($.isArray(button)) {
              var inner = $("<" + (button.DT_el || "div") + "/>").appendTo(
                container
              );
              attach(inner, button);
            } else {
              btnDisplay = null;
              btnClass = "";

              switch (button) {
                case "ellipsis":
                  container.append('<span class="ellipsis">&#x2026;</span>');
                  break;

                case "first":
                  btnDisplay = lang.sFirst;
                  btnClass =
                    button +
                    (page > 0 ? "" : " " + classes.sPageButtonDisabled);
                  break;

                case "previous":
                  btnDisplay = lang.sPrevious;
                  btnClass =
                    button +
                    (page > 0 ? "" : " " + classes.sPageButtonDisabled);
                  break;

                case "next":
                  btnDisplay = lang.sNext;
                  btnClass =
                    button +
                    (page < pages - 1 ? "" : " " + classes.sPageButtonDisabled);
                  break;

                case "last":
                  btnDisplay = lang.sLast;
                  btnClass =
                    button +
                    (page < pages - 1 ? "" : " " + classes.sPageButtonDisabled);
                  break;

                default:
                  btnDisplay = button + 1;
                  btnClass = page === button ? classes.sPageButtonActive : "";
                  break;
              }

              if (btnDisplay !== null) {
                node = $("<a>", {
                  class: classes.sPageButton + " " + btnClass,
                  "aria-controls": settings.sTableId,
                  "aria-label": aria[button],
                  "data-dt-idx": counter,
                  tabindex: settings.iTabIndex,
                  id:
                    idx === 0 && typeof button === "string"
                      ? settings.sTableId + "_" + button
                      : null,
                })
                  .html(btnDisplay)
                  .appendTo(container);

                _fnBindAction(node, { action: button }, clickHandler);

                counter++;
              }
            }
          }
        };

        // IE9 throws an 'unknown error' if document.activeElement is used
        // inside an iframe or frame. Try / catch the error. Not good for
        // accessibility, but neither are frames.
        var activeEl;

        try {
          // Because this approach is destroying and recreating the paging
          // elements, focus is lost on the select button which is bad for
          // accessibility. So we want to restore focus once the draw has
          // completed
          activeEl = $(host).find(document.activeElement).data("dt-idx");
        } catch (e) {}

        attach($(host).empty(), buttons);

        if (activeEl) {
          $(host)
            .find("[data-dt-idx=" + activeEl + "]")
            .focus();
        }
      },
    },
  });

  // Built in type detection. See model.ext.aTypes for information about
  // what is required from this methods.
  $.extend(DataTable.ext.type.detect, [
    // Plain numbers - first since V8 detects some plain numbers as dates
    // e.g. Date.parse('55') (but not all, e.g. Date.parse('22')...).
    function (d, settings) {
      var decimal = settings.oLanguage.sDecimal;
      return _isNumber(d, decimal) ? "num" + decimal : null;
    },

    // Dates (only those recognised by the browser's Date.parse)
    function (d, settings) {
      // V8 will remove any unknown characters at the start and end of the
      // expression, leading to false matches such as `$245.12` or `10%` being
      // a valid date. See forum thread 18941 for detail.
      if (
        d &&
        !(d instanceof Date) &&
        (!_re_date_start.test(d) || !_re_date_end.test(d))
      ) {
        return null;
      }
      var parsed = Date.parse(d);
      return (parsed !== null && !isNaN(parsed)) || _empty(d) ? "date" : null;
    },

    // Formatted numbers
    function (d, settings) {
      var decimal = settings.oLanguage.sDecimal;
      return _isNumber(d, decimal, true) ? "num-fmt" + decimal : null;
    },

    // HTML numeric
    function (d, settings) {
      var decimal = settings.oLanguage.sDecimal;
      return _htmlNumeric(d, decimal) ? "html-num" + decimal : null;
    },

    // HTML numeric, formatted
    function (d, settings) {
      var decimal = settings.oLanguage.sDecimal;
      return _htmlNumeric(d, decimal, true) ? "html-num-fmt" + decimal : null;
    },

    // HTML (this is strict checking - there must be html)
    function (d, settings) {
      return _empty(d) || (typeof d === "string" && d.indexOf("<") !== -1)
        ? "html"
        : null;
    },
  ]);

  // Filter formatting functions. See model.ext.ofnSearch for information about
  // what is required from these methods.
  //
  // Note that additional search methods are added for the html numbers and
  // html formatted numbers by `_addNumericSort()` when we know what the decimal
  // place is

  $.extend(DataTable.ext.type.search, {
    html: function (data) {
      return _empty(data)
        ? data
        : typeof data === "string"
        ? data.replace(_re_new_lines, " ").replace(_re_html, "")
        : "";
    },

    string: function (data) {
      return _empty(data)
        ? data
        : typeof data === "string"
        ? data.replace(_re_new_lines, " ")
        : data;
    },
  });

  var __numericReplace = function (d, decimalPlace, re1, re2) {
    if (d !== 0 && (!d || d === "-")) {
      return -Infinity;
    }

    // If a decimal place other than `.` is used, it needs to be given to the
    // function so we can detect it and replace with a `.` which is the only
    // decimal place Javascript recognises - it is not locale aware.
    if (decimalPlace) {
      d = _numToDecimal(d, decimalPlace);
    }

    if (d.replace) {
      if (re1) {
        d = d.replace(re1, "");
      }

      if (re2) {
        d = d.replace(re2, "");
      }
    }

    return d * 1;
  };

  // Add the numeric 'deformatting' functions for sorting and search. This is done
  // in a function to provide an easy ability for the language options to add
  // additional methods if a non-period decimal place is used.
  function _addNumericSort(decimalPlace) {
    $.each(
      {
        // Plain numbers
        num: function (d) {
          return __numericReplace(d, decimalPlace);
        },

        // Formatted numbers
        "num-fmt": function (d) {
          return __numericReplace(d, decimalPlace, _re_formatted_numeric);
        },

        // HTML numeric
        "html-num": function (d) {
          return __numericReplace(d, decimalPlace, _re_html);
        },

        // HTML numeric, formatted
        "html-num-fmt": function (d) {
          return __numericReplace(
            d,
            decimalPlace,
            _re_html,
            _re_formatted_numeric
          );
        },
      },
      function (key, fn) {
        // Add the ordering method
        _ext.type.order[key + decimalPlace + "-pre"] = fn;

        // For HTML types add a search formatter that will strip the HTML
        if (key.match(/^html\-/)) {
          _ext.type.search[key + decimalPlace] = _ext.type.search.html;
        }
      }
    );
  }

  // Default sort methods
  $.extend(_ext.type.order, {
    // Dates
    "date-pre": function (d) {
      return Date.parse(d) || 0;
    },

    // html
    "html-pre": function (a) {
      return _empty(a)
        ? ""
        : a.replace
        ? a.replace(/<.*?>/g, "").toLowerCase()
        : a + "";
    },

    // string
    "string-pre": function (a) {
      // This is a little complex, but faster than always calling toString,
      // http://jsperf.com/tostring-v-check
      return _empty(a)
        ? ""
        : typeof a === "string"
        ? a.toLowerCase()
        : !a.toString
        ? ""
        : a.toString();
    },

    // string-asc and -desc are retained only for compatibility with the old
    // sort methods
    "string-asc": function (x, y) {
      return x < y ? -1 : x > y ? 1 : 0;
    },

    "string-desc": function (x, y) {
      return x < y ? 1 : x > y ? -1 : 0;
    },
  });

  // Numeric sorting types - order doesn't matter here
  _addNumericSort("");

  $.extend(true, DataTable.ext.renderer, {
    header: {
      _: function (settings, cell, column, classes) {
        // No additional mark-up required
        // Attach a sort listener to update on sort - note that using the
        // `DT` namespace will allow the event to be removed automatically
        // on destroy, while the `dt` namespaced event is the one we are
        // listening for
        $(settings.nTable).on(
          "order.dt.DT",
          function (e, ctx, sorting, columns) {
            if (settings !== ctx) {
              // need to check this this is the host
              return; // table, not a nested one
            }

            var colIdx = column.idx;

            cell
              .removeClass(
                column.sSortingClass +
                  " " +
                  classes.sSortAsc +
                  " " +
                  classes.sSortDesc
              )
              .addClass(
                columns[colIdx] == "asc"
                  ? classes.sSortAsc
                  : columns[colIdx] == "desc"
                  ? classes.sSortDesc
                  : column.sSortingClass
              );
          }
        );
      },

      jqueryui: function (settings, cell, column, classes) {
        $("<div/>")
          .addClass(classes.sSortJUIWrapper)
          .append(cell.contents())
          .append(
            $("<span/>").addClass(
              classes.sSortIcon + " " + column.sSortingClassJUI
            )
          )
          .appendTo(cell);

        // Attach a sort listener to update on sort
        $(settings.nTable).on(
          "order.dt.DT",
          function (e, ctx, sorting, columns) {
            if (settings !== ctx) {
              return;
            }

            var colIdx = column.idx;

            cell
              .removeClass(classes.sSortAsc + " " + classes.sSortDesc)
              .addClass(
                columns[colIdx] == "asc"
                  ? classes.sSortAsc
                  : columns[colIdx] == "desc"
                  ? classes.sSortDesc
                  : column.sSortingClass
              );

            cell
              .find("span." + classes.sSortIcon)
              .removeClass(
                classes.sSortJUIAsc +
                  " " +
                  classes.sSortJUIDesc +
                  " " +
                  classes.sSortJUI +
                  " " +
                  classes.sSortJUIAscAllowed +
                  " " +
                  classes.sSortJUIDescAllowed
              )
              .addClass(
                columns[colIdx] == "asc"
                  ? classes.sSortJUIAsc
                  : columns[colIdx] == "desc"
                  ? classes.sSortJUIDesc
                  : column.sSortingClassJUI
              );
          }
        );
      },
    },
  });

  /*
   * Public helper functions. These aren't used internally by DataTables, or
   * called by any of the options passed into DataTables, but they can be used
   * externally by developers working with DataTables. They are helper functions
   * to make working with DataTables a little bit easier.
   */

  var __htmlEscapeEntities = function (d) {
    return typeof d === "string"
      ? d.replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;")
      : d;
  };

  /**
   * Helpers for `columns.render`.
   *
   * The options defined here can be used with the `columns.render` initialisation
   * option to provide a display renderer. The following functions are defined:
   *
   * * `number` - Will format numeric data (defined by `columns.data`) for
   *   display, retaining the original unformatted data for sorting and filtering.
   *   It takes 5 parameters:
   *   * `string` - Thousands grouping separator
   *   * `string` - Decimal point indicator
   *   * `integer` - Number of decimal points to show
   *   * `string` (optional) - Prefix.
   *   * `string` (optional) - Postfix (/suffix).
   * * `text` - Escape HTML to help prevent XSS attacks. It has no optional
   *   parameters.
   *
   * @example
   *   // Column definition using the number renderer
   *   {
   *     data: "salary",
   *     render: $.fn.dataTable.render.number( '\'', '.', 0, '$' )
   *   }
   *
   * @namespace
   */
  DataTable.render = {
    number: function (thousands, decimal, precision, prefix, postfix) {
      return {
        display: function (d) {
          if (typeof d !== "number" && typeof d !== "string") {
            return d;
          }

          var negative = d < 0 ? "-" : "";
          var flo = parseFloat(d);

          // If NaN then there isn't much formatting that we can do - just
          // return immediately, escaping any HTML (this was supposed to
          // be a number after all)
          if (isNaN(flo)) {
            return __htmlEscapeEntities(d);
          }

          d = Math.abs(flo);

          var intPart = parseInt(d, 10);
          var floatPart = precision
            ? decimal + (d - intPart).toFixed(precision).substring(2)
            : "";

          return (
            negative +
            (prefix || "") +
            intPart.toString().replace(/\B(?=(\d{3})+(?!\d))/g, thousands) +
            floatPart +
            (postfix || "")
          );
        },
      };
    },

    text: function () {
      return {
        display: __htmlEscapeEntities,
      };
    },
  };

  /*
   * This is really a good bit rubbish this method of exposing the internal methods
   * publicly... - To be fixed in 2.0 using methods on the prototype
   */

  /**
   * Create a wrapper function for exporting an internal functions to an external API.
   *  @param {string} fn API function name
   *  @returns {function} wrapped function
   *  @memberof DataTable#internal
   */
  function _fnExternApiFunc(fn) {
    return function () {
      var args = [_fnSettingsFromNode(this[DataTable.ext.iApiIndex])].concat(
        Array.prototype.slice.call(arguments)
      );
      return DataTable.ext.internal[fn].apply(this, args);
    };
  }

  /**
   * Reference to internal functions for use by plug-in developers. Note that
   * these methods are references to internal functions and are considered to be
   * private. If you use these methods, be aware that they are liable to change
   * between versions.
   *  @namespace
   */
  $.extend(DataTable.ext.internal, {
    _fnExternApiFunc: _fnExternApiFunc,
    _fnBuildAjax: _fnBuildAjax,
    _fnAjaxUpdate: _fnAjaxUpdate,
    _fnAjaxParameters: _fnAjaxParameters,
    _fnAjaxUpdateDraw: _fnAjaxUpdateDraw,
    _fnAjaxDataSrc: _fnAjaxDataSrc,
    _fnAddColumn: _fnAddColumn,
    _fnColumnOptions: _fnColumnOptions,
    _fnAdjustColumnSizing: _fnAdjustColumnSizing,
    _fnVisibleToColumnIndex: _fnVisibleToColumnIndex,
    _fnColumnIndexToVisible: _fnColumnIndexToVisible,
    _fnVisbleColumns: _fnVisbleColumns,
    _fnGetColumns: _fnGetColumns,
    _fnColumnTypes: _fnColumnTypes,
    _fnApplyColumnDefs: _fnApplyColumnDefs,
    _fnHungarianMap: _fnHungarianMap,
    _fnCamelToHungarian: _fnCamelToHungarian,
    _fnLanguageCompat: _fnLanguageCompat,
    _fnBrowserDetect: _fnBrowserDetect,
    _fnAddData: _fnAddData,
    _fnAddTr: _fnAddTr,
    _fnNodeToDataIndex: _fnNodeToDataIndex,
    _fnNodeToColumnIndex: _fnNodeToColumnIndex,
    _fnGetCellData: _fnGetCellData,
    _fnSetCellData: _fnSetCellData,
    _fnSplitObjNotation: _fnSplitObjNotation,
    _fnGetObjectDataFn: _fnGetObjectDataFn,
    _fnSetObjectDataFn: _fnSetObjectDataFn,
    _fnGetDataMaster: _fnGetDataMaster,
    _fnClearTable: _fnClearTable,
    _fnDeleteIndex: _fnDeleteIndex,
    _fnInvalidate: _fnInvalidate,
    _fnGetRowElements: _fnGetRowElements,
    _fnCreateTr: _fnCreateTr,
    _fnBuildHead: _fnBuildHead,
    _fnDrawHead: _fnDrawHead,
    _fnDraw: _fnDraw,
    _fnReDraw: _fnReDraw,
    _fnAddOptionsHtml: _fnAddOptionsHtml,
    _fnDetectHeader: _fnDetectHeader,
    _fnGetUniqueThs: _fnGetUniqueThs,
    _fnFeatureHtmlFilter: _fnFeatureHtmlFilter,
    _fnFilterComplete: _fnFilterComplete,
    _fnFilterCustom: _fnFilterCustom,
    _fnFilterColumn: _fnFilterColumn,
    _fnFilter: _fnFilter,
    _fnFilterCreateSearch: _fnFilterCreateSearch,
    _fnEscapeRegex: _fnEscapeRegex,
    _fnFilterData: _fnFilterData,
    _fnFeatureHtmlInfo: _fnFeatureHtmlInfo,
    _fnUpdateInfo: _fnUpdateInfo,
    _fnInfoMacros: _fnInfoMacros,
    _fnInitialise: _fnInitialise,
    _fnInitComplete: _fnInitComplete,
    _fnLengthChange: _fnLengthChange,
    _fnFeatureHtmlLength: _fnFeatureHtmlLength,
    _fnFeatureHtmlPaginate: _fnFeatureHtmlPaginate,
    _fnPageChange: _fnPageChange,
    _fnFeatureHtmlProcessing: _fnFeatureHtmlProcessing,
    _fnProcessingDisplay: _fnProcessingDisplay,
    _fnFeatureHtmlTable: _fnFeatureHtmlTable,
    _fnScrollDraw: _fnScrollDraw,
    _fnApplyToChildren: _fnApplyToChildren,
    _fnCalculateColumnWidths: _fnCalculateColumnWidths,
    _fnThrottle: _fnThrottle,
    _fnConvertToWidth: _fnConvertToWidth,
    _fnGetWidestNode: _fnGetWidestNode,
    _fnGetMaxLenString: _fnGetMaxLenString,
    _fnStringToCss: _fnStringToCss,
    _fnSortFlatten: _fnSortFlatten,
    _fnSort: _fnSort,
    _fnSortAria: _fnSortAria,
    _fnSortListener: _fnSortListener,
    _fnSortAttachListener: _fnSortAttachListener,
    _fnSortingClasses: _fnSortingClasses,
    _fnSortData: _fnSortData,
    _fnSaveState: _fnSaveState,
    _fnLoadState: _fnLoadState,
    _fnSettingsFromNode: _fnSettingsFromNode,
    _fnLog: _fnLog,
    _fnMap: _fnMap,
    _fnBindAction: _fnBindAction,
    _fnCallbackReg: _fnCallbackReg,
    _fnCallbackFire: _fnCallbackFire,
    _fnLengthOverflow: _fnLengthOverflow,
    _fnRenderer: _fnRenderer,
    _fnDataSource: _fnDataSource,
    _fnRowAttributes: _fnRowAttributes,
    _fnCalculateEnd: function () {}, // Used by a lot of plug-ins, but redundant
    // in 1.10, so this dead-end function is
    // added to prevent errors
  });

  // jQuery access
  $.fn.dataTable = DataTable;

  // Provide access to the host jQuery object (circular reference)
  DataTable.$ = $;

  // Legacy aliases
  $.fn.dataTableSettings = DataTable.settings;
  $.fn.dataTableExt = DataTable.ext;

  // With a capital `D` we return a DataTables API instance rather than a
  // jQuery object
  $.fn.DataTable = function (opts) {
    return $(this).dataTable(opts).api();
  };

  // All properties that are available to $.fn.dataTable should also be
  // available on $.fn.DataTable
  $.each(DataTable, function (prop, val) {
    $.fn.DataTable[prop] = val;
  });

  // Information about events fired by DataTables - for documentation.
  /**
   * Draw event, fired whenever the table is redrawn on the page, at the same
   * point as fnDrawCallback. This may be useful for binding events or
   * performing calculations when the table is altered at all.
   *  @name DataTable#draw.dt
   *  @event
   *  @param {event} e jQuery event object
   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
   */

  /**
   * Search event, fired when the searching applied to the table (using the
   * built-in global search, or column filters) is altered.
   *  @name DataTable#search.dt
   *  @event
   *  @param {event} e jQuery event object
   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
   */

  /**
   * Page change event, fired when the paging of the table is altered.
   *  @name DataTable#page.dt
   *  @event
   *  @param {event} e jQuery event object
   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
   */

  /**
   * Order event, fired when the ordering applied to the table is altered.
   *  @name DataTable#order.dt
   *  @event
   *  @param {event} e jQuery event object
   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
   */

  /**
   * DataTables initialisation complete event, fired when the table is fully
   * drawn, including Ajax data loaded, if Ajax data is required.
   *  @name DataTable#init.dt
   *  @event
   *  @param {event} e jQuery event object
   *  @param {object} oSettings DataTables settings object
   *  @param {object} json The JSON object request from the server - only
   *    present if client-side Ajax sourced data is used</li></ol>
   */

  /**
   * State save event, fired when the table has changed state a new state save
   * is required. This event allows modification of the state saving object
   * prior to actually doing the save, including addition or other state
   * properties (for plug-ins) or modification of a DataTables core property.
   *  @name DataTable#stateSaveParams.dt
   *  @event
   *  @param {event} e jQuery event object
   *  @param {object} oSettings DataTables settings object
   *  @param {object} json The state information to be saved
   */

  /**
   * State load event, fired when the table is loading state from the stored
   * data, but prior to the settings object being modified by the saved state
   * - allowing modification of the saved state is required or loading of
   * state for a plug-in.
   *  @name DataTable#stateLoadParams.dt
   *  @event
   *  @param {event} e jQuery event object
   *  @param {object} oSettings DataTables settings object
   *  @param {object} json The saved state information
   */

  /**
   * State loaded event, fired when state has been loaded from stored data and
   * the settings object has been modified by the loaded data.
   *  @name DataTable#stateLoaded.dt
   *  @event
   *  @param {event} e jQuery event object
   *  @param {object} oSettings DataTables settings object
   *  @param {object} json The saved state information
   */

  /**
   * Processing event, fired when DataTables is doing some kind of processing
   * (be it, order, searcg or anything else). It can be used to indicate to
   * the end user that there is something happening, or that something has
   * finished.
   *  @name DataTable#processing.dt
   *  @event
   *  @param {event} e jQuery event object
   *  @param {object} oSettings DataTables settings object
   *  @param {boolean} bShow Flag for if DataTables is doing processing or not
   */

  /**
   * Ajax (XHR) event, fired whenever an Ajax request is completed from a
   * request to made to the server for new data. This event is called before
   * DataTables processed the returned data, so it can also be used to pre-
   * process the data returned from the server, if needed.
   *
   * Note that this trigger is called in `fnServerData`, if you override
   * `fnServerData` and which to use this event, you need to trigger it in you
   * success function.
   *  @name DataTable#xhr.dt
   *  @event
   *  @param {event} e jQuery event object
   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
   *  @param {object} json JSON returned from the server
   *
   *  @example
   *     // Use a custom property returned from the server in another DOM element
   *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {
   *       $('#status').html( json.status );
   *     } );
   *
   *  @example
   *     // Pre-process the data returned from the server
   *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {
   *       for ( var i=0, ien=json.aaData.length ; i<ien ; i++ ) {
   *         json.aaData[i].sum = json.aaData[i].one + json.aaData[i].two;
   *       }
   *       // Note no return - manipulate the data directly in the JSON object.
   *     } );
   */

  /**
   * Destroy event, fired when the DataTable is destroyed by calling fnDestroy
   * or passing the bDestroy:true parameter in the initialisation object. This
   * can be used to remove bound events, added DOM nodes, etc.
   *  @name DataTable#destroy.dt
   *  @event
   *  @param {event} e jQuery event object
   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
   */

  /**
   * Page length change event, fired when number of records to show on each
   * page (the length) is changed.
   *  @name DataTable#length.dt
   *  @event
   *  @param {event} e jQuery event object
   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
   *  @param {integer} len New length
   */

  /**
   * Column sizing has changed.
   *  @name DataTable#column-sizing.dt
   *  @event
   *  @param {event} e jQuery event object
   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
   */

  /**
   * Column visibility has changed.
   *  @name DataTable#column-visibility.dt
   *  @event
   *  @param {event} e jQuery event object
   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
   *  @param {int} column Column index
   *  @param {bool} vis `false` if column now hidden, or `true` if visible
   */

  return $.fn.dataTable;
});

/*! DataTables Bootstrap 3 integration
 * ©2011-2015 SpryMedia Ltd - datatables.net/license
 */

/**
 * DataTables integration for Bootstrap 3. This requires Bootstrap 3 and
 * DataTables 1.10 or newer.
 *
 * This file sets the defaults and adds options to DataTables to style its
 * controls using Bootstrap. See http://datatables.net/manual/styling/bootstrap
 * for further information.
 */
(function (factory) {
  if (typeof define === "function" && define.amd) {
    // AMD
    define(["jquery", "datatables.net"], function ($) {
      return factory($, window, document);
    });
  } else if (typeof exports === "object") {
    // CommonJS
    module.exports = function (root, $) {
      if (!root) {
        root = window;
      }

      if (!$ || !$.fn.dataTable) {
        // Require DataTables, which attaches to jQuery, including
        // jQuery if needed and have a $ property so we can access the
        // jQuery object that is used
        $ = require("datatables.net")(root, $).$;
      }

      return factory($, root, root.document);
    };
  } else {
    // Browser
    factory(jQuery, window, document);
  }
})(function ($, window, document, undefined) {
  "use strict";
  var DataTable = $.fn.dataTable;

  /* Set the defaults for DataTables initialisation */
  $.extend(true, DataTable.defaults, {
    dom:
      "<'row'<'col-sm-6'l><'col-sm-6'f>>" +
      "<'row'<'col-sm-12'tr>>" +
      "<'row'<'col-sm-5'i><'col-sm-7'p>>",
    renderer: "bootstrap",
  });

  /* Default class modification */
  $.extend(DataTable.ext.classes, {
    sWrapper: "dataTables_wrapper form-inline dt-bootstrap",
    sFilterInput: "form-control input-sm",
    sLengthSelect: "form-control input-sm",
    sProcessing: "dataTables_processing panel panel-default",
  });

  /* Bootstrap paging button renderer */
  DataTable.ext.renderer.pageButton.bootstrap = function (
    settings,
    host,
    idx,
    buttons,
    page,
    pages
  ) {
    var api = new DataTable.Api(settings);
    var classes = settings.oClasses;
    var lang = settings.oLanguage.oPaginate;
    var aria = settings.oLanguage.oAria.paginate || {};
    var btnDisplay,
      btnClass,
      counter = 0;

    var attach = function (container, buttons) {
      var i, ien, node, button;
      var clickHandler = function (e) {
        e.preventDefault();
        if (
          !$(e.currentTarget).hasClass("disabled") &&
          api.page() != e.data.action
        ) {
          api.page(e.data.action).draw("page");
        }
      };

      for (i = 0, ien = buttons.length; i < ien; i++) {
        button = buttons[i];

        if ($.isArray(button)) {
          attach(container, button);
        } else {
          btnDisplay = "";
          btnClass = "";

          switch (button) {
            case "ellipsis":
              btnDisplay = "&#x2026;";
              btnClass = "disabled";
              break;

            case "first":
              btnDisplay = lang.sFirst;
              btnClass = button + (page > 0 ? "" : " disabled");
              break;

            case "previous":
              btnDisplay = lang.sPrevious;
              btnClass = button + (page > 0 ? "" : " disabled");
              break;

            case "next":
              btnDisplay = lang.sNext;
              btnClass = button + (page < pages - 1 ? "" : " disabled");
              break;

            case "last":
              btnDisplay = lang.sLast;
              btnClass = button + (page < pages - 1 ? "" : " disabled");
              break;

            default:
              btnDisplay = button + 1;
              btnClass = page === button ? "active" : "";
              break;
          }

          if (btnDisplay) {
            node = $("<li>", {
              class: classes.sPageButton + " " + btnClass,
              id:
                idx === 0 && typeof button === "string"
                  ? settings.sTableId + "_" + button
                  : null,
            })
              .append(
                $("<a>", {
                  href: "#",
                  "aria-controls": settings.sTableId,
                  "aria-label": aria[button],
                  "data-dt-idx": counter,
                  tabindex: settings.iTabIndex,
                }).html(btnDisplay)
              )
              .appendTo(container);

            settings.oApi._fnBindAction(node, { action: button }, clickHandler);

            counter++;
          }
        }
      }
    };

    // IE9 throws an 'unknown error' if document.activeElement is used
    // inside an iframe or frame.
    var activeEl;

    try {
      // Because this approach is destroying and recreating the paging
      // elements, focus is lost on the select button which is bad for
      // accessibility. So we want to restore focus once the draw has
      // completed
      activeEl = $(host).find(document.activeElement).data("dt-idx");
    } catch (e) {}

    attach(
      $(host).empty().html('<ul class="pagination"/>').children("ul"),
      buttons
    );

    if (activeEl) {
      $(host)
        .find("[data-dt-idx=" + activeEl + "]")
        .focus();
    }
  };

  return DataTable;
});
/*! Magnific Popup - v1.1.0 - 2016-02-20
 * http://dimsemenov.com/plugins/magnific-popup/
 * Copyright (c) 2016 Dmitry Semenov; */
(function (factory) {
  if (typeof define === "function" && define.amd) {
    // AMD. Register as an anonymous module.
    define(["jquery"], factory);
  } else if (typeof exports === "object") {
    // Node/CommonJS
    factory(require("jquery"));
  } else {
    // Browser globals
    factory(window.jQuery || window.Zepto);
  }
})(function ($) {
  /*>>core*/
  /**
   *
   * Magnific Popup Core JS file
   *
   */

  /**
   * Private static constants
   */
  var CLOSE_EVENT = "Close",
    BEFORE_CLOSE_EVENT = "BeforeClose",
    AFTER_CLOSE_EVENT = "AfterClose",
    BEFORE_APPEND_EVENT = "BeforeAppend",
    MARKUP_PARSE_EVENT = "MarkupParse",
    OPEN_EVENT = "Open",
    CHANGE_EVENT = "Change",
    NS = "mfp",
    EVENT_NS = "." + NS,
    READY_CLASS = "mfp-ready",
    REMOVING_CLASS = "mfp-removing",
    PREVENT_CLOSE_CLASS = "mfp-prevent-close";

  /**
   * Private vars
   */
  /*jshint -W079 */
  var mfp, // As we have only one instance of MagnificPopup object, we define it locally to not to use 'this'
    MagnificPopup = function () {},
    _isJQ = !!window.jQuery,
    _prevStatus,
    _window = $(window),
    _document,
    _prevContentType,
    _wrapClasses,
    _currPopupType;

  /**
   * Private functions
   */
  var _mfpOn = function (name, f) {
      mfp.ev.on(NS + name + EVENT_NS, f);
    },
    _getEl = function (className, appendTo, html, raw) {
      var el = document.createElement("div");
      el.className = "mfp-" + className;
      if (html) {
        el.innerHTML = html;
      }
      if (!raw) {
        el = $(el);
        if (appendTo) {
          el.appendTo(appendTo);
        }
      } else if (appendTo) {
        appendTo.appendChild(el);
      }
      return el;
    },
    _mfpTrigger = function (e, data) {
      mfp.ev.triggerHandler(NS + e, data);

      if (mfp.st.callbacks) {
        // converts "mfpEventName" to "eventName" callback and triggers it if it's present
        e = e.charAt(0).toLowerCase() + e.slice(1);
        if (mfp.st.callbacks[e]) {
          mfp.st.callbacks[e].apply(mfp, $.isArray(data) ? data : [data]);
        }
      }
    },
    _getCloseBtn = function (type) {
      if (type !== _currPopupType || !mfp.currTemplate.closeBtn) {
        mfp.currTemplate.closeBtn = $(
          mfp.st.closeMarkup.replace("%title%", mfp.st.tClose)
        );
        _currPopupType = type;
      }
      return mfp.currTemplate.closeBtn;
    },
    // Initialize Magnific Popup only when called at least once
    _checkInstance = function () {
      if (!$.magnificPopup.instance) {
        /*jshint -W020 */
        mfp = new MagnificPopup();
        mfp.init();
        $.magnificPopup.instance = mfp;
      }
    },
    // CSS transition detection, http://stackoverflow.com/questions/7264899/detect-css-transitions-using-javascript-and-without-modernizr
    supportsTransitions = function () {
      var s = document.createElement("p").style, // 's' for style. better to create an element if body yet to exist
        v = ["ms", "O", "Moz", "Webkit"]; // 'v' for vendor

      if (s["transition"] !== undefined) {
        return true;
      }

      while (v.length) {
        if (v.pop() + "Transition" in s) {
          return true;
        }
      }

      return false;
    };

  /**
   * Public functions
   */
  MagnificPopup.prototype = {
    constructor: MagnificPopup,

    /**
     * Initializes Magnific Popup plugin.
     * This function is triggered only once when $.fn.magnificPopup or $.magnificPopup is executed
     */
    init: function () {
      var appVersion = navigator.appVersion;
      mfp.isLowIE = mfp.isIE8 = document.all && !document.addEventListener;
      mfp.isAndroid = /android/gi.test(appVersion);
      mfp.isIOS = /iphone|ipad|ipod/gi.test(appVersion);
      mfp.supportsTransition = supportsTransitions();

      // We disable fixed positioned lightbox on devices that don't handle it nicely.
      // If you know a better way of detecting this - let me know.
      mfp.probablyMobile =
        mfp.isAndroid ||
        mfp.isIOS ||
        /(Opera Mini)|Kindle|webOS|BlackBerry|(Opera Mobi)|(Windows Phone)|IEMobile/i.test(
          navigator.userAgent
        );
      _document = $(document);

      mfp.popupsCache = {};
    },

    /**
     * Opens popup
     * @param  data [description]
     */
    open: function (data) {
      var i;

      if (data.isObj === false) {
        // convert jQuery collection to array to avoid conflicts later
        mfp.items = data.items.toArray();

        mfp.index = 0;
        var items = data.items,
          item;
        for (i = 0; i < items.length; i++) {
          item = items[i];
          if (item.parsed) {
            item = item.el[0];
          }
          if (item === data.el[0]) {
            mfp.index = i;
            break;
          }
        }
      } else {
        mfp.items = $.isArray(data.items) ? data.items : [data.items];
        mfp.index = data.index || 0;
      }

      // if popup is already opened - we just update the content
      if (mfp.isOpen) {
        mfp.updateItemHTML();
        return;
      }

      mfp.types = [];
      _wrapClasses = "";
      if (data.mainEl && data.mainEl.length) {
        mfp.ev = data.mainEl.eq(0);
      } else {
        mfp.ev = _document;
      }

      if (data.key) {
        if (!mfp.popupsCache[data.key]) {
          mfp.popupsCache[data.key] = {};
        }
        mfp.currTemplate = mfp.popupsCache[data.key];
      } else {
        mfp.currTemplate = {};
      }

      mfp.st = $.extend(true, {}, $.magnificPopup.defaults, data);
      mfp.fixedContentPos =
        mfp.st.fixedContentPos === "auto"
          ? !mfp.probablyMobile
          : mfp.st.fixedContentPos;

      if (mfp.st.modal) {
        mfp.st.closeOnContentClick = false;
        mfp.st.closeOnBgClick = false;
        mfp.st.showCloseBtn = false;
        mfp.st.enableEscapeKey = false;
      }

      // Building markup
      // main containers are created only once
      if (!mfp.bgOverlay) {
        // Dark overlay
        mfp.bgOverlay = _getEl("bg").on("click" + EVENT_NS, function () {
          mfp.close();
        });

        mfp.wrap = _getEl("wrap")
          .attr("tabindex", -1)
          .on("click" + EVENT_NS, function (e) {
            if (mfp._checkIfClose(e.target)) {
              mfp.close();
            }
          });

        mfp.container = _getEl("container", mfp.wrap);
      }

      mfp.contentContainer = _getEl("content");
      if (mfp.st.preloader) {
        mfp.preloader = _getEl("preloader", mfp.container, mfp.st.tLoading);
      }

      // Initializing modules
      var modules = $.magnificPopup.modules;
      for (i = 0; i < modules.length; i++) {
        var n = modules[i];
        n = n.charAt(0).toUpperCase() + n.slice(1);
        mfp["init" + n].call(mfp);
      }
      _mfpTrigger("BeforeOpen");

      if (mfp.st.showCloseBtn) {
        // Close button
        if (!mfp.st.closeBtnInside) {
          mfp.wrap.append(_getCloseBtn());
        } else {
          _mfpOn(MARKUP_PARSE_EVENT, function (e, template, values, item) {
            values.close_replaceWith = _getCloseBtn(item.type);
          });
          _wrapClasses += " mfp-close-btn-in";
        }
      }

      if (mfp.st.alignTop) {
        _wrapClasses += " mfp-align-top";
      }

      if (mfp.fixedContentPos) {
        mfp.wrap.css({
          overflow: mfp.st.overflowY,
          overflowX: "hidden",
          overflowY: mfp.st.overflowY,
        });
      } else {
        mfp.wrap.css({
          top: _window.scrollTop(),
          position: "absolute",
        });
      }
      if (
        mfp.st.fixedBgPos === false ||
        (mfp.st.fixedBgPos === "auto" && !mfp.fixedContentPos)
      ) {
        mfp.bgOverlay.css({
          height: _document.height(),
          position: "absolute",
        });
      }

      if (mfp.st.enableEscapeKey) {
        // Close on ESC key
        _document.on("keyup" + EVENT_NS, function (e) {
          if (e.keyCode === 27) {
            mfp.close();
          }
        });
      }

      _window.on("resize" + EVENT_NS, function () {
        mfp.updateSize();
      });

      if (!mfp.st.closeOnContentClick) {
        _wrapClasses += " mfp-auto-cursor";
      }

      if (_wrapClasses) mfp.wrap.addClass(_wrapClasses);

      // this triggers recalculation of layout, so we get it once to not to trigger twice
      var windowHeight = (mfp.wH = _window.height());

      var windowStyles = {};

      if (mfp.fixedContentPos) {
        if (mfp._hasScrollBar(windowHeight)) {
          var s = mfp._getScrollbarSize();
          if (s) {
            windowStyles.marginRight = s;
          }
        }
      }

      if (mfp.fixedContentPos) {
        if (!mfp.isIE7) {
          windowStyles.overflow = "hidden";
        } else {
          // ie7 double-scroll bug
          $("body, html").css("overflow", "hidden");
        }
      }

      var classesToadd = mfp.st.mainClass;
      if (mfp.isIE7) {
        classesToadd += " mfp-ie7";
      }
      if (classesToadd) {
        mfp._addClassToMFP(classesToadd);
      }

      // add content
      mfp.updateItemHTML();

      _mfpTrigger("BuildControls");

      // remove scrollbar, add margin e.t.c
      $("html").css(windowStyles);

      // add everything to DOM
      mfp.bgOverlay
        .add(mfp.wrap)
        .prependTo(mfp.st.prependTo || $(document.body));

      // Save last focused element
      mfp._lastFocusedEl = document.activeElement;

      // Wait for next cycle to allow CSS transition
      setTimeout(function () {
        if (mfp.content) {
          mfp._addClassToMFP(READY_CLASS);
          mfp._setFocus();
        } else {
          // if content is not defined (not loaded e.t.c) we add class only for BG
          mfp.bgOverlay.addClass(READY_CLASS);
        }

        // Trap the focus in popup
        _document.on("focusin" + EVENT_NS, mfp._onFocusIn);
      }, 16);

      mfp.isOpen = true;
      mfp.updateSize(windowHeight);
      _mfpTrigger(OPEN_EVENT);

      return data;
    },

    /**
     * Closes the popup
     */
    close: function () {
      if (!mfp.isOpen) return;
      _mfpTrigger(BEFORE_CLOSE_EVENT);

      mfp.isOpen = false;
      // for CSS3 animation
      if (mfp.st.removalDelay && !mfp.isLowIE && mfp.supportsTransition) {
        mfp._addClassToMFP(REMOVING_CLASS);
        setTimeout(function () {
          mfp._close();
        }, mfp.st.removalDelay);
      } else {
        mfp._close();
      }
    },

    /**
     * Helper for close() function
     */
    _close: function () {
      _mfpTrigger(CLOSE_EVENT);

      var classesToRemove = REMOVING_CLASS + " " + READY_CLASS + " ";

      mfp.bgOverlay.detach();
      mfp.wrap.detach();
      mfp.container.empty();

      if (mfp.st.mainClass) {
        classesToRemove += mfp.st.mainClass + " ";
      }

      mfp._removeClassFromMFP(classesToRemove);

      if (mfp.fixedContentPos) {
        var windowStyles = { marginRight: "" };
        if (mfp.isIE7) {
          $("body, html").css("overflow", "");
        } else {
          windowStyles.overflow = "";
        }
        $("html").css(windowStyles);
      }

      _document.off("keyup" + EVENT_NS + " focusin" + EVENT_NS);
      mfp.ev.off(EVENT_NS);

      // clean up DOM elements that aren't removed
      mfp.wrap.attr("class", "mfp-wrap").removeAttr("style");
      mfp.bgOverlay.attr("class", "mfp-bg");
      mfp.container.attr("class", "mfp-container");

      // remove close button from target element
      if (
        mfp.st.showCloseBtn &&
        (!mfp.st.closeBtnInside || mfp.currTemplate[mfp.currItem.type] === true)
      ) {
        if (mfp.currTemplate.closeBtn) mfp.currTemplate.closeBtn.detach();
      }

      if (mfp.st.autoFocusLast && mfp._lastFocusedEl) {
        $(mfp._lastFocusedEl).focus(); // put tab focus back
      }
      mfp.currItem = null;
      mfp.content = null;
      mfp.currTemplate = null;
      mfp.prevHeight = 0;

      _mfpTrigger(AFTER_CLOSE_EVENT);
    },

    updateSize: function (winHeight) {
      if (mfp.isIOS) {
        // fixes iOS nav bars https://github.com/dimsemenov/Magnific-Popup/issues/2
        var zoomLevel =
          document.documentElement.clientWidth / window.innerWidth;
        var height = window.innerHeight * zoomLevel;
        mfp.wrap.css("height", height);
        mfp.wH = height;
      } else {
        mfp.wH = winHeight || _window.height();
      }
      // Fixes #84: popup incorrectly positioned with position:relative on body
      if (!mfp.fixedContentPos) {
        mfp.wrap.css("height", mfp.wH);
      }

      _mfpTrigger("Resize");
    },

    /**
     * Set content of popup based on current index
     */
    updateItemHTML: function () {
      var item = mfp.items[mfp.index];

      // Detach and perform modifications
      mfp.contentContainer.detach();

      if (mfp.content) mfp.content.detach();

      if (!item.parsed) {
        item = mfp.parseEl(mfp.index);
      }

      var type = item.type;

      _mfpTrigger("BeforeChange", [
        mfp.currItem ? mfp.currItem.type : "",
        type,
      ]);
      // BeforeChange event works like so:
      // _mfpOn('BeforeChange', function(e, prevType, newType) { });

      mfp.currItem = item;

      if (!mfp.currTemplate[type]) {
        var markup = mfp.st[type] ? mfp.st[type].markup : false;

        // allows to modify markup
        _mfpTrigger("FirstMarkupParse", markup);

        if (markup) {
          mfp.currTemplate[type] = $(markup);
        } else {
          // if there is no markup found we just define that template is parsed
          mfp.currTemplate[type] = true;
        }
      }

      if (_prevContentType && _prevContentType !== item.type) {
        mfp.container.removeClass("mfp-" + _prevContentType + "-holder");
      }

      var newContent = mfp[
        "get" + type.charAt(0).toUpperCase() + type.slice(1)
      ](item, mfp.currTemplate[type]);
      mfp.appendContent(newContent, type);

      item.preloaded = true;

      _mfpTrigger(CHANGE_EVENT, item);
      _prevContentType = item.type;

      // Append container back after its content changed
      mfp.container.prepend(mfp.contentContainer);

      _mfpTrigger("AfterChange");
    },

    /**
     * Set HTML content of popup
     */
    appendContent: function (newContent, type) {
      mfp.content = newContent;

      if (newContent) {
        if (
          mfp.st.showCloseBtn &&
          mfp.st.closeBtnInside &&
          mfp.currTemplate[type] === true
        ) {
          // if there is no markup, we just append close button element inside
          if (!mfp.content.find(".mfp-close").length) {
            mfp.content.append(_getCloseBtn());
          }
        } else {
          mfp.content = newContent;
        }
      } else {
        mfp.content = "";
      }

      _mfpTrigger(BEFORE_APPEND_EVENT);
      mfp.container.addClass("mfp-" + type + "-holder");

      mfp.contentContainer.append(mfp.content);
    },

    /**
     * Creates Magnific Popup data object based on given data
     * @param  {int} index Index of item to parse
     */
    parseEl: function (index) {
      var item = mfp.items[index],
        type;

      if (item.tagName) {
        item = { el: $(item) };
      } else {
        type = item.type;
        item = { data: item, src: item.src };
      }

      if (item.el) {
        var types = mfp.types;

        // check for 'mfp-TYPE' class
        for (var i = 0; i < types.length; i++) {
          if (item.el.hasClass("mfp-" + types[i])) {
            type = types[i];
            break;
          }
        }

        item.src = item.el.attr("data-mfp-src");
        if (!item.src) {
          item.src = item.el.attr("href");
        }
      }

      item.type = type || mfp.st.type || "inline";
      item.index = index;
      item.parsed = true;
      mfp.items[index] = item;
      _mfpTrigger("ElementParse", item);

      return mfp.items[index];
    },

    /**
     * Initializes single popup or a group of popups
     */
    addGroup: function (el, options) {
      var eHandler = function (e) {
        e.mfpEl = this;
        mfp._openClick(e, el, options);
      };

      if (!options) {
        options = {};
      }

      var eName = "click.magnificPopup";
      options.mainEl = el;

      if (options.items) {
        options.isObj = true;
        el.off(eName).on(eName, eHandler);
      } else {
        options.isObj = false;
        if (options.delegate) {
          el.off(eName).on(eName, options.delegate, eHandler);
        } else {
          options.items = el;
          el.off(eName).on(eName, eHandler);
        }
      }
    },
    _openClick: function (e, el, options) {
      var midClick =
        options.midClick !== undefined
          ? options.midClick
          : $.magnificPopup.defaults.midClick;

      if (
        !midClick &&
        (e.which === 2 || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey)
      ) {
        return;
      }

      var disableOn =
        options.disableOn !== undefined
          ? options.disableOn
          : $.magnificPopup.defaults.disableOn;

      if (disableOn) {
        if ($.isFunction(disableOn)) {
          if (!disableOn.call(mfp)) {
            return true;
          }
        } else {
          // else it's number
          if (_window.width() < disableOn) {
            return true;
          }
        }
      }

      if (e.type) {
        e.preventDefault();

        // This will prevent popup from closing if element is inside and popup is already opened
        if (mfp.isOpen) {
          e.stopPropagation();
        }
      }

      options.el = $(e.mfpEl);
      if (options.delegate) {
        options.items = el.find(options.delegate);
      }
      mfp.open(options);
    },

    /**
     * Updates text on preloader
     */
    updateStatus: function (status, text) {
      if (mfp.preloader) {
        if (_prevStatus !== status) {
          mfp.container.removeClass("mfp-s-" + _prevStatus);
        }

        if (!text && status === "loading") {
          text = mfp.st.tLoading;
        }

        var data = {
          status: status,
          text: text,
        };
        // allows to modify status
        _mfpTrigger("UpdateStatus", data);

        status = data.status;
        text = data.text;

        mfp.preloader.html(text);

        mfp.preloader.find("a").on("click", function (e) {
          e.stopImmediatePropagation();
        });

        mfp.container.addClass("mfp-s-" + status);
        _prevStatus = status;
      }
    },

    /*
		"Private" helpers that aren't private at all
	 */
    // Check to close popup or not
    // "target" is an element that was clicked
    _checkIfClose: function (target) {
      if ($(target).hasClass(PREVENT_CLOSE_CLASS)) {
        return;
      }

      var closeOnContent = mfp.st.closeOnContentClick;
      var closeOnBg = mfp.st.closeOnBgClick;

      if (closeOnContent && closeOnBg) {
        return true;
      } else {
        // We close the popup if click is on close button or on preloader. Or if there is no content.
        if (
          !mfp.content ||
          $(target).hasClass("mfp-close") ||
          (mfp.preloader && target === mfp.preloader[0])
        ) {
          return true;
        }

        // if click is outside the content
        if (target !== mfp.content[0] && !$.contains(mfp.content[0], target)) {
          if (closeOnBg) {
            // last check, if the clicked element is in DOM, (in case it's removed onclick)
            if ($.contains(document, target)) {
              return true;
            }
          }
        } else if (closeOnContent) {
          return true;
        }
      }
      return false;
    },
    _addClassToMFP: function (cName) {
      mfp.bgOverlay.addClass(cName);
      mfp.wrap.addClass(cName);
    },
    _removeClassFromMFP: function (cName) {
      this.bgOverlay.removeClass(cName);
      mfp.wrap.removeClass(cName);
    },
    _hasScrollBar: function (winHeight) {
      return (
        (mfp.isIE7 ? _document.height() : document.body.scrollHeight) >
        (winHeight || _window.height())
      );
    },
    _setFocus: function () {
      (mfp.st.focus ? mfp.content.find(mfp.st.focus).eq(0) : mfp.wrap).focus();
    },
    _onFocusIn: function (e) {
      if (e.target !== mfp.wrap[0] && !$.contains(mfp.wrap[0], e.target)) {
        mfp._setFocus();
        return false;
      }
    },
    _parseMarkup: function (template, values, item) {
      var arr;
      if (item.data) {
        values = $.extend(item.data, values);
      }
      _mfpTrigger(MARKUP_PARSE_EVENT, [template, values, item]);

      $.each(values, function (key, value) {
        if (value === undefined || value === false) {
          return true;
        }
        arr = key.split("_");
        if (arr.length > 1) {
          var el = template.find(EVENT_NS + "-" + arr[0]);

          if (el.length > 0) {
            var attr = arr[1];
            if (attr === "replaceWith") {
              if (el[0] !== value[0]) {
                el.replaceWith(value);
              }
            } else if (attr === "img") {
              if (el.is("img")) {
                el.attr("src", value);
              } else {
                el.replaceWith(
                  $("<img>").attr("src", value).attr("class", el.attr("class"))
                );
              }
            } else {
              el.attr(arr[1], value);
            }
          }
        } else {
          template.find(EVENT_NS + "-" + key).html(value);
        }
      });
    },

    _getScrollbarSize: function () {
      // thx David
      if (mfp.scrollbarSize === undefined) {
        var scrollDiv = document.createElement("div");
        scrollDiv.style.cssText =
          "width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;";
        document.body.appendChild(scrollDiv);
        mfp.scrollbarSize = scrollDiv.offsetWidth - scrollDiv.clientWidth;
        document.body.removeChild(scrollDiv);
      }
      return mfp.scrollbarSize;
    },
  }; /* MagnificPopup core prototype end */

  /**
   * Public static functions
   */
  $.magnificPopup = {
    instance: null,
    proto: MagnificPopup.prototype,
    modules: [],

    open: function (options, index) {
      _checkInstance();

      if (!options) {
        options = {};
      } else {
        options = $.extend(true, {}, options);
      }

      options.isObj = true;
      options.index = index || 0;
      return this.instance.open(options);
    },

    close: function () {
      return $.magnificPopup.instance && $.magnificPopup.instance.close();
    },

    registerModule: function (name, module) {
      if (module.options) {
        $.magnificPopup.defaults[name] = module.options;
      }
      $.extend(this.proto, module.proto);
      this.modules.push(name);
    },

    defaults: {
      // Info about options is in docs:
      // http://dimsemenov.com/plugins/magnific-popup/documentation.html#options

      disableOn: 0,

      key: null,

      midClick: false,

      mainClass: "",

      preloader: true,

      focus: "", // CSS selector of input to focus after popup is opened

      closeOnContentClick: false,

      closeOnBgClick: true,

      closeBtnInside: true,

      showCloseBtn: true,

      enableEscapeKey: true,

      modal: false,

      alignTop: false,

      removalDelay: 0,

      prependTo: null,

      fixedContentPos: "auto",

      fixedBgPos: "auto",

      overflowY: "auto",

      closeMarkup:
        '<button title="%title%" type="button" class="mfp-close">&#215;</button>',

      tClose: "Close (Esc)",

      tLoading: "Loading...",

      autoFocusLast: true,
    },
  };

  $.fn.magnificPopup = function (options) {
    _checkInstance();

    var jqEl = $(this);

    // We call some API method of first param is a string
    if (typeof options === "string") {
      if (options === "open") {
        var items,
          itemOpts = _isJQ ? jqEl.data("magnificPopup") : jqEl[0].magnificPopup,
          index = parseInt(arguments[1], 10) || 0;

        if (itemOpts.items) {
          items = itemOpts.items[index];
        } else {
          items = jqEl;
          if (itemOpts.delegate) {
            items = items.find(itemOpts.delegate);
          }
          items = items.eq(index);
        }
        mfp._openClick({ mfpEl: items }, jqEl, itemOpts);
      } else {
        if (mfp.isOpen)
          mfp[options].apply(mfp, Array.prototype.slice.call(arguments, 1));
      }
    } else {
      // clone options obj
      options = $.extend(true, {}, options);

      /*
       * As Zepto doesn't support .data() method for objects
       * and it works only in normal browsers
       * we assign "options" object directly to the DOM element. FTW!
       */
      if (_isJQ) {
        jqEl.data("magnificPopup", options);
      } else {
        jqEl[0].magnificPopup = options;
      }

      mfp.addGroup(jqEl, options);
    }
    return jqEl;
  };

  /*>>core*/

  /*>>inline*/

  var INLINE_NS = "inline",
    _hiddenClass,
    _inlinePlaceholder,
    _lastInlineElement,
    _putInlineElementsBack = function () {
      if (_lastInlineElement) {
        _inlinePlaceholder
          .after(_lastInlineElement.addClass(_hiddenClass))
          .detach();
        _lastInlineElement = null;
      }
    };

  $.magnificPopup.registerModule(INLINE_NS, {
    options: {
      hiddenClass: "hide", // will be appended with `mfp-` prefix
      markup: "",
      tNotFound: "Content not found",
    },
    proto: {
      initInline: function () {
        mfp.types.push(INLINE_NS);

        _mfpOn(CLOSE_EVENT + "." + INLINE_NS, function () {
          _putInlineElementsBack();
        });
      },

      getInline: function (item, template) {
        _putInlineElementsBack();

        if (item.src) {
          var inlineSt = mfp.st.inline,
            el = $(item.src);

          if (el.length) {
            // If target element has parent - we replace it with placeholder and put it back after popup is closed
            var parent = el[0].parentNode;
            if (parent && parent.tagName) {
              if (!_inlinePlaceholder) {
                _hiddenClass = inlineSt.hiddenClass;
                _inlinePlaceholder = _getEl(_hiddenClass);
                _hiddenClass = "mfp-" + _hiddenClass;
              }
              // replace target inline element with placeholder
              _lastInlineElement = el
                .after(_inlinePlaceholder)
                .detach()
                .removeClass(_hiddenClass);
            }

            mfp.updateStatus("ready");
          } else {
            mfp.updateStatus("error", inlineSt.tNotFound);
            el = $("<div>");
          }

          item.inlineElement = el;
          return el;
        }

        mfp.updateStatus("ready");
        mfp._parseMarkup(template, {}, item);
        return template;
      },
    },
  });

  /*>>inline*/

  /*>>ajax*/
  var AJAX_NS = "ajax",
    _ajaxCur,
    _removeAjaxCursor = function () {
      if (_ajaxCur) {
        $(document.body).removeClass(_ajaxCur);
      }
    },
    _destroyAjaxRequest = function () {
      _removeAjaxCursor();
      if (mfp.req) {
        mfp.req.abort();
      }
    };

  $.magnificPopup.registerModule(AJAX_NS, {
    options: {
      settings: null,
      cursor: "mfp-ajax-cur",
      tError: '<a href="%url%">The content</a> could not be loaded.',
    },

    proto: {
      initAjax: function () {
        mfp.types.push(AJAX_NS);
        _ajaxCur = mfp.st.ajax.cursor;

        _mfpOn(CLOSE_EVENT + "." + AJAX_NS, _destroyAjaxRequest);
        _mfpOn("BeforeChange." + AJAX_NS, _destroyAjaxRequest);
      },
      getAjax: function (item) {
        if (_ajaxCur) {
          $(document.body).addClass(_ajaxCur);
        }

        mfp.updateStatus("loading");

        var opts = $.extend(
          {
            url: item.src,
            success: function (data, textStatus, jqXHR) {
              var temp = {
                data: data,
                xhr: jqXHR,
              };

              _mfpTrigger("ParseAjax", temp);

              mfp.appendContent($(temp.data), AJAX_NS);

              item.finished = true;

              _removeAjaxCursor();

              mfp._setFocus();

              setTimeout(function () {
                mfp.wrap.addClass(READY_CLASS);
              }, 16);

              mfp.updateStatus("ready");

              _mfpTrigger("AjaxContentAdded");
            },
            error: function () {
              _removeAjaxCursor();
              item.finished = item.loadError = true;
              mfp.updateStatus(
                "error",
                mfp.st.ajax.tError.replace("%url%", item.src)
              );
            },
          },
          mfp.st.ajax.settings
        );

        mfp.req = $.ajax(opts);

        return "";
      },
    },
  });

  /*>>ajax*/

  /*>>image*/
  var _imgInterval,
    _getTitle = function (item) {
      if (item.data && item.data.title !== undefined) return item.data.title;

      var src = mfp.st.image.titleSrc;

      if (src) {
        if ($.isFunction(src)) {
          return src.call(mfp, item);
        } else if (item.el) {
          return item.el.attr(src) || "";
        }
      }
      return "";
    };

  $.magnificPopup.registerModule("image", {
    options: {
      markup:
        '<div class="mfp-figure">' +
        '<div class="mfp-close"></div>' +
        "<figure>" +
        '<div class="mfp-img"></div>' +
        "<figcaption>" +
        '<div class="mfp-bottom-bar">' +
        '<div class="mfp-title"></div>' +
        '<div class="mfp-counter"></div>' +
        "</div>" +
        "</figcaption>" +
        "</figure>" +
        "</div>",
      cursor: "mfp-zoom-out-cur",
      titleSrc: "title",
      verticalFit: true,
      tError: '<a href="%url%">The image</a> could not be loaded.',
    },

    proto: {
      initImage: function () {
        var imgSt = mfp.st.image,
          ns = ".image";

        mfp.types.push("image");

        _mfpOn(OPEN_EVENT + ns, function () {
          if (mfp.currItem.type === "image" && imgSt.cursor) {
            $(document.body).addClass(imgSt.cursor);
          }
        });

        _mfpOn(CLOSE_EVENT + ns, function () {
          if (imgSt.cursor) {
            $(document.body).removeClass(imgSt.cursor);
          }
          _window.off("resize" + EVENT_NS);
        });

        _mfpOn("Resize" + ns, mfp.resizeImage);
        if (mfp.isLowIE) {
          _mfpOn("AfterChange", mfp.resizeImage);
        }
      },
      resizeImage: function () {
        var item = mfp.currItem;
        if (!item || !item.img) return;

        if (mfp.st.image.verticalFit) {
          var decr = 0;
          // fix box-sizing in ie7/8
          if (mfp.isLowIE) {
            decr =
              parseInt(item.img.css("padding-top"), 10) +
              parseInt(item.img.css("padding-bottom"), 10);
          }
          item.img.css("max-height", mfp.wH - decr);
        }
      },
      _onImageHasSize: function (item) {
        if (item.img) {
          item.hasSize = true;

          if (_imgInterval) {
            clearInterval(_imgInterval);
          }

          item.isCheckingImgSize = false;

          _mfpTrigger("ImageHasSize", item);

          if (item.imgHidden) {
            if (mfp.content) mfp.content.removeClass("mfp-loading");

            item.imgHidden = false;
          }
        }
      },

      /**
       * Function that loops until the image has size to display elements that rely on it asap
       */
      findImageSize: function (item) {
        var counter = 0,
          img = item.img[0],
          mfpSetInterval = function (delay) {
            if (_imgInterval) {
              clearInterval(_imgInterval);
            }
            // decelerating interval that checks for size of an image
            _imgInterval = setInterval(function () {
              if (img.naturalWidth > 0) {
                mfp._onImageHasSize(item);
                return;
              }

              if (counter > 200) {
                clearInterval(_imgInterval);
              }

              counter++;
              if (counter === 3) {
                mfpSetInterval(10);
              } else if (counter === 40) {
                mfpSetInterval(50);
              } else if (counter === 100) {
                mfpSetInterval(500);
              }
            }, delay);
          };

        mfpSetInterval(1);
      },

      getImage: function (item, template) {
        var guard = 0,
          // image load complete handler
          onLoadComplete = function () {
            if (item) {
              if (item.img[0].complete) {
                item.img.off(".mfploader");

                if (item === mfp.currItem) {
                  mfp._onImageHasSize(item);

                  mfp.updateStatus("ready");
                }

                item.hasSize = true;
                item.loaded = true;

                _mfpTrigger("ImageLoadComplete");
              } else {
                // if image complete check fails 200 times (20 sec), we assume that there was an error.
                guard++;
                if (guard < 200) {
                  setTimeout(onLoadComplete, 100);
                } else {
                  onLoadError();
                }
              }
            }
          },
          // image error handler
          onLoadError = function () {
            if (item) {
              item.img.off(".mfploader");
              if (item === mfp.currItem) {
                mfp._onImageHasSize(item);
                mfp.updateStatus(
                  "error",
                  imgSt.tError.replace("%url%", item.src)
                );
              }

              item.hasSize = true;
              item.loaded = true;
              item.loadError = true;
            }
          },
          imgSt = mfp.st.image;

        var el = template.find(".mfp-img");
        if (el.length) {
          var img = document.createElement("img");
          img.className = "mfp-img";
          if (item.el && item.el.find("img").length) {
            img.alt = item.el.find("img").attr("alt");
          }
          item.img = $(img)
            .on("load.mfploader", onLoadComplete)
            .on("error.mfploader", onLoadError);
          img.src = item.src;

          // without clone() "error" event is not firing when IMG is replaced by new IMG
          // TODO: find a way to avoid such cloning
          if (el.is("img")) {
            item.img = item.img.clone();
          }

          img = item.img[0];
          if (img.naturalWidth > 0) {
            item.hasSize = true;
          } else if (!img.width) {
            item.hasSize = false;
          }
        }

        mfp._parseMarkup(
          template,
          {
            title: _getTitle(item),
            img_replaceWith: item.img,
          },
          item
        );

        mfp.resizeImage();

        if (item.hasSize) {
          if (_imgInterval) clearInterval(_imgInterval);

          if (item.loadError) {
            template.addClass("mfp-loading");
            mfp.updateStatus("error", imgSt.tError.replace("%url%", item.src));
          } else {
            template.removeClass("mfp-loading");
            mfp.updateStatus("ready");
          }
          return template;
        }

        mfp.updateStatus("loading");
        item.loading = true;

        if (!item.hasSize) {
          item.imgHidden = true;
          template.addClass("mfp-loading");
          mfp.findImageSize(item);
        }

        return template;
      },
    },
  });

  /*>>image*/

  /*>>zoom*/
  var hasMozTransform,
    getHasMozTransform = function () {
      if (hasMozTransform === undefined) {
        hasMozTransform =
          document.createElement("p").style.MozTransform !== undefined;
      }
      return hasMozTransform;
    };

  $.magnificPopup.registerModule("zoom", {
    options: {
      enabled: false,
      easing: "ease-in-out",
      duration: 300,
      opener: function (element) {
        return element.is("img") ? element : element.find("img");
      },
    },

    proto: {
      initZoom: function () {
        var zoomSt = mfp.st.zoom,
          ns = ".zoom",
          image;

        if (!zoomSt.enabled || !mfp.supportsTransition) {
          return;
        }

        var duration = zoomSt.duration,
          getElToAnimate = function (image) {
            var newImg = image
                .clone()
                .removeAttr("style")
                .removeAttr("class")
                .addClass("mfp-animated-image"),
              transition =
                "all " + zoomSt.duration / 1000 + "s " + zoomSt.easing,
              cssObj = {
                position: "fixed",
                zIndex: 9999,
                left: 0,
                top: 0,
                "-webkit-backface-visibility": "hidden",
              },
              t = "transition";

            cssObj["-webkit-" + t] =
              cssObj["-moz-" + t] =
              cssObj["-o-" + t] =
              cssObj[t] =
                transition;

            newImg.css(cssObj);
            return newImg;
          },
          showMainContent = function () {
            mfp.content.css("visibility", "visible");
          },
          openTimeout,
          animatedImg;

        _mfpOn("BuildControls" + ns, function () {
          if (mfp._allowZoom()) {
            clearTimeout(openTimeout);
            mfp.content.css("visibility", "hidden");

            // Basically, all code below does is clones existing image, puts in on top of the current one and animated it

            image = mfp._getItemToZoom();

            if (!image) {
              showMainContent();
              return;
            }

            animatedImg = getElToAnimate(image);

            animatedImg.css(mfp._getOffset());

            mfp.wrap.append(animatedImg);

            openTimeout = setTimeout(function () {
              animatedImg.css(mfp._getOffset(true));
              openTimeout = setTimeout(function () {
                showMainContent();

                setTimeout(function () {
                  animatedImg.remove();
                  image = animatedImg = null;
                  _mfpTrigger("ZoomAnimationEnded");
                }, 16); // avoid blink when switching images
              }, duration); // this timeout equals animation duration
            }, 16); // by adding this timeout we avoid short glitch at the beginning of animation

            // Lots of timeouts...
          }
        });
        _mfpOn(BEFORE_CLOSE_EVENT + ns, function () {
          if (mfp._allowZoom()) {
            clearTimeout(openTimeout);

            mfp.st.removalDelay = duration;

            if (!image) {
              image = mfp._getItemToZoom();
              if (!image) {
                return;
              }
              animatedImg = getElToAnimate(image);
            }

            animatedImg.css(mfp._getOffset(true));
            mfp.wrap.append(animatedImg);
            mfp.content.css("visibility", "hidden");

            setTimeout(function () {
              animatedImg.css(mfp._getOffset());
            }, 16);
          }
        });

        _mfpOn(CLOSE_EVENT + ns, function () {
          if (mfp._allowZoom()) {
            showMainContent();
            if (animatedImg) {
              animatedImg.remove();
            }
            image = null;
          }
        });
      },

      _allowZoom: function () {
        return mfp.currItem.type === "image";
      },

      _getItemToZoom: function () {
        if (mfp.currItem.hasSize) {
          return mfp.currItem.img;
        } else {
          return false;
        }
      },

      // Get element postion relative to viewport
      _getOffset: function (isLarge) {
        var el;
        if (isLarge) {
          el = mfp.currItem.img;
        } else {
          el = mfp.st.zoom.opener(mfp.currItem.el || mfp.currItem);
        }

        var offset = el.offset();
        var paddingTop = parseInt(el.css("padding-top"), 10);
        var paddingBottom = parseInt(el.css("padding-bottom"), 10);
        offset.top -= $(window).scrollTop() - paddingTop;

        /*

			Animating left + top + width/height looks glitchy in Firefox, but perfect in Chrome. And vice-versa.

			 */
        var obj = {
          width: el.width(),
          // fix Zepto height+padding issue
          height:
            (_isJQ ? el.innerHeight() : el[0].offsetHeight) -
            paddingBottom -
            paddingTop,
        };

        // I hate to do this, but there is no another option
        if (getHasMozTransform()) {
          obj["-moz-transform"] = obj["transform"] =
            "translate(" + offset.left + "px," + offset.top + "px)";
        } else {
          obj.left = offset.left;
          obj.top = offset.top;
        }
        return obj;
      },
    },
  });

  /*>>zoom*/

  /*>>iframe*/

  var IFRAME_NS = "iframe",
    _emptyPage = "//about:blank",
    _fixIframeBugs = function (isShowing) {
      if (mfp.currTemplate[IFRAME_NS]) {
        var el = mfp.currTemplate[IFRAME_NS].find("iframe");
        if (el.length) {
          // reset src after the popup is closed to avoid "video keeps playing after popup is closed" bug
          if (!isShowing) {
            el[0].src = _emptyPage;
          }

          // IE8 black screen bug fix
          if (mfp.isIE8) {
            el.css("display", isShowing ? "block" : "none");
          }
        }
      }
    };

  $.magnificPopup.registerModule(IFRAME_NS, {
    options: {
      markup:
        '<div class="mfp-iframe-scaler">' +
        '<div class="mfp-close"></div>' +
        '<iframe class="mfp-iframe" src="//about:blank" frameborder="0" allowfullscreen></iframe>' +
        "</div>",

      srcAction: "iframe_src",

      // we don't care and support only one default type of URL by default
      patterns: {
        youtube: {
          index: "youtube.com",
          id: "v=",
          src: "//www.youtube.com/embed/%id%?autoplay=1",
        },
        vimeo: {
          index: "vimeo.com/",
          id: "/",
          src: "//player.vimeo.com/video/%id%?autoplay=1",
        },
        gmaps: {
          index: "//maps.google.",
          src: "%id%&output=embed",
        },
      },
    },

    proto: {
      initIframe: function () {
        mfp.types.push(IFRAME_NS);

        _mfpOn("BeforeChange", function (e, prevType, newType) {
          if (prevType !== newType) {
            if (prevType === IFRAME_NS) {
              _fixIframeBugs(); // iframe if removed
            } else if (newType === IFRAME_NS) {
              _fixIframeBugs(true); // iframe is showing
            }
          } // else {
          // iframe source is switched, don't do anything
          //}
        });

        _mfpOn(CLOSE_EVENT + "." + IFRAME_NS, function () {
          _fixIframeBugs();
        });
      },

      getIframe: function (item, template) {
        var embedSrc = item.src;
        var iframeSt = mfp.st.iframe;

        $.each(iframeSt.patterns, function () {
          if (embedSrc.indexOf(this.index) > -1) {
            if (this.id) {
              if (typeof this.id === "string") {
                embedSrc = embedSrc.substr(
                  embedSrc.lastIndexOf(this.id) + this.id.length,
                  embedSrc.length
                );
              } else {
                embedSrc = this.id.call(this, embedSrc);
              }
            }
            embedSrc = this.src.replace("%id%", embedSrc);
            return false; // break;
          }
        });

        var dataObj = {};
        if (iframeSt.srcAction) {
          dataObj[iframeSt.srcAction] = embedSrc;
        }
        mfp._parseMarkup(template, dataObj, item);

        mfp.updateStatus("ready");

        return template;
      },
    },
  });

  /*>>iframe*/

  /*>>gallery*/
  /**
   * Get looped index depending on number of slides
   */
  var _getLoopedId = function (index) {
      var numSlides = mfp.items.length;
      if (index > numSlides - 1) {
        return index - numSlides;
      } else if (index < 0) {
        return numSlides + index;
      }
      return index;
    },
    _replaceCurrTotal = function (text, curr, total) {
      return text.replace(/%curr%/gi, curr + 1).replace(/%total%/gi, total);
    };

  $.magnificPopup.registerModule("gallery", {
    options: {
      enabled: false,
      arrowMarkup:
        '<button title="%title%" type="button" class="mfp-arrow mfp-arrow-%dir%"></button>',
      preload: [0, 2],
      navigateByImgClick: true,
      arrows: true,

      tPrev: "Previous (Left arrow key)",
      tNext: "Next (Right arrow key)",
      tCounter: "%curr% of %total%",
    },

    proto: {
      initGallery: function () {
        var gSt = mfp.st.gallery,
          ns = ".mfp-gallery";

        mfp.direction = true; // true - next, false - prev

        if (!gSt || !gSt.enabled) return false;

        _wrapClasses += " mfp-gallery";

        _mfpOn(OPEN_EVENT + ns, function () {
          if (gSt.navigateByImgClick) {
            mfp.wrap.on("click" + ns, ".mfp-img", function () {
              if (mfp.items.length > 1) {
                mfp.next();
                return false;
              }
            });
          }

          _document.on("keydown" + ns, function (e) {
            if (e.keyCode === 37) {
              mfp.prev();
            } else if (e.keyCode === 39) {
              mfp.next();
            }
          });
        });

        _mfpOn("UpdateStatus" + ns, function (e, data) {
          if (data.text) {
            data.text = _replaceCurrTotal(
              data.text,
              mfp.currItem.index,
              mfp.items.length
            );
          }
        });

        _mfpOn(MARKUP_PARSE_EVENT + ns, function (e, element, values, item) {
          var l = mfp.items.length;
          values.counter =
            l > 1 ? _replaceCurrTotal(gSt.tCounter, item.index, l) : "";
        });

        _mfpOn("BuildControls" + ns, function () {
          if (mfp.items.length > 1 && gSt.arrows && !mfp.arrowLeft) {
            var markup = gSt.arrowMarkup,
              arrowLeft = (mfp.arrowLeft = $(
                markup
                  .replace(/%title%/gi, gSt.tPrev)
                  .replace(/%dir%/gi, "left")
              ).addClass(PREVENT_CLOSE_CLASS)),
              arrowRight = (mfp.arrowRight = $(
                markup
                  .replace(/%title%/gi, gSt.tNext)
                  .replace(/%dir%/gi, "right")
              ).addClass(PREVENT_CLOSE_CLASS));

            arrowLeft.click(function () {
              mfp.prev();
            });
            arrowRight.click(function () {
              mfp.next();
            });

            mfp.container.append(arrowLeft.add(arrowRight));
          }
        });

        _mfpOn(CHANGE_EVENT + ns, function () {
          if (mfp._preloadTimeout) clearTimeout(mfp._preloadTimeout);

          mfp._preloadTimeout = setTimeout(function () {
            mfp.preloadNearbyImages();
            mfp._preloadTimeout = null;
          }, 16);
        });

        _mfpOn(CLOSE_EVENT + ns, function () {
          _document.off(ns);
          mfp.wrap.off("click" + ns);
          mfp.arrowRight = mfp.arrowLeft = null;
        });
      },
      next: function () {
        mfp.direction = true;
        mfp.index = _getLoopedId(mfp.index + 1);
        mfp.updateItemHTML();
      },
      prev: function () {
        mfp.direction = false;
        mfp.index = _getLoopedId(mfp.index - 1);
        mfp.updateItemHTML();
      },
      goTo: function (newIndex) {
        mfp.direction = newIndex >= mfp.index;
        mfp.index = newIndex;
        mfp.updateItemHTML();
      },
      preloadNearbyImages: function () {
        var p = mfp.st.gallery.preload,
          preloadBefore = Math.min(p[0], mfp.items.length),
          preloadAfter = Math.min(p[1], mfp.items.length),
          i;

        for (i = 1; i <= (mfp.direction ? preloadAfter : preloadBefore); i++) {
          mfp._preloadItem(mfp.index + i);
        }
        for (i = 1; i <= (mfp.direction ? preloadBefore : preloadAfter); i++) {
          mfp._preloadItem(mfp.index - i);
        }
      },
      _preloadItem: function (index) {
        index = _getLoopedId(index);

        if (mfp.items[index].preloaded) {
          return;
        }

        var item = mfp.items[index];
        if (!item.parsed) {
          item = mfp.parseEl(index);
        }

        _mfpTrigger("LazyLoad", item);

        if (item.type === "image") {
          item.img = $('<img class="mfp-img" />')
            .on("load.mfploader", function () {
              item.hasSize = true;
            })
            .on("error.mfploader", function () {
              item.hasSize = true;
              item.loadError = true;
              _mfpTrigger("LazyLoadError", item);
            })
            .attr("src", item.src);
        }

        item.preloaded = true;
      },
    },
  });

  /*>>gallery*/

  /*>>retina*/

  var RETINA_NS = "retina";

  $.magnificPopup.registerModule(RETINA_NS, {
    options: {
      replaceSrc: function (item) {
        return item.src.replace(/\.\w+$/, function (m) {
          return "@2x" + m;
        });
      },
      ratio: 1, // Function or number.  Set to 1 to disable.
    },
    proto: {
      initRetina: function () {
        if (window.devicePixelRatio > 1) {
          var st = mfp.st.retina,
            ratio = st.ratio;

          ratio = !isNaN(ratio) ? ratio : ratio();

          if (ratio > 1) {
            _mfpOn("ImageHasSize" + "." + RETINA_NS, function (e, item) {
              item.img.css({
                "max-width": item.img[0].naturalWidth / ratio,
                width: "100%",
              });
            });
            _mfpOn("ElementParse" + "." + RETINA_NS, function (e, item) {
              item.src = st.replaceSrc(item, ratio);
            });
          }
        }
      },
    },
  });

  /*>>retina*/
  _checkInstance();
});
/**
 * Header 2022
 */

var Header2022 = function () {
  const recalculateSubmenuBounds = (submenu, allowPostCalculation) => {
    const submenuStats = submenu.getBoundingClientRect();
    const overflowWidth =
      document.documentElement.clientWidth -
      (submenuStats.x + submenuStats.width);

    if (overflowWidth <= 0 || submenuStats.x <= 0) {
      $(submenu).addClass("mainNav-navigationItemsList-overflow");
    } else {
      $(submenu).removeClass("mainNav-navigationItemsList-overflow");

      if (allowPostCalculation) {
        setTimeout(() => {
          recalculateSubmenuBounds(submenu, false);
        }, 10);
      }
    }
  };

  $(".mainNav").on(
    "mouseenter touchstart",
    ".mainNav-navigationItem-dropdown",
    (e) => {
      const element = $(e.currentTarget);
      const submenu = element.children(".mainNav-navigationItemsList");

      element.addClass("mainNav-navigationItem-open");

      recalculateSubmenuBounds(submenu[0], true);
    }
  );

  $(".mainNav").on(
    "mouseleave touchend",
    ".mainNav-navigationItem-dropdown",
    (e) => {
      const element = $(e.currentTarget);

      element.removeClass("mainNav-navigationItem-open");
    }
  );

  $("body").on(
    "click",
    ".mainNav-menuToggleButton, .mobileNav-closeButton",
    (e) => {
      $("body").toggleClass("mobileMenu-open");
    }
  );

  $("body").on("click", (e) => {
    const navigationSearchParent = $(e.target).closest(".navigationSearch")[0];

    if (!navigationSearchParent && $(".navigationSearch").hasClass("active"))
      $(".navigationSearch").removeClass("active");
  });

  $(".navigationSearch").on("click", ".navigationSearch-toggleButton", (e) => {
    $(e.currentTarget).closest(".navigationSearch").toggleClass("active");

    e.preventDefault();
    e.stopPropagation();
  });

  $(".mobileNav").on("click", ".mobileNav-navigationItem-dropdown", (e) => {
    $(e.currentTarget)
      .siblings(".mobileNav-navigationItem-dropdown")
      .removeClass("mobileNav-navigationItem-expanded");
    $(e.currentTarget).addClass("mobileNav-navigationItem-expanded");
  });
};

/**
 * Investor Relations
 */

var InvestorRelations = function () {
  const investorRelationsApp = document.getElementById("InvestorRelationsApp");

  if (!investorRelationsApp) return;

  window.irResizeHandle = null;

  const resizeIrApp = () => {
    const $investorRelationsApp = $(investorRelationsApp);
    const contentHeight =
      investorRelationsApp.contentWindow.document.body.scrollHeight + 3;

    if (investorRelationsApp.offsetHeight !== contentHeight) {
      $investorRelationsApp.css("height", `${contentHeight}px`);

      console.log("resize", {
        iframeHeight: investorRelationsApp.offsetHeight,
        contentHeight: contentHeight,
      });
    }
  };

  setInterval(resizeIrApp, 1000);

  investorRelationsApp.addEventListener("load", () => {
    console.log("InvestorRelationsApp.load");

    const cssLink = document.createElement("link");
    cssLink.href =
      "/ResourcePackages/Theme/investor-relations/custom/css/style.css?v8";
    cssLink.rel = "stylesheet";
    cssLink.type = "text/css";

    investorRelationsApp.contentWindow.document.body.appendChild(cssLink);

    const appCssClass = $(investorRelationsApp).attr("data-app-css-class");
    const savolaApp =
      investorRelationsApp.contentWindow.document.getElementById("SavolaApp");

    if (appCssClass && savolaApp) savolaApp.classList.add(appCssClass);
  });
};

/**
 * Tabs
 */

var Tabs = function () {
  var _closeTabs = function () {
    $(".js-tab").removeClass("is-active");
    $(".js-tab-content").removeClass("is-active");
  };

  var _selectTab = function (index) {
    $(".js-tab:nth-child(" + (index + 1) + ")").addClass("is-active");
    $(".js-tab-content:nth-child(" + (index + 1) + ")").addClass("is-active");
  };

  $(".js-tab").on("click", function (e) {
    e.preventDefault();

    var index = $(this).index();

    _closeTabs();
    _selectTab(index);

    $("[class^=js-carousel]").slick("setPosition");
  });
};

/**
 * Investments Carousel
 */

var InvestmentsCarousel = function () {
  var $carousel = $(".js-carousel-investments");

  var options = {
    rtl: rtl === "rtl",
    slidesToShow: 4,
    slidesToScroll: 4,
    arrows: true,
    dots: true,
    appendArrows: ".js-carousel-investments-nav",
    prevArrow:
      '<span class="carousel-nav-prev icon-angle-' + left + '"></span>',
    nextArrow:
      '<span class="carousel-nav-next icon-angle-' + right + '"></span>',
    responsive: [
      {
        breakpoint: 1280,
        settings: {
          slidesToShow: 4,
          slidesToScroll: 4,
        },
      },
      {
        breakpoint: 992,
        settings: {
          slidesToShow: 4,
          slidesToScroll: 4,
        },
      },
      {
        breakpoint: 768,
        settings: {
          slidesToShow: 2,
          slidesToScroll: 2,
        },
      },
    ],
  };

  if ($carousel.length) {
    setTimeout(function () {
      $.fn.matchHeight._update();
    }, 100);
    $carousel.slick(options);
    $(".js-carousel-investments-nav span").click(function () {
      $.fn.matchHeight._update();
    });
  }
};

var InvestmentsFiltering = function () {
  var filters = {
    geography: [],
    sector: [],
  };

  var carousel = $(".js-carousel-investments");

  var geographySelect = $(".js-filter-geography");
  var sectorSelect = $(".js-filter-sector");

  var _renderTags = function () {
    var source = $("#investments-tags").html();
    var template = Handlebars.compile(source);
    var templateCountry = template({ tags: filters.geography });
    var templateSector = template({ tags: filters.sector });
    if (filters.geography.length == 0) {
      $(".js-filter-tags").addClass("empty-list");
    } else {
      $(".js-filter-tags").removeClass("empty-list");
    }
    $(".js-filter-tags").html(templateCountry);
    $(".js-filter-sector-tags").html(templateSector);
  };

  var _renderSlider = function () {
    var filterSelector = [];

    carousel.slick("slickUnfilter");

    if (filters.geography.length == 0 || filters.sector.length == 0) {
      filters.geography.forEach(function (filter) {
        if (filter.key.length) {
          filterSelector.push('[data-filter-geography*="' + filter.key + '"]');
        }
      });

      filters.sector.forEach(function (filter) {
        if (filter.key.length) {
          filterSelector.push('[data-filter-sector*="' + filter.key + '"]');
        }
      });
    } else {
      filters.geography.forEach(function (filterG) {
        if (filterG.key.length) {
          filters.sector.forEach(function (filterS) {
            if (filterS.key.length) {
              filterSelector.push(
                '[data-filter-geography*="' +
                  filterG.key +
                  '"][data-filter-sector*="' +
                  filterS.key +
                  '"]'
              );
            }
          });
        }
      });
    }
    if (filterSelector.length) {
      carousel.slick("slickFilter", filterSelector.join(", "));
    }
  };

  $(document).on("click", ".js-filter-tag", function (e) {
    e.preventDefault();

    var target = $(e.target);

    if (target.closest(".js-geography").length) {
      var index = filters.geography
        .map(function (e) {
          return e.key;
        })
        .indexOf($(this).attr("data-tag-name"));
      if (index !== -1) {
        filters.geography.splice(index, 1);
        $(this).parent("li").remove();
      }
    } else {
      var index = filters.sector
        .map(function (e) {
          return e.key;
        })
        .indexOf($(this).attr("data-tag-name"));
      if (index !== -1) {
        filters.sector.splice(index, 1);
        $(this).parent("li").remove();
      }
    }

    _renderSlider();
  });

  geographySelect.on("change.fs", function () {
    var selected = $(this).val();

    if (
      filters.geography
        .map(function (e) {
          return e.key;
        })
        .indexOf(selected) === -1
    ) {
      filters.geography.push({
        key: selected,
        value: $(this)
          .find("option[value=" + selected + "]")
          .text(),
      });
    }

    _renderTags();
    _renderSlider();
    geographySelect.val("");
    geographySelect.trigger("update.fs");
  });

  sectorSelect.on("change.fs", function () {
    var selected = $(this).val();

    if (
      filters.sector
        .map(function (e) {
          return e.key;
        })
        .indexOf(selected) === -1
    ) {
      filters.sector.push({
        key: selected,
        value: $(this)
          .find("option[value=" + selected + "]")
          .text(),
      });
    }

    _renderTags();
    _renderSlider();
    sectorSelect.val("");
    sectorSelect.trigger("update.fs");
  });
};

/**
 * Header Carousel
 */

var HeaderCarousel = function () {
  var $carousel = $(".js-carousel");
  var options = {
    rtl: rtl == "rtl",
    fade: true,
    infinite: false,
    dots: true,
    appendDots: ".js-carousel-dots",
    arrows: false,
    // appendArrows: '.js-carousel-nav',
    prevArrow:
      '<span class="carousel-nav-prev icon-angle-' + left + '"></span>',
    nextArrow:
      '<span class="carousel-nav-next icon-angle-' + right + '"></span>',
    autoplay: true,
    autoplaySpeed: 6000,
  };

  if ($carousel.length) {
    $carousel.slick(options);
  }
};

/**
 * Price Chart
 */

var PriceChart = function () {
  Chart.defaults.global.legend.display = false;
  Chart.defaults.global.tooltips.backgroundColor = "rgba(15,86,119,0.8)";
  Chart.defaults.global.defaultFontFamily =
    "Avenir,Helvetica Neue,Helvetica,Arial,sans-serif";

  var $chart = $(".js-chart");

  var options = {
    responsive: true,
    height: 220,
    scales: {
      yAxes: [
        {
          ticks: {
            beginAtZero: false,
          },
        },
      ],
    },
    tooltips: {
      callbacks: {
        title: function () {
          return "";
        },
        label: function (tooltipItem, data) {
          return data.datasets[0].data[tooltipItem.index];
        },
      },
    },
  };

  if ($chart.length) {
    try {
      var pageUrl = window.location.href.split("?")[0];
      if (window.location.pathname == "/") {
        pageUrl = "/home";
      }
      if (window.location.pathname == "/en") {
        pageUrl = "/en/home";
      }
      $.post(pageUrl + "/chartdata", function (graphdata) {
        var chart = new Chart($chart, {
          type: "line",
          data: {
            labels: graphdata[0],
            datasets: [
              {
                label: "",
                data: graphdata[1],
                borderColor: "#6895AA",
                pointBackgroundColor: "#0F5677",
                fill: false,
                lineTension: 0,
              },
            ],
          },
          options: options,
        });
      });
    } catch (e) {}
  }
};

/**
 * Capitalization Chart
 */

var CapitalizationChart = function () {
  Chart.defaults.global.legend.display = false;
  Chart.defaults.global.tooltips.backgroundColor = "rgba(15,86,119,0.8)";

  var $chart = $(".js-capitalization-chart");

  var options = {
    responsive: true,
    height: 220,
    scales: {
      yAxes: [
        {
          ticks: {
            beginAtZero: false,
          },
        },
      ],
    },
    tooltips: {
      callbacks: {
        title: function () {
          return "";
        },
        label: function (tooltipItem, data) {
          return data.datasets[0].data[tooltipItem.index];
        },
      },
    },
  };

  if ($chart.length) {
    try {
      $.post(
        window.location.href.split("?")[0] + "/chartdata",
        function (graphdata) {
          var chart = new Chart($chart, {
            type: "line",
            data: {
              labels: graphdata[0],
              datasets: [
                {
                  label: "",
                  data: graphdata[1],
                  borderColor: "#6895AA",
                  pointBackgroundColor: "#0F5677",
                  fill: false,
                  lineTension: 0,
                },
              ],
            },
            options: options,
          });
        }
      );
    } catch (e) {}
  }
};

/**
 * Mobile Submenu
 */

var MobileSubmenu = function () {
  var $menuToggle = $(".js-mobile-submenu-toggle");

  $menuToggle.on("click", function (e) {
    e.preventDefault();

    $(this).toggleClass("is-active");
    $(this).parent().next(".js-mobile-submenu").toggleClass("is-active");
  });
};

/**
 * Mobile Menu
 */

var Drawer = function () {
  var settings = {
    $body: $(".js-body"),
    $header: $(".js-header"),
    $drawer: $(".js-drawer"),
    $content: $(".js-body-content"),
    $button: $(".js-burger-button"),
    drawerIsOpen: false,
  };

  var _openDrawer = function () {
    settings.$body.addClass("has-drawer-open");
    settings.$drawer.prepareTransition().addClass("is-open");
    settings.$content.addClass("is-moved-by-drawer");
    settings.$header.addClass("is-moved-by-drawer");
    settings.drawerIsOpen = true;
  };

  var _closeDrawer = function () {
    settings.$body.removeClass("has-drawer-open");
    settings.$drawer.prepareTransition().removeClass("is-open");
    settings.$drawer.prepareTransition();
    settings.$content.removeClass("is-moved-by-drawer");
    settings.$header.removeClass("is-moved-by-drawer");
    settings.drawerIsOpen = false;
  };

  settings.$button.on("click", function toogleMenu() {
    $(this).toggleClass("is-active");
    if (settings.drawerIsOpen) {
      _closeDrawer();
    } else {
      _openDrawer();
    }
  });
};

/**
 * Main nav submenus
 */
var Submenu = function () {
  var showSubmenu = function (el) {
    $(el).find(".js-nav-main-sub").prepareTransition().addClass("is-open");
  };

  var hideSubmenu = function (el) {
    $(el).find(".js-nav-main-sub.is-open input").blur();
    $(el).find(".js-nav-main-sub").prepareTransition().removeClass("is-open");
  };
  if (
    Modernizr.touchevents &&
    !(
      (window.screen.width > 1279 && window.devicePixelRatio == 1) ||
      (window.screen.width > 1000 &&
        window.innerWidth < window.screen.width * 0.9)
    )
  ) {
    /*
        $(document).on('click touchstart',function (e) {
            $('.js-nav-main-sub.is-open').removeClass('is-open');
            console.log('click outside');
            console.log(e.target.id);
        });*/
    /*
        $('.js-nav-main-sub.is-open').on('click touchstart', function (e) {
            //e.stopPropagation();
        });*/
    var menuElement = $(".js-nav-main-sub, .nav-main-list");
    $(document).on("click touchstart", function listener(e) {
      try {
        if (menuElement.is(":visible")) {
          var $target = null;
          if (e.type === "mouseup") {
            $target = $(e.target);
          } else {
            var x =
              e.originalEvent.changedTouches[0].pageX - window.pageXOffset;
            var y =
              e.originalEvent.changedTouches[0].pageY - window.pageYOffset;
            var target = document.elementFromPoint(x, y);

            if (target) {
              $target = $(target);
            }
          }

          if (
            $target !== null &&
            ($target.is(menuElement) || $target.parents().is(menuElement))
          ) {
          } else {
            $(".js-nav-main-sub.is-open").removeClass("is-open");
          }
        }
      } catch (e) {}
    });

    $(".js-nav-main-with-sub.has-dropdown").on(
      "click touchstart",
      function (e) {
        if ($(this).children(".js-nav-main-sub").hasClass("is-open")) {
          // hideSubmenu($(this));
          return true;
        } else {
          $(".js-nav-main-sub.is-open").removeClass("is-open");
          showSubmenu($(this));
          e.preventDefault();
          return false;
        }
      }
    );
  } else {
    $(".js-nav-main-with-sub").hoverIntent({
      over: function () {
        showSubmenu(this);
      },
      out: function () {
        hideSubmenu(this);
      },
      timeout: 500,
    });
  }
};

var Contact = function () {
  $(".js-contact-show").click(function () {
    $(".js-contact").hide();
    $(".js-contact-details").fadeIn();
  });

  $(".js-contact-hide").click(function () {
    $(".js-contact").fadeIn();
    $(".js-contact-details").hide();
  });
};

var Map = function () {
  $(".js-map-pin").each(function enableTooltips() {
    var content = $(this).data("content");

    // Enable drop
    var drop = new Drop({
      target: this,
      classes: "drop-theme-twipsy",
      content: content,
      position: "top center",
      constrainToWindow: true,
      constrainToScrollParent: true,
      openOn: "hover",
    });
  });
};

var EmbedVideo = function () {
  Object.defineProperty(HTMLMediaElement.prototype, "playing", {
    get: function () {
      return !!(
        this.currentTime > 0 &&
        !this.paused &&
        !this.ended &&
        this.readyState > 2
      );
    },
  });
  var iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
  if (!iOS) {
    $(".js-video-play").on("click", function (e) {
      e.preventDefault();

      $(this).hide();
      $(this).next()[0].play();
    });

    $(".js-video").on("click", function () {
      if ($(this)[0].playing) {
        $(this)[0].pause();
        $(this).prev().show();
      }
    });
  } else {
    $(".js-video-play").hide();
  }
};

var ProgressBar = function () {
  if ($(".js-progress-bar").length) {
    $(".js-progress-bar")
      .closest("section")
      .waypoint({
        offset: "20%",
        handler: function () {
          $(".js-progress-bar").each(function (el) {
            var bar = $(this);
            var progress = bar.data("progress") + "%";

            bar.find("span.progressbar-loaded").animate({
              width: progress,
            });
          });
          this.destroy();
        },
      });
  }
};

var History = function () {
  $(".js-history").attr(
    "style",
    "padding-top:" +
      (Math.max.apply(
        Math,
        $(".history-popover-top").map((i, e) => $(e).height())
      ) -
        80 +
        30) +
      "px !important;" +
      "padding-bottom:" +
      (Math.max.apply(
        Math,
        $(".history-popover-bottom").map((i, e) => $(e).height())
      ) -
        80 +
        30) +
      "px !important;"
  );
};

var HorizontalScroll = function () {
  var scroller = $(".js-horizontal-scroll");
  var scrollLeft = scroller.scrollLeft();
  var leftArrow = $(".js-scroll-left");
  var rightArrow = $(".js-scroll-right");
  var interval;

  scroller.on("scroll", function () {
    scrollLeft = scroller.scrollLeft();
  });

  leftArrow
    .on("mouseover", function () {
      interval = setInterval(function () {
        scroller.scrollLeft(scrollLeft - 1);
      }, 10);
    })
    .on("mouseout", function () {
      clearInterval(interval);
    });

  rightArrow
    .on("mouseover", function () {
      interval = setInterval(function () {
        scroller.scrollLeft(scrollLeft + 1);
      }, 10);
    })
    .on("mouseout", function () {
      clearInterval(interval);
    });
};

var GetInTouchForm = function () {
  // if ($("#get-in-touch-form").length) {
    $("#get-in-touch-form").on("submit", function (e) {
      e.preventDefault();
      if (!$(this).valid()) return;
      var formData = $(this).serialize();
      $.ajax({
        type: "POST",
        url: "/api/contact",
        data: formData,
        contentType: "application/x-www-form-urlencoded; charset=utf-8",
        success: function (data) {
          $("#get-in-touch-form").hide();
          $("#get-in-touch-form")
            .parent()
            .find(".result-msg")
            .text(data.message);
        },
      });
    });
  // }
};
var SubscribeForm = function () {
  if ($(".subscribe-form").length) {
    $(".subscribe-form form").on("submit", function (e) {
      e.preventDefault();
      if (!$(this).valid()) return;
      var formData = $(this).serialize();
      $.post("", formData, function (data) {
        $(".subscribe-form .alert-success").show();
        $(".subscribe-form .form-short").hide();
      });
    });
  }
};
var NewsAndMedia = function () {
  if ($("section.news-and-media").length) {
    function UpdateNews() {
      if (!$("#news-and-media-form").valid()) return;
      var formData = $("#news-and-media-form").serialize();
      $(".loader").show();
      var apiUrl = $('#news-and-media-form input[name="Api"]').val();
      if (
        $("section.news-and-media #news-and-media-load-more-btn").prop(
          "disabled"
        ) == true
      ) {
        return false;
      }
      $.post(apiUrl, formData, function (data) {
        $(".loader").hide();
        if (data.success) {
          $(".news-row").remove();
          if (!data.loadmore) {
            $("section.news-and-media #news-and-media-load-more-btn").hide();
          } else {
            $("section.news-and-media #news-and-media-load-more-btn").show();
          }
          $("#news-and-media-page").val(data.page);
          $.each(data.news, function (i, e) {
            if ($("#news-holder .news-row").length == 0) {
              $("#news-holder").append(
                '<div class="row margin-bottom news-row"></div>'
              );
            }
            if ($("#news-holder .news-row:last > div").length == 4) {
              $("#news-holder").append(
                '<div class="row margin-bottom news-row"></div>'
              );
            }
            if ($("#news-holder").hasClass("without-images")) {
              $("#news-holder").append(
                '<li class="news-row" id="' +
                  e.Id +
                  '"><h4>' +
                  e.DateStr +
                  ", " +
                  e.CategoriesStr +
                  "</h4>" +
                  '<h2><a target="_blank" href="' +
                  e.Url +
                  '">' +
                  e.Title +
                  "</a></h2></li>"
              );
            } else {
              $("#news-holder .news-row:last").append(
                '<div class="col-sm-3" id="' +
                  e.Id +
                  '"><div class="body-small"><ul class="list-span"><li><date>' +
                  e.DateStr +
                  "</date>" +
                  '</li><li class="text-right">' +
                  e.CategoriesStr +
                  '</li></ul><img src="' +
                  e.Image +
                  '" class="img-responsive margin-xs-bottom"><p><strong>' +
                  e.Title +
                  "</strong></p>" +
                  "<p>" +
                  e.Summary +
                  '</p><div class="text-right"><a href="' +
                  e.Url +
                  '" class="link-green">read <span class="icon-doc-text"></span></a></div></div>'
              );
            }
          });
        }

        $("section.news-and-media #news-and-media-load-more-btn").prop(
          "disabled",
          false
        );
      });
    }
    $("section.news-and-media select").on("change.fs", function (e) {
      e.preventDefault();
      $("#news-and-media-page").val("");
      UpdateNews();
    });
    $("section.news-and-media #news-and-media-load-more-btn").on(
      "click",
      function (e) {
        e.preventDefault();
        $("section.news-and-media #news-and-media-load-more-btn").prop(
          "disabled",
          true
        );
        $("#news-and-media-page").val(
          parseInt($("#news-and-media-page").val()) + 1
        );
        UpdateNews();
      }
    );
  }
};
var shareHolderTypeHandler = function () {
  var shareHolderNumber = $("#shareholder-number-filter");
  $("input[name=shareholder-type]").change(function (e) {
    $("#number-validation-error").removeClass("show");
    $("#shareholder-number-filter").removeClass("invalid");
    var selectedType = e.target.value;
    if (selectedType == 1) {
      shareHolderNumber.attr("placeholder", shareHolderNumber.data("numberId"));
      shareHolderNumber.val("");
      shareHolderNumber.addClass("show");
    } else if (selectedType == 2) {
      shareHolderNumber.attr("placeholder", shareHolderNumber.data("number"));
      shareHolderNumber.val("");
      shareHolderNumber.addClass("show");
    } else {
      shareHolderNumber.val("");
      shareHolderNumber.removeClass("show");
    }
  });
};
shareHolderTypeHandler();

var ShareholdresTable = function () {
  if ($(".holder").length) {
    var oTable;
    function reinit() {
      if (oTable != null) {
        oTable.destroy();
      }
      oTable = $("#shareholders-table").DataTable({
        serverSide: true,
        pageLength: 10,
        filter: false,
        bInfo: false,
        dom: "<'row'<'col-sm-6'l><'col-sm-6'f>><'row'<'col-sm-12'tr>><'row'<'col-sm-12'p>>",
        pagingType: "simple_numbers",
        bLengthChange: false,
        bSort: false,
        ajax: {
          type: "POST",
          url: window.location.pathname + "/data",
          datatype: "json",
          data: function (data) {
            return {
              param: data,
              number: $("#shareholder-number-filter").val(),
              firstName: $("#shareholder-first-name").val(),
              fatherName: $("#shareholder-father-name").val(),
              familyName: $("#shareholder-family-name").val(),
              type: $("input[name=shareholder-type]:checked").val(),
            };
          },
        },
        oLanguage: {
          sProcessing:
            "<div class='uil-flickr-css' style='transform:scale(0.39);'><div></div><div></div></div>",
          sEmptyTable: $("#emptyTableMsg").data("msg"),
          oPaginate: {
            sPrevious: "«",
            sNext: "»",
          },
        },
        processing: true,
        columns: [
          { data: "Number" },
          { data: "NumberId" },
          { data: "Name" },
          { data: "Type" },
        ],
      });
    }

    /*reinit();*/
    /*
        oTable.columns().every(function () {
            var that = this;

            $('input', this.footer()).on('keyup change', function () {
                that
                    .search(this.value)
                    .draw();
            });
        });*/
    var shareHolderFirstName = $("#shareholder-first-name");
    var shareHolderFatherName = $("#shareholder-father-name");
    var shareHolderFamilyName = $("#shareholder-family-name");
    var shareHolderNumber = $("#shareholder-number-filter");
    var shareHolderTable = $("#shareholders-table");
    var validationError = $("#shareholder-form-validation");
    $("#js-shareholders-filter").click(function () {
      var oneFieldExist =
        shareHolderNumber.val() ||
        shareHolderFirstName.val() ||
        shareHolderFatherName.val() ||
        shareHolderFamilyName.val();
      //number empty or not number and all not selected
      if (
        !oneFieldExist &&
        $("input[name=shareholder-type]:checked").val() != 3 &&
        (!$("#shareholder-number-filter").val() ||
          isNaN($("#shareholder-number-filter").val()))
      ) {
        shareHolderTable.removeClass("show");
        shareHolderNumber.addClass("invalid");
        $("#number-validation-error").addClass("show");
      } else if (oneFieldExist) {
        reinit();
        shareHolderTable.addClass("show");
        validationError.removeClass("show");
        shareHolderNumber.removeClass("invalid");
        $("#number-validation-error").removeClass("show");

        if (
          $("#shareholder-number-filter").val() &&
          $("input[name=shareholder-type]:checked").val() == "1"
        )
          shareHolderTable.addClass("show-number-id");
        else shareHolderTable.removeClass("show-number-id");
      } else {
        validationError.addClass("show");
        shareHolderTable.removeClass("show");
      }
    });
  }
};

var RefreshButton = function () {
  if ($(".js-refresh-btn").length) {
    $(".js-refresh-btn-fixed").hide();
    $(".js-refresh-btn").waypoint({
      handler: function (direction) {
        if (direction === "down") {
          $(".js-refresh-btn-fixed").fadeIn(300);
        } else {
          $(".js-refresh-btn-fixed").fadeOut(300);
        }
      },
    });
  }
};
var RefreshButtonClick = function () {
  if ($(".js-refresh-btn, .js-refresh-btn-fixed").length) {
    $(".js-refresh-btn, .js-refresh-btn-fixed").click(function () {
      var url = window.location.href.split("?")[0].split("#")[0];
      $(".loader").show();
      $.get(url + "?temp=" + Math.random(), function (data) {
        $(".loader").hide();
        var html = $(data).find("#share-info-container-replace");
        $("#share-info-container").html(html);
        $.fn.matchHeight._update();
      });
      return false;
    });
  }
};
var ImagePopup = function () {
  if ($(".image-link").length) {
    var pageHref = location.href;
    var pageTitle = document.title;
    $(".image-link").magnificPopup({
      type: "image",
      gallery: {
        enabled: true,
      },
      zoom: {
        enabled: true,

        duration: 300,
        easing: "ease-in-out",
        opener: function (openerElement) {
          return openerElement.is("img")
            ? openerElement
            : openerElement.find("img");
        },
      },
      callbacks: {
        change: function () {
          var img = this.currItem.el.is("img")
            ? this.currItem.el
            : this.currItem.el.find("img");
          /*var detailUrl = img.attr('data-detail-url');
                        if (detailUrl && history.state !== this.currItem.index) {
                            history.pushState(this.currItem.index, img.attr('alt'), detailUrl);
                        }*/
        },
        close: function () {
          if (pageHref !== location.href) {
            history.pushState(null, pageTitle, pageHref);
          }
        },
      },
    });

    window.addEventListener("popstate", function (e) {
      if (
        e.state !== undefined &&
        e.state !== null &&
        typeof e.state === "number"
      ) {
        if (e.state >= 0 && e.state < $.magnificPopup.instance.items.length) {
          $(".image-link").magnificPopup("open", e.state);
        }
      } else {
        $(".image-link").magnificPopup("close");
      }
    });
  }
};

var VideoEndShowPoster = function () {
  $("video").on("ended", function () {
    $(this).autoplay = false;
    $(this).load();
    $(this).prev().show();
  });
};

var TableResponsive = function () {
  $.each($("table.table"), function (i, e) {
    var tableWidth = 0;
    $(e)
      .find("tr:first-child td")
      .each(function (index) {
        tableWidth += parseInt($(this).width(), 10);
      });
    var tableParentWidth = $(this).parent().outerWidth();
    if (tableWidth > tableParentWidth) {
      $(this).addClass("scrollable");
    }
  });
};

// Create cookie
function createCookie(name, value, days) {
  var expires;
  if (days) {
    var date = new Date();
    date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
    expires = "; expires=" + date.toGMTString();
  } else {
    expires = "";
  }
  document.cookie = name + "=" + value + expires + "; path=/";
}

// Read cookie
function readCookie(name) {
  var nameEQ = name + "=";
  var ca = document.cookie.split(";");
  for (var i = 0; i < ca.length; i++) {
    var c = ca[i];
    while (c.charAt(0) === " ") {
      c = c.substring(1, c.length);
    }
    if (c.indexOf(nameEQ) === 0) {
      return c.substring(nameEQ.length, c.length);
    }
  }
  return null;
}

// Erase cookie
function eraseCookie(name) {
  createCookie(name, "", -1);
}
var Accessibility = function () {
  function updateCookie() {
    createCookie(
      "accessibility",
      JSON.stringify({
        font: $(".accessibility-menu-text-btn-increase.active").length > 0,
        color: $(".inverse-color").is(":checked"),
        greencolor: $(".contrast-green-color").is(":checked"),
      }),
      300
    );
  }
  // Usually you set it as a variable and then use it somewhere
  var accessibilitySettings = readCookie("accessibility");
  if (accessibilitySettings) {
    var setting = JSON.parse(accessibilitySettings);
    // Then do some conditional crap with it
    if (setting.font) {
      $(".accessibility-menu-text-btn").removeClass("active");
      $(".accessibility-menu-text-btn-increase").addClass("active");
      $("html").addClass("textIncrease");
    }
    if (setting.color) {
      $(".inverse-color").prop("checked", true);
      $("html").addClass("colorInversion");
    }
    if (setting.greencolor) {
      $(".contrast-green-color").prop("checked", true);
      $("html").addClass("greenColorContrast");
    }
  }
  $(".accessibility-menu-toggle").click(function (e) {
    e.preventDefault();
    $(".accessibility-menu, .accessibility-menu-toggle").toggleClass("active");
  });
  $(".inverse-color").change(function (e) {
    e.preventDefault();
    $("html").toggleClass("colorInversion");
    updateCookie();
  });
  $(".contrast-green-color").change(function (e) {
    e.preventDefault();
    $("html").toggleClass("greenColorContrast");
    updateCookie();
  });
  $(".accessibility-menu-text-btn-normal").click(function (e) {
    e.preventDefault();
    $(".accessibility-menu-text-btn").removeClass("active");
    $(this).addClass("active");
    $("html").removeClass("textIncrease");
    updateCookie();
  });
  $(".accessibility-menu-text-btn-increase").click(function (e) {
    e.preventDefault();
    $(".accessibility-menu-text-btn").removeClass("active");
    $(this).addClass("active");
    $("html").addClass("textIncrease");
    updateCookie();
  });
  $(".rsbtn:not(.rsexpanded) .rsbtn_play").click(function () {
    setTimeout(function () {
      $(".accessibility-menu, .accessibility-menu-toggle").removeClass(
        "active"
      );
    }, 1000);
  });
  $(document).click(function (event) {
    $target = $(event.target);
    if (
      !$target.closest(".accessibility-menu.active").length &&
      !$target.closest(".accessibility-menu-toggle").length
    ) {
      $(".accessibility-menu, .accessibility-menu-toggle").removeClass(
        "active"
      );
    }
  });
};
var MediaCenter = function () {
  if ($(".media-filter, .media-center-details").length == 0) {
    return;
  }
  var _apiGateway = "/api/";
  //Media center
  var lang = document.documentElement.lang;
  var selectedFilters = {
    NewsTags: [],
    Years: [],
    Months: [],
    search: "",
  };
  var skip = 0;
  var take = 6;
  var isFilterChanged = false;
  var filterByLbl = lang === "ar" ? "فلتر ب" : "FILTER BY";
  var resetFilterLbl = lang === "ar" ? "تصفية الفلتر" : "RESET FILTER";
  var searchByKeywordLbl =
    lang === "ar" ? "البحث بالكلمات" : "Search by keyword";
  var newsTagsLbl = lang === "ar" ? "فئة" : "Category";
  var yearLbl = lang === "ar" ? "سنة" : "Year";
  var monthLbl = lang === "ar" ? "شهر" : "Month";
  function buildMediaFilterNav() {
    var filterBy = $("<li>", {
      class: "media-filter-item",
      id: "filter-title",
      html: $("<i>", { class: "icon-sliders" }),
    }).append(filterByLbl);
    var filterContainer = $(".filter-container");
    fetchData("news/getfilters?culture=" + lang, function (data) {
      data["reset-filter"] = { label: resetFilterLbl };
      data["search"] = { label: "" };
      var names = {};
      names["NewsTags"] = newsTagsLbl;
      names["Months"] = monthLbl;
      names["Years"] = yearLbl;
      $.each(data, function (type, filters) {
        var filterObj = {
          type: type,
          label: (filters.label !== undefined
            ? filters.label
            : names[type]
          ).toUpperCase(),
        };
        var $filter = buildMediaFilter(filterObj);
        filterContainer.append($filter);
        if (type !== "reset-filter")
          var btns = generateMediaFilterButtons(type, filters, [
            "btn",
            "media-filter-button filter-item",
          ]);
        var container = $(".btn-container");
        container.append.apply(container, btns);
      });
    });
    filterContainer.prepend(filterBy);
  }

  function buildMediaFilter(item) {
    var classList = ["media-filter-item"];
    return $("<li>", {
      class: classList.join(" "),
      id: item.type,
      html: $("<i>", {
        class: getMediaFilterItemClass(item.type),
      }),
    })
      .on("click", { type: item.type }, handleMediaFilterEvent)
      .append(item.label);
  }

  function generateMediaFilterButtons(type, filters, classes) {
    var btnList = [];
    if (type !== "search") {
      $.each(filters, function (key, item) {
        var filterClasses = classes.slice();
        var label = "";
        var value = "";
        var css = { "background-color": item.Color ? item.Color : "#5C666F" };

        var isActive = selectedFilters[type].includes(
          type === "NewsTags" ? item.Id : key
        );
        var isActiveClass = item.activeColor
          ? "card-title-" + item.activeColor
          : "card-title-active";
        if (isActive) {
          filterClasses.push(isActiveClass);
        }
        if (type !== "NewsTags") {
          label = item;
          value = key;
        } else {
          label = item.Name;
          value = item.Id;
        }
        var btn = $("<button>", {
          class: filterClasses.join(" "),
          FilterType: type,
          html: label,
          value: value,
        }).on(
          "click",
          { type: type, value: value, activeClass: isActiveClass, css: css },
          addOrRemoveFilter
        );

        btnList.push(btn);
      });
    } else {
      var searchInput = $("<input>", {
        class: "search-filter filter-item",
        placeholder: searchByKeywordLbl,
        FilterType: type,
        val: selectedFilters.searchKeyword,
      }).on("input", function () {
        selectedFilters.search = this.value;
      });
      btnList.push(searchInput);
    }
    return btnList;
  }

  function handleMediaFilterEvent(event) {
    var filterType = event.data.type;
    if (!["reset-filter"].includes(filterType)) {
      toggleMediaFilterBody(filterType);
    } else {
      $(".media-filter-button")
        .css({ "background-color": "" })
        .removeClass()
        .addClass("btn media-filter-button filter-item");
      $(".search-filter").val("");
      selectedFilters = {
        NewsTags: [],
        Years: [],
        Months: [],
        search: "",
      };
      buildNewsList(true);
    }
  }

  function toggleMediaFilterBody(filterType) {
    var filterContainer = $(".media-filter-body");
    var activeFilter = $("[activeFilter = true]");
    if (filterContainer.css("visibility") === "visible") {
      if (activeFilter[0].id === filterType) {
        $("#" + filterType).removeAttr("activeFilter");
        $(".filter-item").hide();
        filterContainer.removeClass("media-filter-body-show");
        if (isFilterChanged) {
          isFilterChanged = false;
          buildNewsList(true);
        }
      } else {
        $(activeFilter).removeAttr("activeFilter");
        $(".filter-item").hide();
        filterContainer.removeClass("media-filter-body-show");
        $("[FilterType=" + filterType + "]").show();
        $("#" + filterType).attr("activeFilter", true);
        filterContainer.addClass("media-filter-body-show");
      }
    } else {
      $(".filter-item").hide();
      $("[FilterType=" + filterType + "]").show(function () {
        $("#" + filterType).attr("activeFilter", true);
        filterContainer.addClass("media-filter-body-show");
      });
    }

    $(".icon-cancel-circled").on("click", function () {
      $(".media-filter-body").removeClass("media-filter-body-show");
      if (isFilterChanged) {
        isFilterChanged = false;
        buildNewsList(true);
      }
    });
  }

  function getMediaFilterItemClass(type) {
    switch (type) {
      case "reset-filter":
        return "icon-ccw";
      case "search":
        return "icon-search";
      default:
        return "icon-angle-down";
    }
  }

  function addOrRemoveFilter(event) {
    if ($(this).data("enterpressed")) {
      $(this).data("enterpressed", false);
      return;
    }
    $(this).data("enterpressed", false);
    isFilterChanged = true;
    var type = event.data.type;
    var item = event.data.value;
    var isActiveClass = event.data.activeClass;
    var css = event.data.css;
    $(this).toggleClass(isActiveClass);
    if ($(this).hasClass(isActiveClass)) {
      $(this).css(css);
    } else {
      $(this).removeAttr("style");
    }
    var idx = selectedFilters[type].indexOf(item);
    if (idx !== -1) {
      selectedFilters[type].splice(idx, 1);
    } else {
      selectedFilters[type].push(item);
    }
  }

  $(".media-filter-mobile").click(function (e) {
    buildFilterBodyMobile();
    $(".media-filter-body-mobile").slideDown("slow");
  });
  $(".icon-cancel-1").click(function () {
    $(".media-filter-body-mobile").slideUp("slow");
  });

  function buildFilterBodyMobile() {
    fetchData("news/getfilters?culture=" + lang, function (data) {
      $.each(data, function (type, filters) {
        $("." + type).empty();
        var btns = generateMediaFilterButtons(type, filters, [
          "media-filter-button",
        ]);
        var container = $("." + type);
        container.append.apply(container, btns);
      });
    });

    $(".reset-filter").click(function () {
      selectedFilters = {
        NewsTags: [],
        Years: [],
        Months: [],
        search: "",
      };
      buildNewsList(true);
      buildFilterBodyMobile();
    });
  }

  $(".filter-apply").click(function (e) {
    if (isFilterChanged) {
      isFilterChanged = false;
      buildNewsList(true);
    }
    $(".media-filter-body-mobile").slideUp("slow");
  });
  $(".media-filter-body").on(
    "keydown keypress",
    " .media-filter-button",
    function (e) {
      if (e.which == 13) {
        $(this).data("enterpressed", true);
      }
    }
  );
  $(".media-filter-body").on("keyup", " .media-filter-button", function (e) {
    $(this).data("enterpressed", false);
  });
  function buildNewsList(rebuild) {
    var categories =
      selectedFilters.NewsTags.length > 0
        ? "&newstagsId=" + selectedFilters.NewsTags.join(",")
        : "";
    var years =
      selectedFilters.Years.length > 0
        ? "&year=" + selectedFilters.Years.join(",")
        : "";
    var months =
      selectedFilters.Months.length > 0
        ? "&month=" + selectedFilters.Months.join(",")
        : "";
    var searchKeyword =
      selectedFilters.search !== "" ? "&search=" + selectedFilters.search : "";
    var url = "news/getitems";

    if (rebuild) {
      $(".media-list .media-list-item").empty();
      skip = 0;
    }
    var param =
      "?take=" +
      take +
      "&skip=" +
      skip +
      searchKeyword +
      categories +
      years +
      months +
      "&culture=" +
      lang;
    fetchData(url + param, function (data) {
      var TotalNews = take + skip;
      if (TotalNews >= data.TotalCount) {
        $(".load-more").hide();
      } else {
        $(".load-more").show();
      }
      if (data.Items.length > 0) {
        $.each(data.Items, function (index, value) {
          var bg_color = value.Color ? value.Color : "#63C5B7";
          var currentUrl = window.location.pathname + value.FullUrl;

          var news =
            '<div class="col-lg-4 col-sm-6">\n' +
            '           <a href="' +
            currentUrl +
            '">' +
            '            <div class="card">\n' +
            '                <div class="card-image" style="background-image: url(' +
            value.Thumbnail.Url +
            "); " +
            '                                               background-size: cover; background-position: center ">\n' +
            "                </div>\n" +
            '                <div class="card-title" style="background-color: ' +
            bg_color +
            '">\n' +
            "                    " +
            value.NewsTag +
            "                </div>\n" +
            '                <div class="card-body">\n' +
            "                    " +
            value.Title +
            "                </div>\n" +
            '                <div class = "card-date">\n' +
            "                    " +
            value.PublicationDateString +
            "                </div>\n" +
            "            </div>\n" +
            "           </a>" +
            "        </div>";
          $(".media-list .media-list-item").append(news);
        });
      } else {
        var noresult =
          '<div class="col-xs-12 media-list-no-result">No search result found.</div>';
        $(".media-list .media-list-item").append(noresult);
      }
    });
  }

  function fetchData(url, callback) {
    return $.getJSON(_apiGateway + url, function (data) {
      return callback(data);
    });
  }

  $(".load-more").click(function () {
    skip += 6;
    buildNewsList(false);
  });
  var interval = null;
  $(document).on("shown.bs.modal", "#myModal", function () {
    setTimeout(function () {
      if ($(".slider-for .slick-slide.slick-current img").length) {
        $(".slider-for .slick-slide.slick-current img")
          .one("load", function () {
            console.log("load");
            $(".slider-for").slick("setPosition");
            $("#myModal .modal-content").addClass("popup-visible");
          })
          .each(function () {
            console.log($(this));
            if (this.complete) $(this).trigger("load");
          });
      } else {
        $(".slider-for").slick("setPosition");
        $("#myModal .modal-content").addClass("popup-visible");
      }
    }, 600);

    interval = setInterval(function () {
      //    $('.slider-for').slick('setPosition');
    }, 1000);
    var width = $(window).width();
    if (width > 480) {
      $("html").css("overflow", "hidden");
    }
  });

  $(document).on("hidden.bs.modal", "#myModal", function () {
    $(".modal-backdrop").remove();
    $("html").css("overflow", "auto");
    clearInterval(interval);
    $("#myModal .modal-content").removeClass("popup-visible");
  });

  $(document).click(function (event) {
    $target = $(event.target);
    if (
      !$target.closest(".media-filter-item").length &&
      !$target.closest(".media-filter-body").length &&
      $(".media-filter-body").css("visibility") === "visible"
    ) {
      $(".filter-item").hide();
      $(".media-filter-body").removeClass("media-filter-body-show");
      var activeFilter = $("[activeFilter = true]");
      $(activeFilter).removeAttr("activeFilter");
      if (isFilterChanged) {
        isFilterChanged = false;
        buildNewsList(true);
      }
    }
  });
  function throttle(time, func) {
    if (!time || typeof time !== "number" || time < 0) {
      return func;
    }

    var throttleTimer = 0;

    return function () {
      var args = arguments;
      clearTimeout(throttleTimer);
      throttleTimer = setTimeout(function () {
        func.apply(null, args);
      }, time);
    };
  }
  $(document).on(
    "keyup",
    ".media-filter-body .search-filter",
    throttle(1000, function () {
      buildNewsList(true);
      $(".media-filter-body").removeClass("media-filter-body-show");
    })
  );

  $(".close").click(function () {
    $("#myModal").modal("hide");
  });

  $("#share-btn").click(function () {
    $("#links").toggleClass("active");
    $(this).toggleClass("active");
  });

  var $status = $(".js-carousel-media-wrapper .pagingInfo");
  var $statusModal = $(".modal .pagingInfo");
  var $slickElement = $(".js-carousel-media");

  $slickElement.on(
    "init reInit afterChange",
    function (event, slick, currentSlide, nextSlide) {
      var number = currentSlide ? currentSlide : 0;
      var i = (number / slick.options.slidesToShow + 1).toFixed(0);
      var count = slick.slideCount;
      if (slick.options.slidesToShow > 1) {
        count = Math.ceil(count / slick.options.slidesToShow);
      }
      if (count == 1) {
        $(".js-carousel-media + .carousel-nav").hide();
      }
      $status.text(i + "/" + count);
    }
  );
  $slickElement.slick({
    rtl: $("html[dir=rtl]").length > 0,
    slidesToShow: 4,
    slidesToScroll: 4,
    mobileFirst: true,
    infinite: false,
    focusOnSelect: true,
    autoplay: false,
    autoplaySpeed: 6000,
    responsive: [
      {
        breakpoint: 1200,
        settings: {
          slidesToShow: 4,

          slidesToScroll: 4,
        },
      },
      {
        breakpoint: 700,
        settings: {
          slidesToShow: 3,

          slidesToScroll: 3,
        },
      },
      {
        breakpoint: 420,
        settings: {
          slidesToShow: 2,

          slidesToScroll: 2,
        },
      },
      {
        breakpoint: 300,
        settings: {
          slidesToShow: 1,
          slidesToScroll: 1,
        },
      },
    ],
    appendArrows: ".js-carousel-nav",
    asNavFor: ".slider-for",
    prevArrow: '<span class="carousel-nav-prev icon-angle-left"></span>',
    nextArrow: '<span class="carousel-nav-next icon-angle-right"></span>',
  });

  $(".slider-for").on(
    "afterChange",
    function (event, slick, currentSlide, nextSlide) {
      var elSlide = $(slick.$slides[currentSlide]);
      var imageCaption = elSlide.data("caption");
      $("#myModal .image-caption").text(imageCaption);

      var number = (currentSlide ? currentSlide : 0) + 1;
      var count = slick.slideCount;

      $statusModal.text(number + "/" + count);
    }
  );
  $(".slider-for").on(
    "init reInit",
    function (event, slick, currentSlide, nextSlide) {
      console.log("init reInit");
      var currentSlideTag = $(this).find(".slick-slide.slick-current");
      var imageCaption = currentSlideTag.data("caption");
      $("#myModal .image-caption").text(imageCaption);

      var number = (currentSlide ? currentSlide : 0) + 1;
      var count = slick.slideCount;
      $statusModal.text(number + "/" + count);

      $(".slider-for .slick-slide video").bind(
        "webkitfullscreenchange mozfullscreenchange fullscreenchange",
        function (e) {
          var state =
            document.fullScreen ||
            document.mozFullScreen ||
            document.webkitIsFullScreen;
          if (!state) {
            $(".slider-for").slick("setPosition");
          }
        }
      );
    }
  );
  $(document).keypress(function (e) {
    if (
      e.which == 13 &&
      $(".media-filter-body.media-filter-body-show").length
    ) {
      buildNewsList(true);
      $(".media-filter-body").removeClass("media-filter-body-show");
    }
  });
  $(".slider-for").slick({
    rtl: $("html[dir=rtl]").length > 0,
    slidesToShow: 1,
    slidesToScroll: 1,
    fade: true,
    infinite: false,
    adaptiveHeight: true,
    appendArrows: ".js-carousel-nav-2",
    asNavFor: ".js-carousel-media",
    prevArrow: '<span class="carousel-nav-prev icon-angle-left"></span>',
    nextArrow: '<span class="carousel-nav-next icon-angle-right"></span>',
  });

  buildMediaFilterNav();
  buildNewsList(true);
};
$(function () {
  if ($("body").hasClass("sfPageEditor")) return;

  new Drawer();
  new MobileSubmenu();
  new PriceChart();
  new CapitalizationChart();
  new HeaderCarousel();
  new InvestmentsCarousel();
  new Tabs();
  new Submenu();
  new Contact();
  new Map();
  new EmbedVideo();
  new InvestmentsFiltering();
  new HorizontalScroll();
  new GetInTouchForm();
  // new NewsAndMedia();
  new SubscribeForm();
  new ShareholdresTable();
  new RefreshButton();
  new RefreshButtonClick();
  new ImagePopup();
  new VideoEndShowPoster();
  new TableResponsive();
  new ProgressBar();
  new Accessibility();
  new MediaCenter();
  new History();
  new Header2022();
  new InvestorRelations();

setTimeout(() => {
    $("select").fancySelect({
      includeBlank: true,
      triggerTemplate: function (optionEl) {
        return optionEl.text() + '<span class="icon-angle-down"></span>';
      },
    });
}, 500);

  $(".modal").on("hidden.bs.modal", function (e) {
    var videoInModal = $(this).find("video");

    if (videoInModal.length) {
      videoInModal[0].pause();
    }
  });
  $(".row > .sf_colsIn > .embed-video > video").matchHeight();
  $(".main-footer > div:first> .row > .sf_colsIn").matchHeight();
  $(".mobile-lang-link").click(function () {
    window.location = $(".lang-link").attr("href");
  });
  if (
    navigator.userAgent.indexOf("Safari") != -1 &&
    navigator.userAgent.indexOf("Chrome") == -1
  ) {
    $("body").addClass("safari");
  }
});

(function (w, d, s, l, i) {
  w[l] = w[l] || [];
  w[l].push({
    "gtm.start": new Date().getTime(),
    event: "gtm.js",
  });
  var f = d.getElementsByTagName(s)[0],
    j = d.createElement(s),
    dl = l != "dataLayer" ? "&l=" + l : "";
  j.async = true;
  j.src = "https://www.googletagmanager.com/gtm.js?id=" + i + dl;
  f.parentNode.insertBefore(j, f);
})(window, document, "script", "dataLayer", "GTM-5THR4F4");

$(document).ready(function () {
  var myLocalStorageVar = localStorage.getItem("DISCLAIMER");
  let quick__navigation__links__outer = document.querySelector(
    ".quick__navigation__links__outer"
  );
  if (quick__navigation__links__outer) {
    if (!myLocalStorageVar) {
      // $('.disclaimer__popup__outer').css({ 'display': 'flex' });
      $("body").append(`
        <div class="disclaimer__popup__outer" id="disclaimer_popup">
      <div class="disclaimer__popup__overlay"></div>
      <div class="disclaimer__popup__contentbox">
        <h4>${
          $("html").attr("dir") !== "rtl" ? "Disclaimer" : "إخلاء مسؤولية"
        }</h4>
        <div class="disclaimer__content">
        ${
          $("html").attr("dir") !== "rtl"
            ? '<p>The following pages contain information relating to a proposed transaction by the Savola Group Company ("Savola").</p><p>This information is not addressed to residents of certain countries based on the applicable securities law regulations in their jurisdictions. However, it is addressed to the eligible investors as per the Saudi Capital Market rules and regulations; any investment or investment activity to which this website and the information contained herein relate are available only to those eligible investors; persons who are not eligible investors should not take any action on the basis of these materials and should not act or rely on them.</p><p>No representation or warranty, express or implied, is made as to, and no reliance should be placed by any person for any purpose on the information contained in this website, accuracy, completeness, or correctness, or fairness of the information contained in this website. The information in this website is subject to change, update, revision, verification and amendment and such information may change materially without notice. Nonetheless, Savola is under no obligation to update or keep the current information contained in this website updated.</p><p>Savola assumes no responsibility if there is a violation of applicable law and regulations by any person. Therefore, if you are not eligible investor as per the CMA rules and regulations, you are not permitted to view the materials on this website or are in any doubt as to whether you are permitted to view these materials, please exit this webpage.</p><p>Access to electronic versions of these materials is being made available on this webpage by Savola in good faith and for information purposes only and should be taken in this context and do not constitute any solicitation or advice to participate in the transaction.</p>'
            : '<p>تحتوي الصفحات التالية على معلومات تتعلق بالعملية المحتملة لمجموعة صافولا ("صافولا").</p><p>هذه المعلومات ليست موجهة إلى المقيمين في بعض الدول وفقاً لقوانين وأنظمة الأوراق المالية في تلك الدول، إلا انها موجهة إلى المستثمرين الذين تسمح لهم قوانين وأنظمة هيئة السوق المالية السعودية بالمشاركة في هذه العملية. عليه، فإن أي استثمار أو نشاط استثماري يرتبط به هذا الموقع الإلكتروني والمعلومات الواردة فيه سيكون متاحًا لهؤلاء المستثمرين. وبالتالي، يتوجب على الأشخاص الذين ليسوا مستثمرين مؤهلين الامتناع عن اتخاذ أي إجراء على أساس هذه المعلومات والامتناع أيضًا عن التصرف بناءً عليها أو الاعتماد عليها.</p><p>لا تشكل المعلومات المنشورة على هذا الموقع أي إقرار أو ضمان، صريحًا كان أم ضمنيًا، ولأي غرض، بشأن دقة أو اكتمال أو صحة أو عدالة هذه المعلومات، كما لا ينبغي لأي شخص الاعتماد عليها. إن المعلومات الواردة في هذا الموقع قابلة للتغيير والتحديث والمراجعة والتدقيق والتعديل، حيث يمكن أن تتغير هذه المعلومات تغيراً جوهريًا دون إشعار مسبق. إن مجموعة صافولا غير ملزمة بتحديث أو الاستمرار في تحديث المعلومات الواردة في هذا الموقع.</p><p>لا تتحمل صافولا أي مسؤولية إذا كان هناك أي مخالفة للقوانين واللوائح المعمول بها من قبل أي شخص. وبناء عليه، إذا لم تكن مستثمرا مسموح لك بحسب أنظمة هيئة السوق المالية السعودية، فإنه غير مسموح لك بالاطلاع على المحتوى المتاح على هذه الصفحة، أو إذا كان لديك أي شك بشأن ما إذا كان مسموحًا لك بالاطلاع على هذا المحتوى، فيرجى الخروج من هذه الصفحة.</p><p>تم نشر وإتاحة هذه المعلومات من قبل صافولا في هذه النسخة الإلكترونية بحسن نية ولأغراض التوضيح والاطلاع فقط. وعليه، ينبغي فهمها في هذا السياق، ولا تُعد بمثابة توصية أو نصيحة للمشاركة في هذه العملية.</p>'
        }
          </div>
        <p>${
          $("html").attr("dir") !== "rtl"
            ? 'By clicking "Confirm" you confirm and certify that you have read and understood the foregoing, and hereby make the certifications above and agree to comply with all of the above restrictions.'
            : 'بالضغط على خيار "تأكيد"، فإنك تؤكد بأنك قد قرأت وفهمت ما سبق، وبهذا تقر وتوافق على الامتثال لجميع القيود المذكورة أعلاه.'
        }</p>

        <button id="i_agree">${
          $("html").attr("dir") !== "rtl" ? "Confirm" : "تأكيد"
        }</button>
      </div>
    </div>
      `);
      $("body").css({ overflow: "hidden" });
    }
    $("#i_agree").click(function () {
      $("body").css({ overflow: "auto" });
      localStorage.setItem("DISCLAIMER", true);
      $(".disclaimer__popup__outer").remove();
    });
  }
  $("#disclaimer_trigger").click(function () {
    $("body").append(`
                <div class="disclaimer__popup__outer" id="disclaimer_popup">
              <div class="disclaimer__popup__overlay"></div>
              <div class="disclaimer__popup__contentbox">
                <h4>${
                  $("html").attr("dir") !== "rtl"
                    ? "Disclaimer"
                    : "إخلاء مسؤولية"
                }</h4>
                <div class="disclaimer__content">
                ${
                  $("html").attr("dir") !== "rtl"
                    ? '<p>The following pages contain information relating to a proposed transaction by the Savola Group Company ("Savola").</p><p>This information is not addressed to residents of certain countries based on the applicable securities law regulations in their jurisdictions. However, it is addressed to the eligible investors as per the Saudi Capital Market rules and regulations; any investment or investment activity to which this website and the information contained herein relate are available only to those eligible investors; persons who are not eligible investors should not take any action on the basis of these materials and should not act or rely on them.</p><p>No representation or warranty, express or implied, is made as to, and no reliance should be placed by any person for any purpose on the information contained in this website, accuracy, completeness, or correctness, or fairness of the information contained in this website. The information in this website is subject to change, update, revision, verification and amendment and such information may change materially without notice. Nonetheless, Savola is under no obligation to update or keep the current information contained in this website updated.</p><p>Savola assumes no responsibility if there is a violation of applicable law and regulations by any person. Therefore, if you are not eligible investor as per the CMA rules and regulations, you are not permitted to view the materials on this website or are in any doubt as to whether you are permitted to view these materials, please exit this webpage.</p><p>Access to electronic versions of these materials is being made available on this webpage by Savola in good faith and for information purposes only and should be taken in this context and do not constitute any solicitation or advice to participate in the transaction.</p>'
                    : '<p>تحتوي الصفحات التالية على معلومات تتعلق بالعملية المحتملة لمجموعة صافولا ("صافولا").</p><p>هذه المعلومات ليست موجهة إلى المقيمين في بعض الدول وفقاً لقوانين وأنظمة الأوراق المالية في تلك الدول، إلا انها موجهة إلى المستثمرين الذين تسمح لهم قوانين وأنظمة هيئة السوق المالية السعودية بالمشاركة في هذه العملية. عليه، فإن أي استثمار أو نشاط استثماري يرتبط به هذا الموقع الإلكتروني والمعلومات الواردة فيه سيكون متاحًا لهؤلاء المستثمرين. وبالتالي، يتوجب على الأشخاص الذين ليسوا مستثمرين مؤهلين الامتناع عن اتخاذ أي إجراء على أساس هذه المعلومات والامتناع أيضًا عن التصرف بناءً عليها أو الاعتماد عليها.</p><p>لا تشكل المعلومات المنشورة على هذا الموقع أي إقرار أو ضمان، صريحًا كان أم ضمنيًا، ولأي غرض، بشأن دقة أو اكتمال أو صحة أو عدالة هذه المعلومات، كما لا ينبغي لأي شخص الاعتماد عليها. إن المعلومات الواردة في هذا الموقع قابلة للتغيير والتحديث والمراجعة والتدقيق والتعديل، حيث يمكن أن تتغير هذه المعلومات تغيراً جوهريًا دون إشعار مسبق. إن مجموعة صافولا غير ملزمة بتحديث أو الاستمرار في تحديث المعلومات الواردة في هذا الموقع.</p><p>لا تتحمل صافولا أي مسؤولية إذا كان هناك أي مخالفة للقوانين واللوائح المعمول بها من قبل أي شخص. وبناء عليه، إذا لم تكن مستثمرا مسموح لك بحسب أنظمة هيئة السوق المالية السعودية، فإنه غير مسموح لك بالاطلاع على المحتوى المتاح على هذه الصفحة، أو إذا كان لديك أي شك بشأن ما إذا كان مسموحًا لك بالاطلاع على هذا المحتوى، فيرجى الخروج من هذه الصفحة.</p><p>تم نشر وإتاحة هذه المعلومات من قبل صافولا في هذه النسخة الإلكترونية بحسن نية ولأغراض التوضيح والاطلاع فقط. وعليه، ينبغي فهمها في هذا السياق، ولا تُعد بمثابة توصية أو نصيحة للمشاركة في هذه العملية.</p>'
                }
                  </div>
                <p>${
                  $("html").attr("dir") !== "rtl"
                    ? 'By clicking "Confirm" you confirm and certify that you have read and understood the foregoing, and hereby make the certifications above and agree to comply with all of the above restrictions.'
                    : 'بالضغط على خيار "تأكيد"، فإنك تؤكد بأنك قد قرأت وفهمت ما سبق، وبهذا تقر وتوافق على الامتثال لجميع القيود المذكورة أعلاه.'
                }</p>

                <button id="i_agree">${
                  $("html").attr("dir") !== "rtl" ? "Confirm" : "تأكيد"
                }</button>
              </div>
            </div>
              `);
    $("body").css({ overflow: "hidden" });
    $("#i_agree").click(function () {
      $("body").css({ overflow: "auto" });
      localStorage.setItem("DISCLAIMER", true);
      $(".disclaimer__popup__outer").remove();
    });
  });
  $(".overview__slider__mutli").slick({
    infinite: false,
    slidesToShow: 3,
    rtl: $("html").attr("dir") === "rtl", // Use jQuery to get the 'dir' attribute
    slidesToScroll: 1, // Keep slidesToScroll positive regardless of RTL
    nextArrow: `<button class="slick__btn slick__nxt">
      <svg width="23" height="21" viewBox="0 0 23 21" fill="none" xmlns="http://www.w3.org/2000/svg">
        <line x1="0.969824" y1="10.3314" x2="20.2187" y2="10.3314" stroke="#114D69" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round"/>
        <path d="M12.9006 1.67871L21.5978 10.4383L12.9006 19.198" stroke="#114D69" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round"/>
      </svg>
    </button>`,
    prevArrow: `<button class="slick__btn slick__prev">
      <svg version="1.2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 23 21" width="23" height="21">
        <title>icons-svg</title>
        <style>
          .s0 { fill: none;stroke: #114d69;stroke-linecap: round;stroke-linejoin: round;stroke-width: 1.8 } 
        </style>
        <path id="Layer" class="s0" d="m22.6 10.9h-19.2"/>
        <path id="Layer" fill-rule="evenodd" class="s0" d="m10.7 19.5l-8.7-8.7 8.7-8.8"/>
      </svg>
    </button>`,
    responsive: [
      {
        breakpoint: 990,
        settings: {
          slidesToShow: 2,
        },
      },
      {
        breakpoint: 580,
        settings: {
          slidesToShow: 1,
        },
      },
    ],
  });
  $(".overview__slider").slick({
    infinite: false,
    slidesToShow: 1,
    rtl: $("html").attr("dir") === "rtl", // Use jQuery to get the 'dir' attribute
    slidesToScroll: 1, // Keep slidesToScroll positive regardless of RTL
    nextArrow: `<button class="slick__btn slick__nxt">
      <svg width="23" height="21" viewBox="0 0 23 21" fill="none" xmlns="http://www.w3.org/2000/svg">
        <line x1="0.969824" y1="10.3314" x2="20.2187" y2="10.3314" stroke="#114D69" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round"/>
        <path d="M12.9006 1.67871L21.5978 10.4383L12.9006 19.198" stroke="#114D69" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round"/>
      </svg>
    </button>`,
    prevArrow: `<button class="slick__btn slick__prev">
      <svg version="1.2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 23 21" width="23" height="21">
        <title>icons-svg</title>
        <style>
          .s0 { fill: none;stroke: #114d69;stroke-linecap: round;stroke-linejoin: round;stroke-width: 1.8 } 
        </style>
        <path id="Layer" class="s0" d="m22.6 10.9h-19.2"/>
        <path id="Layer" fill-rule="evenodd" class="s0" d="m10.7 19.5l-8.7-8.7 8.7-8.8"/>
      </svg>
    </button>`,
  });
});
setTimeout(() => {
  $(".frequentlty__asked__questions__row .faq__wrap p").each(function () {
    $(this).css({ "--height": this.clientHeight + "px" });
  });
  setTimeout(() => {
    $(".frequentlty__asked__questions__row .faq__wrap p").each(function () {
      $(this).css({ height: 0 + "px" });
      // $(this).fadeOut(500)
    });
  }, 100);
  $(".frequentlty__asked__questions__row .faq__wrap").each(function () {
    $(this).click(function () {
      $(".frequentlty__asked__questions__row .faq__wrap ").each(function () {
        $(this).removeClass("active__tab");
        // $(this).find('p').fadeOut(0)
        $(this)
          .find("p")
          .css({ height: 0 + "px" });
      });

      $(this).addClass("active__tab");
      $(this)
        .find("p")
        .css({ height: $(this).find("p").css("--height") });
      // $(this).find('p').fadeIn(500)
    });
  });
  setTimeout(() => {
    $(".frequentlty__asked__questions__row .faq__wrap:first-child ").addClass(
      "active__tab"
    );
    $(".frequentlty__asked__questions__row .faq__wrap:first-child p").each(
      function () {
        $(this).css({ height: $(this).css("--height") });
      }
    );
  }, 100);
}, 100);
